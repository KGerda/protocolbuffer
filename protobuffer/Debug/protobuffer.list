
protobuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009468  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009714  08009714  0000a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800996c  0800996c  0000a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009974  08009974  0000a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009978  08009978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800997c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2400006c  080099e8  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  080099e8  0000b270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013141  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002916  00000000  00000000  0001e1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d90  00000000  00000000  00020af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000311a1  00000000  00000000  00021888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001438f  00000000  00000000  00052a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013c0cb  00000000  00000000  00066db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a2e83  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000a86  00000000  00000000  001a2ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003db8  00000000  00000000  001a394c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001a7704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400006c 	.word	0x2400006c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080096fc 	.word	0x080096fc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000070 	.word	0x24000070
 80002e8:	080096fc 	.word	0x080096fc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <__io_putchar+0x20>)
 80005ee:	f006 fc95 	bl	8006f1c <HAL_UART_Transmit>
	return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	24000088 	.word	0x24000088

08000600 <receive_message>:

LedStatus receive_message(bool *stat,uint8_t *buffer,uint8_t length)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	4613      	mov	r3, r2
 800060c:	71fb      	strb	r3, [r7, #7]
	 /* Allocate space for the decoded message. */
	 LedStatus message = LedStatus_init_default;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24

	 /* Create a stream that reads from the buffer. */
	 pb_istream_t stream = pb_istream_from_buffer(buffer, length);
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fd98 	bl	8001150 <pb_istream_from_buffer>

	 *stat = pb_decode(&stream, LedStatus_fields, &message);
 8000620:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4916      	ldr	r1, [pc, #88]	@ (8000684 <receive_message+0x84>)
 800062a:	4618      	mov	r0, r3
 800062c:	f001 feca 	bl	80023c4 <pb_decode>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	701a      	strb	r2, [r3, #0]

	 if(*stat==1)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d019      	beq.n	8000674 <receive_message+0x74>
	 {
		 printf("stat=1\r\n");
 8000640:	4811      	ldr	r0, [pc, #68]	@ (8000688 <receive_message+0x88>)
 8000642:	f008 fcb9 	bl	8008fb8 <puts>
			  if(message.status==1)
 8000646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000648:	2b01      	cmp	r3, #1
 800064a:	d108      	bne.n	800065e <receive_message+0x5e>
			  {
			    printf("led=1\r\n");
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <receive_message+0x8c>)
 800064e:	f008 fcb3 	bl	8008fb8 <puts>
			    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <receive_message+0x90>)
 8000658:	f003 fdfe 	bl	8004258 <HAL_GPIO_WritePin>
 800065c:	e00a      	b.n	8000674 <receive_message+0x74>
			  }
			  else if(message.status==0)
 800065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000660:	2b00      	cmp	r3, #0
 8000662:	d107      	bne.n	8000674 <receive_message+0x74>
			  {
				printf("led=0\r\n");
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <receive_message+0x94>)
 8000666:	f008 fca7 	bl	8008fb8 <puts>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2101      	movs	r1, #1
 800066e:	4808      	ldr	r0, [pc, #32]	@ (8000690 <receive_message+0x90>)
 8000670:	f003 fdf2 	bl	8004258 <HAL_GPIO_WritePin>
			  }
	 }
	 printf("stat=0\r\n");
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <receive_message+0x98>)
 8000676:	f008 fc9f 	bl	8008fb8 <puts>
	 return message;
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800067c:	4618      	mov	r0, r3
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800991c 	.word	0x0800991c
 8000688:	08009714 	.word	0x08009714
 800068c:	0800971c 	.word	0x0800971c
 8000690:	58020400 	.word	0x58020400
 8000694:	08009724 	.word	0x08009724
 8000698:	0800972c 	.word	0x0800972c

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a2      	sub	sp, #136	@ 0x88
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 uint8_t buffer[128];
	 size_t message_length=2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	 bool stat;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a8:	f000 f9a0 	bl	80009ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f002 fc82 	bl	8002fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f844 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f902 	bl	80008bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b8:	f000 f8b4 	bl	8000824 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	481a      	ldr	r0, [pc, #104]	@ (800072c <main+0x90>)
 80006c2:	f003 fdc9 	bl	8004258 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ca:	f002 fd05 	bl	80030d8 <HAL_Delay>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4816      	ldr	r0, [pc, #88]	@ (800072c <main+0x90>)
 80006d4:	f003 fdc0 	bl	8004258 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006dc:	f002 fcfc 	bl	80030d8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("parapara1111\r\n");
 80006e0:	4813      	ldr	r0, [pc, #76]	@ (8000730 <main+0x94>)
 80006e2:	f008 fc69 	bl	8008fb8 <puts>
	  HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ea:	f002 fcf5 	bl	80030d8 <HAL_Delay>
	  HAL_UART_Receive(&huart3, buffer, message_length, HAL_MAX_DELAY);
 80006ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <main+0x98>)
 80006fc:	f006 fc9c 	bl	8007038 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000704:	f002 fce8 	bl	80030d8 <HAL_Delay>

	  printf("parapara2222\r\n");
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <main+0x9c>)
 800070a:	f008 fc55 	bl	8008fb8 <puts>
	  HAL_Delay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000712:	f002 fce1 	bl	80030d8 <HAL_Delay>

	  receive_message(&stat, buffer, message_length);
 8000716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800071a:	b2da      	uxtb	r2, r3
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	1cfb      	adds	r3, r7, #3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff6d 	bl	8000600 <receive_message>
	  printf("parapara1111\r\n");
 8000726:	bf00      	nop
 8000728:	e7da      	b.n	80006e0 <main+0x44>
 800072a:	bf00      	nop
 800072c:	58020400 	.word	0x58020400
 8000730:	08009734 	.word	0x08009734
 8000734:	24000088 	.word	0x24000088
 8000738:	08009744 	.word	0x08009744

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	@ 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	224c      	movs	r2, #76	@ 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f008 fd14 	bl	8009178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f008 fd0e 	bl	8009178 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <SystemClock_Config+0xe0>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000766:	2004      	movs	r0, #4
 8000768:	f003 fd90 	bl	800428c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <SystemClock_Config+0xe4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a2a      	ldr	r2, [pc, #168]	@ (8000820 <SystemClock_Config+0xe4>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <SystemClock_Config+0xe4>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000788:	bf00      	nop
 800078a:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <SystemClock_Config+0xe4>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000796:	d1f8      	bne.n	800078a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079c:	2301      	movs	r3, #1
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007a0:	2340      	movs	r3, #64	@ 0x40
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c0:	230c      	movs	r3, #12
 80007c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fdb5 	bl	8004340 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007dc:	f000 f932 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	233f      	movs	r3, #63	@ 0x3f
 80007e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2303      	movs	r3, #3
 80007e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f004 f9cd 	bl	8004ba4 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000810:	f000 f918 	bl	8000a44 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3770      	adds	r7, #112	@ 0x70
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024400 	.word	0x58024400
 8000820:	58024800 	.word	0x58024800

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART3_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800086e:	f006 fb05 	bl	8006e7c <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f8e4 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000880:	f008 f9b8 	bl	8008bf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f8db 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000892:	f008 f9ed 	bl	8008c70 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f8d2 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 80008a2:	f008 f96e 	bl	8008b82 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f8ca 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000088 	.word	0x24000088
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_GPIO_Init+0x120>)
 80008d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008d8:	4a40      	ldr	r2, [pc, #256]	@ (80009dc <MX_GPIO_Init+0x120>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008e2:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x120>)
 80008e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f0:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <MX_GPIO_Init+0x120>)
 80008f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008f6:	4a39      	ldr	r2, [pc, #228]	@ (80009dc <MX_GPIO_Init+0x120>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000900:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000902:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000910:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000914:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000920:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_GPIO_Init+0x120>)
 800092e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000932:	4a2a      	ldr	r2, [pc, #168]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800093c:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_GPIO_Init+0x120>)
 800093e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_GPIO_Init+0x120>)
 800094c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000950:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x120>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_GPIO_Init+0x120>)
 800095c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800096e:	481c      	ldr	r0, [pc, #112]	@ (80009e0 <MX_GPIO_Init+0x124>)
 8000970:	f003 fc72 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0x128>)
 800097a:	f003 fc6d 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <MX_GPIO_Init+0x12c>)
 8000994:	f003 fab0 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000998:	f244 0301 	movw	r3, #16385	@ 0x4001
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_GPIO_Init+0x124>)
 80009b2:	f003 faa1 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x128>)
 80009ce:	f003 fa93 	bl	8003ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58020400 	.word	0x58020400
 80009e4:	58021000 	.word	0x58021000
 80009e8:	58020800 	.word	0x58020800

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f002 fc9f 	bl	8003340 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a12:	2387      	movs	r3, #135	@ 0x87
 8000a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fcbd 	bl	80033b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a36:	2004      	movs	r0, #4
 8000a38:	f002 fc9a 	bl	8003370 <HAL_MPU_Enable>

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08f      	sub	sp, #60	@ 0x3c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	891a      	ldrh	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	8a1b      	ldrh	r3, [r3, #16]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d301      	bcc.n	8000a6a <load_descriptor_values+0x1a>
        return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e156      	b.n	8000d18 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	895b      	ldrh	r3, [r3, #10]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8000a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8000a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d05a      	beq.n	8000b46 <load_descriptor_values+0xf6>
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	f200 8094 	bhi.w	8000bbe <load_descriptor_values+0x16e>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <load_descriptor_values+0x50>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d01f      	beq.n	8000ade <load_descriptor_values+0x8e>
 8000a9e:	e08e      	b.n	8000bbe <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8000aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8000ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac6:	0c1b      	lsrs	r3, r3, #16
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ace:	0f1b      	lsrs	r3, r3, #28
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	825a      	strh	r2, [r3, #18]
            break;
 8000adc:	e0b4      	b.n	8000c48 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	895b      	ldrh	r3, [r3, #10]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	0f1b      	lsrs	r3, r3, #28
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b22:	0f1b      	lsrs	r3, r3, #28
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	0c1b      	lsrs	r3, r3, #16
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	825a      	strh	r2, [r3, #18]
            break;
 8000b44:	e080      	b.n	8000c48 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	895b      	ldrh	r3, [r3, #10]
 8000b50:	3301      	adds	r3, #1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	895b      	ldrh	r3, [r3, #10]
 8000b64:	3302      	adds	r3, #2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	895b      	ldrh	r3, [r3, #10]
 8000b78:	3303      	adds	r3, #3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8000b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	019b      	lsls	r3, r3, #6
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	825a      	strh	r2, [r3, #18]
            break;
 8000bbc:	e044      	b.n	8000c48 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	895b      	ldrh	r3, [r3, #10]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	895b      	ldrh	r3, [r3, #10]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	895b      	ldrh	r3, [r3, #10]
 8000bf0:	3303      	adds	r3, #3
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	895b      	ldrh	r3, [r3, #10]
 8000c04:	3304      	adds	r3, #4
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	825a      	strh	r2, [r3, #18]
            break;
 8000c46:	bf00      	nop
        }
    }

    if (!iter->message)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d106      	bne.n	8000c5e <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
 8000c5c:	e041      	b.n	8000ce2 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c64:	441a      	add	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000c6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d008      	beq.n	8000c84 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	699a      	ldr	r2, [r3, #24]
 8000c76:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	441a      	add	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	621a      	str	r2, [r3, #32]
 8000c82:	e01a      	b.n	8000cba <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7d9b      	ldrb	r3, [r3, #22]
 8000c88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c8c:	2b20      	cmp	r3, #32
 8000c8e:	d111      	bne.n	8000cb4 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7d9b      	ldrb	r3, [r3, #22]
 8000c94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7d9b      	ldrb	r3, [r3, #22]
 8000ca0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000ca4:	2b80      	cmp	r3, #128	@ 0x80
 8000ca6:	d105      	bne.n	8000cb4 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f103 0214 	add.w	r2, r3, #20
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	621a      	str	r2, [r3, #32]
 8000cb2:	e002      	b.n	8000cba <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7d9b      	ldrb	r3, [r3, #22]
 8000cbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cc2:	2b80      	cmp	r3, #128	@ 0x80
 8000cc4:	d109      	bne.n	8000cda <load_descriptor_values+0x28a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	61da      	str	r2, [r3, #28]
 8000cd8:	e003      	b.n	8000ce2 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7d9b      	ldrb	r3, [r3, #22]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d005      	beq.n	8000cfa <load_descriptor_values+0x2aa>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7d9b      	ldrb	r3, [r3, #22]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d10a      	bne.n	8000d10 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	89db      	ldrh	r3, [r3, #14]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d0e:	e002      	b.n	8000d16 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	373c      	adds	r7, #60	@ 0x3c
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	891b      	ldrh	r3, [r3, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	891a      	ldrh	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	8a1b      	ldrh	r3, [r3, #16]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d30c      	bcc.n	8000d60 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000d5e:	e03b      	b.n	8000dd8 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	895b      	ldrh	r3, [r3, #10]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2201      	movs	r2, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	895a      	ldrh	r2, [r3, #10]
 8000d8a:	893b      	ldrh	r3, [r7, #8]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	899b      	ldrh	r3, [r3, #12]
 8000d98:	7afa      	ldrb	r2, [r7, #11]
 8000d9a:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2201      	moveq	r2, #1
 8000da4:	2200      	movne	r2, #0
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	89da      	ldrh	r2, [r3, #14]
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d004      	beq.n	8000dc8 <advance_iterator+0xa4>
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	d101      	bne.n	8000dcc <advance_iterator+0xa8>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <advance_iterator+0xaa>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	81da      	strh	r2, [r3, #14]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8000df0:	2228      	movs	r2, #40	@ 0x28
 8000df2:	2100      	movs	r1, #0
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f008 f9bf 	bl	8009178 <memset>

    iter->descriptor = desc;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fe22 	bl	8000a50 <load_descriptor_values>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e38:	2b80      	cmp	r3, #128	@ 0x80
 8000e3a:	d109      	bne.n	8000e50 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3304      	adds	r3, #4
 8000e40:	461a      	mov	r2, r3
 8000e42:	6939      	ldr	r1, [r7, #16]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffcd 	bl	8000de4 <pb_field_iter_begin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	75fb      	strb	r3, [r7, #23]
 8000e4e:	e008      	b.n	8000e62 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	461a      	mov	r2, r3
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ffc3 	bl	8000de4 <pb_field_iter_begin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f103 020c 	add.w	r2, r3, #12
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	621a      	str	r2, [r3, #32]
    return status;
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff50 	bl	8000d24 <advance_iterator>
    (void)load_descriptor_values(iter);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fde3 	bl	8000a50 <load_descriptor_values>
    return iter->index != 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	891b      	ldrh	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	8a1b      	ldrh	r3, [r3, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e044      	b.n	8000f44 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	8a9b      	ldrh	r3, [r3, #20]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <pb_field_iter_find+0x2c>
    {
        return false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e03b      	b.n	8000f44 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	891b      	ldrh	r3, [r3, #8]
 8000ed0:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8a1b      	ldrh	r3, [r3, #16]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d204      	bcs.n	8000ee8 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	8a1a      	ldrh	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff1b 	bl	8000d24 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	895b      	ldrh	r3, [r3, #10]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	089a      	lsrs	r2, r3, #2
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4053      	eors	r3, r2
 8000f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d110      	bne.n	8000f32 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fd9d 	bl	8000a50 <load_descriptor_values>

                if (iter->tag == tag &&
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	8a1b      	ldrh	r3, [r3, #16]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d107      	bne.n	8000f32 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7d9b      	ldrb	r3, [r3, #22]
 8000f26:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d001      	beq.n	8000f32 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e008      	b.n	8000f44 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	891b      	ldrh	r3, [r3, #8]
 8000f36:	89fa      	ldrh	r2, [r7, #14]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d1d5      	bne.n	8000ee8 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fd87 	bl	8000a50 <load_descriptor_values>
        return false;
 8000f42:	2300      	movs	r3, #0
    }
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7d9b      	ldrb	r3, [r3, #22]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	2b0a      	cmp	r3, #10
 8000f5e:	d101      	bne.n	8000f64 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e022      	b.n	8000faa <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	891b      	ldrh	r3, [r3, #8]
 8000f68:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff feda 	bl	8000d24 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	895b      	ldrh	r3, [r3, #10]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d104      	bne.n	8000f98 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fd5e 	bl	8000a50 <load_descriptor_values>
 8000f94:	4603      	mov	r3, r0
 8000f96:	e008      	b.n	8000faa <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	891b      	ldrh	r3, [r3, #8]
 8000f9c:	89fa      	ldrh	r2, [r7, #14]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d1e3      	bne.n	8000f6a <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fd54 	bl	8000a50 <load_descriptor_values>
        return false;
 8000fa8:	2300      	movs	r3, #0
    }
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	441a      	add	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6979      	ldr	r1, [r7, #20]
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f008 f947 	bl	800926e <memcpy>
    }
    
    return true;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <pb_read+0x16>
        return true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e05f      	b.n	80010c2 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d123      	bne.n	8001050 <pb_read+0x64>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <pb_read+0xe0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01e      	beq.n	8001050 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8001012:	e011      	b.n	8001038 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2210      	movs	r2, #16
 800101a:	4619      	mov	r1, r3
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff ffe5 	bl	8000fec <pb_read>
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <pb_read+0x46>
				return false;
 800102e:	2300      	movs	r3, #0
 8001030:	e047      	b.n	80010c2 <pb_read+0xd6>
			
			count -= 16;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b10      	subs	r3, #16
 8001036:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b10      	cmp	r3, #16
 800103c:	d8ea      	bhi.n	8001014 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4619      	mov	r1, r3
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff ffd0 	bl	8000fec <pb_read>
 800104c:	4603      	mov	r3, r0
 800104e:	e038      	b.n	80010c2 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d90b      	bls.n	8001072 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <pb_read+0x7c>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	e000      	b.n	800106a <pb_read+0x7e>
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <pb_read+0xe4>)
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	60d3      	str	r3, [r2, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	e027      	b.n	80010c2 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	4798      	blx	r3
 800107e:	4603      	mov	r3, r0
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <pb_read+0xac>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	e000      	b.n	800109a <pb_read+0xae>
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <pb_read+0xe8>)
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	60d3      	str	r3, [r2, #12]
 800109e:	2300      	movs	r3, #0
 80010a0:	e00f      	b.n	80010c2 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d903      	bls.n	80010b4 <pb_read+0xc8>
        stream->bytes_left = 0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	e005      	b.n	80010c0 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	609a      	str	r2, [r3, #8]

    return true;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08000fb3 	.word	0x08000fb3
 80010d0:	08009754 	.word	0x08009754
 80010d4:	08009764 	.word	0x08009764

080010d8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <pb_readbyte+0x20>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	e000      	b.n	80010fa <pb_readbyte+0x22>
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <pb_readbyte+0x70>)
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	60d3      	str	r3, [r2, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	e01d      	b.n	800113e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
 800110e:	4603      	mov	r3, r0
 8001110:	f083 0301 	eor.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <pb_readbyte+0x50>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	e000      	b.n	800112a <pb_readbyte+0x52>
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <pb_readbyte+0x74>)
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	60d3      	str	r3, [r2, #12]
 800112e:	2300      	movs	r3, #0
 8001130:	e005      	b.n	800113e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
    
    return true;    
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	08009754 	.word	0x08009754
 800114c:	08009764 	.word	0x08009764

08001150 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001150:	b490      	push	{r4, r7}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <pb_istream_from_buffer+0x38>)
 800115e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	461c      	mov	r4, r3
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bc90      	pop	{r4, r7}
 8001186:	4770      	bx	lr
 8001188:	08000fb3 	.word	0x08000fb3

0800118c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8001198:	f107 0315 	add.w	r3, r7, #21
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff9a 	bl	80010d8 <pb_readbyte>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00b      	beq.n	80011c8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e084      	b.n	80012d2 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db02      	blt.n	80011d6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e079      	b.n	80012ca <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80011d6:	2307      	movs	r3, #7
 80011d8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80011da:	7d7b      	ldrb	r3, [r7, #21]
 80011dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011e0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80011e2:	f107 0315 	add.w	r3, r7, #21
 80011e6:	4619      	mov	r1, r3
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ff75 	bl	80010d8 <pb_readbyte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f083 0301 	eor.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <pb_decode_varint32_eof+0x72>
                return false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e069      	b.n	80012d2 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b1f      	cmp	r3, #31
 8001202:	d92f      	bls.n	8001264 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b3e      	cmp	r3, #62	@ 0x3e
 8001208:	d801      	bhi.n	800120e <pb_decode_varint32_eof+0x82>
 800120a:	23ff      	movs	r3, #255	@ 0xff
 800120c:	e000      	b.n	8001210 <pb_decode_varint32_eof+0x84>
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001212:	7d7b      	ldrb	r3, [r7, #21]
 8001214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 800121c:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800121e:	2b00      	cmp	r3, #0
 8001220:	da05      	bge.n	800122e <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	7dfa      	ldrb	r2, [r7, #23]
 8001226:	429a      	cmp	r2, r3
 8001228:	d101      	bne.n	800122e <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <pb_decode_varint32_eof+0xa4>
 800122e:	2300      	movs	r3, #0
 8001230:	75bb      	strb	r3, [r7, #22]
 8001232:	7dbb      	ldrb	r3, [r7, #22]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b3f      	cmp	r3, #63	@ 0x3f
 800123e:	d805      	bhi.n	800124c <pb_decode_varint32_eof+0xc0>
 8001240:	7dbb      	ldrb	r3, [r7, #22]
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d037      	beq.n	80012bc <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <pb_decode_varint32_eof+0xce>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	e000      	b.n	800125c <pb_decode_varint32_eof+0xd0>
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <pb_decode_varint32_eof+0x150>)
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	60d3      	str	r3, [r2, #12]
 8001260:	2300      	movs	r3, #0
 8001262:	e036      	b.n	80012d2 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b1c      	cmp	r3, #28
 8001268:	d11f      	bne.n	80012aa <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 800126a:	7d7b      	ldrb	r3, [r7, #21]
 800126c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001270:	2b00      	cmp	r3, #0
 8001272:	d010      	beq.n	8001296 <pb_decode_varint32_eof+0x10a>
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800127a:	2b78      	cmp	r3, #120	@ 0x78
 800127c:	d00b      	beq.n	8001296 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <pb_decode_varint32_eof+0x100>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	e000      	b.n	800128e <pb_decode_varint32_eof+0x102>
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <pb_decode_varint32_eof+0x150>)
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	60d3      	str	r3, [r2, #12]
 8001292:	2300      	movs	r3, #0
 8001294:	e01d      	b.n	80012d2 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	f003 020f 	and.w	r2, r3, #15
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e008      	b.n	80012bc <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80012aa:	7d7b      	ldrb	r3, [r7, #21]
 80012ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3307      	adds	r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80012c2:	7d7b      	ldrb	r3, [r7, #21]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db8b      	blt.n	80011e2 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	601a      	str	r2, [r3, #0]
   return true;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08009770 	.word	0x08009770

080012e0 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff4c 	bl	800118c <pb_decode_varint32_eof>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8001300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001304:	b08a      	sub	sp, #40	@ 0x28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 800131c:	f107 0317 	add.w	r3, r7, #23
 8001320:	4619      	mov	r1, r3
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fed8 	bl	80010d8 <pb_readbyte>
 8001328:	4603      	mov	r3, r0
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <pb_decode_varint+0x38>
            return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e041      	b.n	80013bc <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	2b3e      	cmp	r3, #62	@ 0x3e
 800133c:	d910      	bls.n	8001360 <pb_decode_varint+0x60>
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <pb_decode_varint+0x56>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	e000      	b.n	8001358 <pb_decode_varint+0x58>
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <pb_decode_varint+0xc8>)
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	60d3      	str	r3, [r2, #12]
 800135c:	2300      	movs	r3, #0
 800135e:	e02d      	b.n	80013bc <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2200      	movs	r2, #0
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8001370:	f04f 0900 	mov.w	r9, #0
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	f1a3 0120 	sub.w	r1, r3, #32
 800137a:	f1c3 0220 	rsb	r2, r3, #32
 800137e:	fa09 f503 	lsl.w	r5, r9, r3
 8001382:	fa08 f101 	lsl.w	r1, r8, r1
 8001386:	430d      	orrs	r5, r1
 8001388:	fa28 f202 	lsr.w	r2, r8, r2
 800138c:	4315      	orrs	r5, r2
 800138e:	fa08 f403 	lsl.w	r4, r8, r3
 8001392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001396:	ea42 0a04 	orr.w	sl, r2, r4
 800139a:	ea43 0b05 	orr.w	fp, r3, r5
 800139e:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	3307      	adds	r3, #7
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dbb5      	blt.n	800131c <pb_decode_varint+0x1c>
    
    *dest = result;
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3728      	adds	r7, #40	@ 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013c6:	bf00      	nop
 80013c8:	08009770 	.word	0x08009770

080013cc <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80013d4:	f107 030f 	add.w	r3, r7, #15
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe05 	bl	8000fec <pb_read>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <pb_skip_varint+0x26>
            return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e004      	b.n	80013fc <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dbec      	blt.n	80013d4 <pb_skip_varint+0x8>
    return true;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff64 	bl	80012e0 <pb_decode_varint32>
 8001418:	4603      	mov	r3, r0
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <pb_skip_string+0x24>
        return false;
 8001424:	2300      	movs	r3, #0
 8001426:	e006      	b.n	8001436 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	461a      	mov	r2, r3
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fddc 	bl	8000fec <pb_read>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fe90 	bl	800118c <pb_decode_varint32_eof>
 800146c:	4603      	mov	r3, r0
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <pb_decode_tag+0x3e>
    {
        return false;
 8001478:	2300      	movs	r3, #0
 800147a:	e00b      	b.n	8001494 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	701a      	strb	r2, [r3, #0]
    return true;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d826      	bhi.n	80014fc <pb_skip_field+0x60>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <pb_skip_field+0x18>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014cd 	.word	0x080014cd
 80014b8:	080014d7 	.word	0x080014d7
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	080014fd 	.word	0x080014fd
 80014c4:	080014fd 	.word	0x080014fd
 80014c8:	080014ef 	.word	0x080014ef
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff7d 	bl	80013cc <pb_skip_varint>
 80014d2:	4603      	mov	r3, r0
 80014d4:	e01d      	b.n	8001512 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80014d6:	2208      	movs	r2, #8
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd86 	bl	8000fec <pb_read>
 80014e0:	4603      	mov	r3, r0
 80014e2:	e016      	b.n	8001512 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff8d 	bl	8001404 <pb_skip_string>
 80014ea:	4603      	mov	r3, r0
 80014ec:	e011      	b.n	8001512 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80014ee:	2204      	movs	r2, #4
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd7a 	bl	8000fec <pb_read>
 80014f8:	4603      	mov	r3, r0
 80014fa:	e00a      	b.n	8001512 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <pb_skip_field+0x6e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	e000      	b.n	800150c <pb_skip_field+0x70>
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <pb_skip_field+0x80>)
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	60d3      	str	r3, [r2, #12]
 8001510:	2300      	movs	r3, #0
    }
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	08009780 	.word	0x08009780

08001520 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	460b      	mov	r3, r1
 800152e:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d03f      	beq.n	80015bc <read_raw_value+0x9c>
 800153c:	2b05      	cmp	r3, #5
 800153e:	dc47      	bgt.n	80015d0 <read_raw_value+0xb0>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <read_raw_value+0x2a>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d02f      	beq.n	80015a8 <read_raw_value+0x88>
 8001548:	e042      	b.n	80015d0 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	d20b      	bcs.n	800157c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <read_raw_value+0x52>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	e000      	b.n	8001574 <read_raw_value+0x54>
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <read_raw_value+0xd0>)
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	60d3      	str	r3, [r2, #12]
 8001578:	2300      	movs	r3, #0
 800157a:	e034      	b.n	80015e6 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 800157c:	2201      	movs	r2, #1
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fd33 	bl	8000fec <pb_read>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <read_raw_value+0x76>
                    return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e027      	b.n	80015e6 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dbd5      	blt.n	8001550 <read_raw_value+0x30>
            return true;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e01e      	b.n	80015e6 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2208      	movs	r2, #8
 80015ac:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80015ae:	2208      	movs	r2, #8
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fd1a 	bl	8000fec <pb_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	e014      	b.n	80015e6 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80015c2:	2204      	movs	r2, #4
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fd10 	bl	8000fec <pb_read>
 80015cc:	4603      	mov	r3, r0
 80015ce:	e00a      	b.n	80015e6 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <read_raw_value+0xbe>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	e000      	b.n	80015e0 <read_raw_value+0xc0>
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <read_raw_value+0xd4>)
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	60d3      	str	r3, [r2, #12]
 80015e4:	2300      	movs	r3, #0
    }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08009770 	.word	0x08009770
 80015f4:	08009780 	.word	0x08009780

080015f8 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fe69 	bl	80012e0 <pb_decode_varint32>
 800160e:	4603      	mov	r3, r0
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <pb_make_string_substream+0x26>
        return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e020      	b.n	8001660 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4614      	mov	r4, r2
 8001624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d20b      	bcs.n	800164c <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <pb_make_string_substream+0x4a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	e000      	b.n	8001644 <pb_make_string_substream+0x4c>
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <pb_make_string_substream+0x70>)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	60d3      	str	r3, [r2, #12]
 8001648:	2300      	movs	r3, #0
 800164a:	e009      	b.n	8001660 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad2      	subs	r2, r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]
    return true;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	08009794 	.word	0x08009794

0800166c <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00e      	beq.n	800169c <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	461a      	mov	r2, r3
 8001684:	2100      	movs	r1, #0
 8001686:	6838      	ldr	r0, [r7, #0]
 8001688:	f7ff fcb0 	bl	8000fec <pb_read>
 800168c:	4603      	mov	r3, r0
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <pb_close_string_substream+0x30>
            return false;
 8001698:	2300      	movs	r3, #0
 800169a:	e008      	b.n	80016ae <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	460b      	mov	r3, r1
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7d9b      	ldrb	r3, [r3, #22]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	2b0b      	cmp	r3, #11
 80016d0:	f200 80d4 	bhi.w	800187c <decode_basic_field+0x1c4>
 80016d4:	a201      	add	r2, pc, #4	@ (adr r2, 80016dc <decode_basic_field+0x24>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	0800170d 	.word	0x0800170d
 80016e0:	0800173d 	.word	0x0800173d
 80016e4:	0800173d 	.word	0x0800173d
 80016e8:	0800173d 	.word	0x0800173d
 80016ec:	0800176d 	.word	0x0800176d
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017d5 	.word	0x080017d5
 80016f8:	080017ff 	.word	0x080017ff
 80016fc:	08001829 	.word	0x08001829
 8001700:	08001829 	.word	0x08001829
 8001704:	0800187d 	.word	0x0800187d
 8001708:	08001853 	.word	0x08001853
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <decode_basic_field+0x78>
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2bff      	cmp	r3, #255	@ 0xff
 8001716:	d00b      	beq.n	8001730 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <decode_basic_field+0x6e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	e000      	b.n	8001728 <decode_basic_field+0x70>
 8001726:	4b5d      	ldr	r3, [pc, #372]	@ (800189c <decode_basic_field+0x1e4>)
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	60d3      	str	r3, [r2, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	e0b0      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fef6 	bl	8002524 <pb_dec_bool>
 8001738:	4603      	mov	r3, r0
 800173a:	e0aa      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00e      	beq.n	8001760 <decode_basic_field+0xa8>
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d00b      	beq.n	8001760 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <decode_basic_field+0x9e>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	e000      	b.n	8001758 <decode_basic_field+0xa0>
 8001756:	4b51      	ldr	r3, [pc, #324]	@ (800189c <decode_basic_field+0x1e4>)
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	60d3      	str	r3, [r2, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	e098      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 feee 	bl	8002544 <pb_dec_varint>
 8001768:	4603      	mov	r3, r0
 800176a:	e092      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d00e      	beq.n	8001790 <decode_basic_field+0xd8>
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2bff      	cmp	r3, #255	@ 0xff
 8001776:	d00b      	beq.n	8001790 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <decode_basic_field+0xce>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	e000      	b.n	8001788 <decode_basic_field+0xd0>
 8001786:	4b45      	ldr	r3, [pc, #276]	@ (800189c <decode_basic_field+0x1e4>)
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	60d3      	str	r3, [r2, #12]
 800178c:	2300      	movs	r3, #0
 800178e:	e080      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fe8a 	bl	80024b0 <pb_decode_fixed32>
 800179c:	4603      	mov	r3, r0
 800179e:	e078      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d00e      	beq.n	80017c4 <decode_basic_field+0x10c>
 80017a6:	7afb      	ldrb	r3, [r7, #11]
 80017a8:	2bff      	cmp	r3, #255	@ 0xff
 80017aa:	d00b      	beq.n	80017c4 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <decode_basic_field+0x102>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	e000      	b.n	80017bc <decode_basic_field+0x104>
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <decode_basic_field+0x1e4>)
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	60d3      	str	r3, [r2, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	e066      	b.n	8001892 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4619      	mov	r1, r3
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fe8c 	bl	80024e8 <pb_decode_fixed64>
 80017d0:	4603      	mov	r3, r0
 80017d2:	e05e      	b.n	8001892 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d00b      	beq.n	80017f2 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <decode_basic_field+0x130>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	e000      	b.n	80017ea <decode_basic_field+0x132>
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <decode_basic_field+0x1e4>)
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	60d3      	str	r3, [r2, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	e04f      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 ffd1 	bl	800279c <pb_dec_bytes>
 80017fa:	4603      	mov	r3, r0
 80017fc:	e049      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d00b      	beq.n	800181c <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <decode_basic_field+0x15a>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	e000      	b.n	8001814 <decode_basic_field+0x15c>
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <decode_basic_field+0x1e4>)
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	60d3      	str	r3, [r2, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	e03a      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f001 f830 	bl	8002884 <pb_dec_string>
 8001824:	4603      	mov	r3, r0
 8001826:	e034      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d00b      	beq.n	8001846 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <decode_basic_field+0x184>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	e000      	b.n	800183e <decode_basic_field+0x186>
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <decode_basic_field+0x1e4>)
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	60d3      	str	r3, [r2, #12]
 8001842:	2300      	movs	r3, #0
 8001844:	e025      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f001 f897 	bl	800297c <pb_dec_submessage>
 800184e:	4603      	mov	r3, r0
 8001850:	e01f      	b.n	8001892 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d00b      	beq.n	8001870 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <decode_basic_field+0x1ae>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	e000      	b.n	8001868 <decode_basic_field+0x1b0>
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <decode_basic_field+0x1e4>)
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	60d3      	str	r3, [r2, #12]
 800186c:	2300      	movs	r3, #0
 800186e:	e010      	b.n	8001892 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f001 f90c 	bl	8002a90 <pb_dec_fixed_length_bytes>
 8001878:	4603      	mov	r3, r0
 800187a:	e00a      	b.n	8001892 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <decode_basic_field+0x1d2>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	e000      	b.n	800188c <decode_basic_field+0x1d4>
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <decode_basic_field+0x1e8>)
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	60d3      	str	r3, [r2, #12]
 8001890:	2300      	movs	r3, #0
    }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	080097ac 	.word	0x080097ac
 80018a0:	080097bc 	.word	0x080097bc

080018a4 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	@ 0x58
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	460b      	mov	r3, r1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7d9b      	ldrb	r3, [r3, #22]
 80018b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80018ba:	2b30      	cmp	r3, #48	@ 0x30
 80018bc:	f000 80c2 	beq.w	8001a44 <decode_static_field+0x1a0>
 80018c0:	2b30      	cmp	r3, #48	@ 0x30
 80018c2:	f200 811a 	bhi.w	8001afa <decode_static_field+0x256>
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d01f      	beq.n	800190a <decode_static_field+0x66>
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	f200 8115 	bhi.w	8001afa <decode_static_field+0x256>
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <decode_static_field+0x36>
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d008      	beq.n	80018ea <decode_static_field+0x46>
 80018d8:	e10f      	b.n	8001afa <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff fee9 	bl	80016b8 <decode_basic_field>
 80018e6:	4603      	mov	r3, r0
 80018e8:	e112      	b.n	8001b10 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fed9 	bl	80016b8 <decode_basic_field>
 8001906:	4603      	mov	r3, r0
 8001908:	e102      	b.n	8001b10 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d16c      	bne.n	80019ea <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7d9b      	ldrb	r3, [r3, #22]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	2b05      	cmp	r3, #5
 800191a:	d866      	bhi.n	80019ea <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	8a52      	ldrh	r2, [r2, #18]
 8001930:	4611      	mov	r1, r2
 8001932:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	fb01 f202 	mul.w	r2, r1, r2
 800193a:	441a      	add	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001940:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001944:	4619      	mov	r1, r3
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff fe56 	bl	80015f8 <pb_make_string_substream>
 800194c:	4603      	mov	r3, r0
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01f      	beq.n	8001998 <decode_static_field+0xf4>
                    return false;
 8001958:	2300      	movs	r3, #0
 800195a:	e0d9      	b.n	8001b10 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 800195c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	21ff      	movs	r1, #255	@ 0xff
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fea7 	bl	80016b8 <decode_basic_field>
 800196a:	4603      	mov	r3, r0
 800196c:	f083 0301 	eor.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <decode_static_field+0xda>
                    {
                        status = false;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 800197c:	e015      	b.n	80019aa <decode_static_field+0x106>
                    }
                    (*size)++;
 800197e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001988:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	8a52      	ldrh	r2, [r2, #18]
 8001992:	441a      	add	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8001998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <decode_static_field+0x106>
 800199e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a0:	881a      	ldrh	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	8a9b      	ldrh	r3, [r3, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3d8      	bcc.n	800195c <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 80019aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <decode_static_field+0x11a>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	e000      	b.n	80019c0 <decode_static_field+0x11c>
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <decode_static_field+0x274>)
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	60d3      	str	r3, [r2, #12]
 80019c4:	2300      	movs	r3, #0
 80019c6:	e0a3      	b.n	8001b10 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80019c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019cc:	4619      	mov	r1, r3
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff fe4c 	bl	800166c <pb_close_string_substream>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <decode_static_field+0x140>
                    return false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e095      	b.n	8001b10 <decode_static_field+0x26c>

                return status;
 80019e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80019e8:	e092      	b.n	8001b10 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	8a52      	ldrh	r2, [r2, #18]
 80019f8:	4611      	mov	r1, r2
 80019fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	fb01 f202 	mul.w	r2, r1, r2
 8001a02:	441a      	add	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8001a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	b291      	uxth	r1, r2
 8001a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a12:	8011      	strh	r1, [r2, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	8a92      	ldrh	r2, [r2, #20]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d30b      	bcc.n	8001a34 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <decode_static_field+0x186>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	e000      	b.n	8001a2c <decode_static_field+0x188>
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <decode_static_field+0x274>)
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	60d3      	str	r3, [r2, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	e06d      	b.n	8001b10 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001a34:	7afb      	ldrb	r3, [r7, #11]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fe3c 	bl	80016b8 <decode_basic_field>
 8001a40:	4603      	mov	r3, r0
 8001a42:	e065      	b.n	8001b10 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7d9b      	ldrb	r3, [r3, #22]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d005      	beq.n	8001a5c <decode_static_field+0x1b8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7d9b      	ldrb	r3, [r3, #22]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d141      	bne.n	8001ae0 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d03a      	beq.n	8001ae0 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69d8      	ldr	r0, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8a5b      	ldrh	r3, [r3, #18]
 8001a72:	461a      	mov	r2, r3
 8001a74:	2100      	movs	r1, #0
 8001a76:	f007 fb7f 	bl	8009178 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d022      	beq.n	8001ae0 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f99c 	bl	8000de4 <pb_field_iter_begin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fa4d 	bl	8001f56 <pb_message_set_to_defaults>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f083 0301 	eor.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <decode_static_field+0x232>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	e000      	b.n	8001ad8 <decode_static_field+0x234>
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <decode_static_field+0x278>)
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	60d3      	str	r3, [r2, #12]
 8001adc:	2300      	movs	r3, #0
 8001ade:	e017      	b.n	8001b10 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	8a12      	ldrh	r2, [r2, #16]
 8001ae8:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fde1 	bl	80016b8 <decode_basic_field>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e00a      	b.n	8001b10 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <decode_static_field+0x264>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	e000      	b.n	8001b0a <decode_static_field+0x266>
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <decode_static_field+0x27c>)
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	60d3      	str	r3, [r2, #12]
 8001b0e:	2300      	movs	r3, #0
    }
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3758      	adds	r7, #88	@ 0x58
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	080097d0 	.word	0x080097d0
 8001b1c:	080097e0 	.word	0x080097e0
 8001b20:	080097bc 	.word	0x080097bc

08001b24 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <decode_pointer_field+0x1c>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	e000      	b.n	8001b42 <decode_pointer_field+0x1e>
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <decode_pointer_field+0x30>)
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	60d3      	str	r3, [r2, #12]
 8001b46:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	080097f8 	.word	0x080097f8

08001b58 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b097      	sub	sp, #92	@ 0x5c
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	61f8      	str	r0, [r7, #28]
 8001b60:	460b      	mov	r3, r1
 8001b62:	617a      	str	r2, [r7, #20]
 8001b64:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d106      	bne.n	8001b7e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001b70:	7efb      	ldrb	r3, [r7, #27]
 8001b72:	4619      	mov	r1, r3
 8001b74:	69f8      	ldr	r0, [r7, #28]
 8001b76:	f7ff fc91 	bl	800149c <pb_skip_field>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e070      	b.n	8001c60 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001b7e:	7efb      	ldrb	r3, [r7, #27]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d145      	bne.n	8001c10 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001b84:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b88:	4619      	mov	r1, r3
 8001b8a:	69f8      	ldr	r0, [r7, #28]
 8001b8c:	f7ff fd34 	bl	80015f8 <pb_make_string_substream>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <decode_callback_field+0x48>
            return false;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e05f      	b.n	8001c60 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ba2:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4798      	blx	r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <decode_callback_field+0x76>
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	e005      	b.n	8001bda <decode_callback_field+0x82>
 8001bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <decode_callback_field+0x80>
 8001bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd6:	e000      	b.n	8001bda <decode_callback_field+0x82>
 8001bd8:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <decode_callback_field+0x110>)
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	60d3      	str	r3, [r2, #12]
                return false;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e03e      	b.n	8001c60 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <decode_callback_field+0x98>
 8001be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8d7      	bhi.n	8001ba0 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001bf0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	69f8      	ldr	r0, [r7, #28]
 8001bf8:	f7ff fd38 	bl	800166c <pb_close_string_substream>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f083 0301 	eor.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <decode_callback_field+0xb4>
            return false;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e029      	b.n	8001c60 <decode_callback_field+0x108>

        return true;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e027      	b.n	8001c60 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001c10:	230a      	movs	r3, #10
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c18:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c1c:	7ef9      	ldrb	r1, [r7, #27]
 8001c1e:	69f8      	ldr	r0, [r7, #28]
 8001c20:	f7ff fc7e 	bl	8001520 <read_raw_value>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <decode_callback_field+0xdc>
            return false;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e015      	b.n	8001c60 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c36:	463b      	mov	r3, r7
 8001c38:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fa87 	bl	8001150 <pb_istream_from_buffer>
 8001c42:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001c46:	463b      	mov	r3, r7
 8001c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4798      	blx	r3
 8001c5e:	4603      	mov	r3, r0
    }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	375c      	adds	r7, #92	@ 0x5c
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	0800980c 	.word	0x0800980c

08001c6c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	460b      	mov	r3, r1
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7d9b      	ldrb	r3, [r3, #22]
 8001c7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001c82:	2b80      	cmp	r3, #128	@ 0x80
 8001c84:	d00e      	beq.n	8001ca4 <decode_field+0x38>
 8001c86:	2b80      	cmp	r3, #128	@ 0x80
 8001c88:	d81c      	bhi.n	8001cc4 <decode_field+0x58>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <decode_field+0x28>
 8001c8e:	2b40      	cmp	r3, #64	@ 0x40
 8001c90:	d010      	beq.n	8001cb4 <decode_field+0x48>
 8001c92:	e017      	b.n	8001cc4 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff fe02 	bl	80018a4 <decode_static_field>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	e01a      	b.n	8001cda <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f7ff ff3a 	bl	8001b24 <decode_pointer_field>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	e012      	b.n	8001cda <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7ff ff4c 	bl	8001b58 <decode_callback_field>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	e00a      	b.n	8001cda <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <decode_field+0x66>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	e000      	b.n	8001cd4 <decode_field+0x68>
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <decode_field+0x78>)
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	60d3      	str	r3, [r2, #12]
 8001cd8:	2300      	movs	r3, #0
    }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	080097bc 	.word	0x080097bc

08001ce8 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	@ 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f88a 	bl	8000e16 <pb_field_iter_begin_extension>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <default_extension_decoder+0x34>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	e000      	b.n	8001d1e <default_extension_decoder+0x36>
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <default_extension_decoder+0x70>)
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	60d3      	str	r3, [r2, #12]
 8001d22:	2300      	movs	r3, #0
 8001d24:	e014      	b.n	8001d50 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001d26:	8c3b      	ldrh	r3, [r7, #32]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <default_extension_decoder+0x4e>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <default_extension_decoder+0x52>
        return true;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00a      	b.n	8001d50 <default_extension_decoder+0x68>

    extension->found = true;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	4619      	mov	r1, r3
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff ff8f 	bl	8001c6c <decode_field>
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3738      	adds	r7, #56	@ 0x38
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800981c 	.word	0x0800981c

08001d5c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001d72:	e022      	b.n	8001dba <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681c      	ldr	r4, [r3, #0]
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	6839      	ldr	r1, [r7, #0]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	47a0      	blx	r4
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
 8001d92:	e007      	b.n	8001da4 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff ffa4 	bl	8001ce8 <default_extension_decoder>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <decode_extension+0x58>
            return false;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e00b      	b.n	8001dcc <decode_extension+0x70>
        
        extension = extension->next;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <decode_extension+0x6e>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d0d4      	beq.n	8001d74 <decode_extension+0x18>
    }
    
    return true;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	@ 0x38
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7d9b      	ldrb	r3, [r3, #22]
 8001de0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8001de4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d124      	bne.n	8001e3a <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001df8:	e01b      	b.n	8001e32 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f808 	bl	8000e16 <pb_field_iter_begin_extension>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00f      	beq.n	8001e2c <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0e:	2200      	movs	r2, #0
 8001e10:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f89d 	bl	8001f56 <pb_message_set_to_defaults>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <pb_field_set_to_default+0x58>
                    return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e090      	b.n	8001f4e <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e0      	bne.n	8001dfa <pb_field_set_to_default+0x26>
 8001e38:	e088      	b.n	8001f4c <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8001e3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d166      	bne.n	8001f14 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8001e4c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d108      	bne.n	8001e6a <pb_field_set_to_default+0x96>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e012      	b.n	8001e90 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001e6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d005      	beq.n	8001e82 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8001e76:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001e7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001e7e:	2b30      	cmp	r3, #48	@ 0x30
 8001e80:	d106      	bne.n	8001e90 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8001e90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d059      	beq.n	8001f4c <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7d9b      	ldrb	r3, [r3, #22]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d005      	beq.n	8001eb0 <pb_field_set_to_default+0xdc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7d9b      	ldrb	r3, [r3, #22]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d128      	bne.n	8001f02 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d018      	beq.n	8001f02 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ff81 	bl	8000de4 <pb_field_iter_begin>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d030      	beq.n	8001f4a <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f832 	bl	8001f56 <pb_message_set_to_defaults>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d025      	beq.n	8001f4a <pb_field_set_to_default+0x176>
                        return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e025      	b.n	8001f4e <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69d8      	ldr	r0, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8a5b      	ldrh	r3, [r3, #18]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f007 f933 	bl	8009178 <memset>
 8001f12:	e01b      	b.n	8001f4c <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8001f14:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f1c:	2b80      	cmp	r3, #128	@ 0x80
 8001f1e:	d115      	bne.n	8001f4c <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001f28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d005      	beq.n	8001f40 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8001f34:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001f3c:	2b30      	cmp	r3, #48	@ 0x30
 8001f3e:	d105      	bne.n	8001f4c <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	e000      	b.n	8001f4c <pb_field_set_to_default+0x178>
            {
 8001f4a:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3738      	adds	r7, #56	@ 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8001f56:	b590      	push	{r4, r7, lr}
 8001f58:	b08d      	sub	sp, #52	@ 0x34
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	463b      	mov	r3, r7
 8001f86:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f8e0 	bl	8001150 <pb_istream_from_buffer>
 8001f90:	f107 0420 	add.w	r4, r7, #32
 8001f94:	463b      	mov	r3, r7
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8001f9c:	f107 031a 	add.w	r3, r7, #26
 8001fa0:	f107 021c 	add.w	r2, r7, #28
 8001fa4:	f107 011b 	add.w	r1, r7, #27
 8001fa8:	f107 0020 	add.w	r0, r7, #32
 8001fac:	f7ff fa47 	bl	800143e <pb_decode_tag>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <pb_message_set_to_defaults+0x6a>
            return false;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e043      	b.n	8002048 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ff07 	bl	8001dd4 <pb_field_set_to_default>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <pb_message_set_to_defaults+0x80>
            return false;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e038      	b.n	8002048 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d02e      	beq.n	800203a <pb_message_set_to_defaults+0xe4>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	8a1b      	ldrh	r3, [r3, #16]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d128      	bne.n	800203a <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8001fe8:	7ef9      	ldrb	r1, [r7, #27]
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe3b 	bl	8001c6c <decode_field>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <pb_message_set_to_defaults+0xb0>
                return false;
 8002002:	2300      	movs	r3, #0
 8002004:	e020      	b.n	8002048 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002006:	f107 031a 	add.w	r3, r7, #26
 800200a:	f107 021c 	add.w	r2, r7, #28
 800200e:	f107 011b 	add.w	r1, r7, #27
 8002012:	f107 0020 	add.w	r0, r7, #32
 8002016:	f7ff fa12 	bl	800143e <pb_decode_tag>
 800201a:	4603      	mov	r3, r0
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <pb_message_set_to_defaults+0xd4>
                return false;
 8002026:	2300      	movs	r3, #0
 8002028:	e00e      	b.n	8002048 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7fe ff1b 	bl	8000e76 <pb_field_iter_next>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1bc      	bne.n	8001fc0 <pb_message_set_to_defaults+0x6a>

    return true;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3734      	adds	r7, #52	@ 0x34
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}

08002050 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b09a      	sub	sp, #104	@ 0x68
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8002066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800206a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800207a:	2300      	movs	r3, #0
 800207c:	643b      	str	r3, [r7, #64]	@ 0x40
 800207e:	2300      	movs	r3, #0
 8002080:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fea7 	bl	8000de4 <pb_field_iter_begin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8102 	beq.w	80022a2 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 80fc 	bne.w	80022a2 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff51 	bl	8001f56 <pb_message_set_to_defaults>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80f0 	beq.w	80022a2 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <pb_decode_inner+0x80>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	e000      	b.n	80020d2 <pb_decode_inner+0x82>
 80020d0:	4b99      	ldr	r3, [pc, #612]	@ (8002338 <pb_decode_inner+0x2e8>)
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	60d3      	str	r3, [r2, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	e16d      	b.n	80023b6 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80020da:	f107 0312 	add.w	r3, r7, #18
 80020de:	f107 0214 	add.w	r2, r7, #20
 80020e2:	f107 0113 	add.w	r1, r7, #19
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff f9a9 	bl	800143e <pb_decode_tag>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <pb_decode_inner+0xb4>
        {
            if (eof)
 80020f8:	7cbb      	ldrb	r3, [r7, #18]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80d7 	bne.w	80022ae <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8002100:	2300      	movs	r3, #0
 8002102:	e158      	b.n	80023b6 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d111      	bne.n	800212e <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 80ce 	bne.w	80022b2 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <pb_decode_inner+0xd4>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	e000      	b.n	8002126 <pb_decode_inner+0xd6>
 8002124:	4b85      	ldr	r3, [pc, #532]	@ (800233c <pb_decode_inner+0x2ec>)
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	60d3      	str	r3, [r2, #12]
 800212a:	2300      	movs	r3, #0
 800212c:	e143      	b.n	80023b6 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe feb2 	bl	8000ea0 <pb_field_iter_find>
 800213c:	4603      	mov	r3, r0
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <pb_decode_inner+0x104>
 8002148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	2b0a      	cmp	r3, #10
 8002152:	d13c      	bne.n	80021ce <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8002154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002156:	2b00      	cmp	r3, #0
 8002158:	d112      	bne.n	8002180 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800215a:	f107 0318 	add.w	r3, r7, #24
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fef4 	bl	8000f4c <pb_field_iter_find_extension>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800216a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8002170:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002172:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8002174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002184:	429a      	cmp	r2, r3
 8002186:	d815      	bhi.n	80021b4 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	7cfa      	ldrb	r2, [r7, #19]
 8002192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fde1 	bl	8001d5c <decode_extension>
 800219a:	4603      	mov	r3, r0
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <pb_decode_inner+0x15a>
                    return false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e105      	b.n	80023b6 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d173      	bne.n	800229c <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	4619      	mov	r1, r3
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff f96f 	bl	800149c <pb_skip_field>
 80021be:	4603      	mov	r3, r0
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06a      	beq.n	80022a0 <pb_decode_inner+0x250>
                return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e0f3      	b.n	80023b6 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80021ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d12e      	bne.n	8002238 <pb_decode_inner+0x1e8>
 80021da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	3314      	adds	r3, #20
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d128      	bne.n	8002238 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80021e6:	8c3b      	ldrh	r3, [r7, #32]
 80021e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d020      	beq.n	8002232 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80021f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80021f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d011      	beq.n	8002220 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80021fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8002200:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8002204:	429a      	cmp	r2, r3
 8002206:	d00b      	beq.n	8002220 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <pb_decode_inner+0x1c6>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	e000      	b.n	8002218 <pb_decode_inner+0x1c8>
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <pb_decode_inner+0x2f0>)
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	60d3      	str	r3, [r2, #12]
 800221c:	2300      	movs	r3, #0
 800221e:	e0ca      	b.n	80023b6 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8002220:	8c3b      	ldrh	r3, [r7, #32]
 8002222:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 800222c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800222e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8002232:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8002238:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800223c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11c      	bne.n	800227e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8002244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002246:	2b3f      	cmp	r3, #63	@ 0x3f
 8002248:	d819      	bhi.n	800227e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800224a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2201      	movs	r2, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8002258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b29b      	uxth	r3, r3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3368      	adds	r3, #104	@ 0x68
 8002262:	443b      	add	r3, r7
 8002264:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8002268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b29b      	uxth	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002272:	431a      	orrs	r2, r3
 8002274:	008b      	lsls	r3, r1, #2
 8002276:	3368      	adds	r3, #104	@ 0x68
 8002278:	443b      	add	r3, r7
 800227a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	f107 0218 	add.w	r2, r7, #24
 8002284:	4619      	mov	r1, r3
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fcf0 	bl	8001c6c <decode_field>
 800228c:	4603      	mov	r3, r0
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <pb_decode_inner+0x252>
            return false;
 8002298:	2300      	movs	r3, #0
 800229a:	e08c      	b.n	80023b6 <pb_decode_inner+0x366>
                    continue;
 800229c:	bf00      	nop
 800229e:	e000      	b.n	80022a2 <pb_decode_inner+0x252>
            continue;
 80022a0:	bf00      	nop
    while (stream->bytes_left)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f47f af17 	bne.w	80020da <pb_decode_inner+0x8a>
 80022ac:	e002      	b.n	80022b4 <pb_decode_inner+0x264>
                break;
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <pb_decode_inner+0x264>
            break;
 80022b2:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80022b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80022b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022bc:	4293      	cmp	r3, r2
 80022be:	d011      	beq.n	80022e4 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 80022c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 80022c4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d00b      	beq.n	80022e4 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <pb_decode_inner+0x28a>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	e000      	b.n	80022dc <pb_decode_inner+0x28c>
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <pb_decode_inner+0x2f0>)
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	60d3      	str	r3, [r2, #12]
 80022e0:	2300      	movs	r3, #0
 80022e2:	e068      	b.n	80023b6 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	8a5b      	ldrh	r3, [r3, #18]
 80022e8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80022ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05f      	beq.n	80023b4 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80022f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80022f8:	2b40      	cmp	r3, #64	@ 0x40
 80022fa:	d902      	bls.n	8002302 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80022fc:	2340      	movs	r3, #64	@ 0x40
 80022fe:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8002302:	2300      	movs	r3, #0
 8002304:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002308:	e023      	b.n	8002352 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800230a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3368      	adds	r3, #104	@ 0x68
 8002312:	443b      	add	r3, r7
 8002314:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002318:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800231a:	429a      	cmp	r2, r3
 800231c:	d014      	beq.n	8002348 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <pb_decode_inner+0x2dc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	e000      	b.n	800232e <pb_decode_inner+0x2de>
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <pb_decode_inner+0x2f4>)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	60d3      	str	r3, [r2, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	e03f      	b.n	80023b6 <pb_decode_inner+0x366>
 8002336:	bf00      	nop
 8002338:	080097e0 	.word	0x080097e0
 800233c:	08009830 	.word	0x08009830
 8002340:	0800983c 	.word	0x0800983c
 8002344:	08009860 	.word	0x08009860
            for (i = 0; i < (req_field_count >> 5); i++)
 8002348:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800234c:	3301      	adds	r3, #1
 800234e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002352:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b29b      	uxth	r3, r3
 800235a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800235e:	429a      	cmp	r2, r3
 8002360:	d3d3      	bcc.n	800230a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8002362:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2b00      	cmp	r3, #0
 800236c:	d022      	beq.n	80023b4 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800236e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	b29b      	uxth	r3, r3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3368      	adds	r3, #104	@ 0x68
 800237a:	443b      	add	r3, r7
 800237c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8002380:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f1c3 0320 	rsb	r3, r3, #32
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8002398:	429a      	cmp	r2, r3
 800239a:	d00b      	beq.n	80023b4 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <pb_decode_inner+0x35a>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	e000      	b.n	80023ac <pb_decode_inner+0x35c>
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <pb_decode_inner+0x370>)
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	60d3      	str	r3, [r2, #12]
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3768      	adds	r7, #104	@ 0x68
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08009860 	.word	0x08009860

080023c4 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80023d0:	2300      	movs	r3, #0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff fe3a 	bl	8002050 <pb_decode_inner>
 80023dc:	4603      	mov	r3, r0
 80023de:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe ff70 	bl	80012e0 <pb_decode_varint32>
 8002400:	4603      	mov	r3, r0
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <pb_decode_bool+0x26>
        return false;
 800240c:	2300      	movs	r3, #0
 800240e:	e008      	b.n	8002422 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	701a      	strb	r2, [r3, #0]
    return true;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800242a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe ff5f 	bl	8001300 <pb_decode_varint>
 8002442:	4603      	mov	r3, r0
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <pb_decode_svarint+0x28>
        return false;
 800244e:	2300      	movs	r3, #0
 8002450:	e029      	b.n	80024a6 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8002452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002456:	f002 0401 	and.w	r4, r2, #1
 800245a:	2500      	movs	r5, #0
 800245c:	ea54 0305 	orrs.w	r3, r4, r5
 8002460:	d013      	beq.n	800248a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8002462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	0842      	lsrs	r2, r0, #1
 8002470:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002474:	084b      	lsrs	r3, r1, #1
 8002476:	ea6f 0802 	mvn.w	r8, r2
 800247a:	ea6f 0903 	mvn.w	r9, r3
 800247e:	4642      	mov	r2, r8
 8002480:	464b      	mov	r3, r9
 8002482:	6839      	ldr	r1, [r7, #0]
 8002484:	e9c1 2300 	strd	r2, r3, [r1]
 8002488:	e00c      	b.n	80024a4 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800248a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	0842      	lsrs	r2, r0, #1
 8002498:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800249c:	084b      	lsrs	r3, r1, #1
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080024b0 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2204      	movs	r2, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fd92 	bl	8000fec <pb_read>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <pb_decode_fixed32+0x28>
        return false;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e003      	b.n	80024e0 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	2208      	movs	r2, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fd76 	bl	8000fec <pb_read>
 8002500:	4603      	mov	r3, r0
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <pb_decode_fixed64+0x28>
        return false;
 800250c:	2300      	movs	r3, #0
 800250e:	e005      	b.n	800251c <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8002510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff58 	bl	80023ea <pb_decode_bool>
 800253a:	4603      	mov	r3, r0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b094      	sub	sp, #80	@ 0x50
 800254a:	af00      	add	r7, sp, #0
 800254c:	6278      	str	r0, [r7, #36]	@ 0x24
 800254e:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	7d9b      	ldrb	r3, [r3, #22]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	2b02      	cmp	r3, #2
 800255a:	d179      	bne.n	8002650 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 800255c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002560:	4619      	mov	r1, r3
 8002562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002564:	f7fe fecc 	bl	8001300 <pb_decode_varint>
 8002568:	4603      	mov	r3, r0
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <pb_dec_varint+0x34>
            return false;
 8002574:	2300      	movs	r3, #0
 8002576:	e107      	b.n	8002788 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	8a5b      	ldrh	r3, [r3, #18]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d10a      	bne.n	8002596 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	69d9      	ldr	r1, [r3, #28]
 8002584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002588:	e9c1 2300 	strd	r2, r3, [r1]
 800258c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002590:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002594:	e046      	b.n	8002624 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	8a5b      	ldrh	r3, [r3, #18]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d10e      	bne.n	80025bc <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800259e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4602      	mov	r2, r0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	617a      	str	r2, [r7, #20]
 80025b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80025ba:	e033      	b.n	8002624 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	8a5b      	ldrh	r3, [r3, #18]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d10f      	bne.n	80025e4 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80025c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	b282      	uxth	r2, r0
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	60fa      	str	r2, [r7, #12]
 80025da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025de:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80025e2:	e01f      	b.n	8002624 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	8a5b      	ldrh	r3, [r3, #18]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10f      	bne.n	800260c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80025ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	b2c2      	uxtb	r2, r0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002606:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800260a:	e00b      	b.n	8002624 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <pb_dec_varint+0xd6>
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	e000      	b.n	800261c <pb_dec_varint+0xd8>
 800261a:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <pb_dec_varint+0x250>)
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	60d3      	str	r3, [r2, #12]
 8002620:	2300      	movs	r3, #0
 8002622:	e0b1      	b.n	8002788 <pb_dec_varint+0x244>

        if (clamped != value)
 8002624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002628:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800262c:	4299      	cmp	r1, r3
 800262e:	bf08      	it	eq
 8002630:	4290      	cmpeq	r0, r2
 8002632:	d00b      	beq.n	800264c <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <pb_dec_varint+0xfe>
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	e000      	b.n	8002644 <pb_dec_varint+0x100>
 8002642:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <pb_dec_varint+0x254>)
 8002644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002646:	60d3      	str	r3, [r2, #12]
 8002648:	2300      	movs	r3, #0
 800264a:	e09d      	b.n	8002788 <pb_dec_varint+0x244>

        return true;
 800264c:	2301      	movs	r3, #1
 800264e:	e09b      	b.n	8002788 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	7d9b      	ldrb	r3, [r3, #22]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	2b03      	cmp	r3, #3
 800265a:	d10d      	bne.n	8002678 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800265c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002660:	4619      	mov	r1, r3
 8002662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002664:	f7ff fee1 	bl	800242a <pb_decode_svarint>
 8002668:	4603      	mov	r3, r0
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d022      	beq.n	80026ba <pb_dec_varint+0x176>
                return false;
 8002674:	2300      	movs	r3, #0
 8002676:	e087      	b.n	8002788 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8002678:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800267c:	4619      	mov	r1, r3
 800267e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002680:	f7fe fe3e 	bl	8001300 <pb_decode_varint>
 8002684:	4603      	mov	r3, r0
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <pb_dec_varint+0x150>
                return false;
 8002690:	2300      	movs	r3, #0
 8002692:	e079      	b.n	8002788 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	8a5b      	ldrh	r3, [r3, #18]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d104      	bne.n	80026a6 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 800269c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80026a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80026a4:	e009      	b.n	80026ba <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80026a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80026aa:	4613      	mov	r3, r2
 80026ac:	17da      	asrs	r2, r3, #31
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	61fa      	str	r2, [r7, #28]
 80026b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	8a5b      	ldrh	r3, [r3, #18]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d10a      	bne.n	80026d8 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	69d9      	ldr	r1, [r3, #28]
 80026c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026ca:	e9c1 2300 	strd	r2, r3, [r1]
 80026ce:	e9d1 2300 	ldrd	r2, r3, [r1]
 80026d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80026d6:	e042      	b.n	800275e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	8a5b      	ldrh	r3, [r3, #18]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d10c      	bne.n	80026fa <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80026e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4602      	mov	r2, r0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	17da      	asrs	r2, r3, #31
 80026f0:	469a      	mov	sl, r3
 80026f2:	4693      	mov	fp, r2
 80026f4:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80026f8:	e031      	b.n	800275e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	8a5b      	ldrh	r3, [r3, #18]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d10e      	bne.n	8002720 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8002702:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	b202      	sxth	r2, r0
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002712:	b21b      	sxth	r3, r3
 8002714:	17da      	asrs	r2, r3, #31
 8002716:	4698      	mov	r8, r3
 8002718:	4691      	mov	r9, r2
 800271a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 800271e:	e01e      	b.n	800275e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	8a5b      	ldrh	r3, [r3, #18]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10e      	bne.n	8002746 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8002728:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	b242      	sxtb	r2, r0
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	f993 3000 	ldrsb.w	r3, [r3]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	17da      	asrs	r2, r3, #31
 800273c:	461c      	mov	r4, r3
 800273e:	4615      	mov	r5, r2
 8002740:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8002744:	e00b      	b.n	800275e <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <pb_dec_varint+0x210>
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	e000      	b.n	8002756 <pb_dec_varint+0x212>
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <pb_dec_varint+0x250>)
 8002756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002758:	60d3      	str	r3, [r2, #12]
 800275a:	2300      	movs	r3, #0
 800275c:	e014      	b.n	8002788 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800275e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002762:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002766:	4299      	cmp	r1, r3
 8002768:	bf08      	it	eq
 800276a:	4290      	cmpeq	r0, r2
 800276c:	d00b      	beq.n	8002786 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <pb_dec_varint+0x238>
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	e000      	b.n	800277e <pb_dec_varint+0x23a>
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <pb_dec_varint+0x254>)
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	60d3      	str	r3, [r2, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <pb_dec_varint+0x244>

        return true;
 8002786:	2301      	movs	r3, #1
    }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3750      	adds	r7, #80	@ 0x50
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002792:	bf00      	nop
 8002794:	08009878 	.word	0x08009878
 8002798:	0800988c 	.word	0x0800988c

0800279c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7fe fd97 	bl	80012e0 <pb_decode_varint32>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f083 0301 	eor.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <pb_dec_bytes+0x26>
        return false;
 80027be:	2300      	movs	r3, #0
 80027c0:	e055      	b.n	800286e <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c8:	d30b      	bcc.n	80027e2 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <pb_dec_bytes+0x3c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	e000      	b.n	80027da <pb_dec_bytes+0x3e>
 80027d8:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <pb_dec_bytes+0xdc>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	60d3      	str	r3, [r2, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	e045      	b.n	800286e <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3302      	adds	r3, #2
 80027e6:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d20b      	bcs.n	8002808 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <pb_dec_bytes+0x62>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	e000      	b.n	8002800 <pb_dec_bytes+0x64>
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <pb_dec_bytes+0xe0>)
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	2300      	movs	r3, #0
 8002806:	e032      	b.n	800286e <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	7d9b      	ldrb	r3, [r3, #22]
 800280c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002810:	2b80      	cmp	r3, #128	@ 0x80
 8002812:	d10b      	bne.n	800282c <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <pb_dec_bytes+0x86>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	e000      	b.n	8002824 <pb_dec_bytes+0x88>
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <pb_dec_bytes+0xe4>)
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	60d3      	str	r3, [r2, #12]
 8002828:	2300      	movs	r3, #0
 800282a:	e020      	b.n	800286e <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	8a5b      	ldrh	r3, [r3, #18]
 8002830:	461a      	mov	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4293      	cmp	r3, r2
 8002836:	d90b      	bls.n	8002850 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <pb_dec_bytes+0xaa>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	e000      	b.n	8002848 <pb_dec_bytes+0xac>
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <pb_dec_bytes+0xdc>)
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	60d3      	str	r3, [r2, #12]
 800284c:	2300      	movs	r3, #0
 800284e:	e00e      	b.n	800286e <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	3302      	adds	r3, #2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fbc0 	bl	8000fec <pb_read>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	080098a0 	.word	0x080098a0
 800287c:	080098b0 	.word	0x080098b0
 8002880:	080097f8 	.word	0x080097f8

08002884 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fd20 	bl	80012e0 <pb_decode_varint32>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <pb_dec_string+0x2c>
        return false;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e05a      	b.n	8002966 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d10b      	bne.n	80028d0 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <pb_dec_string+0x42>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	e000      	b.n	80028c8 <pb_dec_string+0x44>
 80028c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <pb_dec_string+0xec>)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	60d3      	str	r3, [r2, #12]
 80028cc:	2300      	movs	r3, #0
 80028ce:	e04a      	b.n	8002966 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3301      	adds	r3, #1
 80028d4:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20b      	bcs.n	80028f6 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <pb_dec_string+0x68>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	e000      	b.n	80028ee <pb_dec_string+0x6a>
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <pb_dec_string+0xec>)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	60d3      	str	r3, [r2, #12]
 80028f2:	2300      	movs	r3, #0
 80028f4:	e037      	b.n	8002966 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7d9b      	ldrb	r3, [r3, #22]
 80028fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028fe:	2b80      	cmp	r3, #128	@ 0x80
 8002900:	d10b      	bne.n	800291a <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <pb_dec_string+0x8c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	e000      	b.n	8002912 <pb_dec_string+0x8e>
 8002910:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <pb_dec_string+0xf0>)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	60d3      	str	r3, [r2, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	e025      	b.n	8002966 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	8a5b      	ldrh	r3, [r3, #18]
 800291e:	461a      	mov	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4293      	cmp	r3, r2
 8002924:	d90b      	bls.n	800293e <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <pb_dec_string+0xb0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	e000      	b.n	8002936 <pb_dec_string+0xb2>
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <pb_dec_string+0xf4>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	60d3      	str	r3, [r2, #12]
 800293a:	2300      	movs	r3, #0
 800293c:	e013      	b.n	8002966 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4413      	add	r3, r2
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fb4c 	bl	8000fec <pb_read>
 8002954:	4603      	mov	r3, r0
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <pb_dec_string+0xe0>
        return false;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	080098b0 	.word	0x080098b0
 8002974:	080097f8 	.word	0x080097f8
 8002978:	080098c0 	.word	0x080098c0

0800297c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
    bool status = true;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7fe fe2d 	bl	80015f8 <pb_make_string_substream>
 800299e:	4603      	mov	r3, r0
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <pb_dec_submessage+0x32>
        return false;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e069      	b.n	8002a82 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <pb_dec_submessage+0x48>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	e000      	b.n	80029c6 <pb_dec_submessage+0x4a>
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <pb_dec_submessage+0x110>)
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	60d3      	str	r3, [r2, #12]
 80029ca:	2300      	movs	r3, #0
 80029cc:	e059      	b.n	8002a82 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7d9b      	ldrb	r3, [r3, #22]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d11c      	bne.n	8002a14 <pb_dec_submessage+0x98>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d018      	beq.n	8002a14 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	3b08      	subs	r3, #8
 80029e8:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	3204      	adds	r2, #4
 80029fa:	f107 000c 	add.w	r0, r7, #12
 80029fe:	6839      	ldr	r1, [r7, #0]
 8002a00:	4798      	blx	r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d022      	beq.n	8002a62 <pb_dec_submessage+0xe6>
 8002a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01b      	beq.n	8002a62 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	7d9b      	ldrb	r3, [r3, #22]
 8002a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7d9b      	ldrb	r3, [r3, #22]
 8002a3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d001      	beq.n	8002a4a <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8002a46:	2301      	movs	r3, #1
 8002a48:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	f107 000c 	add.w	r0, r7, #12
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f7ff fafa 	bl	8002050 <pb_decode_inner>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe fdff 	bl	800166c <pb_close_string_substream>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <pb_dec_submessage+0x102>
        return false;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e001      	b.n	8002a82 <pb_dec_submessage+0x106>

    return status;
 8002a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	080098d0 	.word	0x080098d0

08002a90 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe fc1d 	bl	80012e0 <pb_decode_varint32>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e037      	b.n	8002b26 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abc:	d30b      	bcc.n	8002ad6 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <pb_dec_fixed_length_bytes+0x3c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	e000      	b.n	8002ace <pb_dec_fixed_length_bytes+0x3e>
 8002acc:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <pb_dec_fixed_length_bytes+0xa0>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	60d3      	str	r3, [r2, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e027      	b.n	8002b26 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	69d8      	ldr	r0, [r3, #28]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	8a5b      	ldrh	r3, [r3, #18]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f006 fb46 	bl	8009178 <memset>
        return true;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e01a      	b.n	8002b26 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	8a5b      	ldrh	r3, [r3, #18]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d00b      	beq.n	8002b14 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <pb_dec_fixed_length_bytes+0x7a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	e000      	b.n	8002b0c <pb_dec_fixed_length_bytes+0x7c>
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <pb_dec_fixed_length_bytes+0xa4>)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60d3      	str	r3, [r2, #12]
 8002b10:	2300      	movs	r3, #0
 8002b12:	e008      	b.n	8002b26 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	69d9      	ldr	r1, [r3, #28]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	8a5b      	ldrh	r3, [r3, #18]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fa64 	bl	8000fec <pb_read>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	080098a0 	.word	0x080098a0
 8002b34:	080098ec 	.word	0x080098ec

08002b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_MspInit+0x30>)
 8002b40:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002b44:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_MspInit+0x30>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_MspInit+0x30>)
 8002b50:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	58024400 	.word	0x58024400

08002b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0ba      	sub	sp, #232	@ 0xe8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	22c0      	movs	r2, #192	@ 0xc0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f006 faf3 	bl	8009178 <memset>
  if(huart->Instance==USART3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2b      	ldr	r2, [pc, #172]	@ (8002c44 <HAL_UART_MspInit+0xd8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d14e      	bne.n	8002c3a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b9c:	f04f 0202 	mov.w	r2, #2
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fb82 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002bbe:	f7fd ff41 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bc2:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002bc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002bca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002bd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002be2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002be6:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_UART_MspInit+0xdc>)
 8002bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002bfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c18:	2307      	movs	r3, #7
 8002c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c22:	4619      	mov	r1, r3
 8002c24:	4809      	ldr	r0, [pc, #36]	@ (8002c4c <HAL_UART_MspInit+0xe0>)
 8002c26:	f001 f967 	bl	8003ef8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2027      	movs	r0, #39	@ 0x27
 8002c30:	f000 fb51 	bl	80032d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c34:	2027      	movs	r0, #39	@ 0x27
 8002c36:	f000 fb68 	bl	800330a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002c3a:	bf00      	nop
 8002c3c:	37e8      	adds	r7, #232	@ 0xe8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40004800 	.word	0x40004800
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58020c00 	.word	0x58020c00

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <NMI_Handler+0x4>

08002c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <HardFault_Handler+0x4>

08002c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <MemManage_Handler+0x4>

08002c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca6:	f000 f9f7 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <USART3_IRQHandler+0x10>)
 8002cb6:	f004 fa87 	bl	80071c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000088 	.word	0x24000088

08002cc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e00a      	b.n	8002cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cd6:	f3af 8000 	nop.w
 8002cda:	4601      	mov	r1, r0
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	b2ca      	uxtb	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf0      	blt.n	8002cd6 <_read+0x12>
  }

  return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e009      	b.n	8002d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc5f 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf1      	blt.n	8002d10 <_write+0x12>
  }
  return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_close>:

int _close(int file)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_isatty>:

int _isatty(int file)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da8:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <_sbrk+0x5c>)
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <_sbrk+0x60>)
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <_sbrk+0x64>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <_sbrk+0x68>)
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d207      	bcs.n	8002de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd0:	f006 fa20 	bl	8009214 <__errno>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	e009      	b.n	8002df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de0:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de6:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <_sbrk+0x64>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	4a05      	ldr	r2, [pc, #20]	@ (8002e04 <_sbrk+0x64>)
 8002df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	24100000 	.word	0x24100000
 8002e00:	00000400 	.word	0x00000400
 8002e04:	2400011c 	.word	0x2400011c
 8002e08:	24000270 	.word	0x24000270

08002e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e10:	4b3e      	ldr	r3, [pc, #248]	@ (8002f0c <SystemInit+0x100>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	4a3d      	ldr	r2, [pc, #244]	@ (8002f0c <SystemInit+0x100>)
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <SystemInit+0x104>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d807      	bhi.n	8002e3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e2c:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <SystemInit+0x104>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 030f 	bic.w	r3, r3, #15
 8002e34:	4a36      	ldr	r2, [pc, #216]	@ (8002f10 <SystemInit+0x104>)
 8002e36:	f043 0303 	orr.w	r3, r3, #3
 8002e3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e3c:	4b35      	ldr	r3, [pc, #212]	@ (8002f14 <SystemInit+0x108>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a34      	ldr	r2, [pc, #208]	@ (8002f14 <SystemInit+0x108>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e48:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <SystemInit+0x108>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e4e:	4b31      	ldr	r3, [pc, #196]	@ (8002f14 <SystemInit+0x108>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4930      	ldr	r1, [pc, #192]	@ (8002f14 <SystemInit+0x108>)
 8002e54:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <SystemInit+0x10c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <SystemInit+0x104>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e66:	4b2a      	ldr	r3, [pc, #168]	@ (8002f10 <SystemInit+0x104>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 030f 	bic.w	r3, r3, #15
 8002e6e:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <SystemInit+0x104>)
 8002e70:	f043 0303 	orr.w	r3, r3, #3
 8002e74:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002e76:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <SystemInit+0x108>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002e7c:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <SystemInit+0x108>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <SystemInit+0x108>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e88:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <SystemInit+0x108>)
 8002e8a:	4a24      	ldr	r2, [pc, #144]	@ (8002f1c <SystemInit+0x110>)
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e8e:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <SystemInit+0x108>)
 8002e90:	4a23      	ldr	r2, [pc, #140]	@ (8002f20 <SystemInit+0x114>)
 8002e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <SystemInit+0x108>)
 8002e96:	4a23      	ldr	r2, [pc, #140]	@ (8002f24 <SystemInit+0x118>)
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <SystemInit+0x108>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f14 <SystemInit+0x108>)
 8002ea2:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <SystemInit+0x118>)
 8002ea4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <SystemInit+0x108>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002eac:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <SystemInit+0x108>)
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <SystemInit+0x118>)
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <SystemInit+0x108>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <SystemInit+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <SystemInit+0x108>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <SystemInit+0x108>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <SystemInit+0x108>)
 8002ecc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d113      	bne.n	8002f00 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <SystemInit+0x108>)
 8002eda:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ede:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <SystemInit+0x108>)
 8002ee0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ee4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <SystemInit+0x11c>)
 8002eea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002eee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <SystemInit+0x108>)
 8002ef2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ef6:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <SystemInit+0x108>)
 8002ef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002efc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00
 8002f10:	52002000 	.word	0x52002000
 8002f14:	58024400 	.word	0x58024400
 8002f18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f1c:	02020200 	.word	0x02020200
 8002f20:	01ff0000 	.word	0x01ff0000
 8002f24:	01010280 	.word	0x01010280
 8002f28:	52004000 	.word	0x52004000

08002f2c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8002f30:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <ExitRun0Mode+0x2c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <ExitRun0Mode+0x2c>)
 8002f36:	f023 0302 	bic.w	r3, r3, #2
 8002f3a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002f3c:	bf00      	nop
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <ExitRun0Mode+0x2c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f9      	beq.n	8002f3e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	58024800 	.word	0x58024800

08002f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f5c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002f98 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002f60:	f7ff ffe4 	bl	8002f2c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f64:	f7ff ff52 	bl	8002e0c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f6a:	490d      	ldr	r1, [pc, #52]	@ (8002fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f80:	4c0a      	ldr	r4, [pc, #40]	@ (8002fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f006 f947 	bl	8009220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f92:	f7fd fb83 	bl	800069c <main>
  bx  lr
 8002f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f98:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002f9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fa0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002fa4:	0800997c 	.word	0x0800997c
  ldr r2, =_sbss
 8002fa8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002fac:	24000270 	.word	0x24000270

08002fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <ADC_IRQHandler>
	...

08002fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fba:	2003      	movs	r0, #3
 8002fbc:	f000 f980 	bl	80032c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fc0:	f001 ffa6 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HAL_Init+0x68>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	4913      	ldr	r1, [pc, #76]	@ (8003020 <HAL_Init+0x6c>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fde:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <HAL_Init+0x68>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8003020 <HAL_Init+0x6c>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <HAL_Init+0x70>)
 8002ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8003028 <HAL_Init+0x74>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ffe:	2000      	movs	r0, #0
 8003000:	f000 f814 	bl	800302c <HAL_InitTick>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e002      	b.n	8003014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800300e:	f7ff fd93 	bl	8002b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	08009934 	.word	0x08009934
 8003024:	24000004 	.word	0x24000004
 8003028:	24000000 	.word	0x24000000

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003034:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_InitTick+0x60>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e021      	b.n	8003084 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <HAL_InitTick+0x64>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <HAL_InitTick+0x60>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f965 	bl	8003326 <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f000 f92f 	bl	80032d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	@ (8003094 <HAL_InitTick+0x68>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2400000c 	.word	0x2400000c
 8003090:	24000000 	.word	0x24000000
 8003094:	24000008 	.word	0x24000008

08003098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x20>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_IncTick+0x24>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_IncTick+0x24>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2400000c 	.word	0x2400000c
 80030bc:	24000120 	.word	0x24000120

080030c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <HAL_GetTick+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	24000120 	.word	0x24000120

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff ffee 	bl	80030c0 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffde 	bl	80030c0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2400000c 	.word	0x2400000c

08003120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <__NVIC_SetPriorityGrouping+0x40>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800313c:	4013      	ands	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	4313      	orrs	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <__NVIC_SetPriorityGrouping+0x40>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00
 8003164:	05fa0000 	.word	0x05fa0000

08003168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <__NVIC_GetPriorityGrouping+0x18>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 0307 	and.w	r3, r3, #7
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db0b      	blt.n	80031ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4907      	ldr	r1, [pc, #28]	@ (80031bc <__NVIC_EnableIRQ+0x38>)
 800319e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000e100 	.word	0xe000e100

080031c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db0a      	blt.n	80031ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	490c      	ldr	r1, [pc, #48]	@ (800320c <__NVIC_SetPriority+0x4c>)
 80031da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e8:	e00a      	b.n	8003200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4908      	ldr	r1, [pc, #32]	@ (8003210 <__NVIC_SetPriority+0x50>)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	3b04      	subs	r3, #4
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	440b      	add	r3, r1
 80031fe:	761a      	strb	r2, [r3, #24]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000e100 	.word	0xe000e100
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	@ 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f1c3 0307 	rsb	r3, r3, #7
 800322e:	2b04      	cmp	r3, #4
 8003230:	bf28      	it	cs
 8003232:	2304      	movcs	r3, #4
 8003234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3304      	adds	r3, #4
 800323a:	2b06      	cmp	r3, #6
 800323c:	d902      	bls.n	8003244 <NVIC_EncodePriority+0x30>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3b03      	subs	r3, #3
 8003242:	e000      	b.n	8003246 <NVIC_EncodePriority+0x32>
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800325c:	f04f 31ff 	mov.w	r1, #4294967295
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43d9      	mvns	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	4313      	orrs	r3, r2
         );
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	@ 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800328c:	d301      	bcc.n	8003292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003292:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <SysTick_Config+0x40>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329a:	210f      	movs	r1, #15
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f7ff ff8e 	bl	80031c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <SysTick_Config+0x40>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032aa:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <SysTick_Config+0x40>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	e000e010 	.word	0xe000e010

080032c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff29 	bl	8003120 <__NVIC_SetPriorityGrouping>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff40 	bl	8003168 <__NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff90 	bl	8003214 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5f 	bl	80031c0 <__NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff33 	bl	8003184 <__NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffa4 	bl	800327c <SysTick_Config>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003344:	f3bf 8f5f 	dmb	sy
}
 8003348:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <HAL_MPU_Disable+0x28>)
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <HAL_MPU_Disable+0x28>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003354:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003356:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_MPU_Disable+0x2c>)
 8003358:	2200      	movs	r2, #0
 800335a:	605a      	str	r2, [r3, #4]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	e000ed90 	.word	0xe000ed90

08003370 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <HAL_MPU_Enable+0x38>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <HAL_MPU_Enable+0x3c>)
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <HAL_MPU_Enable+0x3c>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800338e:	f3bf 8f4f 	dsb	sy
}
 8003392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003394:	f3bf 8f6f 	isb	sy
}
 8003398:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000ed90 	.word	0xe000ed90
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	785a      	ldrb	r2, [r3, #1]
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_MPU_ConfigRegion+0x7c>)
 80033be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80033c0:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <HAL_MPU_ConfigRegion+0x7c>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_MPU_ConfigRegion+0x7c>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80033cc:	4a17      	ldr	r2, [pc, #92]	@ (800342c <HAL_MPU_ConfigRegion+0x7c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
 80033d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7adb      	ldrb	r3, [r3, #11]
 80033de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7a9b      	ldrb	r3, [r3, #10]
 80033e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7b5b      	ldrb	r3, [r3, #13]
 80033ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7b9b      	ldrb	r3, [r3, #14]
 80033f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7bdb      	ldrb	r3, [r3, #15]
 80033fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7a5b      	ldrb	r3, [r3, #9]
 8003406:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7a1b      	ldrb	r3, [r3, #8]
 800340e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003410:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003418:	4a04      	ldr	r2, [pc, #16]	@ (800342c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800341a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800341c:	6113      	str	r3, [r2, #16]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed90 	.word	0xe000ed90

08003430 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff fe42 	bl	80030c0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e2dc      	b.n	8003a02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	@ 0x80
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e2cd      	b.n	8003a02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a76      	ldr	r2, [pc, #472]	@ (8003644 <HAL_DMA_Abort+0x214>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04a      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a74      	ldr	r2, [pc, #464]	@ (8003648 <HAL_DMA_Abort+0x218>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d045      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a73      	ldr	r2, [pc, #460]	@ (800364c <HAL_DMA_Abort+0x21c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d040      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a71      	ldr	r2, [pc, #452]	@ (8003650 <HAL_DMA_Abort+0x220>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d03b      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a70      	ldr	r2, [pc, #448]	@ (8003654 <HAL_DMA_Abort+0x224>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d036      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a6e      	ldr	r2, [pc, #440]	@ (8003658 <HAL_DMA_Abort+0x228>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d031      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6d      	ldr	r2, [pc, #436]	@ (800365c <HAL_DMA_Abort+0x22c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d02c      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003660 <HAL_DMA_Abort+0x230>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d027      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003664 <HAL_DMA_Abort+0x234>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a68      	ldr	r2, [pc, #416]	@ (8003668 <HAL_DMA_Abort+0x238>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01d      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a67      	ldr	r2, [pc, #412]	@ (800366c <HAL_DMA_Abort+0x23c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a65      	ldr	r2, [pc, #404]	@ (8003670 <HAL_DMA_Abort+0x240>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a64      	ldr	r2, [pc, #400]	@ (8003674 <HAL_DMA_Abort+0x244>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a62      	ldr	r2, [pc, #392]	@ (8003678 <HAL_DMA_Abort+0x248>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a61      	ldr	r2, [pc, #388]	@ (800367c <HAL_DMA_Abort+0x24c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_Abort+0xd6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5f      	ldr	r2, [pc, #380]	@ (8003680 <HAL_DMA_Abort+0x250>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_DMA_Abort+0xda>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_DMA_Abort+0xdc>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 021e 	bic.w	r2, r2, #30
 800351e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800352e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e00a      	b.n	800354e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020e 	bic.w	r2, r2, #14
 8003546:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a3c      	ldr	r2, [pc, #240]	@ (8003644 <HAL_DMA_Abort+0x214>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d072      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3a      	ldr	r2, [pc, #232]	@ (8003648 <HAL_DMA_Abort+0x218>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d06d      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a39      	ldr	r2, [pc, #228]	@ (800364c <HAL_DMA_Abort+0x21c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d068      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a37      	ldr	r2, [pc, #220]	@ (8003650 <HAL_DMA_Abort+0x220>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d063      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a36      	ldr	r2, [pc, #216]	@ (8003654 <HAL_DMA_Abort+0x224>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a34      	ldr	r2, [pc, #208]	@ (8003658 <HAL_DMA_Abort+0x228>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d059      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a33      	ldr	r2, [pc, #204]	@ (800365c <HAL_DMA_Abort+0x22c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d054      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a31      	ldr	r2, [pc, #196]	@ (8003660 <HAL_DMA_Abort+0x230>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d04f      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a30      	ldr	r2, [pc, #192]	@ (8003664 <HAL_DMA_Abort+0x234>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <HAL_DMA_Abort+0x238>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_DMA_Abort+0x23c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <HAL_DMA_Abort+0x240>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003674 <HAL_DMA_Abort+0x244>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_DMA_Abort+0x248>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_DMA_Abort+0x24c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a25      	ldr	r2, [pc, #148]	@ (8003680 <HAL_DMA_Abort+0x250>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <HAL_DMA_Abort+0x254>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <HAL_DMA_Abort+0x258>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	@ (800368c <HAL_DMA_Abort+0x25c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <HAL_DMA_Abort+0x260>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_DMA_Abort+0x264>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <HAL_DMA_Abort+0x268>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <HAL_DMA_Abort+0x26c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort+0x20e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_DMA_Abort+0x270>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d132      	bne.n	80036a4 <HAL_DMA_Abort+0x274>
 800363e:	2301      	movs	r3, #1
 8003640:	e031      	b.n	80036a6 <HAL_DMA_Abort+0x276>
 8003642:	bf00      	nop
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
 8003684:	58025408 	.word	0x58025408
 8003688:	5802541c 	.word	0x5802541c
 800368c:	58025430 	.word	0x58025430
 8003690:	58025444 	.word	0x58025444
 8003694:	58025458 	.word	0x58025458
 8003698:	5802546c 	.word	0x5802546c
 800369c:	58025480 	.word	0x58025480
 80036a0:	58025494 	.word	0x58025494
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6d      	ldr	r2, [pc, #436]	@ (8003874 <HAL_DMA_Abort+0x444>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d04a      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003878 <HAL_DMA_Abort+0x448>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d045      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6a      	ldr	r2, [pc, #424]	@ (800387c <HAL_DMA_Abort+0x44c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d040      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a68      	ldr	r2, [pc, #416]	@ (8003880 <HAL_DMA_Abort+0x450>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d03b      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a67      	ldr	r2, [pc, #412]	@ (8003884 <HAL_DMA_Abort+0x454>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d036      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a65      	ldr	r2, [pc, #404]	@ (8003888 <HAL_DMA_Abort+0x458>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d031      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a64      	ldr	r2, [pc, #400]	@ (800388c <HAL_DMA_Abort+0x45c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d02c      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a62      	ldr	r2, [pc, #392]	@ (8003890 <HAL_DMA_Abort+0x460>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d027      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a61      	ldr	r2, [pc, #388]	@ (8003894 <HAL_DMA_Abort+0x464>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d022      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5f      	ldr	r2, [pc, #380]	@ (8003898 <HAL_DMA_Abort+0x468>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01d      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5e      	ldr	r2, [pc, #376]	@ (800389c <HAL_DMA_Abort+0x46c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d018      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5c      	ldr	r2, [pc, #368]	@ (80038a0 <HAL_DMA_Abort+0x470>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_DMA_Abort+0x474>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a59      	ldr	r2, [pc, #356]	@ (80038a8 <HAL_DMA_Abort+0x478>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <HAL_DMA_Abort+0x47c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_DMA_Abort+0x32a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a56      	ldr	r2, [pc, #344]	@ (80038b0 <HAL_DMA_Abort+0x480>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <HAL_DMA_Abort+0x33c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e007      	b.n	800377c <HAL_DMA_Abort+0x34c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800377c:	e013      	b.n	80037a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377e:	f7ff fc9f 	bl	80030c0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b05      	cmp	r3, #5
 800378a:	d90c      	bls.n	80037a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e12d      	b.n	8003a02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <HAL_DMA_Abort+0x444>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d04a      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <HAL_DMA_Abort+0x448>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d045      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	@ (800387c <HAL_DMA_Abort+0x44c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d040      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <HAL_DMA_Abort+0x450>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d03b      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <HAL_DMA_Abort+0x454>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d036      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a27      	ldr	r2, [pc, #156]	@ (8003888 <HAL_DMA_Abort+0x458>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d031      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a26      	ldr	r2, [pc, #152]	@ (800388c <HAL_DMA_Abort+0x45c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d02c      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a24      	ldr	r2, [pc, #144]	@ (8003890 <HAL_DMA_Abort+0x460>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d027      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a23      	ldr	r2, [pc, #140]	@ (8003894 <HAL_DMA_Abort+0x464>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <HAL_DMA_Abort+0x468>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a20      	ldr	r2, [pc, #128]	@ (800389c <HAL_DMA_Abort+0x46c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1e      	ldr	r2, [pc, #120]	@ (80038a0 <HAL_DMA_Abort+0x470>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1d      	ldr	r2, [pc, #116]	@ (80038a4 <HAL_DMA_Abort+0x474>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_DMA_Abort+0x478>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1a      	ldr	r2, [pc, #104]	@ (80038ac <HAL_DMA_Abort+0x47c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_DMA_Abort+0x422>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_DMA_Abort+0x480>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_DMA_Abort+0x426>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_DMA_Abort+0x428>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d02b      	beq.n	80038b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	223f      	movs	r2, #63	@ 0x3f
 800386c:	409a      	lsls	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	e02a      	b.n	80038ca <HAL_DMA_Abort+0x49a>
 8003874:	40020010 	.word	0x40020010
 8003878:	40020028 	.word	0x40020028
 800387c:	40020040 	.word	0x40020040
 8003880:	40020058 	.word	0x40020058
 8003884:	40020070 	.word	0x40020070
 8003888:	40020088 	.word	0x40020088
 800388c:	400200a0 	.word	0x400200a0
 8003890:	400200b8 	.word	0x400200b8
 8003894:	40020410 	.word	0x40020410
 8003898:	40020428 	.word	0x40020428
 800389c:	40020440 	.word	0x40020440
 80038a0:	40020458 	.word	0x40020458
 80038a4:	40020470 	.word	0x40020470
 80038a8:	40020488 	.word	0x40020488
 80038ac:	400204a0 	.word	0x400204a0
 80038b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a4f      	ldr	r2, [pc, #316]	@ (8003a0c <HAL_DMA_Abort+0x5dc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d072      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a10 <HAL_DMA_Abort+0x5e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d06d      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003a14 <HAL_DMA_Abort+0x5e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d068      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003a18 <HAL_DMA_Abort+0x5e8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d063      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a49      	ldr	r2, [pc, #292]	@ (8003a1c <HAL_DMA_Abort+0x5ec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d05e      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a47      	ldr	r2, [pc, #284]	@ (8003a20 <HAL_DMA_Abort+0x5f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d059      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a46      	ldr	r2, [pc, #280]	@ (8003a24 <HAL_DMA_Abort+0x5f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d054      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a44      	ldr	r2, [pc, #272]	@ (8003a28 <HAL_DMA_Abort+0x5f8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04f      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a43      	ldr	r2, [pc, #268]	@ (8003a2c <HAL_DMA_Abort+0x5fc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04a      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a41      	ldr	r2, [pc, #260]	@ (8003a30 <HAL_DMA_Abort+0x600>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d045      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a40      	ldr	r2, [pc, #256]	@ (8003a34 <HAL_DMA_Abort+0x604>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d040      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a38 <HAL_DMA_Abort+0x608>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d03b      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3d      	ldr	r2, [pc, #244]	@ (8003a3c <HAL_DMA_Abort+0x60c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d036      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3b      	ldr	r2, [pc, #236]	@ (8003a40 <HAL_DMA_Abort+0x610>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a44 <HAL_DMA_Abort+0x614>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d02c      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a38      	ldr	r2, [pc, #224]	@ (8003a48 <HAL_DMA_Abort+0x618>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a37      	ldr	r2, [pc, #220]	@ (8003a4c <HAL_DMA_Abort+0x61c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a35      	ldr	r2, [pc, #212]	@ (8003a50 <HAL_DMA_Abort+0x620>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a34      	ldr	r2, [pc, #208]	@ (8003a54 <HAL_DMA_Abort+0x624>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <HAL_DMA_Abort+0x628>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <HAL_DMA_Abort+0x62c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <HAL_DMA_Abort+0x630>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_DMA_Abort+0x634>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_Abort+0x58a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <HAL_DMA_Abort+0x638>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Abort+0x58e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_DMA_Abort+0x590>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40020010 	.word	0x40020010
 8003a10:	40020028 	.word	0x40020028
 8003a14:	40020040 	.word	0x40020040
 8003a18:	40020058 	.word	0x40020058
 8003a1c:	40020070 	.word	0x40020070
 8003a20:	40020088 	.word	0x40020088
 8003a24:	400200a0 	.word	0x400200a0
 8003a28:	400200b8 	.word	0x400200b8
 8003a2c:	40020410 	.word	0x40020410
 8003a30:	40020428 	.word	0x40020428
 8003a34:	40020440 	.word	0x40020440
 8003a38:	40020458 	.word	0x40020458
 8003a3c:	40020470 	.word	0x40020470
 8003a40:	40020488 	.word	0x40020488
 8003a44:	400204a0 	.word	0x400204a0
 8003a48:	400204b8 	.word	0x400204b8
 8003a4c:	58025408 	.word	0x58025408
 8003a50:	5802541c 	.word	0x5802541c
 8003a54:	58025430 	.word	0x58025430
 8003a58:	58025444 	.word	0x58025444
 8003a5c:	58025458 	.word	0x58025458
 8003a60:	5802546c 	.word	0x5802546c
 8003a64:	58025480 	.word	0x58025480
 8003a68:	58025494 	.word	0x58025494

08003a6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e237      	b.n	8003eee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e22c      	b.n	8003eee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5c      	ldr	r2, [pc, #368]	@ (8003c0c <HAL_DMA_Abort_IT+0x1a0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04a      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c10 <HAL_DMA_Abort_IT+0x1a4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d045      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a59      	ldr	r2, [pc, #356]	@ (8003c14 <HAL_DMA_Abort_IT+0x1a8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d040      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a58      	ldr	r2, [pc, #352]	@ (8003c18 <HAL_DMA_Abort_IT+0x1ac>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d03b      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a56      	ldr	r2, [pc, #344]	@ (8003c1c <HAL_DMA_Abort_IT+0x1b0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d036      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a55      	ldr	r2, [pc, #340]	@ (8003c20 <HAL_DMA_Abort_IT+0x1b4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d031      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a53      	ldr	r2, [pc, #332]	@ (8003c24 <HAL_DMA_Abort_IT+0x1b8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d02c      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_DMA_Abort_IT+0x1bc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d027      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a50      	ldr	r2, [pc, #320]	@ (8003c2c <HAL_DMA_Abort_IT+0x1c0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d022      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c30 <HAL_DMA_Abort_IT+0x1c4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d01d      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_DMA_Abort_IT+0x1c8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d018      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a4c      	ldr	r2, [pc, #304]	@ (8003c38 <HAL_DMA_Abort_IT+0x1cc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a4a      	ldr	r2, [pc, #296]	@ (8003c3c <HAL_DMA_Abort_IT+0x1d0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00e      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a49      	ldr	r2, [pc, #292]	@ (8003c40 <HAL_DMA_Abort_IT+0x1d4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a47      	ldr	r2, [pc, #284]	@ (8003c44 <HAL_DMA_Abort_IT+0x1d8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_Abort_IT+0xc8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a46      	ldr	r2, [pc, #280]	@ (8003c48 <HAL_DMA_Abort_IT+0x1dc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_DMA_Abort_IT+0xcc>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_DMA_Abort_IT+0xce>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8086 	beq.w	8003c4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2204      	movs	r2, #4
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c0c <HAL_DMA_Abort_IT+0x1a0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04a      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <HAL_DMA_Abort_IT+0x1a4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d045      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	@ (8003c14 <HAL_DMA_Abort_IT+0x1a8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d040      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <HAL_DMA_Abort_IT+0x1ac>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03b      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a29      	ldr	r2, [pc, #164]	@ (8003c1c <HAL_DMA_Abort_IT+0x1b0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d036      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a28      	ldr	r2, [pc, #160]	@ (8003c20 <HAL_DMA_Abort_IT+0x1b4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a26      	ldr	r2, [pc, #152]	@ (8003c24 <HAL_DMA_Abort_IT+0x1b8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02c      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <HAL_DMA_Abort_IT+0x1bc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d027      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a23      	ldr	r2, [pc, #140]	@ (8003c2c <HAL_DMA_Abort_IT+0x1c0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_DMA_Abort_IT+0x1c4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	@ (8003c34 <HAL_DMA_Abort_IT+0x1c8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <HAL_DMA_Abort_IT+0x1cc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <HAL_DMA_Abort_IT+0x1d0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <HAL_DMA_Abort_IT+0x1d4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c44 <HAL_DMA_Abort_IT+0x1d8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x17c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <HAL_DMA_Abort_IT+0x1dc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <HAL_DMA_Abort_IT+0x18e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e178      	b.n	8003eec <HAL_DMA_Abort_IT+0x480>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e16f      	b.n	8003eec <HAL_DMA_Abort_IT+0x480>
 8003c0c:	40020010 	.word	0x40020010
 8003c10:	40020028 	.word	0x40020028
 8003c14:	40020040 	.word	0x40020040
 8003c18:	40020058 	.word	0x40020058
 8003c1c:	40020070 	.word	0x40020070
 8003c20:	40020088 	.word	0x40020088
 8003c24:	400200a0 	.word	0x400200a0
 8003c28:	400200b8 	.word	0x400200b8
 8003c2c:	40020410 	.word	0x40020410
 8003c30:	40020428 	.word	0x40020428
 8003c34:	40020440 	.word	0x40020440
 8003c38:	40020458 	.word	0x40020458
 8003c3c:	40020470 	.word	0x40020470
 8003c40:	40020488 	.word	0x40020488
 8003c44:	400204a0 	.word	0x400204a0
 8003c48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 020e 	bic.w	r2, r2, #14
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6c      	ldr	r2, [pc, #432]	@ (8003e14 <HAL_DMA_Abort_IT+0x3a8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003e18 <HAL_DMA_Abort_IT+0x3ac>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a69      	ldr	r2, [pc, #420]	@ (8003e1c <HAL_DMA_Abort_IT+0x3b0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a68      	ldr	r2, [pc, #416]	@ (8003e20 <HAL_DMA_Abort_IT+0x3b4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a66      	ldr	r2, [pc, #408]	@ (8003e24 <HAL_DMA_Abort_IT+0x3b8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a65      	ldr	r2, [pc, #404]	@ (8003e28 <HAL_DMA_Abort_IT+0x3bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a63      	ldr	r2, [pc, #396]	@ (8003e2c <HAL_DMA_Abort_IT+0x3c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a62      	ldr	r2, [pc, #392]	@ (8003e30 <HAL_DMA_Abort_IT+0x3c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a60      	ldr	r2, [pc, #384]	@ (8003e34 <HAL_DMA_Abort_IT+0x3c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5f      	ldr	r2, [pc, #380]	@ (8003e38 <HAL_DMA_Abort_IT+0x3cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e3c <HAL_DMA_Abort_IT+0x3d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5c      	ldr	r2, [pc, #368]	@ (8003e40 <HAL_DMA_Abort_IT+0x3d4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e44 <HAL_DMA_Abort_IT+0x3d8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a59      	ldr	r2, [pc, #356]	@ (8003e48 <HAL_DMA_Abort_IT+0x3dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a57      	ldr	r2, [pc, #348]	@ (8003e4c <HAL_DMA_Abort_IT+0x3e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x290>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a56      	ldr	r2, [pc, #344]	@ (8003e50 <HAL_DMA_Abort_IT+0x3e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_Abort_IT+0x2a2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_DMA_Abort_IT+0x2b2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3c      	ldr	r2, [pc, #240]	@ (8003e14 <HAL_DMA_Abort_IT+0x3a8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d072      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e18 <HAL_DMA_Abort_IT+0x3ac>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d06d      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a39      	ldr	r2, [pc, #228]	@ (8003e1c <HAL_DMA_Abort_IT+0x3b0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d068      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a37      	ldr	r2, [pc, #220]	@ (8003e20 <HAL_DMA_Abort_IT+0x3b4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d063      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a36      	ldr	r2, [pc, #216]	@ (8003e24 <HAL_DMA_Abort_IT+0x3b8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d05e      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <HAL_DMA_Abort_IT+0x3bc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d059      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a33      	ldr	r2, [pc, #204]	@ (8003e2c <HAL_DMA_Abort_IT+0x3c0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d054      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a31      	ldr	r2, [pc, #196]	@ (8003e30 <HAL_DMA_Abort_IT+0x3c4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04f      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a30      	ldr	r2, [pc, #192]	@ (8003e34 <HAL_DMA_Abort_IT+0x3c8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d04a      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e38 <HAL_DMA_Abort_IT+0x3cc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d045      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2d      	ldr	r2, [pc, #180]	@ (8003e3c <HAL_DMA_Abort_IT+0x3d0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d040      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <HAL_DMA_Abort_IT+0x3d4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d03b      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e44 <HAL_DMA_Abort_IT+0x3d8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d036      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a28      	ldr	r2, [pc, #160]	@ (8003e48 <HAL_DMA_Abort_IT+0x3dc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d031      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a27      	ldr	r2, [pc, #156]	@ (8003e4c <HAL_DMA_Abort_IT+0x3e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d02c      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a25      	ldr	r2, [pc, #148]	@ (8003e50 <HAL_DMA_Abort_IT+0x3e4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d027      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a24      	ldr	r2, [pc, #144]	@ (8003e54 <HAL_DMA_Abort_IT+0x3e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	@ (8003e58 <HAL_DMA_Abort_IT+0x3ec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a21      	ldr	r2, [pc, #132]	@ (8003e5c <HAL_DMA_Abort_IT+0x3f0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e60 <HAL_DMA_Abort_IT+0x3f4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1e      	ldr	r2, [pc, #120]	@ (8003e64 <HAL_DMA_Abort_IT+0x3f8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e68 <HAL_DMA_Abort_IT+0x3fc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <HAL_DMA_Abort_IT+0x400>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x3a2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <HAL_DMA_Abort_IT+0x404>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d132      	bne.n	8003e74 <HAL_DMA_Abort_IT+0x408>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e031      	b.n	8003e76 <HAL_DMA_Abort_IT+0x40a>
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494
 8003e74:	2300      	movs	r3, #0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d028      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2201      	movs	r2, #1
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ea8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	@ 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f06:	4b89      	ldr	r3, [pc, #548]	@ (800412c <HAL_GPIO_Init+0x234>)
 8003f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f0a:	e194      	b.n	8004236 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8186 	beq.w	8004230 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d005      	beq.n	8003f3c <HAL_GPIO_Init+0x44>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d130      	bne.n	8003f9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f72:	2201      	movs	r2, #1
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 0201 	and.w	r2, r3, #1
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d017      	beq.n	8003fda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d123      	bne.n	800402e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	08da      	lsrs	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3208      	adds	r2, #8
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80e0 	beq.w	8004230 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004070:	4b2f      	ldr	r3, [pc, #188]	@ (8004130 <HAL_GPIO_Init+0x238>)
 8004072:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004076:	4a2e      	ldr	r2, [pc, #184]	@ (8004130 <HAL_GPIO_Init+0x238>)
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_GPIO_Init+0x238>)
 8004082:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408e:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <HAL_GPIO_Init+0x23c>)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a20      	ldr	r2, [pc, #128]	@ (8004138 <HAL_GPIO_Init+0x240>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d052      	beq.n	8004160 <HAL_GPIO_Init+0x268>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_GPIO_Init+0x244>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d031      	beq.n	8004126 <HAL_GPIO_Init+0x22e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <HAL_GPIO_Init+0x248>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <HAL_GPIO_Init+0x22a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <HAL_GPIO_Init+0x24c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d025      	beq.n	800411e <HAL_GPIO_Init+0x226>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004148 <HAL_GPIO_Init+0x250>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <HAL_GPIO_Init+0x222>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	@ (800414c <HAL_GPIO_Init+0x254>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_Init+0x21e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_GPIO_Init+0x258>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_GPIO_Init+0x21a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_GPIO_Init+0x25c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00d      	beq.n	800410e <HAL_GPIO_Init+0x216>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <HAL_GPIO_Init+0x260>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_GPIO_Init+0x212>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a17      	ldr	r2, [pc, #92]	@ (800415c <HAL_GPIO_Init+0x264>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_GPIO_Init+0x20e>
 8004102:	2309      	movs	r3, #9
 8004104:	e02d      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 8004106:	230a      	movs	r3, #10
 8004108:	e02b      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 800410a:	2308      	movs	r3, #8
 800410c:	e029      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 800410e:	2307      	movs	r3, #7
 8004110:	e027      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 8004112:	2306      	movs	r3, #6
 8004114:	e025      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 8004116:	2305      	movs	r3, #5
 8004118:	e023      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 800411a:	2304      	movs	r3, #4
 800411c:	e021      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 800411e:	2303      	movs	r3, #3
 8004120:	e01f      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 8004122:	2302      	movs	r3, #2
 8004124:	e01d      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 8004126:	2301      	movs	r3, #1
 8004128:	e01b      	b.n	8004162 <HAL_GPIO_Init+0x26a>
 800412a:	bf00      	nop
 800412c:	58000080 	.word	0x58000080
 8004130:	58024400 	.word	0x58024400
 8004134:	58000400 	.word	0x58000400
 8004138:	58020000 	.word	0x58020000
 800413c:	58020400 	.word	0x58020400
 8004140:	58020800 	.word	0x58020800
 8004144:	58020c00 	.word	0x58020c00
 8004148:	58021000 	.word	0x58021000
 800414c:	58021400 	.word	0x58021400
 8004150:	58021800 	.word	0x58021800
 8004154:	58021c00 	.word	0x58021c00
 8004158:	58022000 	.word	0x58022000
 800415c:	58022400 	.word	0x58022400
 8004160:	2300      	movs	r3, #0
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f002 0203 	and.w	r2, r2, #3
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4093      	lsls	r3, r2
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004172:	4938      	ldr	r1, [pc, #224]	@ (8004254 <HAL_GPIO_Init+0x35c>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f ae63 	bne.w	8003f0c <HAL_GPIO_Init+0x14>
  }
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	3724      	adds	r7, #36	@ 0x24
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	58000400 	.word	0x58000400

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004274:	e003      	b.n	800427e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004294:	4b29      	ldr	r3, [pc, #164]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	2b06      	cmp	r3, #6
 800429e:	d00a      	beq.n	80042b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042a0:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e040      	b.n	8004334 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e03e      	b.n	8004334 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80042be:	491f      	ldr	r1, [pc, #124]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042c6:	f7fe fefb 	bl	80030c0 <HAL_GetTick>
 80042ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042cc:	e009      	b.n	80042e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042ce:	f7fe fef7 	bl	80030c0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042dc:	d901      	bls.n	80042e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e028      	b.n	8004334 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042e2:	4b16      	ldr	r3, [pc, #88]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ee:	d1ee      	bne.n	80042ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b1e      	cmp	r3, #30
 80042f4:	d008      	beq.n	8004308 <HAL_PWREx_ConfigSupply+0x7c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80042fa:	d005      	beq.n	8004308 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b1d      	cmp	r3, #29
 8004300:	d002      	beq.n	8004308 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b2d      	cmp	r3, #45	@ 0x2d
 8004306:	d114      	bne.n	8004332 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004308:	f7fe feda 	bl	80030c0 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800430e:	e009      	b.n	8004324 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004310:	f7fe fed6 	bl	80030c0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800431e:	d901      	bls.n	8004324 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e007      	b.n	8004334 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_PWREx_ConfigSupply+0xb0>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004330:	d1ee      	bne.n	8004310 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	58024800 	.word	0x58024800

08004340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	@ 0x30
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f000 bc1f 	b.w	8004b92 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80b3 	beq.w	80044c8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b95      	ldr	r3, [pc, #596]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800436c:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	2b10      	cmp	r3, #16
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x48>
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	2b18      	cmp	r3, #24
 800437c:	d112      	bne.n	80043a4 <HAL_RCC_OscConfig+0x64>
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d10d      	bne.n	80043a4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b8b      	ldr	r3, [pc, #556]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8098 	beq.w	80044c6 <HAL_RCC_OscConfig+0x186>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 8093 	bne.w	80044c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e3f6      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x7c>
 80043ae:	4b82      	ldr	r3, [pc, #520]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a81      	ldr	r2, [pc, #516]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e058      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d112      	bne.n	80043ea <HAL_RCC_OscConfig+0xaa>
 80043c4:	4b7c      	ldr	r3, [pc, #496]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a7b      	ldr	r2, [pc, #492]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b79      	ldr	r3, [pc, #484]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a78      	ldr	r2, [pc, #480]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043d6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b76      	ldr	r3, [pc, #472]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a75      	ldr	r2, [pc, #468]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e041      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f2:	d112      	bne.n	800441a <HAL_RCC_OscConfig+0xda>
 80043f4:	4b70      	ldr	r3, [pc, #448]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6f      	ldr	r2, [pc, #444]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80043fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b6d      	ldr	r3, [pc, #436]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a6c      	ldr	r2, [pc, #432]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004406:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a69      	ldr	r2, [pc, #420]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e029      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004422:	d112      	bne.n	800444a <HAL_RCC_OscConfig+0x10a>
 8004424:	4b64      	ldr	r3, [pc, #400]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a63      	ldr	r2, [pc, #396]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800442a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a60      	ldr	r2, [pc, #384]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b5e      	ldr	r3, [pc, #376]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5d      	ldr	r2, [pc, #372]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	e011      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
 800444a:	4b5b      	ldr	r3, [pc, #364]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5a      	ldr	r2, [pc, #360]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b58      	ldr	r3, [pc, #352]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a57      	ldr	r2, [pc, #348]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800445c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b55      	ldr	r3, [pc, #340]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a54      	ldr	r2, [pc, #336]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004468:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800446c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d013      	beq.n	800449e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fe fe23 	bl	80030c0 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447e:	f7fe fe1f 	bl	80030c0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	@ 0x64
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e380      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004490:	4b49      	ldr	r3, [pc, #292]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x13e>
 800449c:	e014      	b.n	80044c8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fe0f 	bl	80030c0 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a6:	f7fe fe0b 	bl	80030c0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	@ 0x64
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e36c      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044b8:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x166>
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 808c 	beq.w	80045ee <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b38      	ldr	r3, [pc, #224]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e0:	4b35      	ldr	r3, [pc, #212]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_RCC_OscConfig+0x1bc>
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b18      	cmp	r3, #24
 80044f0:	d137      	bne.n	8004562 <HAL_RCC_OscConfig+0x222>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d132      	bne.n	8004562 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044fc:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x1d4>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e33e      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004514:	4b28      	ldr	r3, [pc, #160]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 0219 	bic.w	r2, r3, #25
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4925      	ldr	r1, [pc, #148]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fe fdcb 	bl	80030c0 <HAL_GetTick>
 800452a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7fe fdc7 	bl	80030c0 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e328      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004540:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	4917      	ldr	r1, [pc, #92]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004560:	e045      	b.n	80045ee <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d028      	beq.n	80045bc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0219 	bic.w	r2, r3, #25
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	4910      	ldr	r1, [pc, #64]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fe fda0 	bl	80030c0 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fe fd9c 	bl	80030c0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e2fd      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	4901      	ldr	r1, [pc, #4]	@ (80045b8 <HAL_RCC_OscConfig+0x278>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	e01a      	b.n	80045ee <HAL_RCC_OscConfig+0x2ae>
 80045b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045bc:	4b97      	ldr	r3, [pc, #604]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a96      	ldr	r2, [pc, #600]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fd7a 	bl	80030c0 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fd76 	bl	80030c0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e2d7      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e2:	4b8e      	ldr	r3, [pc, #568]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d06a      	beq.n	80046d0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fa:	4b88      	ldr	r3, [pc, #544]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004602:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004604:	4b85      	ldr	r3, [pc, #532]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d007      	beq.n	8004620 <HAL_RCC_OscConfig+0x2e0>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b18      	cmp	r3, #24
 8004614:	d11b      	bne.n	800464e <HAL_RCC_OscConfig+0x30e>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d116      	bne.n	800464e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004620:	4b7e      	ldr	r3, [pc, #504]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x2f8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b80      	cmp	r3, #128	@ 0x80
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e2ac      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004638:	4b78      	ldr	r3, [pc, #480]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4975      	ldr	r1, [pc, #468]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800464c:	e040      	b.n	80046d0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d023      	beq.n	800469e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004656:	4b71      	ldr	r3, [pc, #452]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a70      	ldr	r2, [pc, #448]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800465c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fe fd2d 	bl	80030c0 <HAL_GetTick>
 8004666:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800466a:	f7fe fd29 	bl	80030c0 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e28a      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800467c:	4b67      	ldr	r3, [pc, #412]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004688:	4b64      	ldr	r3, [pc, #400]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	4961      	ldr	r1, [pc, #388]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	60cb      	str	r3, [r1, #12]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800469e:	4b5f      	ldr	r3, [pc, #380]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5e      	ldr	r2, [pc, #376]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fe fd09 	bl	80030c0 <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046b2:	f7fe fd05 	bl	80030c0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e266      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d036      	beq.n	800474a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d019      	beq.n	8004718 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e4:	4b4d      	ldr	r3, [pc, #308]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e8:	4a4c      	ldr	r2, [pc, #304]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe fce6 	bl	80030c0 <HAL_GetTick>
 80046f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fe fce2 	bl	80030c0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e243      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800470a:	4b44      	ldr	r3, [pc, #272]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x3b8>
 8004716:	e018      	b.n	800474a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b40      	ldr	r3, [pc, #256]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fe fccc 	bl	80030c0 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fe fcc8 	bl	80030c0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e229      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800473e:	4b37      	ldr	r3, [pc, #220]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d036      	beq.n	80047c4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d019      	beq.n	8004792 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800475e:	4b2f      	ldr	r3, [pc, #188]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2e      	ldr	r2, [pc, #184]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004764:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004768:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800476a:	f7fe fca9 	bl	80030c0 <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004772:	f7fe fca5 	bl	80030c0 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e206      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x432>
 8004790:	e018      	b.n	80047c4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004792:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a21      	ldr	r2, [pc, #132]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800479c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800479e:	f7fe fc8f 	bl	80030c0 <HAL_GetTick>
 80047a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a6:	f7fe fc8b 	bl	80030c0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1ec      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047b8:	4b18      	ldr	r3, [pc, #96]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80af 	beq.w	8004930 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047d2:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <HAL_RCC_OscConfig+0x4e0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a12      	ldr	r2, [pc, #72]	@ (8004820 <HAL_RCC_OscConfig+0x4e0>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047de:	f7fe fc6f 	bl	80030c0 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fe fc6b 	bl	80030c0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	@ 0x64
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e1cc      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_RCC_OscConfig+0x4e0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10b      	bne.n	8004824 <HAL_RCC_OscConfig+0x4e4>
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a02      	ldr	r2, [pc, #8]	@ (800481c <HAL_RCC_OscConfig+0x4dc>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	e05b      	b.n	80048d2 <HAL_RCC_OscConfig+0x592>
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
 8004820:	58024800 	.word	0x58024800
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d112      	bne.n	8004852 <HAL_RCC_OscConfig+0x512>
 800482c:	4b9d      	ldr	r3, [pc, #628]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a9c      	ldr	r2, [pc, #624]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
 8004838:	4b9a      	ldr	r3, [pc, #616]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a99      	ldr	r2, [pc, #612]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800483e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
 8004844:	4b97      	ldr	r3, [pc, #604]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	4a96      	ldr	r2, [pc, #600]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004850:	e03f      	b.n	80048d2 <HAL_RCC_OscConfig+0x592>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b05      	cmp	r3, #5
 8004858:	d112      	bne.n	8004880 <HAL_RCC_OscConfig+0x540>
 800485a:	4b92      	ldr	r3, [pc, #584]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	4a91      	ldr	r2, [pc, #580]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	6713      	str	r3, [r2, #112]	@ 0x70
 8004866:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	4a8e      	ldr	r2, [pc, #568]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800486c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004870:	6713      	str	r3, [r2, #112]	@ 0x70
 8004872:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	4a8b      	ldr	r2, [pc, #556]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6713      	str	r3, [r2, #112]	@ 0x70
 800487e:	e028      	b.n	80048d2 <HAL_RCC_OscConfig+0x592>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b85      	cmp	r3, #133	@ 0x85
 8004886:	d112      	bne.n	80048ae <HAL_RCC_OscConfig+0x56e>
 8004888:	4b86      	ldr	r3, [pc, #536]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	4a85      	ldr	r2, [pc, #532]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	6713      	str	r3, [r2, #112]	@ 0x70
 8004894:	4b83      	ldr	r3, [pc, #524]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a82      	ldr	r2, [pc, #520]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800489a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a0:	4b80      	ldr	r3, [pc, #512]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	4a7f      	ldr	r2, [pc, #508]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ac:	e011      	b.n	80048d2 <HAL_RCC_OscConfig+0x592>
 80048ae:	4b7d      	ldr	r3, [pc, #500]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a7c      	ldr	r2, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	4a79      	ldr	r2, [pc, #484]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c6:	4b77      	ldr	r3, [pc, #476]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	4a76      	ldr	r2, [pc, #472]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fe fbf1 	bl	80030c0 <HAL_GetTick>
 80048de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe fbed 	bl	80030c0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e14c      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f8:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0ee      	beq.n	80048e2 <HAL_RCC_OscConfig+0x5a2>
 8004904:	e014      	b.n	8004930 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fe fbdb 	bl	80030c0 <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fe fbd7 	bl	80030c0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e136      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004924:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ee      	bne.n	800490e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 812b 	beq.w	8004b90 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800493a:	4b5a      	ldr	r3, [pc, #360]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004942:	2b18      	cmp	r3, #24
 8004944:	f000 80bb 	beq.w	8004abe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	2b02      	cmp	r3, #2
 800494e:	f040 8095 	bne.w	8004a7c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b54      	ldr	r3, [pc, #336]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a53      	ldr	r2, [pc, #332]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800495c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fe fbaf 	bl	80030c0 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004966:	f7fe fbab 	bl	80030c0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e10c      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004978:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f0      	bne.n	8004966 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004984:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004988:	4b47      	ldr	r3, [pc, #284]	@ (8004aa8 <HAL_RCC_OscConfig+0x768>)
 800498a:	4013      	ands	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	430a      	orrs	r2, r1
 8004998:	4942      	ldr	r1, [pc, #264]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 800499a:	4313      	orrs	r3, r2
 800499c:	628b      	str	r3, [r1, #40]	@ 0x28
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	3b01      	subs	r3, #1
 80049ae:	025b      	lsls	r3, r3, #9
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	3b01      	subs	r3, #1
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c6:	3b01      	subs	r3, #1
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049ce:	4935      	ldr	r1, [pc, #212]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049d4:	4b33      	ldr	r3, [pc, #204]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	4a32      	ldr	r2, [pc, #200]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049e0:	4b30      	ldr	r3, [pc, #192]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e4:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_OscConfig+0x76c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049ec:	00d2      	lsls	r2, r2, #3
 80049ee:	492d      	ldr	r1, [pc, #180]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049f4:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	f023 020c 	bic.w	r2, r3, #12
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	4928      	ldr	r1, [pc, #160]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a06:	4b27      	ldr	r3, [pc, #156]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	f023 0202 	bic.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	4924      	ldr	r1, [pc, #144]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a18:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a24:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a30:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a3c:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	4a18      	ldr	r2, [pc, #96]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe fb34 	bl	80030c0 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe fb30 	bl	80030c0 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e091      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x71c>
 8004a7a:	e089      	b.n	8004b90 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <HAL_RCC_OscConfig+0x764>)
 8004a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fb1a 	bl	80030c0 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a8e:	e00f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fe fb16 	bl	80030c0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d908      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e077      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	fffffc0c 	.word	0xfffffc0c
 8004aac:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e9      	bne.n	8004a90 <HAL_RCC_OscConfig+0x750>
 8004abc:	e068      	b.n	8004b90 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d031      	beq.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d12a      	bne.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d122      	bne.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d11a      	bne.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	0a5b      	lsrs	r3, r3, #9
 8004b04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d111      	bne.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d108      	bne.n	8004b36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e02b      	b.n	8004b92 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b3a:	4b18      	ldr	r3, [pc, #96]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b44:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d01f      	beq.n	8004b90 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b50:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	4a11      	ldr	r2, [pc, #68]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b5c:	f7fe fab0 	bl	80030c0 <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b62:	bf00      	nop
 8004b64:	f7fe faac 	bl	80030c0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d0f9      	beq.n	8004b64 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <HAL_RCC_OscConfig+0x860>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b7c:	00d2      	lsls	r2, r2, #3
 8004b7e:	4907      	ldr	r1, [pc, #28]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <HAL_RCC_OscConfig+0x85c>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3730      	adds	r7, #48	@ 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	ffff0007 	.word	0xffff0007

08004ba4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e19c      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d910      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	4b87      	ldr	r3, [pc, #540]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 020f 	bic.w	r2, r3, #15
 8004bce:	4985      	ldr	r1, [pc, #532]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b83      	ldr	r3, [pc, #524]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e184      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d010      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d908      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c04:	4b78      	ldr	r3, [pc, #480]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4975      	ldr	r1, [pc, #468]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	4b70      	ldr	r3, [pc, #448]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d908      	bls.n	8004c44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c32:	4b6d      	ldr	r3, [pc, #436]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	496a      	ldr	r1, [pc, #424]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	4b64      	ldr	r3, [pc, #400]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d908      	bls.n	8004c72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c60:	4b61      	ldr	r3, [pc, #388]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	495e      	ldr	r1, [pc, #376]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d010      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d908      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c8e:	4b56      	ldr	r3, [pc, #344]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	4953      	ldr	r1, [pc, #332]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d908      	bls.n	8004cce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f023 020f 	bic.w	r2, r3, #15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4947      	ldr	r1, [pc, #284]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d055      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cda:	4b43      	ldr	r3, [pc, #268]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4940      	ldr	r1, [pc, #256]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d121      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0f6      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d0c:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d115      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0ea      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d107      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d24:	4b30      	ldr	r3, [pc, #192]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0de      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d34:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0d6      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d44:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f023 0207 	bic.w	r2, r3, #7
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4925      	ldr	r1, [pc, #148]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fe f9b3 	bl	80030c0 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5e:	f7fe f9af 	bl	80030c0 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0be      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d74:	4b1c      	ldr	r3, [pc, #112]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d1eb      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d010      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d208      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da2:	4b11      	ldr	r3, [pc, #68]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f023 020f 	bic.w	r2, r3, #15
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	490e      	ldr	r1, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d214      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 020f 	bic.w	r2, r3, #15
 8004dca:	4906      	ldr	r1, [pc, #24]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <HAL_RCC_ClockConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e086      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x34e>
 8004de4:	52002000 	.word	0x52002000
 8004de8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d010      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d208      	bcs.n	8004e1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e08:	4b3c      	ldr	r3, [pc, #240]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4939      	ldr	r1, [pc, #228]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	4b34      	ldr	r3, [pc, #208]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d208      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e36:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	492e      	ldr	r1, [pc, #184]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	4b28      	ldr	r3, [pc, #160]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d208      	bcs.n	8004e76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4922      	ldr	r1, [pc, #136]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d208      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	4917      	ldr	r1, [pc, #92]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004ea4:	f000 f834 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	4912      	ldr	r1, [pc, #72]	@ (8004f00 <HAL_RCC_ClockConfig+0x35c>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <HAL_RCC_ClockConfig+0x358>)
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a0d      	ldr	r2, [pc, #52]	@ (8004f00 <HAL_RCC_ClockConfig+0x35c>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x360>)
 8004eda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004edc:	4a0a      	ldr	r2, [pc, #40]	@ (8004f08 <HAL_RCC_ClockConfig+0x364>)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_ClockConfig+0x368>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f8a0 	bl	800302c <HAL_InitTick>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400
 8004f00:	08009934 	.word	0x08009934
 8004f04:	24000004 	.word	0x24000004
 8004f08:	24000000 	.word	0x24000000
 8004f0c:	24000008 	.word	0x24000008

08004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f16:	4bb3      	ldr	r3, [pc, #716]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f1e:	2b18      	cmp	r3, #24
 8004f20:	f200 8155 	bhi.w	80051ce <HAL_RCC_GetSysClockFreq+0x2be>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	080051cf 	.word	0x080051cf
 8004f34:	080051cf 	.word	0x080051cf
 8004f38:	080051cf 	.word	0x080051cf
 8004f3c:	080051cf 	.word	0x080051cf
 8004f40:	080051cf 	.word	0x080051cf
 8004f44:	080051cf 	.word	0x080051cf
 8004f48:	080051cf 	.word	0x080051cf
 8004f4c:	08004fb7 	.word	0x08004fb7
 8004f50:	080051cf 	.word	0x080051cf
 8004f54:	080051cf 	.word	0x080051cf
 8004f58:	080051cf 	.word	0x080051cf
 8004f5c:	080051cf 	.word	0x080051cf
 8004f60:	080051cf 	.word	0x080051cf
 8004f64:	080051cf 	.word	0x080051cf
 8004f68:	080051cf 	.word	0x080051cf
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	080051cf 	.word	0x080051cf
 8004f74:	080051cf 	.word	0x080051cf
 8004f78:	080051cf 	.word	0x080051cf
 8004f7c:	080051cf 	.word	0x080051cf
 8004f80:	080051cf 	.word	0x080051cf
 8004f84:	080051cf 	.word	0x080051cf
 8004f88:	080051cf 	.word	0x080051cf
 8004f8c:	08004fc3 	.word	0x08004fc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f90:	4b94      	ldr	r3, [pc, #592]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f9c:	4b91      	ldr	r3, [pc, #580]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	4a90      	ldr	r2, [pc, #576]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004fae:	e111      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fb2:	61bb      	str	r3, [r7, #24]
      break;
 8004fb4:	e10e      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fb8:	61bb      	str	r3, [r7, #24]
      break;
 8004fba:	e10b      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fbe:	61bb      	str	r3, [r7, #24]
      break;
 8004fc0:	e108      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc2:	4b88      	ldr	r3, [pc, #544]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004fcc:	4b85      	ldr	r3, [pc, #532]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fd8:	4b82      	ldr	r3, [pc, #520]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004fe2:	4b80      	ldr	r3, [pc, #512]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80e1 	beq.w	80051c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b02      	cmp	r3, #2
 800500a:	f000 8083 	beq.w	8005114 <HAL_RCC_GetSysClockFreq+0x204>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b02      	cmp	r3, #2
 8005012:	f200 80a1 	bhi.w	8005158 <HAL_RCC_GetSysClockFreq+0x248>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x114>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d056      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005022:	e099      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005024:	4b6f      	ldr	r3, [pc, #444]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d02d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005030:	4b6c      	ldr	r3, [pc, #432]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	08db      	lsrs	r3, r3, #3
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	4a6b      	ldr	r2, [pc, #428]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505a:	4b62      	ldr	r3, [pc, #392]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506a:	ed97 6a02 	vldr	s12, [r7, #8]
 800506e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800508a:	e087      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b51      	ldr	r3, [pc, #324]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ce:	e065      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005112:	e043      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005200 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005126:	4b2f      	ldr	r3, [pc, #188]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005136:	ed97 6a02 	vldr	s12, [r7, #8]
 800513a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800514a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005156:	e021      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b1e      	ldr	r3, [pc, #120]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a02 	vldr	s12, [r7, #8]
 800517e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800519a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800519c:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	0a5b      	lsrs	r3, r3, #9
 80051a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a6:	3301      	adds	r3, #1
 80051a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c0:	ee17 3a90 	vmov	r3, s15
 80051c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80051c6:	e005      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
      break;
 80051cc:	e002      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80051ce:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051d0:	61bb      	str	r3, [r7, #24]
      break;
 80051d2:	bf00      	nop
  }

  return sysclockfreq;
 80051d4:	69bb      	ldr	r3, [r7, #24]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3724      	adds	r7, #36	@ 0x24
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	03d09000 	.word	0x03d09000
 80051ec:	003d0900 	.word	0x003d0900
 80051f0:	007a1200 	.word	0x007a1200
 80051f4:	46000000 	.word	0x46000000
 80051f8:	4c742400 	.word	0x4c742400
 80051fc:	4a742400 	.word	0x4a742400
 8005200:	4af42400 	.word	0x4af42400

08005204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800520a:	f7ff fe81 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <HAL_RCC_GetHCLKFreq+0x50>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490f      	ldr	r1, [pc, #60]	@ (8005258 <HAL_RCC_GetHCLKFreq+0x54>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	fa22 f303 	lsr.w	r3, r2, r3
 8005226:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005228:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <HAL_RCC_GetHCLKFreq+0x50>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <HAL_RCC_GetHCLKFreq+0x54>)
 8005232:	5cd3      	ldrb	r3, [r2, r3]
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a07      	ldr	r2, [pc, #28]	@ (800525c <HAL_RCC_GetHCLKFreq+0x58>)
 8005240:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005242:	4a07      	ldr	r2, [pc, #28]	@ (8005260 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <HAL_RCC_GetHCLKFreq+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	58024400 	.word	0x58024400
 8005258:	08009934 	.word	0x08009934
 800525c:	24000004 	.word	0x24000004
 8005260:	24000000 	.word	0x24000000

08005264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005268:	f7ff ffcc 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4904      	ldr	r1, [pc, #16]	@ (800528c <HAL_RCC_GetPCLK1Freq+0x28>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	58024400 	.word	0x58024400
 800528c:	08009934 	.word	0x08009934

08005290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005294:	f7ff ffb6 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	4904      	ldr	r1, [pc, #16]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052a6:	5ccb      	ldrb	r3, [r1, r3]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	58024400 	.word	0x58024400
 80052b8:	08009934 	.word	0x08009934

080052bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c0:	b0c8      	sub	sp, #288	@ 0x120
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80052e0:	2500      	movs	r5, #0
 80052e2:	ea54 0305 	orrs.w	r3, r4, r5
 80052e6:	d049      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052f2:	d02f      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80052f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052f8:	d828      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052fe:	d01a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005304:	d822      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530e:	d007      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005310:	e01c      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005312:	4ba7      	ldr	r3, [pc, #668]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4aa6      	ldr	r2, [pc, #664]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800531c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800531e:	e01a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005324:	3308      	adds	r3, #8
 8005326:	2102      	movs	r1, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fc43 	bl	8006bb4 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005334:	e00f      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fcea 	bl	8006d18 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800535e:	4b94      	ldr	r3, [pc, #592]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005362:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536c:	4a90      	ldr	r2, [pc, #576]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800536e:	430b      	orrs	r3, r1
 8005370:	6513      	str	r3, [r2, #80]	@ 0x50
 8005372:	e003      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005378:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005388:	f04f 0900 	mov.w	r9, #0
 800538c:	ea58 0309 	orrs.w	r3, r8, r9
 8005390:	d047      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005398:	2b04      	cmp	r3, #4
 800539a:	d82a      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b9 	.word	0x080053b9
 80053a8:	080053c7 	.word	0x080053c7
 80053ac:	080053dd 	.word	0x080053dd
 80053b0:	080053fb 	.word	0x080053fb
 80053b4:	080053fb 	.word	0x080053fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b8:	4b7d      	ldr	r3, [pc, #500]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a7c      	ldr	r2, [pc, #496]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c4:	e01a      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ca:	3308      	adds	r3, #8
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fbf0 	bl	8006bb4 <RCCEx_PLL2_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053da:	e00f      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e0:	3328      	adds	r3, #40	@ 0x28
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fc97 	bl	8006d18 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f0:	e004      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005404:	4b6a      	ldr	r3, [pc, #424]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005408:	f023 0107 	bic.w	r1, r3, #7
 800540c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	4a67      	ldr	r2, [pc, #412]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005414:	430b      	orrs	r3, r1
 8005416:	6513      	str	r3, [r2, #80]	@ 0x50
 8005418:	e003      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800541e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800542e:	f04f 0b00 	mov.w	fp, #0
 8005432:	ea5a 030b 	orrs.w	r3, sl, fp
 8005436:	d054      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800543c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005442:	d036      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005444:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005448:	d82f      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544e:	d032      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005454:	d829      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005456:	2bc0      	cmp	r3, #192	@ 0xc0
 8005458:	d02f      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800545a:	2bc0      	cmp	r3, #192	@ 0xc0
 800545c:	d825      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800545e:	2b80      	cmp	r3, #128	@ 0x80
 8005460:	d018      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d821      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d007      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800546e:	e01c      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005470:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	4a4e      	ldr	r2, [pc, #312]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800547a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800547c:	e01e      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005482:	3308      	adds	r3, #8
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fb94 	bl	8006bb4 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005492:	e013      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005498:	3328      	adds	r3, #40	@ 0x28
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f001 fc3b 	bl	8006d18 <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80054ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80054c4:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80054cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	4a37      	ldr	r2, [pc, #220]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80054e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80054f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80054fc:	460b      	mov	r3, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	d05c      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005508:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800550c:	d03b      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800550e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005512:	d834      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005518:	d037      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800551e:	d82e      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005520:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005524:	d033      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005526:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800552a:	d828      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005530:	d01a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005536:	d822      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005540:	d007      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005542:	e01c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005550:	e01e      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005556:	3308      	adds	r3, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f001 fb2a 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005566:	e013      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556c:	3328      	adds	r3, #40	@ 0x28
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fbd1 	bl	8006d18 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10d      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80055a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a6:	4a02      	ldr	r2, [pc, #8]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ac:	e006      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d03a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80055dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e2:	2b30      	cmp	r3, #48	@ 0x30
 80055e4:	d01f      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80055e6:	2b30      	cmp	r3, #48	@ 0x30
 80055e8:	d819      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d00c      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d815      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d019      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d111      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fa:	4bae      	ldr	r3, [pc, #696]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	4aad      	ldr	r2, [pc, #692]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005606:	e011      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800560c:	3308      	adds	r3, #8
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f001 facf 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800561c:	e006      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005624:	e002      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800562a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005634:	4b9f      	ldr	r3, [pc, #636]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005638:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	4a9c      	ldr	r2, [pc, #624]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005644:	430b      	orrs	r3, r1
 8005646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800565e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005668:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d051      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800567c:	d035      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800567e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005682:	d82e      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005688:	d031      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800568a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800568e:	d828      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005694:	d01a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569a:	d822      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a4:	d007      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80056a6:	e01c      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4b82      	ldr	r3, [pc, #520]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a81      	ldr	r2, [pc, #516]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056b4:	e01c      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ba:	3308      	adds	r3, #8
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fa78 	bl	8006bb4 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056ca:	e011      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d0:	3328      	adds	r3, #40	@ 0x28
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fb1f 	bl	8006d18 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80056ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056f8:	4b6e      	ldr	r3, [pc, #440]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005706:	4a6b      	ldr	r2, [pc, #428]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6513      	str	r3, [r2, #80]	@ 0x50
 800570c:	e003      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005712:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005726:	2300      	movs	r3, #0
 8005728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800572c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d053      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800573c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005740:	d033      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005746:	d82c      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005748:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800574c:	d02f      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800574e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005752:	d826      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005758:	d02b      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800575a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800575e:	d820      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005764:	d012      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576a:	d81a      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d022      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d115      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800577a:	3308      	adds	r3, #8
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fa18 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800578a:	e015      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800578c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005790:	3328      	adds	r3, #40	@ 0x28
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fabf 	bl	8006d18 <RCCEx_PLL3_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057a0:	e00a      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057a8:	e006      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057aa:	bf00      	nop
 80057ac:	e004      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80057b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057c0:	4b3c      	ldr	r3, [pc, #240]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ce:	4a39      	ldr	r2, [pc, #228]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80057ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057ee:	2300      	movs	r3, #0
 80057f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d060      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005806:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800580a:	d039      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800580c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005810:	d832      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581c:	d82c      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d031      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005828:	d826      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800582a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800582e:	d02d      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005830:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005834:	d820      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800583a:	d012      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800583c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005840:	d81a      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d024      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800584a:	d115      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005850:	3308      	adds	r3, #8
 8005852:	2101      	movs	r1, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f001 f9ad 	bl	8006bb4 <RCCEx_PLL2_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005860:	e017      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005866:	3328      	adds	r3, #40	@ 0x28
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fa54 	bl	8006d18 <RCCEx_PLL3_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005876:	e00c      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800587e:	e008      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005880:	bf00      	nop
 8005882:	e006      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005884:	bf00      	nop
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10e      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800589a:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058aa:	4a02      	ldr	r2, [pc, #8]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80058b2:	bf00      	nop
 80058b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80058cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058d0:	2300      	movs	r3, #0
 80058d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d037      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80058e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ea:	d00e      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80058ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f0:	d816      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80058f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058fa:	d111      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fc:	4bc4      	ldr	r3, [pc, #784]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4ac3      	ldr	r2, [pc, #780]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005908:	e00f      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800590e:	3308      	adds	r3, #8
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f001 f94e 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800591e:	e004      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005926:	e000      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005932:	4bb7      	ldr	r3, [pc, #732]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005936:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005940:	4ab3      	ldr	r2, [pc, #716]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6513      	str	r3, [r2, #80]	@ 0x50
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800594c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800595c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005966:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d039      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005976:	2b03      	cmp	r3, #3
 8005978:	d81c      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800597a:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059bd 	.word	0x080059bd
 8005984:	08005991 	.word	0x08005991
 8005988:	0800599f 	.word	0x0800599f
 800598c:	080059bd 	.word	0x080059bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b9f      	ldr	r3, [pc, #636]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	4a9e      	ldr	r2, [pc, #632]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800599c:	e00f      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800599e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a2:	3308      	adds	r3, #8
 80059a4:	2102      	movs	r1, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f904 	bl	8006bb4 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059b2:	e004      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059ba:	e000      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80059bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059c6:	4b92      	ldr	r3, [pc, #584]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ca:	f023 0103 	bic.w	r1, r3, #3
 80059ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059da:	e003      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80059f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f000 8099 	beq.w	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a06:	4b83      	ldr	r3, [pc, #524]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a82      	ldr	r2, [pc, #520]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a12:	f7fd fb55 	bl	80030c0 <HAL_GetTick>
 8005a16:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1c:	f7fd fb50 	bl	80030c0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b64      	cmp	r3, #100	@ 0x64
 8005a2a:	d903      	bls.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a32:	e005      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a34:	4b77      	ldr	r3, [pc, #476]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ed      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005a40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d173      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a48:	4b71      	ldr	r3, [pc, #452]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a54:	4053      	eors	r3, r2
 8005a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d015      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a66:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a6a:	4b69      	ldr	r3, [pc, #420]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	4a68      	ldr	r2, [pc, #416]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a76:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7a:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a82:	4a63      	ldr	r2, [pc, #396]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a96:	d118      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fd fb12 	bl	80030c0 <HAL_GetTick>
 8005a9c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa0:	e00d      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fd fb0d 	bl	80030c0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d903      	bls.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005abc:	e005      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005abe:	4b54      	ldr	r3, [pc, #336]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0eb      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d129      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae2:	d10e      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005af4:	091a      	lsrs	r2, r3, #4
 8005af6:	4b48      	ldr	r3, [pc, #288]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	4a45      	ldr	r2, [pc, #276]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6113      	str	r3, [r2, #16]
 8005b00:	e005      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005b02:	4b43      	ldr	r3, [pc, #268]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	4a42      	ldr	r2, [pc, #264]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b0c:	6113      	str	r3, [r2, #16]
 8005b0e:	4b40      	ldr	r3, [pc, #256]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005b2e:	e003      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f002 0301 	and.w	r3, r2, #1
 8005b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f000 8090 	beq.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b62:	2b28      	cmp	r3, #40	@ 0x28
 8005b64:	d870      	bhi.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005c51 	.word	0x08005c51
 8005b70:	08005c49 	.word	0x08005c49
 8005b74:	08005c49 	.word	0x08005c49
 8005b78:	08005c49 	.word	0x08005c49
 8005b7c:	08005c49 	.word	0x08005c49
 8005b80:	08005c49 	.word	0x08005c49
 8005b84:	08005c49 	.word	0x08005c49
 8005b88:	08005c49 	.word	0x08005c49
 8005b8c:	08005c1d 	.word	0x08005c1d
 8005b90:	08005c49 	.word	0x08005c49
 8005b94:	08005c49 	.word	0x08005c49
 8005b98:	08005c49 	.word	0x08005c49
 8005b9c:	08005c49 	.word	0x08005c49
 8005ba0:	08005c49 	.word	0x08005c49
 8005ba4:	08005c49 	.word	0x08005c49
 8005ba8:	08005c49 	.word	0x08005c49
 8005bac:	08005c33 	.word	0x08005c33
 8005bb0:	08005c49 	.word	0x08005c49
 8005bb4:	08005c49 	.word	0x08005c49
 8005bb8:	08005c49 	.word	0x08005c49
 8005bbc:	08005c49 	.word	0x08005c49
 8005bc0:	08005c49 	.word	0x08005c49
 8005bc4:	08005c49 	.word	0x08005c49
 8005bc8:	08005c49 	.word	0x08005c49
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005c49 	.word	0x08005c49
 8005bd4:	08005c49 	.word	0x08005c49
 8005bd8:	08005c49 	.word	0x08005c49
 8005bdc:	08005c49 	.word	0x08005c49
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005c49 	.word	0x08005c49
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c49 	.word	0x08005c49
 8005c08:	08005c49 	.word	0x08005c49
 8005c0c:	08005c51 	.word	0x08005c51
 8005c10:	58024400 	.word	0x58024400
 8005c14:	58024800 	.word	0x58024800
 8005c18:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c20:	3308      	adds	r3, #8
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 ffc5 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c30:	e00f      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c36:	3328      	adds	r3, #40	@ 0x28
 8005c38:	2101      	movs	r1, #1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f86c 	bl	8006d18 <RCCEx_PLL3_Config>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c46:	e004      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c4e:	e000      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c5a:	4bc0      	ldr	r3, [pc, #768]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c6a:	4abc      	ldr	r2, [pc, #752]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c70:	e003      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f002 0302 	and.w	r3, r2, #2
 8005c86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c90:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005c94:	460b      	mov	r3, r1
 8005c96:	4313      	orrs	r3, r2
 8005c98:	d043      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d824      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cf9 	.word	0x08005cf9
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005cf9 	.word	0x08005cf9
 8005cbc:	08005cf9 	.word	0x08005cf9
 8005cc0:	08005cf9 	.word	0x08005cf9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc8:	3308      	adds	r3, #8
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 ff71 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cd8:	e00f      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cde:	3328      	adds	r3, #40	@ 0x28
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f818 	bl	8006d18 <RCCEx_PLL3_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cee:	e004      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d02:	4b96      	ldr	r3, [pc, #600]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f023 0107 	bic.w	r1, r3, #7
 8005d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d12:	4a92      	ldr	r2, [pc, #584]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d18:	e003      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f002 0304 	and.w	r3, r2, #4
 8005d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d38:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d043      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d824      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005d6d 	.word	0x08005d6d
 8005d5c:	08005d83 	.word	0x08005d83
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da1 	.word	0x08005da1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d70:	3308      	adds	r3, #8
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 ff1d 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e00f      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d86:	3328      	adds	r3, #40	@ 0x28
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ffc4 	bl	8006d18 <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005daa:	4b6c      	ldr	r3, [pc, #432]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	f023 0107 	bic.w	r1, r3, #7
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dba:	4a68      	ldr	r2, [pc, #416]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f002 0320 	and.w	r3, r2, #32
 8005dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005de4:	460b      	mov	r3, r1
 8005de6:	4313      	orrs	r3, r2
 8005de8:	d055      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005df6:	d033      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dfc:	d82c      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d02f      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d826      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e0e:	d02b      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005e10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e14:	d820      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e1a:	d012      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e20:	d81a      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d022      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e30:	3308      	adds	r3, #8
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 febd 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e40:	e015      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e46:	3328      	adds	r3, #40	@ 0x28
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff64 	bl	8006d18 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e56:	e00a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e5e:	e006      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e60:	bf00      	nop
 8005e62:	e004      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e76:	4b39      	ldr	r3, [pc, #228]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e86:	4a35      	ldr	r2, [pc, #212]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005eac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	d058      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ebe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ec2:	d033      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005ec4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ec8:	d82c      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ece:	d02f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed4:	d826      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eda:	d02b      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005edc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ee0:	d820      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee6:	d012      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eec:	d81a      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d022      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef6:	d115      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005efc:	3308      	adds	r3, #8
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fe57 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f0c:	e015      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f12:	3328      	adds	r3, #40	@ 0x28
 8005f14:	2102      	movs	r1, #2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fefe 	bl	8006d18 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f22:	e00a      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f2a:	e006      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10e      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f52:	4a02      	ldr	r2, [pc, #8]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005f5a:	bf00      	nop
 8005f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d055      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f94:	d033      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005f96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f9a:	d82c      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa0:	d02f      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa6:	d826      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fa8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fac:	d02b      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005fae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fb2:	d820      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fbe:	d81a      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc8:	d115      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	3308      	adds	r3, #8
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fdee 	bl	8006bb4 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005fde:	e015      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe4:	3328      	adds	r3, #40	@ 0x28
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe95 	bl	8006d18 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e00a      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005ffe:	bf00      	nop
 8006000:	e004      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006014:	4ba1      	ldr	r3, [pc, #644]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800601c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006020:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006024:	4a9d      	ldr	r2, [pc, #628]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006026:	430b      	orrs	r3, r1
 8006028:	6593      	str	r3, [r2, #88]	@ 0x58
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006030:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f002 0308 	and.w	r3, r2, #8
 8006040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800604a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d01e      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006060:	d10c      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006066:	3328      	adds	r3, #40	@ 0x28
 8006068:	2102      	movs	r1, #2
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fe54 	bl	8006d18 <RCCEx_PLL3_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800607c:	4b87      	ldr	r3, [pc, #540]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800608c:	4a83      	ldr	r2, [pc, #524]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800608e:	430b      	orrs	r3, r1
 8006090:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f002 0310 	and.w	r3, r2, #16
 800609e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d01e      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060be:	d10c      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c4:	3328      	adds	r3, #40	@ 0x28
 80060c6:	2102      	movs	r1, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fe25 	bl	8006d18 <RCCEx_PLL3_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060da:	4b70      	ldr	r3, [pc, #448]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060ea:	4a6c      	ldr	r2, [pc, #432]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80060fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006106:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d03e      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611c:	d022      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800611e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006122:	d81b      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612c:	d00b      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800612e:	e015      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006134:	3308      	adds	r3, #8
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fd3b 	bl	8006bb4 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006144:	e00f      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800614a:	3328      	adds	r3, #40	@ 0x28
 800614c:	2102      	movs	r1, #2
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fde2 	bl	8006d18 <RCCEx_PLL3_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800616e:	4b4b      	ldr	r3, [pc, #300]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800617a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800617e:	4a47      	ldr	r2, [pc, #284]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6593      	str	r3, [r2, #88]	@ 0x58
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800618a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800619a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800619c:	2300      	movs	r3, #0
 800619e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061b6:	d01f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80061b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061bc:	d818      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c2:	d003      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80061c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061c8:	d007      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80061ca:	e011      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061cc:	4b33      	ldr	r3, [pc, #204]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	4a32      	ldr	r2, [pc, #200]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061de:	3328      	adds	r3, #40	@ 0x28
 80061e0:	2101      	movs	r1, #1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd98 	bl	8006d18 <RCCEx_PLL3_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80061f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006202:	4b26      	ldr	r3, [pc, #152]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006212:	4a22      	ldr	r2, [pc, #136]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6553      	str	r3, [r2, #84]	@ 0x54
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800621e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800622e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006230:	2300      	movs	r3, #0
 8006232:	677b      	str	r3, [r7, #116]	@ 0x74
 8006234:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d034      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800623e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624c:	d007      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006250:	4b12      	ldr	r3, [pc, #72]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800625c:	e00e      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800625e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006262:	3308      	adds	r3, #8
 8006264:	2102      	movs	r1, #2
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fca4 	bl	8006bb4 <RCCEx_PLL2_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800627a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10d      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006288:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006292:	4a02      	ldr	r2, [pc, #8]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006294:	430b      	orrs	r3, r1
 8006296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b6:	2300      	movs	r3, #0
 80062b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d00c      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c8:	3328      	adds	r3, #40	@ 0x28
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd23 	bl	8006d18 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80062ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ec:	2300      	movs	r3, #0
 80062ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80062f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d038      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80062fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006306:	d018      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800630c:	d811      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800630e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006312:	d014      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006318:	d80b      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800631e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006322:	d106      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4bc3      	ldr	r3, [pc, #780]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4ac2      	ldr	r2, [pc, #776]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006338:	e004      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006344:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800634c:	4bb9      	ldr	r3, [pc, #740]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	4ab5      	ldr	r2, [pc, #724]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800635e:	430b      	orrs	r3, r1
 8006360:	6553      	str	r3, [r2, #84]	@ 0x54
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006368:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800637a:	2300      	movs	r3, #0
 800637c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800637e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006388:	4baa      	ldr	r3, [pc, #680]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006396:	4aa7      	ldr	r2, [pc, #668]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80063a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80063aa:	2300      	movs	r3, #0
 80063ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80063c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	4a9b      	ldr	r2, [pc, #620]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80063cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063da:	2300      	movs	r3, #0
 80063dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80063e2:	460b      	mov	r3, r1
 80063e4:	4313      	orrs	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80063e8:	4b92      	ldr	r3, [pc, #584]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ec:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	4a8f      	ldr	r2, [pc, #572]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80063fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006408:	643b      	str	r3, [r7, #64]	@ 0x40
 800640a:	2300      	movs	r3, #0
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
 800640e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006412:	460b      	mov	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006418:	4b86      	ldr	r3, [pc, #536]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	4a85      	ldr	r2, [pc, #532]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800641e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006422:	6113      	str	r3, [r2, #16]
 8006424:	4b83      	ldr	r3, [pc, #524]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006426:	6919      	ldr	r1, [r3, #16]
 8006428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800642c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006430:	4a80      	ldr	r2, [pc, #512]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006448:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006452:	4b78      	ldr	r3, [pc, #480]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006456:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006460:	4a74      	ldr	r2, [pc, #464]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006462:	430b      	orrs	r3, r1
 8006464:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006472:	633b      	str	r3, [r7, #48]	@ 0x30
 8006474:	2300      	movs	r3, #0
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
 8006478:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800647c:	460b      	mov	r3, r1
 800647e:	4313      	orrs	r3, r2
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006482:	4b6c      	ldr	r3, [pc, #432]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800648a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006492:	4a68      	ldr	r2, [pc, #416]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006494:	430b      	orrs	r3, r1
 8006496:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	2100      	movs	r1, #0
 80064a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	d011      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b8:	3308      	adds	r3, #8
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fb79 	bl	8006bb4 <RCCEx_PLL2_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80064c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	2100      	movs	r1, #0
 80064e2:	6239      	str	r1, [r7, #32]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d011      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f8:	3308      	adds	r3, #8
 80064fa:	2101      	movs	r1, #1
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fb59 	bl	8006bb4 <RCCEx_PLL2_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006508:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	2100      	movs	r1, #0
 8006522:	61b9      	str	r1, [r7, #24]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800652e:	460b      	mov	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	d011      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006538:	3308      	adds	r3, #8
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fb39 	bl	8006bb4 <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006554:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	2100      	movs	r1, #0
 8006562:	6139      	str	r1, [r7, #16]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800656e:	460b      	mov	r3, r1
 8006570:	4313      	orrs	r3, r2
 8006572:	d011      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006578:	3328      	adds	r3, #40	@ 0x28
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fbcb 	bl	8006d18 <RCCEx_PLL3_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	2100      	movs	r1, #0
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d011      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	3328      	adds	r3, #40	@ 0x28
 80065ba:	2101      	movs	r1, #1
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fbab 	bl	8006d18 <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80065c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	2100      	movs	r1, #0
 80065e2:	6039      	str	r1, [r7, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065ee:	460b      	mov	r3, r1
 80065f0:	4313      	orrs	r3, r2
 80065f2:	d011      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f8:	3328      	adds	r3, #40	@ 0x28
 80065fa:	2102      	movs	r1, #2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fb8b 	bl	8006d18 <RCCEx_PLL3_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006618:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
}
 8006626:	4618      	mov	r0, r3
 8006628:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800662c:	46bd      	mov	sp, r7
 800662e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400

08006638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800663c:	f7fe fde2 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b06      	ldr	r3, [pc, #24]	@ (800665c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	091b      	lsrs	r3, r3, #4
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4904      	ldr	r1, [pc, #16]	@ (8006660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	58024400 	.word	0x58024400
 8006660:	08009934 	.word	0x08009934

08006664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006664:	b480      	push	{r7}
 8006666:	b089      	sub	sp, #36	@ 0x24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800666c:	4ba1      	ldr	r3, [pc, #644]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006676:	4b9f      	ldr	r3, [pc, #636]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	0b1b      	lsrs	r3, r3, #12
 800667c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006682:	4b9c      	ldr	r3, [pc, #624]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800668e:	4b99      	ldr	r3, [pc, #612]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006692:	08db      	lsrs	r3, r3, #3
 8006694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8111 	beq.w	80068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	f000 8083 	beq.w	80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	f200 80a1 	bhi.w	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d056      	beq.n	800677c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066ce:	e099      	b.n	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d0:	4b88      	ldr	r3, [pc, #544]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02d      	beq.n	8006738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066dc:	4b85      	ldr	r3, [pc, #532]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	08db      	lsrs	r3, r3, #3
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	4a84      	ldr	r2, [pc, #528]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006706:	4b7b      	ldr	r3, [pc, #492]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006716:	ed97 6a03 	vldr	s12, [r7, #12]
 800671a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800671e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006736:	e087      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	4b6a      	ldr	r3, [pc, #424]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a03 	vldr	s12, [r7, #12]
 800675e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677a:	e065      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678e:	4b59      	ldr	r3, [pc, #356]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067be:	e043      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d2:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006802:	e021      	b.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b37      	ldr	r3, [pc, #220]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006848:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800685e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006862:	edd7 6a07 	vldr	s13, [r7, #28]
 8006866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800686e:	ee17 2a90 	vmov	r2, s15
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006876:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800688c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006890:	edd7 6a07 	vldr	s13, [r7, #28]
 8006894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689c:	ee17 2a90 	vmov	r2, s15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068a4:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068be:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ca:	ee17 2a90 	vmov	r2, s15
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068d2:	e008      	b.n	80068e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
}
 80068e6:	bf00      	nop
 80068e8:	3724      	adds	r7, #36	@ 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	03d09000 	.word	0x03d09000
 80068fc:	46000000 	.word	0x46000000
 8006900:	4c742400 	.word	0x4c742400
 8006904:	4a742400 	.word	0x4a742400
 8006908:	4af42400 	.word	0x4af42400

0800690c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006914:	4ba1      	ldr	r3, [pc, #644]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800691e:	4b9f      	ldr	r3, [pc, #636]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	0d1b      	lsrs	r3, r3, #20
 8006924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800692a:	4b9c      	ldr	r3, [pc, #624]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006936:	4b99      	ldr	r3, [pc, #612]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8111 	beq.w	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b02      	cmp	r3, #2
 800695e:	f000 8083 	beq.w	8006a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f200 80a1 	bhi.w	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d056      	beq.n	8006a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006976:	e099      	b.n	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006978:	4b88      	ldr	r3, [pc, #544]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02d      	beq.n	80069e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006984:	4b85      	ldr	r3, [pc, #532]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	08db      	lsrs	r3, r3, #3
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	4a84      	ldr	r2, [pc, #528]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
 8006994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ae:	4b7b      	ldr	r3, [pc, #492]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069be:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069de:	e087      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a22:	e065      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a36:	4b59      	ldr	r3, [pc, #356]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a66:	e043      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b48      	ldr	r3, [pc, #288]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aaa:	e021      	b.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b37      	ldr	r3, [pc, #220]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006af0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	0a5b      	lsrs	r3, r3, #9
 8006af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b16:	ee17 2a90 	vmov	r2, s15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b44:	ee17 2a90 	vmov	r2, s15
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b4c:	4b13      	ldr	r3, [pc, #76]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b72:	ee17 2a90 	vmov	r2, s15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	3724      	adds	r7, #36	@ 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	03d09000 	.word	0x03d09000
 8006ba4:	46000000 	.word	0x46000000
 8006ba8:	4c742400 	.word	0x4c742400
 8006bac:	4a742400 	.word	0x4a742400
 8006bb0:	4af42400 	.word	0x4af42400

08006bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bc2:	4b53      	ldr	r3, [pc, #332]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d101      	bne.n	8006bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e099      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bde:	f7fc fa6f 	bl	80030c0 <HAL_GetTick>
 8006be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006be6:	f7fc fa6b 	bl	80030c0 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e086      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf8:	4b45      	ldr	r3, [pc, #276]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c04:	4b42      	ldr	r3, [pc, #264]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	493f      	ldr	r1, [pc, #252]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	025b      	lsls	r3, r3, #9
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	061b      	lsls	r3, r3, #24
 8006c44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c48:	4931      	ldr	r1, [pc, #196]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c4e:	4b30      	ldr	r3, [pc, #192]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	492d      	ldr	r1, [pc, #180]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c60:	4b2b      	ldr	r3, [pc, #172]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	f023 0220 	bic.w	r2, r3, #32
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	4928      	ldr	r1, [pc, #160]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c72:	4b27      	ldr	r3, [pc, #156]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	4a26      	ldr	r2, [pc, #152]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c7e:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c82:	4b24      	ldr	r3, [pc, #144]	@ (8006d14 <RCCEx_PLL2_Config+0x160>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	69d2      	ldr	r2, [r2, #28]
 8006c8a:	00d2      	lsls	r2, r2, #3
 8006c8c:	4920      	ldr	r1, [pc, #128]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c92:	4b1f      	ldr	r3, [pc, #124]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	f043 0310 	orr.w	r3, r3, #16
 8006c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	4a19      	ldr	r2, [pc, #100]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006caa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cb0:	e00f      	b.n	8006cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d106      	bne.n	8006cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cb8:	4b15      	ldr	r3, [pc, #84]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	4a14      	ldr	r2, [pc, #80]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cc4:	e005      	b.n	8006cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cc6:	4b12      	ldr	r3, [pc, #72]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	4a11      	ldr	r2, [pc, #68]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cde:	f7fc f9ef 	bl	80030c0 <HAL_GetTick>
 8006ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ce4:	e008      	b.n	8006cf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ce6:	f7fc f9eb 	bl	80030c0 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e006      	b.n	8006d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <RCCEx_PLL2_Config+0x15c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	ffff0007 	.word	0xffff0007

08006d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d26:	4b53      	ldr	r3, [pc, #332]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d101      	bne.n	8006d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e099      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d36:	4b4f      	ldr	r3, [pc, #316]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d42:	f7fc f9bd 	bl	80030c0 <HAL_GetTick>
 8006d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d48:	e008      	b.n	8006d5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d4a:	f7fc f9b9 	bl	80030c0 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e086      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d5c:	4b45      	ldr	r3, [pc, #276]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d68:	4b42      	ldr	r3, [pc, #264]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	493f      	ldr	r1, [pc, #252]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	025b      	lsls	r3, r3, #9
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dac:	4931      	ldr	r1, [pc, #196]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006db2:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	492d      	ldr	r1, [pc, #180]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4928      	ldr	r1, [pc, #160]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dd6:	4b27      	ldr	r3, [pc, #156]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a26      	ldr	r2, [pc, #152]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006de2:	4b24      	ldr	r3, [pc, #144]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006de6:	4b24      	ldr	r3, [pc, #144]	@ (8006e78 <RCCEx_PLL3_Config+0x160>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	69d2      	ldr	r2, [r2, #28]
 8006dee:	00d2      	lsls	r2, r2, #3
 8006df0:	4920      	ldr	r1, [pc, #128]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006df6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e14:	e00f      	b.n	8006e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d106      	bne.n	8006e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e1c:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	4a14      	ldr	r2, [pc, #80]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e28:	e005      	b.n	8006e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e2a:	4b12      	ldr	r3, [pc, #72]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	4a11      	ldr	r2, [pc, #68]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e36:	4b0f      	ldr	r3, [pc, #60]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e42:	f7fc f93d 	bl	80030c0 <HAL_GetTick>
 8006e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e48:	e008      	b.n	8006e5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e4a:	f7fc f939 	bl	80030c0 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e006      	b.n	8006e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <RCCEx_PLL3_Config+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	ffff0007 	.word	0xffff0007

08006e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e042      	b.n	8006f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fb fe63 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	@ 0x24
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fbe0 	bl	800868c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fd71 	bl	80079b4 <UART_SetConfig>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e01b      	b.n	8006f14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fc5f 	bl	80087d0 <UART_CheckIdleState>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d17b      	bne.n	800702e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_UART_Transmit+0x26>
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e074      	b.n	8007030 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2221      	movs	r2, #33	@ 0x21
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f56:	f7fc f8b3 	bl	80030c0 <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f74:	d108      	bne.n	8006f88 <HAL_UART_Transmit+0x6c>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e003      	b.n	8006f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f90:	e030      	b.n	8006ff4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2180      	movs	r1, #128	@ 0x80
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 fcc1 	bl	8008924 <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e03d      	b.n	8007030 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	3302      	adds	r3, #2
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e007      	b.n	8006fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1c8      	bne.n	8006f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2200      	movs	r2, #0
 8007008:	2140      	movs	r1, #64	@ 0x40
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f001 fc8a 	bl	8008924 <UART_WaitOnFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e006      	b.n	8007030 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	e000      	b.n	8007030 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800702e:	2302      	movs	r3, #2
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	@ 0x28
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704e:	2b20      	cmp	r3, #32
 8007050:	f040 80b5 	bne.w	80071be <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Receive+0x28>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0ad      	b.n	80071c0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2222      	movs	r2, #34	@ 0x22
 8007070:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707a:	f7fc f821 	bl	80030c0 <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007098:	d10e      	bne.n	80070b8 <HAL_UART_Receive+0x80>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d105      	bne.n	80070ae <HAL_UART_Receive+0x76>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80070a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070ac:	e02d      	b.n	800710a <HAL_UART_Receive+0xd2>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	22ff      	movs	r2, #255	@ 0xff
 80070b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070b6:	e028      	b.n	800710a <HAL_UART_Receive+0xd2>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10d      	bne.n	80070dc <HAL_UART_Receive+0xa4>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <HAL_UART_Receive+0x9a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	22ff      	movs	r2, #255	@ 0xff
 80070cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070d0:	e01b      	b.n	800710a <HAL_UART_Receive+0xd2>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	227f      	movs	r2, #127	@ 0x7f
 80070d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070da:	e016      	b.n	800710a <HAL_UART_Receive+0xd2>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e4:	d10d      	bne.n	8007102 <HAL_UART_Receive+0xca>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <HAL_UART_Receive+0xc0>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	227f      	movs	r2, #127	@ 0x7f
 80070f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070f6:	e008      	b.n	800710a <HAL_UART_Receive+0xd2>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	223f      	movs	r2, #63	@ 0x3f
 80070fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007100:	e003      	b.n	800710a <HAL_UART_Receive+0xd2>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007110:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800711a:	d108      	bne.n	800712e <HAL_UART_Receive+0xf6>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	e003      	b.n	8007136 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007136:	e036      	b.n	80071a6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	2120      	movs	r1, #32
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 fbee 	bl	8008924 <UART_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e032      	b.n	80071c0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	b29a      	uxth	r2, r3
 8007168:	8a7b      	ldrh	r3, [r7, #18]
 800716a:	4013      	ands	r3, r2
 800716c:	b29a      	uxth	r2, r3
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	3302      	adds	r3, #2
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e00c      	b.n	8007194 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	b2da      	uxtb	r2, r3
 8007182:	8a7b      	ldrh	r3, [r7, #18]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	4013      	ands	r3, r2
 8007188:	b2da      	uxtb	r2, r3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3301      	adds	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1c2      	bne.n	8007138 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e000      	b.n	80071c0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b0ba      	sub	sp, #232	@ 0xe8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80071f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071f6:	4013      	ands	r3, r2
 80071f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d11b      	bne.n	800723c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d015      	beq.n	800723c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8393 	beq.w	8007958 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
      }
      return;
 800723a:	e38d      	b.n	8007958 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800723c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8123 	beq.w	800748c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007246:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800724a:	4b8d      	ldr	r3, [pc, #564]	@ (8007480 <HAL_UART_IRQHandler+0x2b8>)
 800724c:	4013      	ands	r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007256:	4b8b      	ldr	r3, [pc, #556]	@ (8007484 <HAL_UART_IRQHandler+0x2bc>)
 8007258:	4013      	ands	r3, r2
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 8116 	beq.w	800748c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d011      	beq.n	8007290 <HAL_UART_IRQHandler+0xc8>
 800726c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2201      	movs	r2, #1
 800727e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d011      	beq.n	80072c0 <HAL_UART_IRQHandler+0xf8>
 800729c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2202      	movs	r2, #2
 80072ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	f043 0204 	orr.w	r2, r3, #4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d011      	beq.n	80072f0 <HAL_UART_IRQHandler+0x128>
 80072cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2204      	movs	r2, #4
 80072de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e6:	f043 0202 	orr.w	r2, r3, #2
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d017      	beq.n	800732c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007308:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800730c:	4b5c      	ldr	r3, [pc, #368]	@ (8007480 <HAL_UART_IRQHandler+0x2b8>)
 800730e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2208      	movs	r2, #8
 800731a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007322:	f043 0208 	orr.w	r2, r3, #8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800732c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <HAL_UART_IRQHandler+0x196>
 8007338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800733c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00c      	beq.n	800735e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800734c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007354:	f043 0220 	orr.w	r2, r3, #32
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 82f9 	beq.w	800795c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d013      	beq.n	800739e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d005      	beq.n	80073c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d054      	beq.n	800746c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 fb1c 	bl	8008a00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	d146      	bne.n	8007464 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800740e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800741a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1d9      	bne.n	80073d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007428:	2b00      	cmp	r3, #0
 800742a:	d017      	beq.n	800745c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007432:	4a15      	ldr	r2, [pc, #84]	@ (8007488 <HAL_UART_IRQHandler+0x2c0>)
 8007434:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800743c:	4618      	mov	r0, r3
 800743e:	f7fc fb15 	bl	8003a6c <HAL_DMA_Abort_IT>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d019      	beq.n	800747c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007456:	4610      	mov	r0, r2
 8007458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745a:	e00f      	b.n	800747c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa93 	bl	8007988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007462:	e00b      	b.n	800747c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa8f 	bl	8007988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746a:	e007      	b.n	800747c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa8b 	bl	8007988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800747a:	e26f      	b.n	800795c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	bf00      	nop
    return;
 800747e:	e26d      	b.n	800795c <HAL_UART_IRQHandler+0x794>
 8007480:	10000001 	.word	0x10000001
 8007484:	04000120 	.word	0x04000120
 8007488:	08008acd 	.word	0x08008acd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 8203 	bne.w	800789c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 81fc 	beq.w	800789c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 81f5 	beq.w	800789c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2210      	movs	r2, #16
 80074b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	f040 816d 	bne.w	80077a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4aa4      	ldr	r2, [pc, #656]	@ (8007764 <HAL_UART_IRQHandler+0x59c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d068      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4aa1      	ldr	r2, [pc, #644]	@ (8007768 <HAL_UART_IRQHandler+0x5a0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d061      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a9f      	ldr	r2, [pc, #636]	@ (800776c <HAL_UART_IRQHandler+0x5a4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d05a      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a9c      	ldr	r2, [pc, #624]	@ (8007770 <HAL_UART_IRQHandler+0x5a8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d053      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a9a      	ldr	r2, [pc, #616]	@ (8007774 <HAL_UART_IRQHandler+0x5ac>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d04c      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a97      	ldr	r2, [pc, #604]	@ (8007778 <HAL_UART_IRQHandler+0x5b0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d045      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a95      	ldr	r2, [pc, #596]	@ (800777c <HAL_UART_IRQHandler+0x5b4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d03e      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a92      	ldr	r2, [pc, #584]	@ (8007780 <HAL_UART_IRQHandler+0x5b8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d037      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a90      	ldr	r2, [pc, #576]	@ (8007784 <HAL_UART_IRQHandler+0x5bc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d030      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a8d      	ldr	r2, [pc, #564]	@ (8007788 <HAL_UART_IRQHandler+0x5c0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d029      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a8b      	ldr	r2, [pc, #556]	@ (800778c <HAL_UART_IRQHandler+0x5c4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a88      	ldr	r2, [pc, #544]	@ (8007790 <HAL_UART_IRQHandler+0x5c8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d01b      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a86      	ldr	r2, [pc, #536]	@ (8007794 <HAL_UART_IRQHandler+0x5cc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d014      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a83      	ldr	r2, [pc, #524]	@ (8007798 <HAL_UART_IRQHandler+0x5d0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00d      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a81      	ldr	r2, [pc, #516]	@ (800779c <HAL_UART_IRQHandler+0x5d4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d006      	beq.n	80075aa <HAL_UART_IRQHandler+0x3e2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a7e      	ldr	r2, [pc, #504]	@ (80077a0 <HAL_UART_IRQHandler+0x5d8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d106      	bne.n	80075b8 <HAL_UART_IRQHandler+0x3f0>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	e005      	b.n	80075c4 <HAL_UART_IRQHandler+0x3fc>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80ad 	beq.w	800772c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075dc:	429a      	cmp	r2, r3
 80075de:	f080 80a5 	bcs.w	800772c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f8:	f000 8087 	beq.w	800770a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800762a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800763e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1da      	bne.n	80075fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800766a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800766e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800767c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e1      	bne.n	8007646 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e3      	bne.n	8007682 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d8:	f023 0310 	bic.w	r3, r3, #16
 80076dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e4      	bne.n	80076c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007704:	4618      	mov	r0, r3
 8007706:	f7fb fe93 	bl	8003430 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800771c:	b29b      	uxth	r3, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f939 	bl	800799c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800772a:	e119      	b.n	8007960 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007736:	429a      	cmp	r2, r3
 8007738:	f040 8112 	bne.w	8007960 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007748:	f040 810a 	bne.w	8007960 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f91e 	bl	800799c <HAL_UARTEx_RxEventCallback>
      return;
 8007760:	e0fe      	b.n	8007960 <HAL_UART_IRQHandler+0x798>
 8007762:	bf00      	nop
 8007764:	40020010 	.word	0x40020010
 8007768:	40020028 	.word	0x40020028
 800776c:	40020040 	.word	0x40020040
 8007770:	40020058 	.word	0x40020058
 8007774:	40020070 	.word	0x40020070
 8007778:	40020088 	.word	0x40020088
 800777c:	400200a0 	.word	0x400200a0
 8007780:	400200b8 	.word	0x400200b8
 8007784:	40020410 	.word	0x40020410
 8007788:	40020428 	.word	0x40020428
 800778c:	40020440 	.word	0x40020440
 8007790:	40020458 	.word	0x40020458
 8007794:	40020470 	.word	0x40020470
 8007798:	40020488 	.word	0x40020488
 800779c:	400204a0 	.word	0x400204a0
 80077a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80cf 	beq.w	8007964 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80077c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80ca 	beq.w	8007964 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80077f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e4      	bne.n	80077d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	623b      	str	r3, [r7, #32]
   return(result);
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	4b55      	ldr	r3, [pc, #340]	@ (8007970 <HAL_UART_IRQHandler+0x7a8>)
 800781a:	4013      	ands	r3, r2
 800781c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800782a:	633a      	str	r2, [r7, #48]	@ 0x30
 800782c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e3      	bne.n	8007806 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0310 	bic.w	r3, r3, #16
 8007866:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	69b9      	ldr	r1, [r7, #24]
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	617b      	str	r3, [r7, #20]
   return(result);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e4      	bne.n	8007852 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800788e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f881 	bl	800799c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800789a:	e063      	b.n	8007964 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00e      	beq.n	80078c6 <HAL_UART_IRQHandler+0x6fe>
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 f941 	bl	8008b46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078c4:	e051      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d014      	beq.n	80078fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d008      	beq.n	80078fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d03a      	beq.n	8007968 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
    }
    return;
 80078fa:	e035      	b.n	8007968 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <HAL_UART_IRQHandler+0x754>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f8eb 	bl	8008af0 <UART_EndTransmit_IT>
    return;
 800791a:	e026      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <HAL_UART_IRQHandler+0x774>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f91a 	bl	8008b6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800793a:	e016      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007940:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d010      	beq.n	800796a <HAL_UART_IRQHandler+0x7a2>
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794c:	2b00      	cmp	r3, #0
 800794e:	da0c      	bge.n	800796a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f902 	bl	8008b5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007956:	e008      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007958:	bf00      	nop
 800795a:	e006      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
    return;
 800795c:	bf00      	nop
 800795e:	e004      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007960:	bf00      	nop
 8007962:	e002      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007968:	bf00      	nop
  }
}
 800796a:	37e8      	adds	r7, #232	@ 0xe8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	effffffe 	.word	0xeffffffe

08007974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b8:	b092      	sub	sp, #72	@ 0x48
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	431a      	orrs	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	4313      	orrs	r3, r2
 80079da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4bbe      	ldr	r3, [pc, #760]	@ (8007cdc <UART_SetConfig+0x328>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079ec:	430b      	orrs	r3, r1
 80079ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4ab3      	ldr	r2, [pc, #716]	@ (8007ce0 <UART_SetConfig+0x32c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	4baf      	ldr	r3, [pc, #700]	@ (8007ce4 <UART_SetConfig+0x330>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3a:	f023 010f 	bic.w	r1, r3, #15
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4aa6      	ldr	r2, [pc, #664]	@ (8007ce8 <UART_SetConfig+0x334>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d177      	bne.n	8007b44 <UART_SetConfig+0x190>
 8007a54:	4ba5      	ldr	r3, [pc, #660]	@ (8007cec <UART_SetConfig+0x338>)
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a5c:	2b28      	cmp	r3, #40	@ 0x28
 8007a5e:	d86d      	bhi.n	8007b3c <UART_SetConfig+0x188>
 8007a60:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0xb4>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007b0d 	.word	0x08007b0d
 8007a6c:	08007b3d 	.word	0x08007b3d
 8007a70:	08007b3d 	.word	0x08007b3d
 8007a74:	08007b3d 	.word	0x08007b3d
 8007a78:	08007b3d 	.word	0x08007b3d
 8007a7c:	08007b3d 	.word	0x08007b3d
 8007a80:	08007b3d 	.word	0x08007b3d
 8007a84:	08007b3d 	.word	0x08007b3d
 8007a88:	08007b15 	.word	0x08007b15
 8007a8c:	08007b3d 	.word	0x08007b3d
 8007a90:	08007b3d 	.word	0x08007b3d
 8007a94:	08007b3d 	.word	0x08007b3d
 8007a98:	08007b3d 	.word	0x08007b3d
 8007a9c:	08007b3d 	.word	0x08007b3d
 8007aa0:	08007b3d 	.word	0x08007b3d
 8007aa4:	08007b3d 	.word	0x08007b3d
 8007aa8:	08007b1d 	.word	0x08007b1d
 8007aac:	08007b3d 	.word	0x08007b3d
 8007ab0:	08007b3d 	.word	0x08007b3d
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007b3d 	.word	0x08007b3d
 8007abc:	08007b3d 	.word	0x08007b3d
 8007ac0:	08007b3d 	.word	0x08007b3d
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b3d 	.word	0x08007b3d
 8007ad0:	08007b3d 	.word	0x08007b3d
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007b3d 	.word	0x08007b3d
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b2d 	.word	0x08007b2d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b3d 	.word	0x08007b3d
 8007af4:	08007b3d 	.word	0x08007b3d
 8007af8:	08007b3d 	.word	0x08007b3d
 8007afc:	08007b3d 	.word	0x08007b3d
 8007b00:	08007b3d 	.word	0x08007b3d
 8007b04:	08007b3d 	.word	0x08007b3d
 8007b08:	08007b35 	.word	0x08007b35
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e326      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e322      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e31e      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e31a      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e316      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b34:	2340      	movs	r3, #64	@ 0x40
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e312      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b3c:	2380      	movs	r3, #128	@ 0x80
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e30e      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a69      	ldr	r2, [pc, #420]	@ (8007cf0 <UART_SetConfig+0x33c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d130      	bne.n	8007bb0 <UART_SetConfig+0x1fc>
 8007b4e:	4b67      	ldr	r3, [pc, #412]	@ (8007cec <UART_SetConfig+0x338>)
 8007b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d826      	bhi.n	8007ba8 <UART_SetConfig+0x1f4>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <UART_SetConfig+0x1ac>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e2f0      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e2ec      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e2e8      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e2e4      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e2e0      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ba0:	2340      	movs	r3, #64	@ 0x40
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e2dc      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ba8:	2380      	movs	r3, #128	@ 0x80
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e2d8      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8007cf4 <UART_SetConfig+0x340>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d130      	bne.n	8007c1c <UART_SetConfig+0x268>
 8007bba:	4b4c      	ldr	r3, [pc, #304]	@ (8007cec <UART_SetConfig+0x338>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d826      	bhi.n	8007c14 <UART_SetConfig+0x260>
 8007bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <UART_SetConfig+0x218>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e2ba      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e2b6      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e2b2      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e2ae      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c04:	2320      	movs	r3, #32
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e2aa      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c0c:	2340      	movs	r3, #64	@ 0x40
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e2a6      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c14:	2380      	movs	r3, #128	@ 0x80
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e2a2      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a35      	ldr	r2, [pc, #212]	@ (8007cf8 <UART_SetConfig+0x344>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d130      	bne.n	8007c88 <UART_SetConfig+0x2d4>
 8007c26:	4b31      	ldr	r3, [pc, #196]	@ (8007cec <UART_SetConfig+0x338>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d826      	bhi.n	8007c80 <UART_SetConfig+0x2cc>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <UART_SetConfig+0x284>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e284      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e280      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e27c      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e278      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c70:	2320      	movs	r3, #32
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e274      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c78:	2340      	movs	r3, #64	@ 0x40
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e270      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c80:	2380      	movs	r3, #128	@ 0x80
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e26c      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <UART_SetConfig+0x348>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d142      	bne.n	8007d18 <UART_SetConfig+0x364>
 8007c92:	4b16      	ldr	r3, [pc, #88]	@ (8007cec <UART_SetConfig+0x338>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d838      	bhi.n	8007d10 <UART_SetConfig+0x35c>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <UART_SetConfig+0x2f0>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007ccd 	.word	0x08007ccd
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007d01 	.word	0x08007d01
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e24e      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e24a      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e246      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e242      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007cdc:	cfff69f3 	.word	0xcfff69f3
 8007ce0:	58000c00 	.word	0x58000c00
 8007ce4:	11fff4ff 	.word	0x11fff4ff
 8007ce8:	40011000 	.word	0x40011000
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	40004400 	.word	0x40004400
 8007cf4:	40004800 	.word	0x40004800
 8007cf8:	40004c00 	.word	0x40004c00
 8007cfc:	40005000 	.word	0x40005000
 8007d00:	2320      	movs	r3, #32
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d06:	e22c      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007d08:	2340      	movs	r3, #64	@ 0x40
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0e:	e228      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007d10:	2380      	movs	r3, #128	@ 0x80
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d16:	e224      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4ab1      	ldr	r2, [pc, #708]	@ (8007fe4 <UART_SetConfig+0x630>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d176      	bne.n	8007e10 <UART_SetConfig+0x45c>
 8007d22:	4bb1      	ldr	r3, [pc, #708]	@ (8007fe8 <UART_SetConfig+0x634>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d2a:	2b28      	cmp	r3, #40	@ 0x28
 8007d2c:	d86c      	bhi.n	8007e08 <UART_SetConfig+0x454>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <UART_SetConfig+0x380>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007dd9 	.word	0x08007dd9
 8007d38:	08007e09 	.word	0x08007e09
 8007d3c:	08007e09 	.word	0x08007e09
 8007d40:	08007e09 	.word	0x08007e09
 8007d44:	08007e09 	.word	0x08007e09
 8007d48:	08007e09 	.word	0x08007e09
 8007d4c:	08007e09 	.word	0x08007e09
 8007d50:	08007e09 	.word	0x08007e09
 8007d54:	08007de1 	.word	0x08007de1
 8007d58:	08007e09 	.word	0x08007e09
 8007d5c:	08007e09 	.word	0x08007e09
 8007d60:	08007e09 	.word	0x08007e09
 8007d64:	08007e09 	.word	0x08007e09
 8007d68:	08007e09 	.word	0x08007e09
 8007d6c:	08007e09 	.word	0x08007e09
 8007d70:	08007e09 	.word	0x08007e09
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007e09 	.word	0x08007e09
 8007d7c:	08007e09 	.word	0x08007e09
 8007d80:	08007e09 	.word	0x08007e09
 8007d84:	08007e09 	.word	0x08007e09
 8007d88:	08007e09 	.word	0x08007e09
 8007d8c:	08007e09 	.word	0x08007e09
 8007d90:	08007e09 	.word	0x08007e09
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007e09 	.word	0x08007e09
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007e09 	.word	0x08007e09
 8007da8:	08007e09 	.word	0x08007e09
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007df9 	.word	0x08007df9
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	08007e09 	.word	0x08007e09
 8007dc0:	08007e09 	.word	0x08007e09
 8007dc4:	08007e09 	.word	0x08007e09
 8007dc8:	08007e09 	.word	0x08007e09
 8007dcc:	08007e09 	.word	0x08007e09
 8007dd0:	08007e09 	.word	0x08007e09
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e1c0      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e1bc      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e1b8      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e1b4      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007df8:	2320      	movs	r3, #32
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e1b0      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e00:	2340      	movs	r3, #64	@ 0x40
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e1ac      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e08:	2380      	movs	r3, #128	@ 0x80
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e1a8      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a75      	ldr	r2, [pc, #468]	@ (8007fec <UART_SetConfig+0x638>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d130      	bne.n	8007e7c <UART_SetConfig+0x4c8>
 8007e1a:	4b73      	ldr	r3, [pc, #460]	@ (8007fe8 <UART_SetConfig+0x634>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d826      	bhi.n	8007e74 <UART_SetConfig+0x4c0>
 8007e26:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <UART_SetConfig+0x478>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e4d 	.word	0x08007e4d
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e18a      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e186      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e182      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e17e      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e64:	2320      	movs	r3, #32
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e17a      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e6c:	2340      	movs	r3, #64	@ 0x40
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e176      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e74:	2380      	movs	r3, #128	@ 0x80
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e172      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a5b      	ldr	r2, [pc, #364]	@ (8007ff0 <UART_SetConfig+0x63c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d130      	bne.n	8007ee8 <UART_SetConfig+0x534>
 8007e86:	4b58      	ldr	r3, [pc, #352]	@ (8007fe8 <UART_SetConfig+0x634>)
 8007e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d826      	bhi.n	8007ee0 <UART_SetConfig+0x52c>
 8007e92:	a201      	add	r2, pc, #4	@ (adr r2, 8007e98 <UART_SetConfig+0x4e4>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	08007ec1 	.word	0x08007ec1
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ed1 	.word	0x08007ed1
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb6:	e154      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e150      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e14c      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ece:	e148      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e144      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ed8:	2340      	movs	r3, #64	@ 0x40
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e140      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ee0:	2380      	movs	r3, #128	@ 0x80
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e13c      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a41      	ldr	r2, [pc, #260]	@ (8007ff4 <UART_SetConfig+0x640>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	f040 8082 	bne.w	8007ff8 <UART_SetConfig+0x644>
 8007ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe8 <UART_SetConfig+0x634>)
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007efc:	2b28      	cmp	r3, #40	@ 0x28
 8007efe:	d86d      	bhi.n	8007fdc <UART_SetConfig+0x628>
 8007f00:	a201      	add	r2, pc, #4	@ (adr r2, 8007f08 <UART_SetConfig+0x554>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007fad 	.word	0x08007fad
 8007f0c:	08007fdd 	.word	0x08007fdd
 8007f10:	08007fdd 	.word	0x08007fdd
 8007f14:	08007fdd 	.word	0x08007fdd
 8007f18:	08007fdd 	.word	0x08007fdd
 8007f1c:	08007fdd 	.word	0x08007fdd
 8007f20:	08007fdd 	.word	0x08007fdd
 8007f24:	08007fdd 	.word	0x08007fdd
 8007f28:	08007fb5 	.word	0x08007fb5
 8007f2c:	08007fdd 	.word	0x08007fdd
 8007f30:	08007fdd 	.word	0x08007fdd
 8007f34:	08007fdd 	.word	0x08007fdd
 8007f38:	08007fdd 	.word	0x08007fdd
 8007f3c:	08007fdd 	.word	0x08007fdd
 8007f40:	08007fdd 	.word	0x08007fdd
 8007f44:	08007fdd 	.word	0x08007fdd
 8007f48:	08007fbd 	.word	0x08007fbd
 8007f4c:	08007fdd 	.word	0x08007fdd
 8007f50:	08007fdd 	.word	0x08007fdd
 8007f54:	08007fdd 	.word	0x08007fdd
 8007f58:	08007fdd 	.word	0x08007fdd
 8007f5c:	08007fdd 	.word	0x08007fdd
 8007f60:	08007fdd 	.word	0x08007fdd
 8007f64:	08007fdd 	.word	0x08007fdd
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fdd 	.word	0x08007fdd
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fdd 	.word	0x08007fdd
 8007f80:	08007fdd 	.word	0x08007fdd
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007fcd 	.word	0x08007fcd
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007fdd 	.word	0x08007fdd
 8007f94:	08007fdd 	.word	0x08007fdd
 8007f98:	08007fdd 	.word	0x08007fdd
 8007f9c:	08007fdd 	.word	0x08007fdd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fdd 	.word	0x08007fdd
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e0d6      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e0d2      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fbc:	2308      	movs	r3, #8
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e0ce      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e0ca      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fcc:	2320      	movs	r3, #32
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd2:	e0c6      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fd4:	2340      	movs	r3, #64	@ 0x40
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e0c2      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fdc:	2380      	movs	r3, #128	@ 0x80
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e0be      	b.n	8008162 <UART_SetConfig+0x7ae>
 8007fe4:	40011400 	.word	0x40011400
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	40007800 	.word	0x40007800
 8007ff0:	40007c00 	.word	0x40007c00
 8007ff4:	40011800 	.word	0x40011800
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4aad      	ldr	r2, [pc, #692]	@ (80082b4 <UART_SetConfig+0x900>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d176      	bne.n	80080f0 <UART_SetConfig+0x73c>
 8008002:	4bad      	ldr	r3, [pc, #692]	@ (80082b8 <UART_SetConfig+0x904>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800800a:	2b28      	cmp	r3, #40	@ 0x28
 800800c:	d86c      	bhi.n	80080e8 <UART_SetConfig+0x734>
 800800e:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <UART_SetConfig+0x660>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	080080b9 	.word	0x080080b9
 8008018:	080080e9 	.word	0x080080e9
 800801c:	080080e9 	.word	0x080080e9
 8008020:	080080e9 	.word	0x080080e9
 8008024:	080080e9 	.word	0x080080e9
 8008028:	080080e9 	.word	0x080080e9
 800802c:	080080e9 	.word	0x080080e9
 8008030:	080080e9 	.word	0x080080e9
 8008034:	080080c1 	.word	0x080080c1
 8008038:	080080e9 	.word	0x080080e9
 800803c:	080080e9 	.word	0x080080e9
 8008040:	080080e9 	.word	0x080080e9
 8008044:	080080e9 	.word	0x080080e9
 8008048:	080080e9 	.word	0x080080e9
 800804c:	080080e9 	.word	0x080080e9
 8008050:	080080e9 	.word	0x080080e9
 8008054:	080080c9 	.word	0x080080c9
 8008058:	080080e9 	.word	0x080080e9
 800805c:	080080e9 	.word	0x080080e9
 8008060:	080080e9 	.word	0x080080e9
 8008064:	080080e9 	.word	0x080080e9
 8008068:	080080e9 	.word	0x080080e9
 800806c:	080080e9 	.word	0x080080e9
 8008070:	080080e9 	.word	0x080080e9
 8008074:	080080d1 	.word	0x080080d1
 8008078:	080080e9 	.word	0x080080e9
 800807c:	080080e9 	.word	0x080080e9
 8008080:	080080e9 	.word	0x080080e9
 8008084:	080080e9 	.word	0x080080e9
 8008088:	080080e9 	.word	0x080080e9
 800808c:	080080e9 	.word	0x080080e9
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080d9 	.word	0x080080d9
 8008098:	080080e9 	.word	0x080080e9
 800809c:	080080e9 	.word	0x080080e9
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	080080e9 	.word	0x080080e9
 80080a8:	080080e9 	.word	0x080080e9
 80080ac:	080080e9 	.word	0x080080e9
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e050      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080c0:	2304      	movs	r3, #4
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e04c      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080c8:	2308      	movs	r3, #8
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e048      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080d0:	2310      	movs	r3, #16
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e044      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080d8:	2320      	movs	r3, #32
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e040      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080e0:	2340      	movs	r3, #64	@ 0x40
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e03c      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080e8:	2380      	movs	r3, #128	@ 0x80
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e038      	b.n	8008162 <UART_SetConfig+0x7ae>
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a71      	ldr	r2, [pc, #452]	@ (80082bc <UART_SetConfig+0x908>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d130      	bne.n	800815c <UART_SetConfig+0x7a8>
 80080fa:	4b6f      	ldr	r3, [pc, #444]	@ (80082b8 <UART_SetConfig+0x904>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b05      	cmp	r3, #5
 8008104:	d826      	bhi.n	8008154 <UART_SetConfig+0x7a0>
 8008106:	a201      	add	r2, pc, #4	@ (adr r2, 800810c <UART_SetConfig+0x758>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008125 	.word	0x08008125
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008135 	.word	0x08008135
 8008118:	0800813d 	.word	0x0800813d
 800811c:	08008145 	.word	0x08008145
 8008120:	0800814d 	.word	0x0800814d
 8008124:	2302      	movs	r3, #2
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e01a      	b.n	8008162 <UART_SetConfig+0x7ae>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e016      	b.n	8008162 <UART_SetConfig+0x7ae>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813a:	e012      	b.n	8008162 <UART_SetConfig+0x7ae>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008142:	e00e      	b.n	8008162 <UART_SetConfig+0x7ae>
 8008144:	2320      	movs	r3, #32
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814a:	e00a      	b.n	8008162 <UART_SetConfig+0x7ae>
 800814c:	2340      	movs	r3, #64	@ 0x40
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008152:	e006      	b.n	8008162 <UART_SetConfig+0x7ae>
 8008154:	2380      	movs	r3, #128	@ 0x80
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815a:	e002      	b.n	8008162 <UART_SetConfig+0x7ae>
 800815c:	2380      	movs	r3, #128	@ 0x80
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a55      	ldr	r2, [pc, #340]	@ (80082bc <UART_SetConfig+0x908>)
 8008168:	4293      	cmp	r3, r2
 800816a:	f040 80f8 	bne.w	800835e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800816e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008172:	2b20      	cmp	r3, #32
 8008174:	dc46      	bgt.n	8008204 <UART_SetConfig+0x850>
 8008176:	2b02      	cmp	r3, #2
 8008178:	db75      	blt.n	8008266 <UART_SetConfig+0x8b2>
 800817a:	3b02      	subs	r3, #2
 800817c:	2b1e      	cmp	r3, #30
 800817e:	d872      	bhi.n	8008266 <UART_SetConfig+0x8b2>
 8008180:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <UART_SetConfig+0x7d4>)
 8008182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008186:	bf00      	nop
 8008188:	0800820b 	.word	0x0800820b
 800818c:	08008267 	.word	0x08008267
 8008190:	08008213 	.word	0x08008213
 8008194:	08008267 	.word	0x08008267
 8008198:	08008267 	.word	0x08008267
 800819c:	08008267 	.word	0x08008267
 80081a0:	08008223 	.word	0x08008223
 80081a4:	08008267 	.word	0x08008267
 80081a8:	08008267 	.word	0x08008267
 80081ac:	08008267 	.word	0x08008267
 80081b0:	08008267 	.word	0x08008267
 80081b4:	08008267 	.word	0x08008267
 80081b8:	08008267 	.word	0x08008267
 80081bc:	08008267 	.word	0x08008267
 80081c0:	08008233 	.word	0x08008233
 80081c4:	08008267 	.word	0x08008267
 80081c8:	08008267 	.word	0x08008267
 80081cc:	08008267 	.word	0x08008267
 80081d0:	08008267 	.word	0x08008267
 80081d4:	08008267 	.word	0x08008267
 80081d8:	08008267 	.word	0x08008267
 80081dc:	08008267 	.word	0x08008267
 80081e0:	08008267 	.word	0x08008267
 80081e4:	08008267 	.word	0x08008267
 80081e8:	08008267 	.word	0x08008267
 80081ec:	08008267 	.word	0x08008267
 80081f0:	08008267 	.word	0x08008267
 80081f4:	08008267 	.word	0x08008267
 80081f8:	08008267 	.word	0x08008267
 80081fc:	08008267 	.word	0x08008267
 8008200:	08008259 	.word	0x08008259
 8008204:	2b40      	cmp	r3, #64	@ 0x40
 8008206:	d02a      	beq.n	800825e <UART_SetConfig+0x8aa>
 8008208:	e02d      	b.n	8008266 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800820a:	f7fe fa15 	bl	8006638 <HAL_RCCEx_GetD3PCLK1Freq>
 800820e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008210:	e02f      	b.n	8008272 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fa24 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008220:	e027      	b.n	8008272 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008222:	f107 0318 	add.w	r3, r7, #24
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fb70 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008230:	e01f      	b.n	8008272 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008232:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <UART_SetConfig+0x904>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800823e:	4b1e      	ldr	r3, [pc, #120]	@ (80082b8 <UART_SetConfig+0x904>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <UART_SetConfig+0x90c>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008250:	e00f      	b.n	8008272 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008252:	4b1b      	ldr	r3, [pc, #108]	@ (80082c0 <UART_SetConfig+0x90c>)
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008256:	e00c      	b.n	8008272 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008258:	4b1a      	ldr	r3, [pc, #104]	@ (80082c4 <UART_SetConfig+0x910>)
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825c:	e009      	b.n	8008272 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008264:	e005      	b.n	8008272 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 81ee 	beq.w	8008656 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	4a12      	ldr	r2, [pc, #72]	@ (80082c8 <UART_SetConfig+0x914>)
 8008280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008284:	461a      	mov	r2, r3
 8008286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008288:	fbb3 f3f2 	udiv	r3, r3, r2
 800828c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	4413      	add	r3, r2
 8008298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800829a:	429a      	cmp	r2, r3
 800829c:	d305      	bcc.n	80082aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d910      	bls.n	80082cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082b0:	e1d1      	b.n	8008656 <UART_SetConfig+0xca2>
 80082b2:	bf00      	nop
 80082b4:	40011c00 	.word	0x40011c00
 80082b8:	58024400 	.word	0x58024400
 80082bc:	58000c00 	.word	0x58000c00
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	003d0900 	.word	0x003d0900
 80082c8:	08009944 	.word	0x08009944
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ce:	2200      	movs	r2, #0
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	60fa      	str	r2, [r7, #12]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	4ac0      	ldr	r2, [pc, #768]	@ (80085dc <UART_SetConfig+0xc28>)
 80082da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2200      	movs	r2, #0
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082ee:	f7f7 fffd 	bl	80002ec <__aeabi_uldivmod>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4610      	mov	r0, r2
 80082f8:	4619      	mov	r1, r3
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	020b      	lsls	r3, r1, #8
 8008304:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008308:	0202      	lsls	r2, r0, #8
 800830a:	6979      	ldr	r1, [r7, #20]
 800830c:	6849      	ldr	r1, [r1, #4]
 800830e:	0849      	lsrs	r1, r1, #1
 8008310:	2000      	movs	r0, #0
 8008312:	460c      	mov	r4, r1
 8008314:	4605      	mov	r5, r0
 8008316:	eb12 0804 	adds.w	r8, r2, r4
 800831a:	eb43 0905 	adc.w	r9, r3, r5
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	469a      	mov	sl, r3
 8008326:	4693      	mov	fp, r2
 8008328:	4652      	mov	r2, sl
 800832a:	465b      	mov	r3, fp
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f7f7 ffdc 	bl	80002ec <__aeabi_uldivmod>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4613      	mov	r3, r2
 800833a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008342:	d308      	bcc.n	8008356 <UART_SetConfig+0x9a2>
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800834a:	d204      	bcs.n	8008356 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008352:	60da      	str	r2, [r3, #12]
 8008354:	e17f      	b.n	8008656 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800835c:	e17b      	b.n	8008656 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008366:	f040 80bd 	bne.w	80084e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800836a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800836e:	2b20      	cmp	r3, #32
 8008370:	dc48      	bgt.n	8008404 <UART_SetConfig+0xa50>
 8008372:	2b00      	cmp	r3, #0
 8008374:	db7b      	blt.n	800846e <UART_SetConfig+0xaba>
 8008376:	2b20      	cmp	r3, #32
 8008378:	d879      	bhi.n	800846e <UART_SetConfig+0xaba>
 800837a:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <UART_SetConfig+0x9cc>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	0800840b 	.word	0x0800840b
 8008384:	08008413 	.word	0x08008413
 8008388:	0800846f 	.word	0x0800846f
 800838c:	0800846f 	.word	0x0800846f
 8008390:	0800841b 	.word	0x0800841b
 8008394:	0800846f 	.word	0x0800846f
 8008398:	0800846f 	.word	0x0800846f
 800839c:	0800846f 	.word	0x0800846f
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800846f 	.word	0x0800846f
 80083a8:	0800846f 	.word	0x0800846f
 80083ac:	0800846f 	.word	0x0800846f
 80083b0:	0800846f 	.word	0x0800846f
 80083b4:	0800846f 	.word	0x0800846f
 80083b8:	0800846f 	.word	0x0800846f
 80083bc:	0800846f 	.word	0x0800846f
 80083c0:	0800843b 	.word	0x0800843b
 80083c4:	0800846f 	.word	0x0800846f
 80083c8:	0800846f 	.word	0x0800846f
 80083cc:	0800846f 	.word	0x0800846f
 80083d0:	0800846f 	.word	0x0800846f
 80083d4:	0800846f 	.word	0x0800846f
 80083d8:	0800846f 	.word	0x0800846f
 80083dc:	0800846f 	.word	0x0800846f
 80083e0:	0800846f 	.word	0x0800846f
 80083e4:	0800846f 	.word	0x0800846f
 80083e8:	0800846f 	.word	0x0800846f
 80083ec:	0800846f 	.word	0x0800846f
 80083f0:	0800846f 	.word	0x0800846f
 80083f4:	0800846f 	.word	0x0800846f
 80083f8:	0800846f 	.word	0x0800846f
 80083fc:	0800846f 	.word	0x0800846f
 8008400:	08008461 	.word	0x08008461
 8008404:	2b40      	cmp	r3, #64	@ 0x40
 8008406:	d02e      	beq.n	8008466 <UART_SetConfig+0xab2>
 8008408:	e031      	b.n	800846e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800840a:	f7fc ff2b 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 800840e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008410:	e033      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008412:	f7fc ff3d 	bl	8005290 <HAL_RCC_GetPCLK2Freq>
 8008416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008418:	e02f      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800841a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe f920 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008428:	e027      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800842a:	f107 0318 	add.w	r3, r7, #24
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fa6c 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008438:	e01f      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800843a:	4b69      	ldr	r3, [pc, #420]	@ (80085e0 <UART_SetConfig+0xc2c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008446:	4b66      	ldr	r3, [pc, #408]	@ (80085e0 <UART_SetConfig+0xc2c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	08db      	lsrs	r3, r3, #3
 800844c:	f003 0303 	and.w	r3, r3, #3
 8008450:	4a64      	ldr	r2, [pc, #400]	@ (80085e4 <UART_SetConfig+0xc30>)
 8008452:	fa22 f303 	lsr.w	r3, r2, r3
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008458:	e00f      	b.n	800847a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800845a:	4b62      	ldr	r3, [pc, #392]	@ (80085e4 <UART_SetConfig+0xc30>)
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845e:	e00c      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008460:	4b61      	ldr	r3, [pc, #388]	@ (80085e8 <UART_SetConfig+0xc34>)
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008464:	e009      	b.n	800847a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800846c:	e005      	b.n	800847a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800847a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80ea 	beq.w	8008656 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008486:	4a55      	ldr	r2, [pc, #340]	@ (80085dc <UART_SetConfig+0xc28>)
 8008488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800848c:	461a      	mov	r2, r3
 800848e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008490:	fbb3 f3f2 	udiv	r3, r3, r2
 8008494:	005a      	lsls	r2, r3, #1
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	441a      	add	r2, r3
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	2b0f      	cmp	r3, #15
 80084ac:	d916      	bls.n	80084dc <UART_SetConfig+0xb28>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b4:	d212      	bcs.n	80084dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	f023 030f 	bic.w	r3, r3, #15
 80084be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80084ce:	4313      	orrs	r3, r2
 80084d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80084d8:	60da      	str	r2, [r3, #12]
 80084da:	e0bc      	b.n	8008656 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084e2:	e0b8      	b.n	8008656 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	dc4b      	bgt.n	8008584 <UART_SetConfig+0xbd0>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f2c0 8087 	blt.w	8008600 <UART_SetConfig+0xc4c>
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	f200 8084 	bhi.w	8008600 <UART_SetConfig+0xc4c>
 80084f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008500 <UART_SetConfig+0xb4c>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	0800858b 	.word	0x0800858b
 8008504:	08008593 	.word	0x08008593
 8008508:	08008601 	.word	0x08008601
 800850c:	08008601 	.word	0x08008601
 8008510:	0800859b 	.word	0x0800859b
 8008514:	08008601 	.word	0x08008601
 8008518:	08008601 	.word	0x08008601
 800851c:	08008601 	.word	0x08008601
 8008520:	080085ab 	.word	0x080085ab
 8008524:	08008601 	.word	0x08008601
 8008528:	08008601 	.word	0x08008601
 800852c:	08008601 	.word	0x08008601
 8008530:	08008601 	.word	0x08008601
 8008534:	08008601 	.word	0x08008601
 8008538:	08008601 	.word	0x08008601
 800853c:	08008601 	.word	0x08008601
 8008540:	080085bb 	.word	0x080085bb
 8008544:	08008601 	.word	0x08008601
 8008548:	08008601 	.word	0x08008601
 800854c:	08008601 	.word	0x08008601
 8008550:	08008601 	.word	0x08008601
 8008554:	08008601 	.word	0x08008601
 8008558:	08008601 	.word	0x08008601
 800855c:	08008601 	.word	0x08008601
 8008560:	08008601 	.word	0x08008601
 8008564:	08008601 	.word	0x08008601
 8008568:	08008601 	.word	0x08008601
 800856c:	08008601 	.word	0x08008601
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	080085f3 	.word	0x080085f3
 8008584:	2b40      	cmp	r3, #64	@ 0x40
 8008586:	d037      	beq.n	80085f8 <UART_SetConfig+0xc44>
 8008588:	e03a      	b.n	8008600 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800858a:	f7fc fe6b 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 800858e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008590:	e03c      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008592:	f7fc fe7d 	bl	8005290 <HAL_RCC_GetPCLK2Freq>
 8008596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008598:	e038      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe f860 	bl	8006664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a8:	e030      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085aa:	f107 0318 	add.w	r3, r7, #24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe f9ac 	bl	800690c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b8:	e028      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ba:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <UART_SetConfig+0xc2c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d012      	beq.n	80085ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085c6:	4b06      	ldr	r3, [pc, #24]	@ (80085e0 <UART_SetConfig+0xc2c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	08db      	lsrs	r3, r3, #3
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	4a04      	ldr	r2, [pc, #16]	@ (80085e4 <UART_SetConfig+0xc30>)
 80085d2:	fa22 f303 	lsr.w	r3, r2, r3
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085d8:	e018      	b.n	800860c <UART_SetConfig+0xc58>
 80085da:	bf00      	nop
 80085dc:	08009944 	.word	0x08009944
 80085e0:	58024400 	.word	0x58024400
 80085e4:	03d09000 	.word	0x03d09000
 80085e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80085ec:	4b24      	ldr	r3, [pc, #144]	@ (8008680 <UART_SetConfig+0xccc>)
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e00c      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f2:	4b24      	ldr	r3, [pc, #144]	@ (8008684 <UART_SetConfig+0xcd0>)
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e009      	b.n	800860c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fe:	e005      	b.n	800860c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800860a:	bf00      	nop
    }

    if (pclk != 0U)
 800860c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d021      	beq.n	8008656 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008616:	4a1c      	ldr	r2, [pc, #112]	@ (8008688 <UART_SetConfig+0xcd4>)
 8008618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800861c:	461a      	mov	r2, r3
 800861e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008620:	fbb3 f2f2 	udiv	r2, r3, r2
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	441a      	add	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	fbb2 f3f3 	udiv	r3, r2, r3
 8008634:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d909      	bls.n	8008650 <UART_SetConfig+0xc9c>
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008642:	d205      	bcs.n	8008650 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008646:	b29a      	uxth	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	e002      	b.n	8008656 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2201      	movs	r2, #1
 800865a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2201      	movs	r2, #1
 8008662:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2200      	movs	r2, #0
 8008670:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008672:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008676:	4618      	mov	r0, r3
 8008678:	3748      	adds	r7, #72	@ 0x48
 800867a:	46bd      	mov	sp, r7
 800867c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008680:	03d09000 	.word	0x03d09000
 8008684:	003d0900 	.word	0x003d0900
 8008688:	08009944 	.word	0x08009944

0800868c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	f003 0310 	and.w	r3, r3, #16
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01a      	beq.n	80087a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800878a:	d10a      	bne.n	80087a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	605a      	str	r2, [r3, #4]
  }
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b098      	sub	sp, #96	@ 0x60
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087e0:	f7fa fc6e 	bl	80030c0 <HAL_GetTick>
 80087e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d12f      	bne.n	8008854 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087fc:	2200      	movs	r2, #0
 80087fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f88e 	bl	8008924 <UART_WaitOnFlagUntilTimeout>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d022      	beq.n	8008854 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800881c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008822:	653b      	str	r3, [r7, #80]	@ 0x50
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800882c:	647b      	str	r3, [r7, #68]	@ 0x44
 800882e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800883a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e063      	b.n	800891c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b04      	cmp	r3, #4
 8008860:	d149      	bne.n	80088f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008862:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800886a:	2200      	movs	r2, #0
 800886c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f857 	bl	8008924 <UART_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d03c      	beq.n	80088f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	623b      	str	r3, [r7, #32]
   return(result);
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800889a:	633b      	str	r3, [r7, #48]	@ 0x30
 800889c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e6      	bne.n	800887c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3308      	adds	r3, #8
 80088b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088ce:	61fa      	str	r2, [r7, #28]
 80088d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	69b9      	ldr	r1, [r7, #24]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	617b      	str	r3, [r7, #20]
   return(result);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e5      	bne.n	80088ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e012      	b.n	800891c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3758      	adds	r7, #88	@ 0x58
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4613      	mov	r3, r2
 8008932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008934:	e04f      	b.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d04b      	beq.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893e:	f7fa fbbf 	bl	80030c0 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <UART_WaitOnFlagUntilTimeout+0x30>
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e04e      	b.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	d037      	beq.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b80      	cmp	r3, #128	@ 0x80
 800896a:	d034      	beq.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b40      	cmp	r3, #64	@ 0x40
 8008970:	d031      	beq.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b08      	cmp	r3, #8
 800897e:	d110      	bne.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2208      	movs	r2, #8
 8008986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f839 	bl	8008a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2208      	movs	r2, #8
 8008992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e029      	b.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b0:	d111      	bne.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f81f 	bl	8008a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e00f      	b.n	80089f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4013      	ands	r3, r2
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d0a0      	beq.n	8008936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b095      	sub	sp, #84	@ 0x54
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e6      	bne.n	8008a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <UART_EndRxTransfer+0xc8>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e5      	bne.n	8008a3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d118      	bne.n	8008aa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f023 0310 	bic.w	r3, r3, #16
 8008a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008abc:	bf00      	nop
 8008abe:	3754      	adds	r7, #84	@ 0x54
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	effffffe 	.word	0xeffffffe

08008acc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7fe ff50 	bl	8007988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b0c:	61fb      	str	r3, [r7, #28]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	61bb      	str	r3, [r7, #24]
 8008b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6979      	ldr	r1, [r7, #20]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	613b      	str	r3, [r7, #16]
   return(result);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e6      	bne.n	8008af8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fe ff1b 	bl	8007974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b3e:	bf00      	nop
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e027      	b.n	8008be8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2224      	movs	r2, #36	@ 0x24
 8008ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0201 	bic.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e02d      	b.n	8008c68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2224      	movs	r2, #36	@ 0x24
 8008c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f022 0201 	bic.w	r2, r2, #1
 8008c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f84f 	bl	8008cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e02d      	b.n	8008ce4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2224      	movs	r2, #36	@ 0x24
 8008c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0201 	bic.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f811 	bl	8008cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d108      	bne.n	8008d0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d0c:	e031      	b.n	8008d72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d0e:	2310      	movs	r3, #16
 8008d10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d12:	2310      	movs	r3, #16
 8008d14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	0e5b      	lsrs	r3, r3, #25
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	0f5b      	lsrs	r3, r3, #29
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	7b3a      	ldrb	r2, [r7, #12]
 8008d3a:	4911      	ldr	r1, [pc, #68]	@ (8008d80 <UARTEx_SetNbDataToProcess+0x94>)
 8008d3c:	5c8a      	ldrb	r2, [r1, r2]
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d42:	7b3a      	ldrb	r2, [r7, #12]
 8008d44:	490f      	ldr	r1, [pc, #60]	@ (8008d84 <UARTEx_SetNbDataToProcess+0x98>)
 8008d46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	7b7a      	ldrb	r2, [r7, #13]
 8008d58:	4909      	ldr	r1, [pc, #36]	@ (8008d80 <UARTEx_SetNbDataToProcess+0x94>)
 8008d5a:	5c8a      	ldrb	r2, [r1, r2]
 8008d5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d60:	7b7a      	ldrb	r2, [r7, #13]
 8008d62:	4908      	ldr	r1, [pc, #32]	@ (8008d84 <UARTEx_SetNbDataToProcess+0x98>)
 8008d64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	0800995c 	.word	0x0800995c
 8008d84:	08009964 	.word	0x08009964

08008d88 <std>:
 8008d88:	2300      	movs	r3, #0
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d96:	6083      	str	r3, [r0, #8]
 8008d98:	8181      	strh	r1, [r0, #12]
 8008d9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d9c:	81c2      	strh	r2, [r0, #14]
 8008d9e:	6183      	str	r3, [r0, #24]
 8008da0:	4619      	mov	r1, r3
 8008da2:	2208      	movs	r2, #8
 8008da4:	305c      	adds	r0, #92	@ 0x5c
 8008da6:	f000 f9e7 	bl	8009178 <memset>
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <std+0x58>)
 8008dac:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dae:	4b0d      	ldr	r3, [pc, #52]	@ (8008de4 <std+0x5c>)
 8008db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008db2:	4b0d      	ldr	r3, [pc, #52]	@ (8008de8 <std+0x60>)
 8008db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008db6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <std+0x64>)
 8008db8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <std+0x68>)
 8008dbc:	6224      	str	r4, [r4, #32]
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	d006      	beq.n	8008dd0 <std+0x48>
 8008dc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dc6:	4294      	cmp	r4, r2
 8008dc8:	d002      	beq.n	8008dd0 <std+0x48>
 8008dca:	33d0      	adds	r3, #208	@ 0xd0
 8008dcc:	429c      	cmp	r4, r3
 8008dce:	d105      	bne.n	8008ddc <std+0x54>
 8008dd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	f000 ba46 	b.w	8009268 <__retarget_lock_init_recursive>
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	bf00      	nop
 8008de0:	08008fc9 	.word	0x08008fc9
 8008de4:	08008feb 	.word	0x08008feb
 8008de8:	08009023 	.word	0x08009023
 8008dec:	08009047 	.word	0x08009047
 8008df0:	24000124 	.word	0x24000124

08008df4 <stdio_exit_handler>:
 8008df4:	4a02      	ldr	r2, [pc, #8]	@ (8008e00 <stdio_exit_handler+0xc>)
 8008df6:	4903      	ldr	r1, [pc, #12]	@ (8008e04 <stdio_exit_handler+0x10>)
 8008df8:	4803      	ldr	r0, [pc, #12]	@ (8008e08 <stdio_exit_handler+0x14>)
 8008dfa:	f000 b869 	b.w	8008ed0 <_fwalk_sglue>
 8008dfe:	bf00      	nop
 8008e00:	24000010 	.word	0x24000010
 8008e04:	08009585 	.word	0x08009585
 8008e08:	24000020 	.word	0x24000020

08008e0c <cleanup_stdio>:
 8008e0c:	6841      	ldr	r1, [r0, #4]
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e40 <cleanup_stdio+0x34>)
 8008e10:	4299      	cmp	r1, r3
 8008e12:	b510      	push	{r4, lr}
 8008e14:	4604      	mov	r4, r0
 8008e16:	d001      	beq.n	8008e1c <cleanup_stdio+0x10>
 8008e18:	f000 fbb4 	bl	8009584 <_fflush_r>
 8008e1c:	68a1      	ldr	r1, [r4, #8]
 8008e1e:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <cleanup_stdio+0x38>)
 8008e20:	4299      	cmp	r1, r3
 8008e22:	d002      	beq.n	8008e2a <cleanup_stdio+0x1e>
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fbad 	bl	8009584 <_fflush_r>
 8008e2a:	68e1      	ldr	r1, [r4, #12]
 8008e2c:	4b06      	ldr	r3, [pc, #24]	@ (8008e48 <cleanup_stdio+0x3c>)
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	d004      	beq.n	8008e3c <cleanup_stdio+0x30>
 8008e32:	4620      	mov	r0, r4
 8008e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e38:	f000 bba4 	b.w	8009584 <_fflush_r>
 8008e3c:	bd10      	pop	{r4, pc}
 8008e3e:	bf00      	nop
 8008e40:	24000124 	.word	0x24000124
 8008e44:	2400018c 	.word	0x2400018c
 8008e48:	240001f4 	.word	0x240001f4

08008e4c <global_stdio_init.part.0>:
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <global_stdio_init.part.0+0x30>)
 8008e50:	4c0b      	ldr	r4, [pc, #44]	@ (8008e80 <global_stdio_init.part.0+0x34>)
 8008e52:	4a0c      	ldr	r2, [pc, #48]	@ (8008e84 <global_stdio_init.part.0+0x38>)
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	4620      	mov	r0, r4
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2104      	movs	r1, #4
 8008e5c:	f7ff ff94 	bl	8008d88 <std>
 8008e60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e64:	2201      	movs	r2, #1
 8008e66:	2109      	movs	r1, #9
 8008e68:	f7ff ff8e 	bl	8008d88 <std>
 8008e6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e70:	2202      	movs	r2, #2
 8008e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e76:	2112      	movs	r1, #18
 8008e78:	f7ff bf86 	b.w	8008d88 <std>
 8008e7c:	2400025c 	.word	0x2400025c
 8008e80:	24000124 	.word	0x24000124
 8008e84:	08008df5 	.word	0x08008df5

08008e88 <__sfp_lock_acquire>:
 8008e88:	4801      	ldr	r0, [pc, #4]	@ (8008e90 <__sfp_lock_acquire+0x8>)
 8008e8a:	f000 b9ee 	b.w	800926a <__retarget_lock_acquire_recursive>
 8008e8e:	bf00      	nop
 8008e90:	24000265 	.word	0x24000265

08008e94 <__sfp_lock_release>:
 8008e94:	4801      	ldr	r0, [pc, #4]	@ (8008e9c <__sfp_lock_release+0x8>)
 8008e96:	f000 b9e9 	b.w	800926c <__retarget_lock_release_recursive>
 8008e9a:	bf00      	nop
 8008e9c:	24000265 	.word	0x24000265

08008ea0 <__sinit>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f7ff fff0 	bl	8008e88 <__sfp_lock_acquire>
 8008ea8:	6a23      	ldr	r3, [r4, #32]
 8008eaa:	b11b      	cbz	r3, 8008eb4 <__sinit+0x14>
 8008eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb0:	f7ff bff0 	b.w	8008e94 <__sfp_lock_release>
 8008eb4:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <__sinit+0x28>)
 8008eb6:	6223      	str	r3, [r4, #32]
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <__sinit+0x2c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f5      	bne.n	8008eac <__sinit+0xc>
 8008ec0:	f7ff ffc4 	bl	8008e4c <global_stdio_init.part.0>
 8008ec4:	e7f2      	b.n	8008eac <__sinit+0xc>
 8008ec6:	bf00      	nop
 8008ec8:	08008e0d 	.word	0x08008e0d
 8008ecc:	2400025c 	.word	0x2400025c

08008ed0 <_fwalk_sglue>:
 8008ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	4688      	mov	r8, r1
 8008ed8:	4614      	mov	r4, r2
 8008eda:	2600      	movs	r6, #0
 8008edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ee4:	d505      	bpl.n	8008ef2 <_fwalk_sglue+0x22>
 8008ee6:	6824      	ldr	r4, [r4, #0]
 8008ee8:	2c00      	cmp	r4, #0
 8008eea:	d1f7      	bne.n	8008edc <_fwalk_sglue+0xc>
 8008eec:	4630      	mov	r0, r6
 8008eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d907      	bls.n	8008f08 <_fwalk_sglue+0x38>
 8008ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008efc:	3301      	adds	r3, #1
 8008efe:	d003      	beq.n	8008f08 <_fwalk_sglue+0x38>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4638      	mov	r0, r7
 8008f04:	47c0      	blx	r8
 8008f06:	4306      	orrs	r6, r0
 8008f08:	3568      	adds	r5, #104	@ 0x68
 8008f0a:	e7e9      	b.n	8008ee0 <_fwalk_sglue+0x10>

08008f0c <_puts_r>:
 8008f0c:	6a03      	ldr	r3, [r0, #32]
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	6884      	ldr	r4, [r0, #8]
 8008f12:	4605      	mov	r5, r0
 8008f14:	460e      	mov	r6, r1
 8008f16:	b90b      	cbnz	r3, 8008f1c <_puts_r+0x10>
 8008f18:	f7ff ffc2 	bl	8008ea0 <__sinit>
 8008f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d405      	bmi.n	8008f2e <_puts_r+0x22>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	0598      	lsls	r0, r3, #22
 8008f26:	d402      	bmi.n	8008f2e <_puts_r+0x22>
 8008f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f2a:	f000 f99e 	bl	800926a <__retarget_lock_acquire_recursive>
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	0719      	lsls	r1, r3, #28
 8008f32:	d502      	bpl.n	8008f3a <_puts_r+0x2e>
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d135      	bne.n	8008fa6 <_puts_r+0x9a>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f8c5 	bl	80090cc <__swsetup_r>
 8008f42:	b380      	cbz	r0, 8008fa6 <_puts_r+0x9a>
 8008f44:	f04f 35ff 	mov.w	r5, #4294967295
 8008f48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f4a:	07da      	lsls	r2, r3, #31
 8008f4c:	d405      	bmi.n	8008f5a <_puts_r+0x4e>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	059b      	lsls	r3, r3, #22
 8008f52:	d402      	bmi.n	8008f5a <_puts_r+0x4e>
 8008f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f56:	f000 f989 	bl	800926c <__retarget_lock_release_recursive>
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da04      	bge.n	8008f6c <_puts_r+0x60>
 8008f62:	69a2      	ldr	r2, [r4, #24]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	dc17      	bgt.n	8008f98 <_puts_r+0x8c>
 8008f68:	290a      	cmp	r1, #10
 8008f6a:	d015      	beq.n	8008f98 <_puts_r+0x8c>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	7019      	strb	r1, [r3, #0]
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d1ed      	bne.n	8008f5e <_puts_r+0x52>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	da11      	bge.n	8008faa <_puts_r+0x9e>
 8008f86:	4622      	mov	r2, r4
 8008f88:	210a      	movs	r1, #10
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 f85f 	bl	800904e <__swbuf_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d0d7      	beq.n	8008f44 <_puts_r+0x38>
 8008f94:	250a      	movs	r5, #10
 8008f96:	e7d7      	b.n	8008f48 <_puts_r+0x3c>
 8008f98:	4622      	mov	r2, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 f857 	bl	800904e <__swbuf_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1e7      	bne.n	8008f74 <_puts_r+0x68>
 8008fa4:	e7ce      	b.n	8008f44 <_puts_r+0x38>
 8008fa6:	3e01      	subs	r6, #1
 8008fa8:	e7e4      	b.n	8008f74 <_puts_r+0x68>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	220a      	movs	r2, #10
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e7ee      	b.n	8008f94 <_puts_r+0x88>
	...

08008fb8 <puts>:
 8008fb8:	4b02      	ldr	r3, [pc, #8]	@ (8008fc4 <puts+0xc>)
 8008fba:	4601      	mov	r1, r0
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	f7ff bfa5 	b.w	8008f0c <_puts_r>
 8008fc2:	bf00      	nop
 8008fc4:	2400001c 	.word	0x2400001c

08008fc8 <__sread>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	f000 f8fc 	bl	80091cc <_read_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	bfab      	itete	ge
 8008fd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fda:	89a3      	ldrhlt	r3, [r4, #12]
 8008fdc:	181b      	addge	r3, r3, r0
 8008fde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fe2:	bfac      	ite	ge
 8008fe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fe6:	81a3      	strhlt	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__swrite>:
 8008fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	461f      	mov	r7, r3
 8008ff0:	898b      	ldrh	r3, [r1, #12]
 8008ff2:	05db      	lsls	r3, r3, #23
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	d505      	bpl.n	8009008 <__swrite+0x1e>
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	2302      	movs	r3, #2
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f8d0 	bl	80091a8 <_lseek_r>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	f000 b8e7 	b.w	80091f0 <_write_r>

08009022 <__sseek>:
 8009022:	b510      	push	{r4, lr}
 8009024:	460c      	mov	r4, r1
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 f8bd 	bl	80091a8 <_lseek_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	bf15      	itete	ne
 8009034:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800903a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800903e:	81a3      	strheq	r3, [r4, #12]
 8009040:	bf18      	it	ne
 8009042:	81a3      	strhne	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__sclose>:
 8009046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904a:	f000 b89d 	b.w	8009188 <_close_r>

0800904e <__swbuf_r>:
 800904e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009050:	460e      	mov	r6, r1
 8009052:	4614      	mov	r4, r2
 8009054:	4605      	mov	r5, r0
 8009056:	b118      	cbz	r0, 8009060 <__swbuf_r+0x12>
 8009058:	6a03      	ldr	r3, [r0, #32]
 800905a:	b90b      	cbnz	r3, 8009060 <__swbuf_r+0x12>
 800905c:	f7ff ff20 	bl	8008ea0 <__sinit>
 8009060:	69a3      	ldr	r3, [r4, #24]
 8009062:	60a3      	str	r3, [r4, #8]
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	071a      	lsls	r2, r3, #28
 8009068:	d501      	bpl.n	800906e <__swbuf_r+0x20>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	b943      	cbnz	r3, 8009080 <__swbuf_r+0x32>
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f82b 	bl	80090cc <__swsetup_r>
 8009076:	b118      	cbz	r0, 8009080 <__swbuf_r+0x32>
 8009078:	f04f 37ff 	mov.w	r7, #4294967295
 800907c:	4638      	mov	r0, r7
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	6922      	ldr	r2, [r4, #16]
 8009084:	1a98      	subs	r0, r3, r2
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	b2f6      	uxtb	r6, r6
 800908a:	4283      	cmp	r3, r0
 800908c:	4637      	mov	r7, r6
 800908e:	dc05      	bgt.n	800909c <__swbuf_r+0x4e>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 fa76 	bl	8009584 <_fflush_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	d1ed      	bne.n	8009078 <__swbuf_r+0x2a>
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	3b01      	subs	r3, #1
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	6022      	str	r2, [r4, #0]
 80090a8:	701e      	strb	r6, [r3, #0]
 80090aa:	6962      	ldr	r2, [r4, #20]
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d004      	beq.n	80090bc <__swbuf_r+0x6e>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	07db      	lsls	r3, r3, #31
 80090b6:	d5e1      	bpl.n	800907c <__swbuf_r+0x2e>
 80090b8:	2e0a      	cmp	r6, #10
 80090ba:	d1df      	bne.n	800907c <__swbuf_r+0x2e>
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fa60 	bl	8009584 <_fflush_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d0d9      	beq.n	800907c <__swbuf_r+0x2e>
 80090c8:	e7d6      	b.n	8009078 <__swbuf_r+0x2a>
	...

080090cc <__swsetup_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4b29      	ldr	r3, [pc, #164]	@ (8009174 <__swsetup_r+0xa8>)
 80090d0:	4605      	mov	r5, r0
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	460c      	mov	r4, r1
 80090d6:	b118      	cbz	r0, 80090e0 <__swsetup_r+0x14>
 80090d8:	6a03      	ldr	r3, [r0, #32]
 80090da:	b90b      	cbnz	r3, 80090e0 <__swsetup_r+0x14>
 80090dc:	f7ff fee0 	bl	8008ea0 <__sinit>
 80090e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e4:	0719      	lsls	r1, r3, #28
 80090e6:	d422      	bmi.n	800912e <__swsetup_r+0x62>
 80090e8:	06da      	lsls	r2, r3, #27
 80090ea:	d407      	bmi.n	80090fc <__swsetup_r+0x30>
 80090ec:	2209      	movs	r2, #9
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	f04f 30ff 	mov.w	r0, #4294967295
 80090fa:	e033      	b.n	8009164 <__swsetup_r+0x98>
 80090fc:	0758      	lsls	r0, r3, #29
 80090fe:	d512      	bpl.n	8009126 <__swsetup_r+0x5a>
 8009100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009102:	b141      	cbz	r1, 8009116 <__swsetup_r+0x4a>
 8009104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009108:	4299      	cmp	r1, r3
 800910a:	d002      	beq.n	8009112 <__swsetup_r+0x46>
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f8bd 	bl	800928c <_free_r>
 8009112:	2300      	movs	r3, #0
 8009114:	6363      	str	r3, [r4, #52]	@ 0x34
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f043 0308 	orr.w	r3, r3, #8
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	b94b      	cbnz	r3, 8009146 <__swsetup_r+0x7a>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800913c:	d003      	beq.n	8009146 <__swsetup_r+0x7a>
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 fa6d 	bl	8009620 <__smakebuf_r>
 8009146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914a:	f013 0201 	ands.w	r2, r3, #1
 800914e:	d00a      	beq.n	8009166 <__swsetup_r+0x9a>
 8009150:	2200      	movs	r2, #0
 8009152:	60a2      	str	r2, [r4, #8]
 8009154:	6962      	ldr	r2, [r4, #20]
 8009156:	4252      	negs	r2, r2
 8009158:	61a2      	str	r2, [r4, #24]
 800915a:	6922      	ldr	r2, [r4, #16]
 800915c:	b942      	cbnz	r2, 8009170 <__swsetup_r+0xa4>
 800915e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009162:	d1c5      	bne.n	80090f0 <__swsetup_r+0x24>
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	0799      	lsls	r1, r3, #30
 8009168:	bf58      	it	pl
 800916a:	6962      	ldrpl	r2, [r4, #20]
 800916c:	60a2      	str	r2, [r4, #8]
 800916e:	e7f4      	b.n	800915a <__swsetup_r+0x8e>
 8009170:	2000      	movs	r0, #0
 8009172:	e7f7      	b.n	8009164 <__swsetup_r+0x98>
 8009174:	2400001c 	.word	0x2400001c

08009178 <memset>:
 8009178:	4402      	add	r2, r0
 800917a:	4603      	mov	r3, r0
 800917c:	4293      	cmp	r3, r2
 800917e:	d100      	bne.n	8009182 <memset+0xa>
 8009180:	4770      	bx	lr
 8009182:	f803 1b01 	strb.w	r1, [r3], #1
 8009186:	e7f9      	b.n	800917c <memset+0x4>

08009188 <_close_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_close_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f9 fdcf 	bl	8002d36 <_close>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_close_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_close_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	24000260 	.word	0x24000260

080091a8 <_lseek_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	@ (80091c8 <_lseek_r+0x20>)
 80091ac:	4604      	mov	r4, r0
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	602a      	str	r2, [r5, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f7f9 fde4 	bl	8002d84 <_lseek>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_lseek_r+0x1e>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_lseek_r+0x1e>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	24000260 	.word	0x24000260

080091cc <_read_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	@ (80091ec <_read_r+0x20>)
 80091d0:	4604      	mov	r4, r0
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	602a      	str	r2, [r5, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7f9 fd72 	bl	8002cc4 <_read>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_read_r+0x1e>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_read_r+0x1e>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	24000260 	.word	0x24000260

080091f0 <_write_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d07      	ldr	r5, [pc, #28]	@ (8009210 <_write_r+0x20>)
 80091f4:	4604      	mov	r4, r0
 80091f6:	4608      	mov	r0, r1
 80091f8:	4611      	mov	r1, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	602a      	str	r2, [r5, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f7f9 fd7d 	bl	8002cfe <_write>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_write_r+0x1e>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_write_r+0x1e>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	24000260 	.word	0x24000260

08009214 <__errno>:
 8009214:	4b01      	ldr	r3, [pc, #4]	@ (800921c <__errno+0x8>)
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	2400001c 	.word	0x2400001c

08009220 <__libc_init_array>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4d0d      	ldr	r5, [pc, #52]	@ (8009258 <__libc_init_array+0x38>)
 8009224:	4c0d      	ldr	r4, [pc, #52]	@ (800925c <__libc_init_array+0x3c>)
 8009226:	1b64      	subs	r4, r4, r5
 8009228:	10a4      	asrs	r4, r4, #2
 800922a:	2600      	movs	r6, #0
 800922c:	42a6      	cmp	r6, r4
 800922e:	d109      	bne.n	8009244 <__libc_init_array+0x24>
 8009230:	4d0b      	ldr	r5, [pc, #44]	@ (8009260 <__libc_init_array+0x40>)
 8009232:	4c0c      	ldr	r4, [pc, #48]	@ (8009264 <__libc_init_array+0x44>)
 8009234:	f000 fa62 	bl	80096fc <_init>
 8009238:	1b64      	subs	r4, r4, r5
 800923a:	10a4      	asrs	r4, r4, #2
 800923c:	2600      	movs	r6, #0
 800923e:	42a6      	cmp	r6, r4
 8009240:	d105      	bne.n	800924e <__libc_init_array+0x2e>
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	f855 3b04 	ldr.w	r3, [r5], #4
 8009248:	4798      	blx	r3
 800924a:	3601      	adds	r6, #1
 800924c:	e7ee      	b.n	800922c <__libc_init_array+0xc>
 800924e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009252:	4798      	blx	r3
 8009254:	3601      	adds	r6, #1
 8009256:	e7f2      	b.n	800923e <__libc_init_array+0x1e>
 8009258:	08009974 	.word	0x08009974
 800925c:	08009974 	.word	0x08009974
 8009260:	08009974 	.word	0x08009974
 8009264:	08009978 	.word	0x08009978

08009268 <__retarget_lock_init_recursive>:
 8009268:	4770      	bx	lr

0800926a <__retarget_lock_acquire_recursive>:
 800926a:	4770      	bx	lr

0800926c <__retarget_lock_release_recursive>:
 800926c:	4770      	bx	lr

0800926e <memcpy>:
 800926e:	440a      	add	r2, r1
 8009270:	4291      	cmp	r1, r2
 8009272:	f100 33ff 	add.w	r3, r0, #4294967295
 8009276:	d100      	bne.n	800927a <memcpy+0xc>
 8009278:	4770      	bx	lr
 800927a:	b510      	push	{r4, lr}
 800927c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009284:	4291      	cmp	r1, r2
 8009286:	d1f9      	bne.n	800927c <memcpy+0xe>
 8009288:	bd10      	pop	{r4, pc}
	...

0800928c <_free_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4605      	mov	r5, r0
 8009290:	2900      	cmp	r1, #0
 8009292:	d041      	beq.n	8009318 <_free_r+0x8c>
 8009294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009298:	1f0c      	subs	r4, r1, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	18e4      	addlt	r4, r4, r3
 80092a0:	f000 f8e0 	bl	8009464 <__malloc_lock>
 80092a4:	4a1d      	ldr	r2, [pc, #116]	@ (800931c <_free_r+0x90>)
 80092a6:	6813      	ldr	r3, [r2, #0]
 80092a8:	b933      	cbnz	r3, 80092b8 <_free_r+0x2c>
 80092aa:	6063      	str	r3, [r4, #4]
 80092ac:	6014      	str	r4, [r2, #0]
 80092ae:	4628      	mov	r0, r5
 80092b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b4:	f000 b8dc 	b.w	8009470 <__malloc_unlock>
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d908      	bls.n	80092ce <_free_r+0x42>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	1821      	adds	r1, r4, r0
 80092c0:	428b      	cmp	r3, r1
 80092c2:	bf01      	itttt	eq
 80092c4:	6819      	ldreq	r1, [r3, #0]
 80092c6:	685b      	ldreq	r3, [r3, #4]
 80092c8:	1809      	addeq	r1, r1, r0
 80092ca:	6021      	streq	r1, [r4, #0]
 80092cc:	e7ed      	b.n	80092aa <_free_r+0x1e>
 80092ce:	461a      	mov	r2, r3
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	b10b      	cbz	r3, 80092d8 <_free_r+0x4c>
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	d9fa      	bls.n	80092ce <_free_r+0x42>
 80092d8:	6811      	ldr	r1, [r2, #0]
 80092da:	1850      	adds	r0, r2, r1
 80092dc:	42a0      	cmp	r0, r4
 80092de:	d10b      	bne.n	80092f8 <_free_r+0x6c>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	4401      	add	r1, r0
 80092e4:	1850      	adds	r0, r2, r1
 80092e6:	4283      	cmp	r3, r0
 80092e8:	6011      	str	r1, [r2, #0]
 80092ea:	d1e0      	bne.n	80092ae <_free_r+0x22>
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	6053      	str	r3, [r2, #4]
 80092f2:	4408      	add	r0, r1
 80092f4:	6010      	str	r0, [r2, #0]
 80092f6:	e7da      	b.n	80092ae <_free_r+0x22>
 80092f8:	d902      	bls.n	8009300 <_free_r+0x74>
 80092fa:	230c      	movs	r3, #12
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	e7d6      	b.n	80092ae <_free_r+0x22>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	1821      	adds	r1, r4, r0
 8009304:	428b      	cmp	r3, r1
 8009306:	bf04      	itt	eq
 8009308:	6819      	ldreq	r1, [r3, #0]
 800930a:	685b      	ldreq	r3, [r3, #4]
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	bf04      	itt	eq
 8009310:	1809      	addeq	r1, r1, r0
 8009312:	6021      	streq	r1, [r4, #0]
 8009314:	6054      	str	r4, [r2, #4]
 8009316:	e7ca      	b.n	80092ae <_free_r+0x22>
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	bf00      	nop
 800931c:	2400026c 	.word	0x2400026c

08009320 <sbrk_aligned>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4e0f      	ldr	r6, [pc, #60]	@ (8009360 <sbrk_aligned+0x40>)
 8009324:	460c      	mov	r4, r1
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	4605      	mov	r5, r0
 800932a:	b911      	cbnz	r1, 8009332 <sbrk_aligned+0x12>
 800932c:	f000 f9d6 	bl	80096dc <_sbrk_r>
 8009330:	6030      	str	r0, [r6, #0]
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 f9d1 	bl	80096dc <_sbrk_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d103      	bne.n	8009346 <sbrk_aligned+0x26>
 800933e:	f04f 34ff 	mov.w	r4, #4294967295
 8009342:	4620      	mov	r0, r4
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	1cc4      	adds	r4, r0, #3
 8009348:	f024 0403 	bic.w	r4, r4, #3
 800934c:	42a0      	cmp	r0, r4
 800934e:	d0f8      	beq.n	8009342 <sbrk_aligned+0x22>
 8009350:	1a21      	subs	r1, r4, r0
 8009352:	4628      	mov	r0, r5
 8009354:	f000 f9c2 	bl	80096dc <_sbrk_r>
 8009358:	3001      	adds	r0, #1
 800935a:	d1f2      	bne.n	8009342 <sbrk_aligned+0x22>
 800935c:	e7ef      	b.n	800933e <sbrk_aligned+0x1e>
 800935e:	bf00      	nop
 8009360:	24000268 	.word	0x24000268

08009364 <_malloc_r>:
 8009364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009368:	1ccd      	adds	r5, r1, #3
 800936a:	f025 0503 	bic.w	r5, r5, #3
 800936e:	3508      	adds	r5, #8
 8009370:	2d0c      	cmp	r5, #12
 8009372:	bf38      	it	cc
 8009374:	250c      	movcc	r5, #12
 8009376:	2d00      	cmp	r5, #0
 8009378:	4606      	mov	r6, r0
 800937a:	db01      	blt.n	8009380 <_malloc_r+0x1c>
 800937c:	42a9      	cmp	r1, r5
 800937e:	d904      	bls.n	800938a <_malloc_r+0x26>
 8009380:	230c      	movs	r3, #12
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009460 <_malloc_r+0xfc>
 800938e:	f000 f869 	bl	8009464 <__malloc_lock>
 8009392:	f8d8 3000 	ldr.w	r3, [r8]
 8009396:	461c      	mov	r4, r3
 8009398:	bb44      	cbnz	r4, 80093ec <_malloc_r+0x88>
 800939a:	4629      	mov	r1, r5
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff ffbf 	bl	8009320 <sbrk_aligned>
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	4604      	mov	r4, r0
 80093a6:	d158      	bne.n	800945a <_malloc_r+0xf6>
 80093a8:	f8d8 4000 	ldr.w	r4, [r8]
 80093ac:	4627      	mov	r7, r4
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	d143      	bne.n	800943a <_malloc_r+0xd6>
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	d04b      	beq.n	800944e <_malloc_r+0xea>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	4639      	mov	r1, r7
 80093ba:	4630      	mov	r0, r6
 80093bc:	eb04 0903 	add.w	r9, r4, r3
 80093c0:	f000 f98c 	bl	80096dc <_sbrk_r>
 80093c4:	4581      	cmp	r9, r0
 80093c6:	d142      	bne.n	800944e <_malloc_r+0xea>
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	1a6d      	subs	r5, r5, r1
 80093cc:	4629      	mov	r1, r5
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff ffa6 	bl	8009320 <sbrk_aligned>
 80093d4:	3001      	adds	r0, #1
 80093d6:	d03a      	beq.n	800944e <_malloc_r+0xea>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	442b      	add	r3, r5
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	f8d8 3000 	ldr.w	r3, [r8]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	bb62      	cbnz	r2, 8009440 <_malloc_r+0xdc>
 80093e6:	f8c8 7000 	str.w	r7, [r8]
 80093ea:	e00f      	b.n	800940c <_malloc_r+0xa8>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	1b52      	subs	r2, r2, r5
 80093f0:	d420      	bmi.n	8009434 <_malloc_r+0xd0>
 80093f2:	2a0b      	cmp	r2, #11
 80093f4:	d917      	bls.n	8009426 <_malloc_r+0xc2>
 80093f6:	1961      	adds	r1, r4, r5
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	6025      	str	r5, [r4, #0]
 80093fc:	bf18      	it	ne
 80093fe:	6059      	strne	r1, [r3, #4]
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	bf08      	it	eq
 8009404:	f8c8 1000 	streq.w	r1, [r8]
 8009408:	5162      	str	r2, [r4, r5]
 800940a:	604b      	str	r3, [r1, #4]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f82f 	bl	8009470 <__malloc_unlock>
 8009412:	f104 000b 	add.w	r0, r4, #11
 8009416:	1d23      	adds	r3, r4, #4
 8009418:	f020 0007 	bic.w	r0, r0, #7
 800941c:	1ac2      	subs	r2, r0, r3
 800941e:	bf1c      	itt	ne
 8009420:	1a1b      	subne	r3, r3, r0
 8009422:	50a3      	strne	r3, [r4, r2]
 8009424:	e7af      	b.n	8009386 <_malloc_r+0x22>
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	42a3      	cmp	r3, r4
 800942a:	bf0c      	ite	eq
 800942c:	f8c8 2000 	streq.w	r2, [r8]
 8009430:	605a      	strne	r2, [r3, #4]
 8009432:	e7eb      	b.n	800940c <_malloc_r+0xa8>
 8009434:	4623      	mov	r3, r4
 8009436:	6864      	ldr	r4, [r4, #4]
 8009438:	e7ae      	b.n	8009398 <_malloc_r+0x34>
 800943a:	463c      	mov	r4, r7
 800943c:	687f      	ldr	r7, [r7, #4]
 800943e:	e7b6      	b.n	80093ae <_malloc_r+0x4a>
 8009440:	461a      	mov	r2, r3
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	42a3      	cmp	r3, r4
 8009446:	d1fb      	bne.n	8009440 <_malloc_r+0xdc>
 8009448:	2300      	movs	r3, #0
 800944a:	6053      	str	r3, [r2, #4]
 800944c:	e7de      	b.n	800940c <_malloc_r+0xa8>
 800944e:	230c      	movs	r3, #12
 8009450:	6033      	str	r3, [r6, #0]
 8009452:	4630      	mov	r0, r6
 8009454:	f000 f80c 	bl	8009470 <__malloc_unlock>
 8009458:	e794      	b.n	8009384 <_malloc_r+0x20>
 800945a:	6005      	str	r5, [r0, #0]
 800945c:	e7d6      	b.n	800940c <_malloc_r+0xa8>
 800945e:	bf00      	nop
 8009460:	2400026c 	.word	0x2400026c

08009464 <__malloc_lock>:
 8009464:	4801      	ldr	r0, [pc, #4]	@ (800946c <__malloc_lock+0x8>)
 8009466:	f7ff bf00 	b.w	800926a <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	24000264 	.word	0x24000264

08009470 <__malloc_unlock>:
 8009470:	4801      	ldr	r0, [pc, #4]	@ (8009478 <__malloc_unlock+0x8>)
 8009472:	f7ff befb 	b.w	800926c <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	24000264 	.word	0x24000264

0800947c <__sflush_r>:
 800947c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	0716      	lsls	r6, r2, #28
 8009486:	4605      	mov	r5, r0
 8009488:	460c      	mov	r4, r1
 800948a:	d454      	bmi.n	8009536 <__sflush_r+0xba>
 800948c:	684b      	ldr	r3, [r1, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	dc02      	bgt.n	8009498 <__sflush_r+0x1c>
 8009492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	dd48      	ble.n	800952a <__sflush_r+0xae>
 8009498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800949a:	2e00      	cmp	r6, #0
 800949c:	d045      	beq.n	800952a <__sflush_r+0xae>
 800949e:	2300      	movs	r3, #0
 80094a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094a4:	682f      	ldr	r7, [r5, #0]
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	d030      	beq.n	800950e <__sflush_r+0x92>
 80094ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	0759      	lsls	r1, r3, #29
 80094b2:	d505      	bpl.n	80094c0 <__sflush_r+0x44>
 80094b4:	6863      	ldr	r3, [r4, #4]
 80094b6:	1ad2      	subs	r2, r2, r3
 80094b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094ba:	b10b      	cbz	r3, 80094c0 <__sflush_r+0x44>
 80094bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094c4:	6a21      	ldr	r1, [r4, #32]
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b0      	blx	r6
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	d106      	bne.n	80094de <__sflush_r+0x62>
 80094d0:	6829      	ldr	r1, [r5, #0]
 80094d2:	291d      	cmp	r1, #29
 80094d4:	d82b      	bhi.n	800952e <__sflush_r+0xb2>
 80094d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009580 <__sflush_r+0x104>)
 80094d8:	410a      	asrs	r2, r1
 80094da:	07d6      	lsls	r6, r2, #31
 80094dc:	d427      	bmi.n	800952e <__sflush_r+0xb2>
 80094de:	2200      	movs	r2, #0
 80094e0:	6062      	str	r2, [r4, #4]
 80094e2:	04d9      	lsls	r1, r3, #19
 80094e4:	6922      	ldr	r2, [r4, #16]
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	d504      	bpl.n	80094f4 <__sflush_r+0x78>
 80094ea:	1c42      	adds	r2, r0, #1
 80094ec:	d101      	bne.n	80094f2 <__sflush_r+0x76>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	b903      	cbnz	r3, 80094f4 <__sflush_r+0x78>
 80094f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80094f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094f6:	602f      	str	r7, [r5, #0]
 80094f8:	b1b9      	cbz	r1, 800952a <__sflush_r+0xae>
 80094fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094fe:	4299      	cmp	r1, r3
 8009500:	d002      	beq.n	8009508 <__sflush_r+0x8c>
 8009502:	4628      	mov	r0, r5
 8009504:	f7ff fec2 	bl	800928c <_free_r>
 8009508:	2300      	movs	r3, #0
 800950a:	6363      	str	r3, [r4, #52]	@ 0x34
 800950c:	e00d      	b.n	800952a <__sflush_r+0xae>
 800950e:	2301      	movs	r3, #1
 8009510:	4628      	mov	r0, r5
 8009512:	47b0      	blx	r6
 8009514:	4602      	mov	r2, r0
 8009516:	1c50      	adds	r0, r2, #1
 8009518:	d1c9      	bne.n	80094ae <__sflush_r+0x32>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0c6      	beq.n	80094ae <__sflush_r+0x32>
 8009520:	2b1d      	cmp	r3, #29
 8009522:	d001      	beq.n	8009528 <__sflush_r+0xac>
 8009524:	2b16      	cmp	r3, #22
 8009526:	d11e      	bne.n	8009566 <__sflush_r+0xea>
 8009528:	602f      	str	r7, [r5, #0]
 800952a:	2000      	movs	r0, #0
 800952c:	e022      	b.n	8009574 <__sflush_r+0xf8>
 800952e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009532:	b21b      	sxth	r3, r3
 8009534:	e01b      	b.n	800956e <__sflush_r+0xf2>
 8009536:	690f      	ldr	r7, [r1, #16]
 8009538:	2f00      	cmp	r7, #0
 800953a:	d0f6      	beq.n	800952a <__sflush_r+0xae>
 800953c:	0793      	lsls	r3, r2, #30
 800953e:	680e      	ldr	r6, [r1, #0]
 8009540:	bf08      	it	eq
 8009542:	694b      	ldreq	r3, [r1, #20]
 8009544:	600f      	str	r7, [r1, #0]
 8009546:	bf18      	it	ne
 8009548:	2300      	movne	r3, #0
 800954a:	eba6 0807 	sub.w	r8, r6, r7
 800954e:	608b      	str	r3, [r1, #8]
 8009550:	f1b8 0f00 	cmp.w	r8, #0
 8009554:	dde9      	ble.n	800952a <__sflush_r+0xae>
 8009556:	6a21      	ldr	r1, [r4, #32]
 8009558:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800955a:	4643      	mov	r3, r8
 800955c:	463a      	mov	r2, r7
 800955e:	4628      	mov	r0, r5
 8009560:	47b0      	blx	r6
 8009562:	2800      	cmp	r0, #0
 8009564:	dc08      	bgt.n	8009578 <__sflush_r+0xfc>
 8009566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800956a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	f04f 30ff 	mov.w	r0, #4294967295
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	4407      	add	r7, r0
 800957a:	eba8 0800 	sub.w	r8, r8, r0
 800957e:	e7e7      	b.n	8009550 <__sflush_r+0xd4>
 8009580:	dfbffffe 	.word	0xdfbffffe

08009584 <_fflush_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	690b      	ldr	r3, [r1, #16]
 8009588:	4605      	mov	r5, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b913      	cbnz	r3, 8009594 <_fflush_r+0x10>
 800958e:	2500      	movs	r5, #0
 8009590:	4628      	mov	r0, r5
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	b118      	cbz	r0, 800959e <_fflush_r+0x1a>
 8009596:	6a03      	ldr	r3, [r0, #32]
 8009598:	b90b      	cbnz	r3, 800959e <_fflush_r+0x1a>
 800959a:	f7ff fc81 	bl	8008ea0 <__sinit>
 800959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0f3      	beq.n	800958e <_fflush_r+0xa>
 80095a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095a8:	07d0      	lsls	r0, r2, #31
 80095aa:	d404      	bmi.n	80095b6 <_fflush_r+0x32>
 80095ac:	0599      	lsls	r1, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_fflush_r+0x32>
 80095b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095b2:	f7ff fe5a 	bl	800926a <__retarget_lock_acquire_recursive>
 80095b6:	4628      	mov	r0, r5
 80095b8:	4621      	mov	r1, r4
 80095ba:	f7ff ff5f 	bl	800947c <__sflush_r>
 80095be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095c0:	07da      	lsls	r2, r3, #31
 80095c2:	4605      	mov	r5, r0
 80095c4:	d4e4      	bmi.n	8009590 <_fflush_r+0xc>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	059b      	lsls	r3, r3, #22
 80095ca:	d4e1      	bmi.n	8009590 <_fflush_r+0xc>
 80095cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ce:	f7ff fe4d 	bl	800926c <__retarget_lock_release_recursive>
 80095d2:	e7dd      	b.n	8009590 <_fflush_r+0xc>

080095d4 <__swhatbuf_r>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	460c      	mov	r4, r1
 80095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095dc:	2900      	cmp	r1, #0
 80095de:	b096      	sub	sp, #88	@ 0x58
 80095e0:	4615      	mov	r5, r2
 80095e2:	461e      	mov	r6, r3
 80095e4:	da0d      	bge.n	8009602 <__swhatbuf_r+0x2e>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095ec:	f04f 0100 	mov.w	r1, #0
 80095f0:	bf14      	ite	ne
 80095f2:	2340      	movne	r3, #64	@ 0x40
 80095f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095f8:	2000      	movs	r0, #0
 80095fa:	6031      	str	r1, [r6, #0]
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	b016      	add	sp, #88	@ 0x58
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	466a      	mov	r2, sp
 8009604:	f000 f848 	bl	8009698 <_fstat_r>
 8009608:	2800      	cmp	r0, #0
 800960a:	dbec      	blt.n	80095e6 <__swhatbuf_r+0x12>
 800960c:	9901      	ldr	r1, [sp, #4]
 800960e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009612:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009616:	4259      	negs	r1, r3
 8009618:	4159      	adcs	r1, r3
 800961a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800961e:	e7eb      	b.n	80095f8 <__swhatbuf_r+0x24>

08009620 <__smakebuf_r>:
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009624:	079d      	lsls	r5, r3, #30
 8009626:	4606      	mov	r6, r0
 8009628:	460c      	mov	r4, r1
 800962a:	d507      	bpl.n	800963c <__smakebuf_r+0x1c>
 800962c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2301      	movs	r3, #1
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	b003      	add	sp, #12
 800963a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800963c:	ab01      	add	r3, sp, #4
 800963e:	466a      	mov	r2, sp
 8009640:	f7ff ffc8 	bl	80095d4 <__swhatbuf_r>
 8009644:	9f00      	ldr	r7, [sp, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	4639      	mov	r1, r7
 800964a:	4630      	mov	r0, r6
 800964c:	f7ff fe8a 	bl	8009364 <_malloc_r>
 8009650:	b948      	cbnz	r0, 8009666 <__smakebuf_r+0x46>
 8009652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009656:	059a      	lsls	r2, r3, #22
 8009658:	d4ee      	bmi.n	8009638 <__smakebuf_r+0x18>
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	f043 0302 	orr.w	r3, r3, #2
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	e7e2      	b.n	800962c <__smakebuf_r+0xc>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	6020      	str	r0, [r4, #0]
 800966a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009676:	b15b      	cbz	r3, 8009690 <__smakebuf_r+0x70>
 8009678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800967c:	4630      	mov	r0, r6
 800967e:	f000 f81d 	bl	80096bc <_isatty_r>
 8009682:	b128      	cbz	r0, 8009690 <__smakebuf_r+0x70>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	431d      	orrs	r5, r3
 8009694:	81a5      	strh	r5, [r4, #12]
 8009696:	e7cf      	b.n	8009638 <__smakebuf_r+0x18>

08009698 <_fstat_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	@ (80096b8 <_fstat_r+0x20>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	4611      	mov	r1, r2
 80096a4:	602b      	str	r3, [r5, #0]
 80096a6:	f7f9 fb52 	bl	8002d4e <_fstat>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	d102      	bne.n	80096b4 <_fstat_r+0x1c>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	b103      	cbz	r3, 80096b4 <_fstat_r+0x1c>
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	bf00      	nop
 80096b8:	24000260 	.word	0x24000260

080096bc <_isatty_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	@ (80096d8 <_isatty_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f9 fb51 	bl	8002d6e <_isatty>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_isatty_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_isatty_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	24000260 	.word	0x24000260

080096dc <_sbrk_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d06      	ldr	r5, [pc, #24]	@ (80096f8 <_sbrk_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7f9 fb5a 	bl	8002da0 <_sbrk>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_sbrk_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_sbrk_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	24000260 	.word	0x24000260

080096fc <_init>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	bf00      	nop
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr

08009708 <_fini>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr
