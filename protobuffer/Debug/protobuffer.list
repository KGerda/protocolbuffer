
protobuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a824  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800aad4  0800aad4  0000bad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad44  0800ad44  0000bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad4c  0800ad4c  0000bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ad50  0800ad50  0000bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800ad54  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000620  2400006c  0800adc0  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400068c  0800adc0  0000c68c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d41  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d4e  00000000  00000000  0001fddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df8  00000000  00000000  00022b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ad2  00000000  00000000  00023928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031a82  00000000  00000000  000243fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015bc2  00000000  00000000  00055e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c18a  00000000  00000000  0006ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7bc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fe8  00000000  00000000  001a7c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001abbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800aabc 	.word	0x0800aabc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	0800aabc 	.word	0x0800aabc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <getdata_frombuffer>:
volatile uint32_t writePtr = 0;
volatile uint32_t readPtr = 0;


void getdata_frombuffer(uint8_t ret_data[],uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
		if(readPtr < writePtr)
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <getdata_frombuffer+0xb0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <getdata_frombuffer+0xb4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d20f      	bcs.n	80006b8 <getdata_frombuffer+0x38>
		  {
            memcpy(ret_data,&buffer[readPtr],len);
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <getdata_frombuffer+0xb0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <getdata_frombuffer+0xb8>)
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f009 fcf2 	bl	800a08e <memcpy>
			readPtr = readPtr+len;
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006b4:	6013      	str	r3, [r2, #0]
	            memcpy(ret_data, &buffer[readPtr], firstPart);
	            memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
	            readPtr = len - firstPart;
	        }
		  }
}
 80006b6:	e036      	b.n	8000726 <getdata_frombuffer+0xa6>
		else if (readPtr > writePtr)
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <getdata_frombuffer+0xb4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d930      	bls.n	8000726 <getdata_frombuffer+0xa6>
			uint32_t firstPart = BUFFER_LEN - readPtr;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80006cc:	60fb      	str	r3, [r7, #12]
	        if (len <= firstPart)                             /*If the data fits to the buffer*/
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d30f      	bcc.n	80006f6 <getdata_frombuffer+0x76>
	            memcpy(ret_data, &buffer[readPtr], len);
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006dc:	4413      	add	r3, r2
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f009 fcd3 	bl	800a08e <memcpy>
	            readPtr += len;
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	e017      	b.n	8000726 <getdata_frombuffer+0xa6>
	            memcpy(ret_data, &buffer[readPtr], firstPart);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006fc:	4413      	add	r3, r2
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f009 fcc3 	bl	800a08e <memcpy>
	            memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d0      	adds	r0, r2, r3
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <getdata_frombuffer+0xb8>)
 8000718:	f009 fcb9 	bl	800a08e <memcpy>
	            readPtr = len - firstPart;
 800071c:	78fa      	ldrb	r2, [r7, #3]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <getdata_frombuffer+0xb0>)
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2400008c 	.word	0x2400008c
 8000734:	24000088 	.word	0x24000088
 8000738:	24000090 	.word	0x24000090

0800073c <writedata_tobuffer>:
	  

bool writedata_tobuffer(uint8_t data[],uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	if( (writePtr+len) < (BUFFER_LEN) )
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000754:	d21a      	bcs.n	800078c <writedata_tobuffer+0x50>
	{
		if(writePtr+len ==readPtr)				/*always have one space (2 bytes) empty*/
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	441a      	add	r2, r3
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <writedata_tobuffer+0xac>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d101      	bne.n	800076a <writedata_tobuffer+0x2e>
			return 0;							/*Not increase datacounter*/
 8000766:	2300      	movs	r3, #0
 8000768:	e037      	b.n	80007da <writedata_tobuffer+0x9e>
		memcpy(&buffer[writePtr],data,len);
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ec <writedata_tobuffer+0xb0>)
 8000770:	4413      	add	r3, r2
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f009 fc89 	bl	800a08e <memcpy>
		writePtr+= len;
 800077c:	78fa      	ldrb	r2, [r7, #3]
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <writedata_tobuffer+0xa8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <writedata_tobuffer+0xa8>)
 8000786:	6013      	str	r3, [r2, #0]
		return 1;
 8000788:	2301      	movs	r3, #1
 800078a:	e026      	b.n	80007da <writedata_tobuffer+0x9e>

	}
	else
	{
		/* First part of the data*/
		uint32_t firstPart = BUFFER_LEN-writePtr;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000794:	60fb      	str	r3, [r7, #12]
		if(readPtr>len-firstPart)
 8000796:	78fa      	ldrb	r2, [r7, #3]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <writedata_tobuffer+0xac>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d219      	bcs.n	80007d8 <writedata_tobuffer+0x9c>
		{
		memcpy(&buffer[writePtr],data,firstPart);
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <writedata_tobuffer+0xa8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a10      	ldr	r2, [pc, #64]	@ (80007ec <writedata_tobuffer+0xb0>)
 80007aa:	4413      	add	r3, r2
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 fc6c 	bl	800a08e <memcpy>
		/* Back part of the stream */
		memcpy(&buffer[0],&data[firstPart],len-firstPart);
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	18d1      	adds	r1, r2, r3
 80007bc:	78fa      	ldrb	r2, [r7, #3]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <writedata_tobuffer+0xb0>)
 80007c6:	f009 fc62 	bl	800a08e <memcpy>
		writePtr = len-firstPart;
 80007ca:	78fa      	ldrb	r2, [r7, #3]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <writedata_tobuffer+0xa8>)
 80007d2:	6013      	str	r3, [r2, #0]
		return 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e000      	b.n	80007da <writedata_tobuffer+0x9e>
		}
		else
			return 0;  /*Not increase datacounter*/
 80007d8:	2300      	movs	r3, #0
    }
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	24000088 	.word	0x24000088
 80007e8:	2400008c 	.word	0x2400008c
 80007ec:	24000090 	.word	0x24000090

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080c:	4a27      	ldr	r2, [pc, #156]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000826:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082a:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000836:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000854:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000872:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_GPIO_Init+0xc0>)
 8000884:	f003 fe1e 	bl	80044c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_GPIO_Init+0xc0>)
 80008a0:	f003 fc60 	bl	8004164 <HAL_GPIO_Init>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020400 	.word	0x58020400

080008b4 <__io_putchar>:
* @brief function to use printf with uart
* @param ch : character to transmit
* @retval ch
*/
int __io_putchar(int ch)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80008bc:	1d39      	adds	r1, r7, #4
 80008be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c2:	2201      	movs	r2, #1
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <__io_putchar+0x20>)
 80008c6:	f006 fc5f 	bl	8007188 <HAL_UART_Transmit>
	return ch;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240004a8 	.word	0x240004a8

080008d8 <decode>:
* @param None
* @retval None
*/

LedStatus decode()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
	 getdata_frombuffer(data, message_length);
 80008de:	2102      	movs	r1, #2
 80008e0:	480f      	ldr	r0, [pc, #60]	@ (8000920 <decode+0x48>)
 80008e2:	f7ff fecd 	bl	8000680 <getdata_frombuffer>
	 /* Allocate space for the decoded message. */
	 LedStatus message = LedStatus_init_default;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]

	 /* Create a stream that reads from the buffer. */
	 pb_istream_t stream = pb_istream_from_buffer(data, message_length);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2202      	movs	r2, #2
 80008ee:	490c      	ldr	r1, [pc, #48]	@ (8000920 <decode+0x48>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fd17 	bl	8001324 <pb_istream_from_buffer>

	 LedStat = pb_decode(&stream, LedStatus_fields, &message);
 80008f6:	f107 0214 	add.w	r2, r7, #20
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4909      	ldr	r1, [pc, #36]	@ (8000924 <decode+0x4c>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fe4a 	bl	8002598 <pb_decode>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <decode+0x50>)
 800090a:	701a      	strb	r2, [r3, #0]

	 DataCounter--;   										/*1 data take out from buffer*/
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <decode+0x54>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <decode+0x54>)
 8000914:	6013      	str	r3, [r2, #0]
	 return message;
 8000916:	697b      	ldr	r3, [r7, #20]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000478 	.word	0x24000478
 8000924:	0800acc0 	.word	0x0800acc0
 8000928:	24000499 	.word	0x24000499
 800092c:	2400049c 	.word	0x2400049c

08000930 <execute>:
* @brief function for execute protocolbuffer message, Led on/off
* @param None
* @retval None
*/
void execute(LedStatus message)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	 if(LedStat==1)
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <execute+0x3c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d010      	beq.n	8000962 <execute+0x32>
		 {
				  if(message.status==LED_ON)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d105      	bne.n	8000952 <execute+0x22>
				  {
				    //printf("led=1\r\n");       /*for debug*/
				    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2101      	movs	r1, #1
 800094a:	4809      	ldr	r0, [pc, #36]	@ (8000970 <execute+0x40>)
 800094c:	f003 fdba 	bl	80044c4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
				  }
				  /*invalid messages are ignored.*/
		 }
		 /*invalid messages can not be here*/
}
 8000950:	e007      	b.n	8000962 <execute+0x32>
				  else if(message.status==LED_OFF)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d104      	bne.n	8000962 <execute+0x32>
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <execute+0x40>)
 800095e:	f003 fdb1 	bl	80044c4 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	24000499 	.word	0x24000499
 8000970:	58020400 	.word	0x58020400

08000974 <HAL_UART_RxCpltCallback>:
* After reading the relevant data, it stores the processed information into the circular buffer.
* @param UartSign: counts the relevant data
* @retval None
*/
void HAL_UART_RxCpltCallback  ( UART_HandleTypeDef *  huart )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2f      	ldr	r2, [pc, #188]	@ (8000a40 <HAL_UART_RxCpltCallback+0xcc>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d158      	bne.n	8000a38 <HAL_UART_RxCpltCallback+0xc4>
		if(ch==0xFF)   										/*startbyte*/
 8000986:	4b2f      	ldr	r3, [pc, #188]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2bff      	cmp	r3, #255	@ 0xff
 800098c:	d103      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x22>
		{
			UartSign=1;
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e04b      	b.n	8000a2e <HAL_UART_RxCpltCallback+0xba>
		}
		else if(UartSign ==1 && ch==message_id)
 8000996:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10e      	bne.n	80009bc <HAL_UART_RxCpltCallback+0x48>
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d10a      	bne.n	80009bc <HAL_UART_RxCpltCallback+0x48>
		{
			data[UartSign-1]=ch;
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	4a25      	ldr	r2, [pc, #148]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 80009ae:	7811      	ldrb	r1, [r2, #0]
 80009b0:	4a26      	ldr	r2, [pc, #152]	@ (8000a4c <HAL_UART_RxCpltCallback+0xd8>)
 80009b2:	54d1      	strb	r1, [r2, r3]
			UartSign=2;
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009b6:	2202      	movs	r2, #2
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e038      	b.n	8000a2e <HAL_UART_RxCpltCallback+0xba>
		}
		else if(UartSign>1)
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d934      	bls.n	8000a2e <HAL_UART_RxCpltCallback+0xba>
		{
			if(UartSign != message_length)
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d00d      	beq.n	80009e8 <HAL_UART_RxCpltCallback+0x74>
			{
				data[UartSign-1]=ch;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 80009d4:	7811      	ldrb	r1, [r2, #0]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <HAL_UART_RxCpltCallback+0xd8>)
 80009d8:	54d1      	strb	r1, [r2, r3]
				UartSign++;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e022      	b.n	8000a2e <HAL_UART_RxCpltCallback+0xba>
			}
			else
			{
				data[UartSign-1]=ch;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 80009f0:	7811      	ldrb	r1, [r2, #0]
 80009f2:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <HAL_UART_RxCpltCallback+0xd8>)
 80009f4:	54d1      	strb	r1, [r2, r3]
				UartSign=0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <HAL_UART_RxCpltCallback+0xd4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
				while( !( writedata_tobuffer(data, message_length)))					/*Until space is freed up for data*/
 80009fc:	e008      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x9c>
				{
					execute(decode());
 80009fe:	f7ff ff6b 	bl	80008d8 <decode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff93 	bl	8000930 <execute>
					printf("forcolt decode\r\n");
 8000a0a:	4811      	ldr	r0, [pc, #68]	@ (8000a50 <HAL_UART_RxCpltCallback+0xdc>)
 8000a0c:	f009 f9e4 	bl	8009dd8 <puts>
				while( !( writedata_tobuffer(data, message_length)))					/*Until space is freed up for data*/
 8000a10:	2102      	movs	r1, #2
 8000a12:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <HAL_UART_RxCpltCallback+0xd8>)
 8000a14:	f7ff fe92 	bl	800073c <writedata_tobuffer>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f083 0301 	eor.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ec      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x8a>
					/*if the buffer is full with unprocessed data, process*/
				}
				DataCounter++;															/*1 data arrived*/
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_UART_RxCpltCallback+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_UART_RxCpltCallback+0xe0>)
 8000a2c:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &ch, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4904      	ldr	r1, [pc, #16]	@ (8000a44 <HAL_UART_RxCpltCallback+0xd0>)
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <HAL_UART_RxCpltCallback+0xe4>)
 8000a34:	f006 fc36 	bl	80072a4 <HAL_UART_Receive_IT>
	}
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40004800 	.word	0x40004800
 8000a44:	24000498 	.word	0x24000498
 8000a48:	240004a0 	.word	0x240004a0
 8000a4c:	24000478 	.word	0x24000478
 8000a50:	0800aad4 	.word	0x0800aad4
 8000a54:	2400049c 	.word	0x2400049c
 8000a58:	240004a8 	.word	0x240004a8

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a60:	f000 f8ae 	bl	8000bc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f002 fbdc 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f836 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f7ff fec0 	bl	80007f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a70:	f002 faec 	bl	800304c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /*test the Led1 peripheral*/
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2101      	movs	r1, #1
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <main+0x68>)
 8000a7a:	f003 fd23 	bl	80044c4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a82:	f002 fc5f 	bl	8003344 <HAL_Delay>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <main+0x68>)
 8000a8c:	f003 fd1a 	bl	80044c4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a94:	f002 fc56 	bl	8003344 <HAL_Delay>

  HAL_UART_Receive_IT(&huart3, &ch, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	490b      	ldr	r1, [pc, #44]	@ (8000ac8 <main+0x6c>)
 8000a9c:	480b      	ldr	r0, [pc, #44]	@ (8000acc <main+0x70>)
 8000a9e:	f006 fc01 	bl	80072a4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("DataCounter: %ld\r\n", DataCounter);			/*for testing*/
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <main+0x74>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <main+0x78>)
 8000aaa:	f009 f92d 	bl	8009d08 <iprintf>
	  if(DataCounter > 0)
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <main+0x74>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f5      	beq.n	8000aa2 <main+0x46>
	  {
		execute(decode());
 8000ab6:	f7ff ff0f 	bl	80008d8 <decode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff37 	bl	8000930 <execute>
	  printf("DataCounter: %ld\r\n", DataCounter);			/*for testing*/
 8000ac2:	e7ee      	b.n	8000aa2 <main+0x46>
 8000ac4:	58020400 	.word	0x58020400
 8000ac8:	24000498 	.word	0x24000498
 8000acc:	240004a8 	.word	0x240004a8
 8000ad0:	2400049c 	.word	0x2400049c
 8000ad4:	0800aae4 	.word	0x0800aae4

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	@ 0x70
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	224c      	movs	r2, #76	@ 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f009 fa56 	bl	8009f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f009 fa50 	bl	8009f98 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <SystemClock_Config+0xe0>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f003 fcf8 	bl	80044f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b28      	ldr	r3, [pc, #160]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b24:	bf00      	nop
 8000b26:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b32:	d1f8      	bne.n	8000b26 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b3c:	2340      	movs	r3, #64	@ 0x40
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b44:	2300      	movs	r3, #0
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fd1d 	bl	80045ac <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b78:	f000 f84e 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	233f      	movs	r3, #63	@ 0x3f
 8000b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 f935 	bl	8004e10 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000bac:	f000 f834 	bl	8000c18 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3770      	adds	r7, #112	@ 0x70
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58024800 	.word	0x58024800

08000bc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bd2:	f002 fceb 	bl	80035ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000be2:	231f      	movs	r3, #31
 8000be4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000be6:	2387      	movs	r3, #135	@ 0x87
 8000be8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fd09 	bl	800361c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f002 fce6 	bl	80035dc <HAL_MPU_Enable>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b08f      	sub	sp, #60	@ 0x3c
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	891a      	ldrh	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d301      	bcc.n	8000c3e <load_descriptor_values+0x1a>
        return false;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e156      	b.n	8000eec <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	895b      	ldrh	r3, [r3, #10]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8000c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8000c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d05a      	beq.n	8000d1a <load_descriptor_values+0xf6>
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	f200 8094 	bhi.w	8000d92 <load_descriptor_values+0x16e>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <load_descriptor_values+0x50>
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d01f      	beq.n	8000cb2 <load_descriptor_values+0x8e>
 8000c72:	e08e      	b.n	8000d92 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8000c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8000c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8c:	0e1b      	lsrs	r3, r3, #24
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9a:	0c1b      	lsrs	r3, r3, #16
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca2:	0f1b      	lsrs	r3, r3, #28
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	825a      	strh	r2, [r3, #18]
            break;
 8000cb0:	e0b4      	b.n	8000e1c <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	895b      	ldrh	r3, [r3, #10]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	0f1b      	lsrs	r3, r3, #28
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf6:	0f1b      	lsrs	r3, r3, #28
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	825a      	strh	r2, [r3, #18]
            break;
 8000d18:	e080      	b.n	8000e1c <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	895b      	ldrh	r3, [r3, #10]
 8000d24:	3301      	adds	r3, #1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	895b      	ldrh	r3, [r3, #10]
 8000d38:	3302      	adds	r3, #2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	895b      	ldrh	r3, [r3, #10]
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8000d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	019b      	lsls	r3, r3, #6
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	825a      	strh	r2, [r3, #18]
            break;
 8000d90:	e044      	b.n	8000e1c <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	895b      	ldrh	r3, [r3, #10]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	895b      	ldrh	r3, [r3, #10]
 8000db0:	3302      	adds	r3, #2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	895b      	ldrh	r3, [r3, #10]
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	895b      	ldrh	r3, [r3, #10]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	825a      	strh	r2, [r3, #18]
            break;
 8000e1a:	bf00      	nop
        }
    }

    if (!iter->message)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d106      	bne.n	8000e32 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
 8000e30:	e041      	b.n	8000eb6 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e38:	441a      	add	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000e3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d008      	beq.n	8000e58 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000e4e:	425b      	negs	r3, r3
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	e01a      	b.n	8000e8e <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7d9b      	ldrb	r3, [r3, #22]
 8000e5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000e60:	2b20      	cmp	r3, #32
 8000e62:	d111      	bne.n	8000e88 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7d9b      	ldrb	r3, [r3, #22]
 8000e68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7d9b      	ldrb	r3, [r3, #22]
 8000e74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000e78:	2b80      	cmp	r3, #128	@ 0x80
 8000e7a:	d105      	bne.n	8000e88 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f103 0214 	add.w	r2, r3, #20
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	621a      	str	r2, [r3, #32]
 8000e86:	e002      	b.n	8000e8e <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7d9b      	ldrb	r3, [r3, #22]
 8000e92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e96:	2b80      	cmp	r3, #128	@ 0x80
 8000e98:	d109      	bne.n	8000eae <load_descriptor_values+0x28a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	61da      	str	r2, [r3, #28]
 8000eac:	e003      	b.n	8000eb6 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7d9b      	ldrb	r3, [r3, #22]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d005      	beq.n	8000ece <load_descriptor_values+0x2aa>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7d9b      	ldrb	r3, [r3, #22]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	d10a      	bne.n	8000ee4 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	89db      	ldrh	r3, [r3, #14]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ee2:	e002      	b.n	8000eea <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	373c      	adds	r7, #60	@ 0x3c
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	891b      	ldrh	r3, [r3, #8]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	891a      	ldrh	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	8a1b      	ldrh	r3, [r3, #16]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d30c      	bcc.n	8000f34 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000f32:	e03b      	b.n	8000fac <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	895b      	ldrh	r3, [r3, #10]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2201      	movs	r2, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	895a      	ldrh	r2, [r3, #10]
 8000f5e:	893b      	ldrh	r3, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	899b      	ldrh	r3, [r3, #12]
 8000f6c:	7afa      	ldrb	r2, [r7, #11]
 8000f6e:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	bf0c      	ite	eq
 8000f76:	2201      	moveq	r2, #1
 8000f78:	2200      	movne	r2, #0
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	89da      	ldrh	r2, [r3, #14]
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d004      	beq.n	8000f9c <advance_iterator+0xa4>
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	2b09      	cmp	r3, #9
 8000f9a:	d101      	bne.n	8000fa0 <advance_iterator+0xa8>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <advance_iterator+0xaa>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	81da      	strh	r2, [r3, #14]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8000fc4:	2228      	movs	r2, #40	@ 0x28
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f008 ffe5 	bl	8009f98 <memset>

    iter->descriptor = desc;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fe22 	bl	8000c24 <load_descriptor_values>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800100c:	2b80      	cmp	r3, #128	@ 0x80
 800100e:	d109      	bne.n	8001024 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3304      	adds	r3, #4
 8001014:	461a      	mov	r2, r3
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffcd 	bl	8000fb8 <pb_field_iter_begin>
 800101e:	4603      	mov	r3, r0
 8001020:	75fb      	strb	r3, [r7, #23]
 8001022:	e008      	b.n	8001036 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffc3 	bl	8000fb8 <pb_field_iter_begin>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f103 020c 	add.w	r2, r3, #12
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	621a      	str	r2, [r3, #32]
    return status;
 8001040:	7dfb      	ldrb	r3, [r7, #23]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff50 	bl	8000ef8 <advance_iterator>
    (void)load_descriptor_values(iter);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fde3 	bl	8000c24 <load_descriptor_values>
    return iter->index != 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	891b      	ldrh	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8a1b      	ldrh	r3, [r3, #16]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 800108a:	2301      	movs	r3, #1
 800108c:	e044      	b.n	8001118 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	8a9b      	ldrh	r3, [r3, #20]
 8001094:	461a      	mov	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <pb_field_iter_find+0x2c>
    {
        return false;
 800109c:	2300      	movs	r3, #0
 800109e:	e03b      	b.n	8001118 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	891b      	ldrh	r3, [r3, #8]
 80010a4:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	8a1b      	ldrh	r3, [r3, #16]
 80010aa:	461a      	mov	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d204      	bcs.n	80010bc <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	8a1a      	ldrh	r2, [r3, #16]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff1b 	bl	8000ef8 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	089a      	lsrs	r2, r3, #2
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4053      	eors	r3, r2
 80010dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d110      	bne.n	8001106 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fd9d 	bl	8000c24 <load_descriptor_values>

                if (iter->tag == tag &&
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8a1b      	ldrh	r3, [r3, #16]
 80010ee:	461a      	mov	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d107      	bne.n	8001106 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d001      	beq.n	8001106 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8001102:	2301      	movs	r3, #1
 8001104:	e008      	b.n	8001118 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	891b      	ldrh	r3, [r3, #8]
 800110a:	89fa      	ldrh	r2, [r7, #14]
 800110c:	429a      	cmp	r2, r3
 800110e:	d1d5      	bne.n	80010bc <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fd87 	bl	8000c24 <load_descriptor_values>
        return false;
 8001116:	2300      	movs	r3, #0
    }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7d9b      	ldrb	r3, [r3, #22]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	2b0a      	cmp	r3, #10
 8001132:	d101      	bne.n	8001138 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8001134:	2301      	movs	r3, #1
 8001136:	e022      	b.n	800117e <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff feda 	bl	8000ef8 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	895b      	ldrh	r3, [r3, #10]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d104      	bne.n	800116c <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fd5e 	bl	8000c24 <load_descriptor_values>
 8001168:	4603      	mov	r3, r0
 800116a:	e008      	b.n	800117e <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	429a      	cmp	r2, r3
 8001174:	d1e3      	bne.n	800113e <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fd54 	bl	8000c24 <load_descriptor_values>
        return false;
 800117c:	2300      	movs	r3, #0
    }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	441a      	add	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6979      	ldr	r1, [r7, #20]
 80011ae:	68b8      	ldr	r0, [r7, #8]
 80011b0:	f008 ff6d 	bl	800a08e <memcpy>
    }
    
    return true;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
    if (count == 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <pb_read+0x16>
        return true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e05f      	b.n	8001296 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d123      	bne.n	8001224 <pb_read+0x64>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <pb_read+0xe0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01e      	beq.n	8001224 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80011e6:	e011      	b.n	800120c <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2210      	movs	r2, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff ffe5 	bl	80011c0 <pb_read>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <pb_read+0x46>
				return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e047      	b.n	8001296 <pb_read+0xd6>
			
			count -= 16;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3b10      	subs	r3, #16
 800120a:	607b      	str	r3, [r7, #4]
		while (count > 16)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d8ea      	bhi.n	80011e8 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ffd0 	bl	80011c0 <pb_read>
 8001220:	4603      	mov	r3, r0
 8001222:	e038      	b.n	8001296 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d90b      	bls.n	8001246 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <pb_read+0x7c>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	e000      	b.n	800123e <pb_read+0x7e>
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <pb_read+0xe4>)
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	60d3      	str	r3, [r2, #12]
 8001242:	2300      	movs	r3, #0
 8001244:	e027      	b.n	8001296 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	4798      	blx	r3
 8001252:	4603      	mov	r3, r0
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <pb_read+0xac>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	e000      	b.n	800126e <pb_read+0xae>
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <pb_read+0xe8>)
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	60d3      	str	r3, [r2, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	e00f      	b.n	8001296 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d903      	bls.n	8001288 <pb_read+0xc8>
        stream->bytes_left = 0;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	e005      	b.n	8001294 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	1ad2      	subs	r2, r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	609a      	str	r2, [r3, #8]

    return true;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08001187 	.word	0x08001187
 80012a4:	0800aaf8 	.word	0x0800aaf8
 80012a8:	0800ab08 	.word	0x0800ab08

080012ac <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <pb_readbyte+0x20>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	e000      	b.n	80012ce <pb_readbyte+0x22>
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <pb_readbyte+0x70>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	60d3      	str	r3, [r2, #12]
 80012d2:	2300      	movs	r3, #0
 80012d4:	e01d      	b.n	8001312 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	f083 0301 	eor.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <pb_readbyte+0x50>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	e000      	b.n	80012fe <pb_readbyte+0x52>
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <pb_readbyte+0x74>)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	60d3      	str	r3, [r2, #12]
 8001302:	2300      	movs	r3, #0
 8001304:	e005      	b.n	8001312 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
    
    return true;    
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800aaf8 	.word	0x0800aaf8
 8001320:	0800ab08 	.word	0x0800ab08

08001324 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001324:	b490      	push	{r4, r7}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <pb_istream_from_buffer+0x38>)
 8001332:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	461c      	mov	r4, r3
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800134e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bc90      	pop	{r4, r7}
 800135a:	4770      	bx	lr
 800135c:	08001187 	.word	0x08001187

08001360 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 800136c:	f107 0315 	add.w	r3, r7, #21
 8001370:	4619      	mov	r1, r3
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ff9a 	bl	80012ac <pb_readbyte>
 8001378:	4603      	mov	r3, r0
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8001398:	2300      	movs	r3, #0
 800139a:	e084      	b.n	80014a6 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 800139c:	7d7b      	ldrb	r3, [r7, #21]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db02      	blt.n	80013aa <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80013a4:	7d7b      	ldrb	r3, [r7, #21]
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	e079      	b.n	800149e <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80013aa:	2307      	movs	r3, #7
 80013ac:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80013ae:	7d7b      	ldrb	r3, [r7, #21]
 80013b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013b4:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80013b6:	f107 0315 	add.w	r3, r7, #21
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff ff75 	bl	80012ac <pb_readbyte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <pb_decode_varint32_eof+0x72>
                return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e069      	b.n	80014a6 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b1f      	cmp	r3, #31
 80013d6:	d92f      	bls.n	8001438 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b3e      	cmp	r3, #62	@ 0x3e
 80013dc:	d801      	bhi.n	80013e2 <pb_decode_varint32_eof+0x82>
 80013de:	23ff      	movs	r3, #255	@ 0xff
 80013e0:	e000      	b.n	80013e4 <pb_decode_varint32_eof+0x84>
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80013e6:	7d7b      	ldrb	r3, [r7, #21]
 80013e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 80013f0:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da05      	bge.n	8001402 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	7dfa      	ldrb	r2, [r7, #23]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d101      	bne.n	8001402 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <pb_decode_varint32_eof+0xa4>
 8001402:	2300      	movs	r3, #0
 8001404:	75bb      	strb	r3, [r7, #22]
 8001406:	7dbb      	ldrb	r3, [r7, #22]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b3f      	cmp	r3, #63	@ 0x3f
 8001412:	d805      	bhi.n	8001420 <pb_decode_varint32_eof+0xc0>
 8001414:	7dbb      	ldrb	r3, [r7, #22]
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d037      	beq.n	8001490 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <pb_decode_varint32_eof+0xce>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	e000      	b.n	8001430 <pb_decode_varint32_eof+0xd0>
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <pb_decode_varint32_eof+0x150>)
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	60d3      	str	r3, [r2, #12]
 8001434:	2300      	movs	r3, #0
 8001436:	e036      	b.n	80014a6 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b1c      	cmp	r3, #28
 800143c:	d11f      	bne.n	800147e <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 800143e:	7d7b      	ldrb	r3, [r7, #21]
 8001440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001444:	2b00      	cmp	r3, #0
 8001446:	d010      	beq.n	800146a <pb_decode_varint32_eof+0x10a>
 8001448:	7d7b      	ldrb	r3, [r7, #21]
 800144a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800144e:	2b78      	cmp	r3, #120	@ 0x78
 8001450:	d00b      	beq.n	800146a <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <pb_decode_varint32_eof+0x100>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	e000      	b.n	8001462 <pb_decode_varint32_eof+0x102>
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <pb_decode_varint32_eof+0x150>)
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	60d3      	str	r3, [r2, #12]
 8001466:	2300      	movs	r3, #0
 8001468:	e01d      	b.n	80014a6 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 800146a:	7d7b      	ldrb	r3, [r7, #21]
 800146c:	f003 020f 	and.w	r2, r3, #15
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4313      	orrs	r3, r2
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	e008      	b.n	8001490 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800147e:	7d7b      	ldrb	r3, [r7, #21]
 8001480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4313      	orrs	r3, r2
 800148e:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3307      	adds	r3, #7
 8001494:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8001496:	7d7b      	ldrb	r3, [r7, #21]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	db8b      	blt.n	80013b6 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	601a      	str	r2, [r3, #0]
   return true;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800ab14 	.word	0x0800ab14

080014b4 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80014be:	2200      	movs	r2, #0
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff4c 	bl	8001360 <pb_decode_varint32_eof>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 80014d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d8:	b08a      	sub	sp, #40	@ 0x28
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 80014f0:	f107 0317 	add.w	r3, r7, #23
 80014f4:	4619      	mov	r1, r3
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fed8 	bl	80012ac <pb_readbyte>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f083 0301 	eor.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <pb_decode_varint+0x38>
            return false;
 8001508:	2300      	movs	r3, #0
 800150a:	e041      	b.n	8001590 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001510:	d910      	bls.n	8001534 <pb_decode_varint+0x60>
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <pb_decode_varint+0x56>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	e000      	b.n	800152c <pb_decode_varint+0x58>
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <pb_decode_varint+0xc8>)
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	60d3      	str	r3, [r2, #12]
 8001530:	2300      	movs	r3, #0
 8001532:	e02d      	b.n	8001590 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2200      	movs	r2, #0
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8001544:	f04f 0900 	mov.w	r9, #0
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	f1a3 0120 	sub.w	r1, r3, #32
 800154e:	f1c3 0220 	rsb	r2, r3, #32
 8001552:	fa09 f503 	lsl.w	r5, r9, r3
 8001556:	fa08 f101 	lsl.w	r1, r8, r1
 800155a:	430d      	orrs	r5, r1
 800155c:	fa28 f202 	lsr.w	r2, r8, r2
 8001560:	4315      	orrs	r5, r2
 8001562:	fa08 f403 	lsl.w	r4, r8, r3
 8001566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156a:	ea42 0a04 	orr.w	sl, r2, r4
 800156e:	ea43 0b05 	orr.w	fp, r3, r5
 8001572:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	3307      	adds	r3, #7
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	dbb5      	blt.n	80014f0 <pb_decode_varint+0x1c>
    
    *dest = result;
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158a:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop
 800159c:	0800ab14 	.word	0x0800ab14

080015a0 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80015a8:	f107 030f 	add.w	r3, r7, #15
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fe05 	bl	80011c0 <pb_read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <pb_skip_varint+0x26>
            return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e004      	b.n	80015d0 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dbec      	blt.n	80015a8 <pb_skip_varint+0x8>
    return true;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff64 	bl	80014b4 <pb_decode_varint32>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <pb_skip_string+0x24>
        return false;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e006      	b.n	800160a <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	461a      	mov	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fddc 	bl	80011c0 <pb_read>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fe90 	bl	8001360 <pb_decode_varint32_eof>
 8001640:	4603      	mov	r3, r0
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <pb_decode_tag+0x3e>
    {
        return false;
 800164c:	2300      	movs	r3, #0
 800164e:	e00b      	b.n	8001668 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	b2da      	uxtb	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	701a      	strb	r2, [r3, #0]
    return true;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d826      	bhi.n	80016d0 <pb_skip_field+0x60>
 8001682:	a201      	add	r2, pc, #4	@ (adr r2, 8001688 <pb_skip_field+0x18>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016ab 	.word	0x080016ab
 8001690:	080016b9 	.word	0x080016b9
 8001694:	080016d1 	.word	0x080016d1
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016c3 	.word	0x080016c3
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff7d 	bl	80015a0 <pb_skip_varint>
 80016a6:	4603      	mov	r3, r0
 80016a8:	e01d      	b.n	80016e6 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80016aa:	2208      	movs	r2, #8
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd86 	bl	80011c0 <pb_read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	e016      	b.n	80016e6 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff8d 	bl	80015d8 <pb_skip_string>
 80016be:	4603      	mov	r3, r0
 80016c0:	e011      	b.n	80016e6 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80016c2:	2204      	movs	r2, #4
 80016c4:	2100      	movs	r1, #0
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fd7a 	bl	80011c0 <pb_read>
 80016cc:	4603      	mov	r3, r0
 80016ce:	e00a      	b.n	80016e6 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <pb_skip_field+0x6e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	e000      	b.n	80016e0 <pb_skip_field+0x70>
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <pb_skip_field+0x80>)
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	60d3      	str	r3, [r2, #12]
 80016e4:	2300      	movs	r3, #0
    }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800ab24 	.word	0x0800ab24

080016f4 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	460b      	mov	r3, r1
 8001702:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d03f      	beq.n	8001790 <read_raw_value+0x9c>
 8001710:	2b05      	cmp	r3, #5
 8001712:	dc47      	bgt.n	80017a4 <read_raw_value+0xb0>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <read_raw_value+0x2a>
 8001718:	2b01      	cmp	r3, #1
 800171a:	d02f      	beq.n	800177c <read_raw_value+0x88>
 800171c:	e042      	b.n	80017a4 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	d20b      	bcs.n	8001750 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <read_raw_value+0x52>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	e000      	b.n	8001748 <read_raw_value+0x54>
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <read_raw_value+0xd0>)
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	60d3      	str	r3, [r2, #12]
 800174c:	2300      	movs	r3, #0
 800174e:	e034      	b.n	80017ba <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8001750:	2201      	movs	r2, #1
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fd33 	bl	80011c0 <pb_read>
 800175a:	4603      	mov	r3, r0
 800175c:	f083 0301 	eor.w	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <read_raw_value+0x76>
                    return false;
 8001766:	2300      	movs	r3, #0
 8001768:	e027      	b.n	80017ba <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	dbd5      	blt.n	8001724 <read_raw_value+0x30>
            return true;
 8001778:	2301      	movs	r3, #1
 800177a:	e01e      	b.n	80017ba <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2208      	movs	r2, #8
 8001780:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8001782:	2208      	movs	r2, #8
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fd1a 	bl	80011c0 <pb_read>
 800178c:	4603      	mov	r3, r0
 800178e:	e014      	b.n	80017ba <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8001796:	2204      	movs	r2, #4
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff fd10 	bl	80011c0 <pb_read>
 80017a0:	4603      	mov	r3, r0
 80017a2:	e00a      	b.n	80017ba <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <read_raw_value+0xbe>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	e000      	b.n	80017b4 <read_raw_value+0xc0>
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <read_raw_value+0xd4>)
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	60d3      	str	r3, [r2, #12]
 80017b8:	2300      	movs	r3, #0
    }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800ab14 	.word	0x0800ab14
 80017c8:	0800ab24 	.word	0x0800ab24

080017cc <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fe69 	bl	80014b4 <pb_decode_varint32>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <pb_make_string_substream+0x26>
        return false;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e020      	b.n	8001834 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4614      	mov	r4, r2
 80017f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d20b      	bcs.n	8001820 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <pb_make_string_substream+0x4a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	e000      	b.n	8001818 <pb_make_string_substream+0x4c>
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <pb_make_string_substream+0x70>)
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	60d3      	str	r3, [r2, #12]
 800181c:	2300      	movs	r3, #0
 800181e:	e009      	b.n	8001834 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad2      	subs	r2, r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]
    return true;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	0800ab38 	.word	0x0800ab38

08001840 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	461a      	mov	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	f7ff fcb0 	bl	80011c0 <pb_read>
 8001860:	4603      	mov	r3, r0
 8001862:	f083 0301 	eor.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <pb_close_string_substream+0x30>
            return false;
 800186c:	2300      	movs	r3, #0
 800186e:	e008      	b.n	8001882 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	460b      	mov	r3, r1
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7d9b      	ldrb	r3, [r3, #22]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	2b0b      	cmp	r3, #11
 80018a4:	f200 80d4 	bhi.w	8001a50 <decode_basic_field+0x1c4>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <decode_basic_field+0x24>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018e1 	.word	0x080018e1
 80018b4:	08001911 	.word	0x08001911
 80018b8:	08001911 	.word	0x08001911
 80018bc:	08001911 	.word	0x08001911
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001975 	.word	0x08001975
 80018c8:	080019a9 	.word	0x080019a9
 80018cc:	080019d3 	.word	0x080019d3
 80018d0:	080019fd 	.word	0x080019fd
 80018d4:	080019fd 	.word	0x080019fd
 80018d8:	08001a51 	.word	0x08001a51
 80018dc:	08001a27 	.word	0x08001a27
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00e      	beq.n	8001904 <decode_basic_field+0x78>
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	2bff      	cmp	r3, #255	@ 0xff
 80018ea:	d00b      	beq.n	8001904 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <decode_basic_field+0x6e>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	e000      	b.n	80018fc <decode_basic_field+0x70>
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <decode_basic_field+0x1e4>)
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	60d3      	str	r3, [r2, #12]
 8001900:	2300      	movs	r3, #0
 8001902:	e0b0      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fef6 	bl	80026f8 <pb_dec_bool>
 800190c:	4603      	mov	r3, r0
 800190e:	e0aa      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00e      	beq.n	8001934 <decode_basic_field+0xa8>
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d00b      	beq.n	8001934 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <decode_basic_field+0x9e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	e000      	b.n	800192c <decode_basic_field+0xa0>
 800192a:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <decode_basic_field+0x1e4>)
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	60d3      	str	r3, [r2, #12]
 8001930:	2300      	movs	r3, #0
 8001932:	e098      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 feee 	bl	8002718 <pb_dec_varint>
 800193c:	4603      	mov	r3, r0
 800193e:	e092      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d00e      	beq.n	8001964 <decode_basic_field+0xd8>
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	2bff      	cmp	r3, #255	@ 0xff
 800194a:	d00b      	beq.n	8001964 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <decode_basic_field+0xce>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	e000      	b.n	800195c <decode_basic_field+0xd0>
 800195a:	4b45      	ldr	r3, [pc, #276]	@ (8001a70 <decode_basic_field+0x1e4>)
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	60d3      	str	r3, [r2, #12]
 8001960:	2300      	movs	r3, #0
 8001962:	e080      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4619      	mov	r1, r3
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 fe8a 	bl	8002684 <pb_decode_fixed32>
 8001970:	4603      	mov	r3, r0
 8001972:	e078      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d00e      	beq.n	8001998 <decode_basic_field+0x10c>
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	2bff      	cmp	r3, #255	@ 0xff
 800197e:	d00b      	beq.n	8001998 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <decode_basic_field+0x102>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	e000      	b.n	8001990 <decode_basic_field+0x104>
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <decode_basic_field+0x1e4>)
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	60d3      	str	r3, [r2, #12]
 8001994:	2300      	movs	r3, #0
 8001996:	e066      	b.n	8001a66 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4619      	mov	r1, r3
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fe8c 	bl	80026bc <pb_decode_fixed64>
 80019a4:	4603      	mov	r3, r0
 80019a6:	e05e      	b.n	8001a66 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d00b      	beq.n	80019c6 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <decode_basic_field+0x130>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	e000      	b.n	80019be <decode_basic_field+0x132>
 80019bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <decode_basic_field+0x1e4>)
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	60d3      	str	r3, [r2, #12]
 80019c2:	2300      	movs	r3, #0
 80019c4:	e04f      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 ffd1 	bl	8002970 <pb_dec_bytes>
 80019ce:	4603      	mov	r3, r0
 80019d0:	e049      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d00b      	beq.n	80019f0 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <decode_basic_field+0x15a>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	e000      	b.n	80019e8 <decode_basic_field+0x15c>
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <decode_basic_field+0x1e4>)
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	60d3      	str	r3, [r2, #12]
 80019ec:	2300      	movs	r3, #0
 80019ee:	e03a      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f001 f830 	bl	8002a58 <pb_dec_string>
 80019f8:	4603      	mov	r3, r0
 80019fa:	e034      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d00b      	beq.n	8001a1a <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <decode_basic_field+0x184>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	e000      	b.n	8001a12 <decode_basic_field+0x186>
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <decode_basic_field+0x1e4>)
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	60d3      	str	r3, [r2, #12]
 8001a16:	2300      	movs	r3, #0
 8001a18:	e025      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f001 f897 	bl	8002b50 <pb_dec_submessage>
 8001a22:	4603      	mov	r3, r0
 8001a24:	e01f      	b.n	8001a66 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d00b      	beq.n	8001a44 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <decode_basic_field+0x1ae>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	e000      	b.n	8001a3c <decode_basic_field+0x1b0>
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <decode_basic_field+0x1e4>)
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	60d3      	str	r3, [r2, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	e010      	b.n	8001a66 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f001 f90c 	bl	8002c64 <pb_dec_fixed_length_bytes>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	e00a      	b.n	8001a66 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <decode_basic_field+0x1d2>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	e000      	b.n	8001a60 <decode_basic_field+0x1d4>
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <decode_basic_field+0x1e8>)
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	60d3      	str	r3, [r2, #12]
 8001a64:	2300      	movs	r3, #0
    }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0800ab50 	.word	0x0800ab50
 8001a74:	0800ab60 	.word	0x0800ab60

08001a78 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b096      	sub	sp, #88	@ 0x58
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	460b      	mov	r3, r1
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7d9b      	ldrb	r3, [r3, #22]
 8001a8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a8e:	2b30      	cmp	r3, #48	@ 0x30
 8001a90:	f000 80c2 	beq.w	8001c18 <decode_static_field+0x1a0>
 8001a94:	2b30      	cmp	r3, #48	@ 0x30
 8001a96:	f200 811a 	bhi.w	8001cce <decode_static_field+0x256>
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d01f      	beq.n	8001ade <decode_static_field+0x66>
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	f200 8115 	bhi.w	8001cce <decode_static_field+0x256>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <decode_static_field+0x36>
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d008      	beq.n	8001abe <decode_static_field+0x46>
 8001aac:	e10f      	b.n	8001cce <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fee9 	bl	800188c <decode_basic_field>
 8001aba:	4603      	mov	r3, r0
 8001abc:	e112      	b.n	8001ce4 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff fed9 	bl	800188c <decode_basic_field>
 8001ada:	4603      	mov	r3, r0
 8001adc:	e102      	b.n	8001ce4 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d16c      	bne.n	8001bbe <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7d9b      	ldrb	r3, [r3, #22]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d866      	bhi.n	8001bbe <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	8a52      	ldrh	r2, [r2, #18]
 8001b04:	4611      	mov	r1, r2
 8001b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	fb01 f202 	mul.w	r2, r1, r2
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001b14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fe56 	bl	80017cc <pb_make_string_substream>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f083 0301 	eor.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01f      	beq.n	8001b6c <decode_static_field+0xf4>
                    return false;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e0d9      	b.n	8001ce4 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8001b30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	21ff      	movs	r1, #255	@ 0xff
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fea7 	bl	800188c <decode_basic_field>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <decode_static_field+0xda>
                    {
                        status = false;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8001b50:	e015      	b.n	8001b7e <decode_static_field+0x106>
                    }
                    (*size)++;
 8001b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b5c:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	8a52      	ldrh	r2, [r2, #18]
 8001b66:	441a      	add	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <decode_static_field+0x106>
 8001b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8a9b      	ldrh	r3, [r3, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3d8      	bcc.n	8001b30 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8001b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <decode_static_field+0x11a>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	e000      	b.n	8001b94 <decode_static_field+0x11c>
 8001b92:	4b56      	ldr	r3, [pc, #344]	@ (8001cec <decode_static_field+0x274>)
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	60d3      	str	r3, [r2, #12]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e0a3      	b.n	8001ce4 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8001b9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fe4c 	bl	8001840 <pb_close_string_substream>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <decode_static_field+0x140>
                    return false;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e095      	b.n	8001ce4 <decode_static_field+0x26c>

                return status;
 8001bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001bbc:	e092      	b.n	8001ce4 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	8a52      	ldrh	r2, [r2, #18]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bd0:	8812      	ldrh	r2, [r2, #0]
 8001bd2:	fb01 f202 	mul.w	r2, r1, r2
 8001bd6:	441a      	add	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	b291      	uxth	r1, r2
 8001be4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001be6:	8011      	strh	r1, [r2, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	8a92      	ldrh	r2, [r2, #20]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d30b      	bcc.n	8001c08 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <decode_static_field+0x186>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	e000      	b.n	8001c00 <decode_static_field+0x188>
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <decode_static_field+0x274>)
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	60d3      	str	r3, [r2, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	e06d      	b.n	8001ce4 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff fe3c 	bl	800188c <decode_basic_field>
 8001c14:	4603      	mov	r3, r0
 8001c16:	e065      	b.n	8001ce4 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7d9b      	ldrb	r3, [r3, #22]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d005      	beq.n	8001c30 <decode_static_field+0x1b8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7d9b      	ldrb	r3, [r3, #22]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d141      	bne.n	8001cb4 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d03a      	beq.n	8001cb4 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69d8      	ldr	r0, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	8a5b      	ldrh	r3, [r3, #18]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f008 f9a5 	bl	8009f98 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d022      	beq.n	8001cb4 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f99c 	bl	8000fb8 <pb_field_iter_begin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fa4d 	bl	800212a <pb_message_set_to_defaults>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f083 0301 	eor.w	r3, r3, #1
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <decode_static_field+0x232>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	e000      	b.n	8001cac <decode_static_field+0x234>
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <decode_static_field+0x278>)
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	60d3      	str	r3, [r2, #12]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e017      	b.n	8001ce4 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	8a12      	ldrh	r2, [r2, #16]
 8001cbc:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fde1 	bl	800188c <decode_basic_field>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e00a      	b.n	8001ce4 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <decode_static_field+0x264>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	e000      	b.n	8001cde <decode_static_field+0x266>
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <decode_static_field+0x27c>)
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	60d3      	str	r3, [r2, #12]
 8001ce2:	2300      	movs	r3, #0
    }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3758      	adds	r7, #88	@ 0x58
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0800ab74 	.word	0x0800ab74
 8001cf0:	0800ab84 	.word	0x0800ab84
 8001cf4:	0800ab60 	.word	0x0800ab60

08001cf8 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	460b      	mov	r3, r1
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <decode_pointer_field+0x1c>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	e000      	b.n	8001d16 <decode_pointer_field+0x1e>
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <decode_pointer_field+0x30>)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	60d3      	str	r3, [r2, #12]
 8001d1a:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	0800ab9c 	.word	0x0800ab9c

08001d2c <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b097      	sub	sp, #92	@ 0x5c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	61f8      	str	r0, [r7, #28]
 8001d34:	460b      	mov	r3, r1
 8001d36:	617a      	str	r2, [r7, #20]
 8001d38:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001d44:	7efb      	ldrb	r3, [r7, #27]
 8001d46:	4619      	mov	r1, r3
 8001d48:	69f8      	ldr	r0, [r7, #28]
 8001d4a:	f7ff fc91 	bl	8001670 <pb_skip_field>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	e070      	b.n	8001e34 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001d52:	7efb      	ldrb	r3, [r7, #27]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d145      	bne.n	8001de4 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001d58:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	69f8      	ldr	r0, [r7, #28]
 8001d60:	f7ff fd34 	bl	80017cc <pb_make_string_substream>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <decode_callback_field+0x48>
            return false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e05f      	b.n	8001e34 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d76:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	2100      	movs	r1, #0
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <decode_callback_field+0x76>
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	e005      	b.n	8001dae <decode_callback_field+0x82>
 8001da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <decode_callback_field+0x80>
 8001da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001daa:	e000      	b.n	8001dae <decode_callback_field+0x82>
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <decode_callback_field+0x110>)
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	60d3      	str	r3, [r2, #12]
                return false;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e03e      	b.n	8001e34 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <decode_callback_field+0x98>
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8d7      	bhi.n	8001d74 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001dc4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dc8:	4619      	mov	r1, r3
 8001dca:	69f8      	ldr	r0, [r7, #28]
 8001dcc:	f7ff fd38 	bl	8001840 <pb_close_string_substream>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <decode_callback_field+0xb4>
            return false;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e029      	b.n	8001e34 <decode_callback_field+0x108>

        return true;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e027      	b.n	8001e34 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001de4:	230a      	movs	r3, #10
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001df0:	7ef9      	ldrb	r1, [r7, #27]
 8001df2:	69f8      	ldr	r0, [r7, #28]
 8001df4:	f7ff fc7e 	bl	80016f4 <read_raw_value>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <decode_callback_field+0xdc>
            return false;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e015      	b.n	8001e34 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fa87 	bl	8001324 <pb_istream_from_buffer>
 8001e16:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
    }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	375c      	adds	r7, #92	@ 0x5c
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	0800abb0 	.word	0x0800abb0

08001e40 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7d9b      	ldrb	r3, [r3, #22]
 8001e52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e56:	2b80      	cmp	r3, #128	@ 0x80
 8001e58:	d00e      	beq.n	8001e78 <decode_field+0x38>
 8001e5a:	2b80      	cmp	r3, #128	@ 0x80
 8001e5c:	d81c      	bhi.n	8001e98 <decode_field+0x58>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <decode_field+0x28>
 8001e62:	2b40      	cmp	r3, #64	@ 0x40
 8001e64:	d010      	beq.n	8001e88 <decode_field+0x48>
 8001e66:	e017      	b.n	8001e98 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fe02 	bl	8001a78 <decode_static_field>
 8001e74:	4603      	mov	r3, r0
 8001e76:	e01a      	b.n	8001eae <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff ff3a 	bl	8001cf8 <decode_pointer_field>
 8001e84:	4603      	mov	r3, r0
 8001e86:	e012      	b.n	8001eae <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff ff4c 	bl	8001d2c <decode_callback_field>
 8001e94:	4603      	mov	r3, r0
 8001e96:	e00a      	b.n	8001eae <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <decode_field+0x66>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	e000      	b.n	8001ea8 <decode_field+0x68>
 8001ea6:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <decode_field+0x78>)
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	60d3      	str	r3, [r2, #12]
 8001eac:	2300      	movs	r3, #0
    }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0800ab60 	.word	0x0800ab60

08001ebc <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	@ 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f88a 	bl	8000fea <pb_field_iter_begin_extension>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <default_extension_decoder+0x34>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	e000      	b.n	8001ef2 <default_extension_decoder+0x36>
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <default_extension_decoder+0x70>)
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	60d3      	str	r3, [r2, #12]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e014      	b.n	8001f24 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001efa:	8c3b      	ldrh	r3, [r7, #32]
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <default_extension_decoder+0x4e>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <default_extension_decoder+0x52>
        return true;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00a      	b.n	8001f24 <default_extension_decoder+0x68>

    extension->found = true;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2201      	movs	r2, #1
 8001f12:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001f14:	f107 0210 	add.w	r2, r7, #16
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff8f 	bl	8001e40 <decode_field>
 8001f22:	4603      	mov	r3, r0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3738      	adds	r7, #56	@ 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	0800abc0 	.word	0x0800abc0

08001f30 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001f46:	e022      	b.n	8001f8e <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681c      	ldr	r4, [r3, #0]
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	47a0      	blx	r4
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
 8001f66:	e007      	b.n	8001f78 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff ffa4 	bl	8001ebc <default_extension_decoder>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <decode_extension+0x58>
            return false;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e00b      	b.n	8001fa0 <decode_extension+0x70>
        
        extension = extension->next;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <decode_extension+0x6e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d0d4      	beq.n	8001f48 <decode_extension+0x18>
    }
    
    return true;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	@ 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7d9b      	ldrb	r3, [r3, #22]
 8001fb4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8001fb8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	2b0a      	cmp	r3, #10
 8001fc2:	d124      	bne.n	800200e <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001fcc:	e01b      	b.n	8002006 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f808 	bl	8000fea <pb_field_iter_begin_extension>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00f      	beq.n	8002000 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f89d 	bl	800212a <pb_message_set_to_defaults>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <pb_field_set_to_default+0x58>
                    return false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e090      	b.n	8002122 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8002000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e0      	bne.n	8001fce <pb_field_set_to_default+0x26>
 800200c:	e088      	b.n	8002120 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800200e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002012:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d166      	bne.n	80020e8 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002020:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002024:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002028:	2b10      	cmp	r3, #16
 800202a:	d108      	bne.n	800203e <pb_field_set_to_default+0x96>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e012      	b.n	8002064 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800203e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002042:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002046:	2b20      	cmp	r3, #32
 8002048:	d005      	beq.n	8002056 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800204a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800204e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002052:	2b30      	cmp	r3, #48	@ 0x30
 8002054:	d106      	bne.n	8002064 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8002064:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002068:	2b00      	cmp	r3, #0
 800206a:	d059      	beq.n	8002120 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7d9b      	ldrb	r3, [r3, #22]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	2b08      	cmp	r3, #8
 8002076:	d005      	beq.n	8002084 <pb_field_set_to_default+0xdc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7d9b      	ldrb	r3, [r3, #22]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b09      	cmp	r3, #9
 8002082:	d128      	bne.n	80020d6 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff81 	bl	8000fb8 <pb_field_iter_begin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d030      	beq.n	800211e <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f832 	bl	800212a <pb_message_set_to_defaults>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d025      	beq.n	800211e <pb_field_set_to_default+0x176>
                        return false;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e025      	b.n	8002122 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69d8      	ldr	r0, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8a5b      	ldrh	r3, [r3, #18]
 80020de:	461a      	mov	r2, r3
 80020e0:	2100      	movs	r1, #0
 80020e2:	f007 ff59 	bl	8009f98 <memset>
 80020e6:	e01b      	b.n	8002120 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80020e8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80020ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80020f0:	2b80      	cmp	r3, #128	@ 0x80
 80020f2:	d115      	bne.n	8002120 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80020fc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002100:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002104:	2b20      	cmp	r3, #32
 8002106:	d005      	beq.n	8002114 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8002108:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800210c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002110:	2b30      	cmp	r3, #48	@ 0x30
 8002112:	d105      	bne.n	8002120 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	2200      	movs	r2, #0
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e000      	b.n	8002120 <pb_field_set_to_default+0x178>
            {
 800211e:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	3738      	adds	r7, #56	@ 0x38
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b08d      	sub	sp, #52	@ 0x34
 800212e:	af00      	add	r7, sp, #0
 8002130:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8002144:	2300      	movs	r3, #0
 8002146:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	463b      	mov	r3, r7
 800215a:	f04f 32ff 	mov.w	r2, #4294967295
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f8e0 	bl	8001324 <pb_istream_from_buffer>
 8002164:	f107 0420 	add.w	r4, r7, #32
 8002168:	463b      	mov	r3, r7
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002170:	f107 031a 	add.w	r3, r7, #26
 8002174:	f107 021c 	add.w	r2, r7, #28
 8002178:	f107 011b 	add.w	r1, r7, #27
 800217c:	f107 0020 	add.w	r0, r7, #32
 8002180:	f7ff fa47 	bl	8001612 <pb_decode_tag>
 8002184:	4603      	mov	r3, r0
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <pb_message_set_to_defaults+0x6a>
            return false;
 8002190:	2300      	movs	r3, #0
 8002192:	e043      	b.n	800221c <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	f7ff ff07 	bl	8001fa8 <pb_field_set_to_default>
 800219a:	4603      	mov	r3, r0
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <pb_message_set_to_defaults+0x80>
            return false;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e038      	b.n	800221c <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02e      	beq.n	800220e <pb_message_set_to_defaults+0xe4>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	8a1b      	ldrh	r3, [r3, #16]
 80021b4:	461a      	mov	r2, r3
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d128      	bne.n	800220e <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 80021bc:	7ef9      	ldrb	r1, [r7, #27]
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fe3b 	bl	8001e40 <decode_field>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <pb_message_set_to_defaults+0xb0>
                return false;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e020      	b.n	800221c <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80021da:	f107 031a 	add.w	r3, r7, #26
 80021de:	f107 021c 	add.w	r2, r7, #28
 80021e2:	f107 011b 	add.w	r1, r7, #27
 80021e6:	f107 0020 	add.w	r0, r7, #32
 80021ea:	f7ff fa12 	bl	8001612 <pb_decode_tag>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <pb_message_set_to_defaults+0xd4>
                return false;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e00e      	b.n	800221c <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7fe ff1b 	bl	800104a <pb_field_iter_next>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1bc      	bne.n	8002194 <pb_message_set_to_defaults+0x6a>

    return true;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3734      	adds	r7, #52	@ 0x34
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b09a      	sub	sp, #104	@ 0x68
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 800223a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800223e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800224e:	2300      	movs	r3, #0
 8002250:	643b      	str	r3, [r7, #64]	@ 0x40
 8002252:	2300      	movs	r3, #0
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fea7 	bl	8000fb8 <pb_field_iter_begin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8102 	beq.w	8002476 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 80fc 	bne.w	8002476 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff51 	bl	800212a <pb_message_set_to_defaults>
 8002288:	4603      	mov	r3, r0
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80f0 	beq.w	8002476 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <pb_decode_inner+0x80>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	e000      	b.n	80022a6 <pb_decode_inner+0x82>
 80022a4:	4b99      	ldr	r3, [pc, #612]	@ (800250c <pb_decode_inner+0x2e8>)
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	60d3      	str	r3, [r2, #12]
 80022aa:	2300      	movs	r3, #0
 80022ac:	e16d      	b.n	800258a <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80022ae:	f107 0312 	add.w	r3, r7, #18
 80022b2:	f107 0214 	add.w	r2, r7, #20
 80022b6:	f107 0113 	add.w	r1, r7, #19
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff f9a9 	bl	8001612 <pb_decode_tag>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <pb_decode_inner+0xb4>
        {
            if (eof)
 80022cc:	7cbb      	ldrb	r3, [r7, #18]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80d7 	bne.w	8002482 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e158      	b.n	800258a <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d111      	bne.n	8002302 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 80ce 	bne.w	8002486 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <pb_decode_inner+0xd4>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	e000      	b.n	80022fa <pb_decode_inner+0xd6>
 80022f8:	4b85      	ldr	r3, [pc, #532]	@ (8002510 <pb_decode_inner+0x2ec>)
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	60d3      	str	r3, [r2, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	e143      	b.n	800258a <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe feb2 	bl	8001074 <pb_field_iter_find>
 8002310:	4603      	mov	r3, r0
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <pb_decode_inner+0x104>
 800231c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	2b0a      	cmp	r3, #10
 8002326:	d13c      	bne.n	80023a2 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8002328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232a:	2b00      	cmp	r3, #0
 800232c:	d112      	bne.n	8002354 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fef4 	bl	8001120 <pb_field_iter_find_extension>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8002344:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8002348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002358:	429a      	cmp	r2, r3
 800235a:	d815      	bhi.n	8002388 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8002362:	6979      	ldr	r1, [r7, #20]
 8002364:	7cfa      	ldrb	r2, [r7, #19]
 8002366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff fde1 	bl	8001f30 <decode_extension>
 800236e:	4603      	mov	r3, r0
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <pb_decode_inner+0x15a>
                    return false;
 800237a:	2300      	movs	r3, #0
 800237c:	e105      	b.n	800258a <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002384:	429a      	cmp	r2, r3
 8002386:	d173      	bne.n	8002470 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff f96f 	bl	8001670 <pb_skip_field>
 8002392:	4603      	mov	r3, r0
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06a      	beq.n	8002474 <pb_decode_inner+0x250>
                return false;
 800239e:	2300      	movs	r3, #0
 80023a0:	e0f3      	b.n	800258a <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80023a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d12e      	bne.n	800240c <pb_decode_inner+0x1e8>
 80023ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	3314      	adds	r3, #20
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d128      	bne.n	800240c <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80023ba:	8c3b      	ldrh	r3, [r7, #32]
 80023bc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d020      	beq.n	8002406 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80023c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80023c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d011      	beq.n	80023f4 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80023d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 80023d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d00b      	beq.n	80023f4 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <pb_decode_inner+0x1c6>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	e000      	b.n	80023ec <pb_decode_inner+0x1c8>
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <pb_decode_inner+0x2f0>)
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	60d3      	str	r3, [r2, #12]
 80023f0:	2300      	movs	r3, #0
 80023f2:	e0ca      	b.n	800258a <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 80023f4:	8c3b      	ldrh	r3, [r7, #32]
 80023f6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8002400:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002402:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8002406:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 800240a:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 800240c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002410:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11c      	bne.n	8002452 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8002418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800241a:	2b3f      	cmp	r3, #63	@ 0x3f
 800241c:	d819      	bhi.n	8002452 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800241e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 800242c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	b29b      	uxth	r3, r3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	3368      	adds	r3, #104	@ 0x68
 8002436:	443b      	add	r3, r7
 8002438:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800243c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b29b      	uxth	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002446:	431a      	orrs	r2, r3
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	3368      	adds	r3, #104	@ 0x68
 800244c:	443b      	add	r3, r7
 800244e:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	f107 0218 	add.w	r2, r7, #24
 8002458:	4619      	mov	r1, r3
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff fcf0 	bl	8001e40 <decode_field>
 8002460:	4603      	mov	r3, r0
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <pb_decode_inner+0x252>
            return false;
 800246c:	2300      	movs	r3, #0
 800246e:	e08c      	b.n	800258a <pb_decode_inner+0x366>
                    continue;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <pb_decode_inner+0x252>
            continue;
 8002474:	bf00      	nop
    while (stream->bytes_left)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f47f af17 	bne.w	80022ae <pb_decode_inner+0x8a>
 8002480:	e002      	b.n	8002488 <pb_decode_inner+0x264>
                break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <pb_decode_inner+0x264>
            break;
 8002486:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8002488:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800248c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002490:	4293      	cmp	r3, r2
 8002492:	d011      	beq.n	80024b8 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8002494:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8002498:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800249c:	429a      	cmp	r2, r3
 800249e:	d00b      	beq.n	80024b8 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <pb_decode_inner+0x28a>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	e000      	b.n	80024b0 <pb_decode_inner+0x28c>
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <pb_decode_inner+0x2f0>)
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	60d3      	str	r3, [r2, #12]
 80024b4:	2300      	movs	r3, #0
 80024b6:	e068      	b.n	800258a <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	8a5b      	ldrh	r3, [r3, #18]
 80024bc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80024c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05f      	beq.n	8002588 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80024c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024cc:	2b40      	cmp	r3, #64	@ 0x40
 80024ce:	d902      	bls.n	80024d6 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80024d0:	2340      	movs	r3, #64	@ 0x40
 80024d2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80024dc:	e023      	b.n	8002526 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 80024de:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3368      	adds	r3, #104	@ 0x68
 80024e6:	443b      	add	r3, r7
 80024e8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80024ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d014      	beq.n	800251c <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <pb_decode_inner+0x2dc>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	e000      	b.n	8002502 <pb_decode_inner+0x2de>
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <pb_decode_inner+0x2f4>)
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	60d3      	str	r3, [r2, #12]
 8002506:	2300      	movs	r3, #0
 8002508:	e03f      	b.n	800258a <pb_decode_inner+0x366>
 800250a:	bf00      	nop
 800250c:	0800ab84 	.word	0x0800ab84
 8002510:	0800abd4 	.word	0x0800abd4
 8002514:	0800abe0 	.word	0x0800abe0
 8002518:	0800ac04 	.word	0x0800ac04
            for (i = 0; i < (req_field_count >> 5); i++)
 800251c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002520:	3301      	adds	r3, #1
 8002522:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002526:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b29b      	uxth	r3, r3
 800252e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002532:	429a      	cmp	r2, r3
 8002534:	d3d3      	bcc.n	80024de <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8002536:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2b00      	cmp	r3, #0
 8002540:	d022      	beq.n	8002588 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8002542:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b29b      	uxth	r3, r3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	3368      	adds	r3, #104	@ 0x68
 800254e:	443b      	add	r3, r7
 8002550:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8002554:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f1c3 0320 	rsb	r3, r3, #32
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256a:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800256c:	429a      	cmp	r2, r3
 800256e:	d00b      	beq.n	8002588 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <pb_decode_inner+0x35a>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	e000      	b.n	8002580 <pb_decode_inner+0x35c>
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <pb_decode_inner+0x370>)
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	60d3      	str	r3, [r2, #12]
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	3768      	adds	r7, #104	@ 0x68
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	0800ac04 	.word	0x0800ac04

08002598 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80025a4:	2300      	movs	r3, #0
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff fe3a 	bl	8002224 <pb_decode_inner>
 80025b0:	4603      	mov	r3, r0
 80025b2:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe ff70 	bl	80014b4 <pb_decode_varint32>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <pb_decode_bool+0x26>
        return false;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e008      	b.n	80025f6 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
    return true;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80025fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe ff5f 	bl	80014d4 <pb_decode_varint>
 8002616:	4603      	mov	r3, r0
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <pb_decode_svarint+0x28>
        return false;
 8002622:	2300      	movs	r3, #0
 8002624:	e029      	b.n	800267a <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8002626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800262a:	f002 0401 	and.w	r4, r2, #1
 800262e:	2500      	movs	r5, #0
 8002630:	ea54 0305 	orrs.w	r3, r4, r5
 8002634:	d013      	beq.n	800265e <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8002636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	0842      	lsrs	r2, r0, #1
 8002644:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002648:	084b      	lsrs	r3, r1, #1
 800264a:	ea6f 0802 	mvn.w	r8, r2
 800264e:	ea6f 0903 	mvn.w	r9, r3
 8002652:	4642      	mov	r2, r8
 8002654:	464b      	mov	r3, r9
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
 800265c:	e00c      	b.n	8002678 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800265e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	0842      	lsrs	r2, r0, #1
 800266c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002670:	084b      	lsrs	r3, r1, #1
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002684 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	2204      	movs	r2, #4
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fd92 	bl	80011c0 <pb_read>
 800269c:	4603      	mov	r3, r0
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <pb_decode_fixed32+0x28>
        return false;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e003      	b.n	80026b4 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	2208      	movs	r2, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fd76 	bl	80011c0 <pb_read>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <pb_decode_fixed64+0x28>
        return false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e005      	b.n	80026f0 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80026e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026e8:	6839      	ldr	r1, [r7, #0]
 80026ea:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff58 	bl	80025be <pb_decode_bool>
 800270e:	4603      	mov	r3, r0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b094      	sub	sp, #80	@ 0x50
 800271e:	af00      	add	r7, sp, #0
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24
 8002722:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	7d9b      	ldrb	r3, [r3, #22]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b02      	cmp	r3, #2
 800272e:	d179      	bne.n	8002824 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8002730:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002734:	4619      	mov	r1, r3
 8002736:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002738:	f7fe fecc 	bl	80014d4 <pb_decode_varint>
 800273c:	4603      	mov	r3, r0
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <pb_dec_varint+0x34>
            return false;
 8002748:	2300      	movs	r3, #0
 800274a:	e107      	b.n	800295c <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	8a5b      	ldrh	r3, [r3, #18]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d10a      	bne.n	800276a <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800275c:	e9c1 2300 	strd	r2, r3, [r1]
 8002760:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002764:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002768:	e046      	b.n	80027f8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	8a5b      	ldrh	r3, [r3, #18]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d10e      	bne.n	8002790 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8002772:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4602      	mov	r2, r0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	617a      	str	r2, [r7, #20]
 8002786:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800278a:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800278e:	e033      	b.n	80027f8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	8a5b      	ldrh	r3, [r3, #18]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d10f      	bne.n	80027b8 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8002798:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	b282      	uxth	r2, r0
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	60fa      	str	r2, [r7, #12]
 80027ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027b2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80027b6:	e01f      	b.n	80027f8 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	8a5b      	ldrh	r3, [r3, #18]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10f      	bne.n	80027e0 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80027c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	b2c2      	uxtb	r2, r0
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80027da:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80027de:	e00b      	b.n	80027f8 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <pb_dec_varint+0xd6>
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	e000      	b.n	80027f0 <pb_dec_varint+0xd8>
 80027ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002968 <pb_dec_varint+0x250>)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	60d3      	str	r3, [r2, #12]
 80027f4:	2300      	movs	r3, #0
 80027f6:	e0b1      	b.n	800295c <pb_dec_varint+0x244>

        if (clamped != value)
 80027f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002800:	4299      	cmp	r1, r3
 8002802:	bf08      	it	eq
 8002804:	4290      	cmpeq	r0, r2
 8002806:	d00b      	beq.n	8002820 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <pb_dec_varint+0xfe>
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	e000      	b.n	8002818 <pb_dec_varint+0x100>
 8002816:	4b55      	ldr	r3, [pc, #340]	@ (800296c <pb_dec_varint+0x254>)
 8002818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281a:	60d3      	str	r3, [r2, #12]
 800281c:	2300      	movs	r3, #0
 800281e:	e09d      	b.n	800295c <pb_dec_varint+0x244>

        return true;
 8002820:	2301      	movs	r3, #1
 8002822:	e09b      	b.n	800295c <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	7d9b      	ldrb	r3, [r3, #22]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10d      	bne.n	800284c <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8002830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002834:	4619      	mov	r1, r3
 8002836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002838:	f7ff fee1 	bl	80025fe <pb_decode_svarint>
 800283c:	4603      	mov	r3, r0
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d022      	beq.n	800288e <pb_dec_varint+0x176>
                return false;
 8002848:	2300      	movs	r3, #0
 800284a:	e087      	b.n	800295c <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800284c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002850:	4619      	mov	r1, r3
 8002852:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002854:	f7fe fe3e 	bl	80014d4 <pb_decode_varint>
 8002858:	4603      	mov	r3, r0
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <pb_dec_varint+0x150>
                return false;
 8002864:	2300      	movs	r3, #0
 8002866:	e079      	b.n	800295c <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	8a5b      	ldrh	r3, [r3, #18]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d104      	bne.n	800287a <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8002870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002874:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002878:	e009      	b.n	800288e <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800287a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800287e:	4613      	mov	r3, r2
 8002880:	17da      	asrs	r2, r3, #31
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	61fa      	str	r2, [r7, #28]
 8002886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	8a5b      	ldrh	r3, [r3, #18]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d10a      	bne.n	80028ac <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	69d9      	ldr	r1, [r3, #28]
 800289a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800289e:	e9c1 2300 	strd	r2, r3, [r1]
 80028a2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80028a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80028aa:	e042      	b.n	8002932 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	8a5b      	ldrh	r3, [r3, #18]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d10c      	bne.n	80028ce <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80028b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4602      	mov	r2, r0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	17da      	asrs	r2, r3, #31
 80028c4:	469a      	mov	sl, r3
 80028c6:	4693      	mov	fp, r2
 80028c8:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80028cc:	e031      	b.n	8002932 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	8a5b      	ldrh	r3, [r3, #18]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d10e      	bne.n	80028f4 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80028d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	b202      	sxth	r2, r0
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	17da      	asrs	r2, r3, #31
 80028ea:	4698      	mov	r8, r3
 80028ec:	4691      	mov	r9, r2
 80028ee:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 80028f2:	e01e      	b.n	8002932 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	8a5b      	ldrh	r3, [r3, #18]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10e      	bne.n	800291a <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80028fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	b242      	sxtb	r2, r0
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	b25b      	sxtb	r3, r3
 800290e:	17da      	asrs	r2, r3, #31
 8002910:	461c      	mov	r4, r3
 8002912:	4615      	mov	r5, r2
 8002914:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8002918:	e00b      	b.n	8002932 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <pb_dec_varint+0x210>
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	e000      	b.n	800292a <pb_dec_varint+0x212>
 8002928:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <pb_dec_varint+0x250>)
 800292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292c:	60d3      	str	r3, [r2, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	e014      	b.n	800295c <pb_dec_varint+0x244>

        if (clamped != svalue)
 8002932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002936:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800293a:	4299      	cmp	r1, r3
 800293c:	bf08      	it	eq
 800293e:	4290      	cmpeq	r0, r2
 8002940:	d00b      	beq.n	800295a <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <pb_dec_varint+0x238>
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	e000      	b.n	8002952 <pb_dec_varint+0x23a>
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <pb_dec_varint+0x254>)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	60d3      	str	r3, [r2, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <pb_dec_varint+0x244>

        return true;
 800295a:	2301      	movs	r3, #1
    }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3750      	adds	r7, #80	@ 0x50
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	0800ac1c 	.word	0x0800ac1c
 800296c:	0800ac30 	.word	0x0800ac30

08002970 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fe fd97 	bl	80014b4 <pb_decode_varint32>
 8002986:	4603      	mov	r3, r0
 8002988:	f083 0301 	eor.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <pb_dec_bytes+0x26>
        return false;
 8002992:	2300      	movs	r3, #0
 8002994:	e055      	b.n	8002a42 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299c:	d30b      	bcc.n	80029b6 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <pb_dec_bytes+0x3c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	e000      	b.n	80029ae <pb_dec_bytes+0x3e>
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <pb_dec_bytes+0xdc>)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	60d3      	str	r3, [r2, #12]
 80029b2:	2300      	movs	r3, #0
 80029b4:	e045      	b.n	8002a42 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3302      	adds	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d20b      	bcs.n	80029dc <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <pb_dec_bytes+0x62>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	e000      	b.n	80029d4 <pb_dec_bytes+0x64>
 80029d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <pb_dec_bytes+0xe0>)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	60d3      	str	r3, [r2, #12]
 80029d8:	2300      	movs	r3, #0
 80029da:	e032      	b.n	8002a42 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	7d9b      	ldrb	r3, [r3, #22]
 80029e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029e4:	2b80      	cmp	r3, #128	@ 0x80
 80029e6:	d10b      	bne.n	8002a00 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <pb_dec_bytes+0x86>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	e000      	b.n	80029f8 <pb_dec_bytes+0x88>
 80029f6:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <pb_dec_bytes+0xe4>)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	60d3      	str	r3, [r2, #12]
 80029fc:	2300      	movs	r3, #0
 80029fe:	e020      	b.n	8002a42 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	8a5b      	ldrh	r3, [r3, #18]
 8002a04:	461a      	mov	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d90b      	bls.n	8002a24 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <pb_dec_bytes+0xaa>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	e000      	b.n	8002a1c <pb_dec_bytes+0xac>
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <pb_dec_bytes+0xdc>)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	2300      	movs	r3, #0
 8002a22:	e00e      	b.n	8002a42 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3302      	adds	r3, #2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fbc0 	bl	80011c0 <pb_read>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	0800ac44 	.word	0x0800ac44
 8002a50:	0800ac54 	.word	0x0800ac54
 8002a54:	0800ab9c 	.word	0x0800ab9c

08002a58 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fd20 	bl	80014b4 <pb_decode_varint32>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <pb_dec_string+0x2c>
        return false;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e05a      	b.n	8002b3a <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d10b      	bne.n	8002aa4 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <pb_dec_string+0x42>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	e000      	b.n	8002a9c <pb_dec_string+0x44>
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <pb_dec_string+0xec>)
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e04a      	b.n	8002b3a <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20b      	bcs.n	8002aca <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <pb_dec_string+0x68>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	e000      	b.n	8002ac2 <pb_dec_string+0x6a>
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <pb_dec_string+0xec>)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60d3      	str	r3, [r2, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e037      	b.n	8002b3a <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7d9b      	ldrb	r3, [r3, #22]
 8002ace:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ad2:	2b80      	cmp	r3, #128	@ 0x80
 8002ad4:	d10b      	bne.n	8002aee <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <pb_dec_string+0x8c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	e000      	b.n	8002ae6 <pb_dec_string+0x8e>
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <pb_dec_string+0xf0>)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	2300      	movs	r3, #0
 8002aec:	e025      	b.n	8002b3a <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	8a5b      	ldrh	r3, [r3, #18]
 8002af2:	461a      	mov	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d90b      	bls.n	8002b12 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <pb_dec_string+0xb0>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	e000      	b.n	8002b0a <pb_dec_string+0xb2>
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <pb_dec_string+0xf4>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	60d3      	str	r3, [r2, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e013      	b.n	8002b3a <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4413      	add	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe fb4c 	bl	80011c0 <pb_read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <pb_dec_string+0xe0>
        return false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	0800ac54 	.word	0x0800ac54
 8002b48:	0800ab9c 	.word	0x0800ab9c
 8002b4c:	0800ac64 	.word	0x0800ac64

08002b50 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
    bool status = true;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fe fe2d 	bl	80017cc <pb_make_string_substream>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f083 0301 	eor.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <pb_dec_submessage+0x32>
        return false;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e069      	b.n	8002c56 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <pb_dec_submessage+0x48>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	e000      	b.n	8002b9a <pb_dec_submessage+0x4a>
 8002b98:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <pb_dec_submessage+0x110>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	60d3      	str	r3, [r2, #12]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e059      	b.n	8002c56 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	7d9b      	ldrb	r3, [r3, #22]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	2b09      	cmp	r3, #9
 8002bac:	d11c      	bne.n	8002be8 <pb_dec_submessage+0x98>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	3b08      	subs	r3, #8
 8002bbc:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	3204      	adds	r2, #4
 8002bce:	f107 000c 	add.w	r0, r7, #12
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4798      	blx	r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d022      	beq.n	8002c36 <pb_dec_submessage+0xe6>
 8002bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01b      	beq.n	8002c36 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	7d9b      	ldrb	r3, [r3, #22]
 8002c06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7d9b      	ldrb	r3, [r3, #22]
 8002c12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d001      	beq.n	8002c1e <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	f107 000c 	add.w	r0, r7, #12
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f7ff fafa 	bl	8002224 <pb_decode_inner>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe fdff 	bl	8001840 <pb_close_string_substream>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <pb_dec_submessage+0x102>
        return false;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e001      	b.n	8002c56 <pb_dec_submessage+0x106>

    return status;
 8002c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	@ 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800ac74 	.word	0x0800ac74

08002c64 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe fc1d 	bl	80014b4 <pb_decode_varint32>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f083 0301 	eor.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <pb_dec_fixed_length_bytes+0x26>
        return false;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e037      	b.n	8002cfa <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c90:	d30b      	bcc.n	8002caa <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <pb_dec_fixed_length_bytes+0x3c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	e000      	b.n	8002ca2 <pb_dec_fixed_length_bytes+0x3e>
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <pb_dec_fixed_length_bytes+0xa0>)
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e027      	b.n	8002cfa <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	69d8      	ldr	r0, [r3, #28]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	8a5b      	ldrh	r3, [r3, #18]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f007 f96c 	bl	8009f98 <memset>
        return true;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e01a      	b.n	8002cfa <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	8a5b      	ldrh	r3, [r3, #18]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d00b      	beq.n	8002ce8 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <pb_dec_fixed_length_bytes+0x7a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	e000      	b.n	8002ce0 <pb_dec_fixed_length_bytes+0x7c>
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <pb_dec_fixed_length_bytes+0xa4>)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	60d3      	str	r3, [r2, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e008      	b.n	8002cfa <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	8a5b      	ldrh	r3, [r3, #18]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fa64 	bl	80011c0 <pb_read>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	0800ac44 	.word	0x0800ac44
 8002d08:	0800ac90 	.word	0x0800ac90

08002d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_MspInit+0x30>)
 8002d14:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d18:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <HAL_MspInit+0x30>)
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_MspInit+0x30>)
 8002d24:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	58024400 	.word	0x58024400

08002d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <NMI_Handler+0x4>

08002d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <HardFault_Handler+0x4>

08002d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <MemManage_Handler+0x4>

08002d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d96:	f000 fab5 	bl	8003304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <USART3_IRQHandler+0x10>)
 8002da6:	f004 fac9 	bl	800733c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	240004a8 	.word	0x240004a8

08002db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00a      	b.n	8002ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dc6:	f3af 8000 	nop.w
 8002dca:	4601      	mov	r1, r0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dbf0      	blt.n	8002dc6 <_read+0x12>
  }

  return len;
 8002de4:	687b      	ldr	r3, [r7, #4]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e009      	b.n	8002e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fd53 	bl	80008b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf1      	blt.n	8002e00 <_write+0x12>
  }
  return len;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_close>:

int _close(int file)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <_isatty>:

int _isatty(int file)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e98:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec0:	f007 f8b8 	bl	800a034 <__errno>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	@ (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	24100000 	.word	0x24100000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	240004a4 	.word	0x240004a4
 8002ef8:	24000690 	.word	0x24000690

08002efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f00:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <SystemInit+0x100>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	4a3d      	ldr	r2, [pc, #244]	@ (8002ffc <SystemInit+0x100>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f10:	4b3b      	ldr	r3, [pc, #236]	@ (8003000 <SystemInit+0x104>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d807      	bhi.n	8002f2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f1c:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <SystemInit+0x104>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 030f 	bic.w	r3, r3, #15
 8002f24:	4a36      	ldr	r2, [pc, #216]	@ (8003000 <SystemInit+0x104>)
 8002f26:	f043 0303 	orr.w	r3, r3, #3
 8002f2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <SystemInit+0x108>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a34      	ldr	r2, [pc, #208]	@ (8003004 <SystemInit+0x108>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <SystemInit+0x108>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f3e:	4b31      	ldr	r3, [pc, #196]	@ (8003004 <SystemInit+0x108>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4930      	ldr	r1, [pc, #192]	@ (8003004 <SystemInit+0x108>)
 8002f44:	4b30      	ldr	r3, [pc, #192]	@ (8003008 <SystemInit+0x10c>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <SystemInit+0x104>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f56:	4b2a      	ldr	r3, [pc, #168]	@ (8003000 <SystemInit+0x104>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 030f 	bic.w	r3, r3, #15
 8002f5e:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <SystemInit+0x104>)
 8002f60:	f043 0303 	orr.w	r3, r3, #3
 8002f64:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002f66:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <SystemInit+0x108>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002f6c:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <SystemInit+0x108>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002f72:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <SystemInit+0x108>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f78:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <SystemInit+0x108>)
 8002f7a:	4a24      	ldr	r2, [pc, #144]	@ (800300c <SystemInit+0x110>)
 8002f7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	@ (8003004 <SystemInit+0x108>)
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <SystemInit+0x114>)
 8002f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <SystemInit+0x108>)
 8002f86:	4a23      	ldr	r2, [pc, #140]	@ (8003014 <SystemInit+0x118>)
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <SystemInit+0x108>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f90:	4b1c      	ldr	r3, [pc, #112]	@ (8003004 <SystemInit+0x108>)
 8002f92:	4a20      	ldr	r2, [pc, #128]	@ (8003014 <SystemInit+0x118>)
 8002f94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f96:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <SystemInit+0x108>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <SystemInit+0x108>)
 8002f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <SystemInit+0x118>)
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <SystemInit+0x108>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <SystemInit+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a15      	ldr	r2, [pc, #84]	@ (8003004 <SystemInit+0x108>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fb4:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <SystemInit+0x108>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <SystemInit+0x108>)
 8002fbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d113      	bne.n	8002ff0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <SystemInit+0x108>)
 8002fca:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fce:	4a0d      	ldr	r2, [pc, #52]	@ (8003004 <SystemInit+0x108>)
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fd4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <SystemInit+0x11c>)
 8002fda:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002fde:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <SystemInit+0x108>)
 8002fe2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fe6:	4a07      	ldr	r2, [pc, #28]	@ (8003004 <SystemInit+0x108>)
 8002fe8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fec:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00
 8003000:	52002000 	.word	0x52002000
 8003004:	58024400 	.word	0x58024400
 8003008:	eaf6ed7f 	.word	0xeaf6ed7f
 800300c:	02020200 	.word	0x02020200
 8003010:	01ff0000 	.word	0x01ff0000
 8003014:	01010280 	.word	0x01010280
 8003018:	52004000 	.word	0x52004000

0800301c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <ExitRun0Mode+0x2c>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a08      	ldr	r2, [pc, #32]	@ (8003048 <ExitRun0Mode+0x2c>)
 8003026:	f023 0302 	bic.w	r3, r3, #2
 800302a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800302c:	bf00      	nop
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <ExitRun0Mode+0x2c>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f9      	beq.n	800302e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	58024800 	.word	0x58024800

0800304c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003050:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <MX_USART3_UART_Init+0x94>)
 8003054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003056:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800306a:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003084:	2200      	movs	r2, #0
 8003086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003088:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 800308a:	2200      	movs	r2, #0
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308e:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003094:	4811      	ldr	r0, [pc, #68]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 8003096:	f004 f827 	bl	80070e8 <HAL_UART_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030a0:	f7fd fdba 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a4:	2100      	movs	r1, #0
 80030a6:	480d      	ldr	r0, [pc, #52]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 80030a8:	f006 fca1 	bl	80099ee <HAL_UARTEx_SetTxFifoThreshold>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030b2:	f7fd fdb1 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b6:	2100      	movs	r1, #0
 80030b8:	4808      	ldr	r0, [pc, #32]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 80030ba:	f006 fcd6 	bl	8009a6a <HAL_UARTEx_SetRxFifoThreshold>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030c4:	f7fd fda8 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030c8:	4804      	ldr	r0, [pc, #16]	@ (80030dc <MX_USART3_UART_Init+0x90>)
 80030ca:	f006 fc57 	bl	800997c <HAL_UARTEx_DisableFifoMode>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80030d4:	f7fd fda0 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	240004a8 	.word	0x240004a8
 80030e0:	40004800 	.word	0x40004800

080030e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	@ 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	22c0      	movs	r2, #192	@ 0xc0
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f006 ff47 	bl	8009f98 <memset>
  if(uartHandle->Instance==USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2b      	ldr	r2, [pc, #172]	@ (80031bc <HAL_UART_MspInit+0xd8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d14e      	bne.n	80031b2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003114:	f04f 0202 	mov.w	r2, #2
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003126:	f107 0310 	add.w	r3, r7, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f002 f9fc 	bl	8005528 <HAL_RCCEx_PeriphCLKConfig>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003136:	f7fd fd6f 	bl	8000c18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 800313c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 8003142:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003146:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800314a:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 800314c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 800315a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_UART_MspInit+0xdc>)
 800316a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800317a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003190:	2307      	movs	r3, #7
 8003192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003196:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800319a:	4619      	mov	r1, r3
 800319c:	4809      	ldr	r0, [pc, #36]	@ (80031c4 <HAL_UART_MspInit+0xe0>)
 800319e:	f000 ffe1 	bl	8004164 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2027      	movs	r0, #39	@ 0x27
 80031a8:	f000 f9cb 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031ac:	2027      	movs	r0, #39	@ 0x27
 80031ae:	f000 f9e2 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031b2:	bf00      	nop
 80031b4:	37e8      	adds	r7, #232	@ 0xe8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40004800 	.word	0x40004800
 80031c0:	58024400 	.word	0x58024400
 80031c4:	58020c00 	.word	0x58020c00

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003204 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80031cc:	f7ff ff26 	bl	800301c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031d0:	f7ff fe94 	bl	8002efc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031d6:	490d      	ldr	r1, [pc, #52]	@ (800320c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f006 ff21 	bl	800a040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7fd fc2d 	bl	8000a5c <main>
  bx  lr
 8003202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003204:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003208:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800320c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003210:	0800ad54 	.word	0x0800ad54
  ldr r2, =_sbss
 8003214:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8003218:	2400068c 	.word	0x2400068c

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003226:	2003      	movs	r0, #3
 8003228:	f000 f980 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800322c:	f001 ffa6 	bl	800517c <HAL_RCC_GetSysClockFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_Init+0x68>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4913      	ldr	r1, [pc, #76]	@ (800328c <HAL_Init+0x6c>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800324a:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <HAL_Init+0x68>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a0e      	ldr	r2, [pc, #56]	@ (800328c <HAL_Init+0x6c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	4a0b      	ldr	r2, [pc, #44]	@ (8003290 <HAL_Init+0x70>)
 8003262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003264:	4a0b      	ldr	r2, [pc, #44]	@ (8003294 <HAL_Init+0x74>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800326a:	2000      	movs	r0, #0
 800326c:	f000 f814 	bl	8003298 <HAL_InitTick>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e002      	b.n	8003280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800327a:	f7ff fd47 	bl	8002d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	58024400 	.word	0x58024400
 800328c:	0800acd8 	.word	0x0800acd8
 8003290:	24000004 	.word	0x24000004
 8003294:	24000000 	.word	0x24000000

08003298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_InitTick+0x60>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e021      	b.n	80032f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_InitTick+0x64>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_InitTick+0x60>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f965 	bl	8003592 <HAL_SYSTICK_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00e      	b.n	80032f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d80a      	bhi.n	80032ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d8:	2200      	movs	r2, #0
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f000 f92f 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e4:	4a06      	ldr	r2, [pc, #24]	@ (8003300 <HAL_InitTick+0x68>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	2400000c 	.word	0x2400000c
 80032fc:	24000000 	.word	0x24000000
 8003300:	24000008 	.word	0x24000008

08003304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003308:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_IncTick+0x20>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_IncTick+0x24>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4413      	add	r3, r2
 8003314:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <HAL_IncTick+0x24>)
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	2400000c 	.word	0x2400000c
 8003328:	2400053c 	.word	0x2400053c

0800332c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return uwTick;
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <HAL_GetTick+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2400053c 	.word	0x2400053c

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff ffee 	bl	800332c <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffde 	bl	800332c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2400000c 	.word	0x2400000c

0800338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <__NVIC_SetPriorityGrouping+0x40>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	@ (80033cc <__NVIC_SetPriorityGrouping+0x40>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00
 80033d0:	05fa0000 	.word	0x05fa0000

080033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	@ (8003428 <__NVIC_EnableIRQ+0x38>)
 800340a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	@ (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	@ (800347c <__NVIC_SetPriority+0x50>)
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	@ 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	@ 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff29 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003550:	f7ff ff40 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff ff90 	bl	8003480 <NVIC_EncodePriority>
 8003560:	4602      	mov	r2, r0
 8003562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff5f 	bl	800342c <__NVIC_SetPriority>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff33 	bl	80033f0 <__NVIC_EnableIRQ>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ffa4 	bl	80034e8 <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035b0:	f3bf 8f5f 	dmb	sy
}
 80035b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035b6:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <HAL_MPU_Disable+0x28>)
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	4a06      	ldr	r2, [pc, #24]	@ (80035d4 <HAL_MPU_Disable+0x28>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035c2:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_MPU_Disable+0x2c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	e000ed90 	.word	0xe000ed90

080035dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80035e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003614 <HAL_MPU_Enable+0x38>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <HAL_MPU_Enable+0x3c>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	4a09      	ldr	r2, [pc, #36]	@ (8003618 <HAL_MPU_Enable+0x3c>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035fa:	f3bf 8f4f 	dsb	sy
}
 80035fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003600:	f3bf 8f6f 	isb	sy
}
 8003604:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000ed90 	.word	0xe000ed90
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	785a      	ldrb	r2, [r3, #1]
 8003628:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <HAL_MPU_ConfigRegion+0x7c>)
 800362a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_MPU_ConfigRegion+0x7c>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_MPU_ConfigRegion+0x7c>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003638:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <HAL_MPU_ConfigRegion+0x7c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7b1b      	ldrb	r3, [r3, #12]
 8003644:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7adb      	ldrb	r3, [r3, #11]
 800364a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800364c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7a9b      	ldrb	r3, [r3, #10]
 8003652:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7b5b      	ldrb	r3, [r3, #13]
 800365a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800365c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7b9b      	ldrb	r3, [r3, #14]
 8003662:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003664:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7bdb      	ldrb	r3, [r3, #15]
 800366a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800366c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7a5b      	ldrb	r3, [r3, #9]
 8003672:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003674:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7a1b      	ldrb	r3, [r3, #8]
 800367a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800367c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003686:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003688:	6113      	str	r3, [r2, #16]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed90 	.word	0xe000ed90

0800369c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80036a4:	f7ff fe42 	bl	800332c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e2dc      	b.n	8003c6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2280      	movs	r2, #128	@ 0x80
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e2cd      	b.n	8003c6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a76      	ldr	r2, [pc, #472]	@ (80038b0 <HAL_DMA_Abort+0x214>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d04a      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a74      	ldr	r2, [pc, #464]	@ (80038b4 <HAL_DMA_Abort+0x218>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d045      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	@ (80038b8 <HAL_DMA_Abort+0x21c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d040      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a71      	ldr	r2, [pc, #452]	@ (80038bc <HAL_DMA_Abort+0x220>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d03b      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a70      	ldr	r2, [pc, #448]	@ (80038c0 <HAL_DMA_Abort+0x224>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d036      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6e      	ldr	r2, [pc, #440]	@ (80038c4 <HAL_DMA_Abort+0x228>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d031      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6d      	ldr	r2, [pc, #436]	@ (80038c8 <HAL_DMA_Abort+0x22c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d02c      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6b      	ldr	r2, [pc, #428]	@ (80038cc <HAL_DMA_Abort+0x230>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d027      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6a      	ldr	r2, [pc, #424]	@ (80038d0 <HAL_DMA_Abort+0x234>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a68      	ldr	r2, [pc, #416]	@ (80038d4 <HAL_DMA_Abort+0x238>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01d      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a67      	ldr	r2, [pc, #412]	@ (80038d8 <HAL_DMA_Abort+0x23c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d018      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a65      	ldr	r2, [pc, #404]	@ (80038dc <HAL_DMA_Abort+0x240>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a64      	ldr	r2, [pc, #400]	@ (80038e0 <HAL_DMA_Abort+0x244>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a62      	ldr	r2, [pc, #392]	@ (80038e4 <HAL_DMA_Abort+0x248>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a61      	ldr	r2, [pc, #388]	@ (80038e8 <HAL_DMA_Abort+0x24c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_DMA_Abort+0xd6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5f      	ldr	r2, [pc, #380]	@ (80038ec <HAL_DMA_Abort+0x250>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Abort+0xda>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_DMA_Abort+0xdc>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 021e 	bic.w	r2, r2, #30
 800378a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800379a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e00a      	b.n	80037ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 020e 	bic.w	r2, r2, #14
 80037b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3c      	ldr	r2, [pc, #240]	@ (80038b0 <HAL_DMA_Abort+0x214>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d072      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3a      	ldr	r2, [pc, #232]	@ (80038b4 <HAL_DMA_Abort+0x218>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d06d      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a39      	ldr	r2, [pc, #228]	@ (80038b8 <HAL_DMA_Abort+0x21c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d068      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a37      	ldr	r2, [pc, #220]	@ (80038bc <HAL_DMA_Abort+0x220>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d063      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a36      	ldr	r2, [pc, #216]	@ (80038c0 <HAL_DMA_Abort+0x224>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d05e      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_DMA_Abort+0x228>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d059      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a33      	ldr	r2, [pc, #204]	@ (80038c8 <HAL_DMA_Abort+0x22c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d054      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a31      	ldr	r2, [pc, #196]	@ (80038cc <HAL_DMA_Abort+0x230>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04f      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a30      	ldr	r2, [pc, #192]	@ (80038d0 <HAL_DMA_Abort+0x234>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d04a      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2e      	ldr	r2, [pc, #184]	@ (80038d4 <HAL_DMA_Abort+0x238>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d045      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2d      	ldr	r2, [pc, #180]	@ (80038d8 <HAL_DMA_Abort+0x23c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d040      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2b      	ldr	r2, [pc, #172]	@ (80038dc <HAL_DMA_Abort+0x240>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d03b      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2a      	ldr	r2, [pc, #168]	@ (80038e0 <HAL_DMA_Abort+0x244>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d036      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	@ (80038e4 <HAL_DMA_Abort+0x248>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d031      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a27      	ldr	r2, [pc, #156]	@ (80038e8 <HAL_DMA_Abort+0x24c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d02c      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a25      	ldr	r2, [pc, #148]	@ (80038ec <HAL_DMA_Abort+0x250>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d027      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a24      	ldr	r2, [pc, #144]	@ (80038f0 <HAL_DMA_Abort+0x254>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a22      	ldr	r2, [pc, #136]	@ (80038f4 <HAL_DMA_Abort+0x258>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01d      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a21      	ldr	r2, [pc, #132]	@ (80038f8 <HAL_DMA_Abort+0x25c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <HAL_DMA_Abort+0x260>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <HAL_DMA_Abort+0x264>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <HAL_DMA_Abort+0x268>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <HAL_DMA_Abort+0x26c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_DMA_Abort+0x20e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a19      	ldr	r2, [pc, #100]	@ (800390c <HAL_DMA_Abort+0x270>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d132      	bne.n	8003910 <HAL_DMA_Abort+0x274>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e031      	b.n	8003912 <HAL_DMA_Abort+0x276>
 80038ae:	bf00      	nop
 80038b0:	40020010 	.word	0x40020010
 80038b4:	40020028 	.word	0x40020028
 80038b8:	40020040 	.word	0x40020040
 80038bc:	40020058 	.word	0x40020058
 80038c0:	40020070 	.word	0x40020070
 80038c4:	40020088 	.word	0x40020088
 80038c8:	400200a0 	.word	0x400200a0
 80038cc:	400200b8 	.word	0x400200b8
 80038d0:	40020410 	.word	0x40020410
 80038d4:	40020428 	.word	0x40020428
 80038d8:	40020440 	.word	0x40020440
 80038dc:	40020458 	.word	0x40020458
 80038e0:	40020470 	.word	0x40020470
 80038e4:	40020488 	.word	0x40020488
 80038e8:	400204a0 	.word	0x400204a0
 80038ec:	400204b8 	.word	0x400204b8
 80038f0:	58025408 	.word	0x58025408
 80038f4:	5802541c 	.word	0x5802541c
 80038f8:	58025430 	.word	0x58025430
 80038fc:	58025444 	.word	0x58025444
 8003900:	58025458 	.word	0x58025458
 8003904:	5802546c 	.word	0x5802546c
 8003908:	58025480 	.word	0x58025480
 800390c:	58025494 	.word	0x58025494
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003924:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ae0 <HAL_DMA_Abort+0x444>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d04a      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae4 <HAL_DMA_Abort+0x448>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d045      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae8 <HAL_DMA_Abort+0x44c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d040      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	@ (8003aec <HAL_DMA_Abort+0x450>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d03b      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a67      	ldr	r2, [pc, #412]	@ (8003af0 <HAL_DMA_Abort+0x454>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d036      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_DMA_Abort+0x458>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d031      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a64      	ldr	r2, [pc, #400]	@ (8003af8 <HAL_DMA_Abort+0x45c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d02c      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a62      	ldr	r2, [pc, #392]	@ (8003afc <HAL_DMA_Abort+0x460>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d027      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a61      	ldr	r2, [pc, #388]	@ (8003b00 <HAL_DMA_Abort+0x464>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d022      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5f      	ldr	r2, [pc, #380]	@ (8003b04 <HAL_DMA_Abort+0x468>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01d      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a5e      	ldr	r2, [pc, #376]	@ (8003b08 <HAL_DMA_Abort+0x46c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a5c      	ldr	r2, [pc, #368]	@ (8003b0c <HAL_DMA_Abort+0x470>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_DMA_Abort+0x474>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a59      	ldr	r2, [pc, #356]	@ (8003b14 <HAL_DMA_Abort+0x478>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a58      	ldr	r2, [pc, #352]	@ (8003b18 <HAL_DMA_Abort+0x47c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_DMA_Abort+0x32a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_DMA_Abort+0x480>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d108      	bne.n	80039d8 <HAL_DMA_Abort+0x33c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e007      	b.n	80039e8 <HAL_DMA_Abort+0x34c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039e8:	e013      	b.n	8003a12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ea:	f7ff fc9f 	bl	800332c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d90c      	bls.n	8003a12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2203      	movs	r2, #3
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e12d      	b.n	8003c6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <HAL_DMA_Abort+0x444>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <HAL_DMA_Abort+0x448>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <HAL_DMA_Abort+0x44c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2a      	ldr	r2, [pc, #168]	@ (8003aec <HAL_DMA_Abort+0x450>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	@ (8003af0 <HAL_DMA_Abort+0x454>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_DMA_Abort+0x458>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <HAL_DMA_Abort+0x45c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <HAL_DMA_Abort+0x460>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a23      	ldr	r2, [pc, #140]	@ (8003b00 <HAL_DMA_Abort+0x464>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <HAL_DMA_Abort+0x468>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a20      	ldr	r2, [pc, #128]	@ (8003b08 <HAL_DMA_Abort+0x46c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <HAL_DMA_Abort+0x470>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_DMA_Abort+0x474>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_DMA_Abort+0x478>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <HAL_DMA_Abort+0x47c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_Abort+0x422>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <HAL_DMA_Abort+0x480>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMA_Abort+0x426>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_DMA_Abort+0x428>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d02b      	beq.n	8003b20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	223f      	movs	r2, #63	@ 0x3f
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	e02a      	b.n	8003b36 <HAL_DMA_Abort+0x49a>
 8003ae0:	40020010 	.word	0x40020010
 8003ae4:	40020028 	.word	0x40020028
 8003ae8:	40020040 	.word	0x40020040
 8003aec:	40020058 	.word	0x40020058
 8003af0:	40020070 	.word	0x40020070
 8003af4:	40020088 	.word	0x40020088
 8003af8:	400200a0 	.word	0x400200a0
 8003afc:	400200b8 	.word	0x400200b8
 8003b00:	40020410 	.word	0x40020410
 8003b04:	40020428 	.word	0x40020428
 8003b08:	40020440 	.word	0x40020440
 8003b0c:	40020458 	.word	0x40020458
 8003b10:	40020470 	.word	0x40020470
 8003b14:	40020488 	.word	0x40020488
 8003b18:	400204a0 	.word	0x400204a0
 8003b1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003c78 <HAL_DMA_Abort+0x5dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d072      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a4d      	ldr	r2, [pc, #308]	@ (8003c7c <HAL_DMA_Abort+0x5e0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d06d      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003c80 <HAL_DMA_Abort+0x5e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d068      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_DMA_Abort+0x5e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d063      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a49      	ldr	r2, [pc, #292]	@ (8003c88 <HAL_DMA_Abort+0x5ec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d05e      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a47      	ldr	r2, [pc, #284]	@ (8003c8c <HAL_DMA_Abort+0x5f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d059      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a46      	ldr	r2, [pc, #280]	@ (8003c90 <HAL_DMA_Abort+0x5f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d054      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a44      	ldr	r2, [pc, #272]	@ (8003c94 <HAL_DMA_Abort+0x5f8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04f      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a43      	ldr	r2, [pc, #268]	@ (8003c98 <HAL_DMA_Abort+0x5fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a41      	ldr	r2, [pc, #260]	@ (8003c9c <HAL_DMA_Abort+0x600>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ca0 <HAL_DMA_Abort+0x604>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca4 <HAL_DMA_Abort+0x608>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ca8 <HAL_DMA_Abort+0x60c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8003cac <HAL_DMA_Abort+0x610>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb0 <HAL_DMA_Abort+0x614>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a38      	ldr	r2, [pc, #224]	@ (8003cb4 <HAL_DMA_Abort+0x618>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a37      	ldr	r2, [pc, #220]	@ (8003cb8 <HAL_DMA_Abort+0x61c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a35      	ldr	r2, [pc, #212]	@ (8003cbc <HAL_DMA_Abort+0x620>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a34      	ldr	r2, [pc, #208]	@ (8003cc0 <HAL_DMA_Abort+0x624>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a32      	ldr	r2, [pc, #200]	@ (8003cc4 <HAL_DMA_Abort+0x628>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a31      	ldr	r2, [pc, #196]	@ (8003cc8 <HAL_DMA_Abort+0x62c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003ccc <HAL_DMA_Abort+0x630>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <HAL_DMA_Abort+0x634>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_Abort+0x58a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd4 <HAL_DMA_Abort+0x638>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Abort+0x58e>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_DMA_Abort+0x590>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	58025408 	.word	0x58025408
 8003cbc:	5802541c 	.word	0x5802541c
 8003cc0:	58025430 	.word	0x58025430
 8003cc4:	58025444 	.word	0x58025444
 8003cc8:	58025458 	.word	0x58025458
 8003ccc:	5802546c 	.word	0x5802546c
 8003cd0:	58025480 	.word	0x58025480
 8003cd4:	58025494 	.word	0x58025494

08003cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e237      	b.n	800415a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d004      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2280      	movs	r2, #128	@ 0x80
 8003cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e22c      	b.n	800415a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5c      	ldr	r2, [pc, #368]	@ (8003e78 <HAL_DMA_Abort_IT+0x1a0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e7c <HAL_DMA_Abort_IT+0x1a4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a59      	ldr	r2, [pc, #356]	@ (8003e80 <HAL_DMA_Abort_IT+0x1a8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a58      	ldr	r2, [pc, #352]	@ (8003e84 <HAL_DMA_Abort_IT+0x1ac>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a56      	ldr	r2, [pc, #344]	@ (8003e88 <HAL_DMA_Abort_IT+0x1b0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a55      	ldr	r2, [pc, #340]	@ (8003e8c <HAL_DMA_Abort_IT+0x1b4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a53      	ldr	r2, [pc, #332]	@ (8003e90 <HAL_DMA_Abort_IT+0x1b8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a52      	ldr	r2, [pc, #328]	@ (8003e94 <HAL_DMA_Abort_IT+0x1bc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a50      	ldr	r2, [pc, #320]	@ (8003e98 <HAL_DMA_Abort_IT+0x1c0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4f      	ldr	r2, [pc, #316]	@ (8003e9c <HAL_DMA_Abort_IT+0x1c4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1c8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1cc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1d0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a49      	ldr	r2, [pc, #292]	@ (8003eac <HAL_DMA_Abort_IT+0x1d4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a47      	ldr	r2, [pc, #284]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1d8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_Abort_IT+0xc8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a46      	ldr	r2, [pc, #280]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1dc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Abort_IT+0xcc>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_DMA_Abort_IT+0xce>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8086 	beq.w	8003eb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e78 <HAL_DMA_Abort_IT+0x1a0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04a      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e7c <HAL_DMA_Abort_IT+0x1a4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d045      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003e80 <HAL_DMA_Abort_IT+0x1a8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d040      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_DMA_Abort_IT+0x1ac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03b      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <HAL_DMA_Abort_IT+0x1b0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <HAL_DMA_Abort_IT+0x1b4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d031      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <HAL_DMA_Abort_IT+0x1b8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02c      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a25      	ldr	r2, [pc, #148]	@ (8003e94 <HAL_DMA_Abort_IT+0x1bc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d027      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <HAL_DMA_Abort_IT+0x1c0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <HAL_DMA_Abort_IT+0x1c4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1c8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1cc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1d0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <HAL_DMA_Abort_IT+0x1d4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1d8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x17c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1dc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <HAL_DMA_Abort_IT+0x18e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e178      	b.n	8004158 <HAL_DMA_Abort_IT+0x480>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e16f      	b.n	8004158 <HAL_DMA_Abort_IT+0x480>
 8003e78:	40020010 	.word	0x40020010
 8003e7c:	40020028 	.word	0x40020028
 8003e80:	40020040 	.word	0x40020040
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40020070 	.word	0x40020070
 8003e8c:	40020088 	.word	0x40020088
 8003e90:	400200a0 	.word	0x400200a0
 8003e94:	400200b8 	.word	0x400200b8
 8003e98:	40020410 	.word	0x40020410
 8003e9c:	40020428 	.word	0x40020428
 8003ea0:	40020440 	.word	0x40020440
 8003ea4:	40020458 	.word	0x40020458
 8003ea8:	40020470 	.word	0x40020470
 8003eac:	40020488 	.word	0x40020488
 8003eb0:	400204a0 	.word	0x400204a0
 8003eb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 020e 	bic.w	r2, r2, #14
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6c      	ldr	r2, [pc, #432]	@ (8004080 <HAL_DMA_Abort_IT+0x3a8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8004084 <HAL_DMA_Abort_IT+0x3ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a69      	ldr	r2, [pc, #420]	@ (8004088 <HAL_DMA_Abort_IT+0x3b0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a68      	ldr	r2, [pc, #416]	@ (800408c <HAL_DMA_Abort_IT+0x3b4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a66      	ldr	r2, [pc, #408]	@ (8004090 <HAL_DMA_Abort_IT+0x3b8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a65      	ldr	r2, [pc, #404]	@ (8004094 <HAL_DMA_Abort_IT+0x3bc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a63      	ldr	r2, [pc, #396]	@ (8004098 <HAL_DMA_Abort_IT+0x3c0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a62      	ldr	r2, [pc, #392]	@ (800409c <HAL_DMA_Abort_IT+0x3c4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a60      	ldr	r2, [pc, #384]	@ (80040a0 <HAL_DMA_Abort_IT+0x3c8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5f      	ldr	r2, [pc, #380]	@ (80040a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5d      	ldr	r2, [pc, #372]	@ (80040a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80040ac <HAL_DMA_Abort_IT+0x3d4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a59      	ldr	r2, [pc, #356]	@ (80040b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_DMA_Abort_IT+0x3e0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_Abort_IT+0x290>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a56      	ldr	r2, [pc, #344]	@ (80040bc <HAL_DMA_Abort_IT+0x3e4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d108      	bne.n	8003f7a <HAL_DMA_Abort_IT+0x2a2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_DMA_Abort_IT+0x2b2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004080 <HAL_DMA_Abort_IT+0x3a8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d072      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3a      	ldr	r2, [pc, #232]	@ (8004084 <HAL_DMA_Abort_IT+0x3ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d06d      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a39      	ldr	r2, [pc, #228]	@ (8004088 <HAL_DMA_Abort_IT+0x3b0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d068      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a37      	ldr	r2, [pc, #220]	@ (800408c <HAL_DMA_Abort_IT+0x3b4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d063      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a36      	ldr	r2, [pc, #216]	@ (8004090 <HAL_DMA_Abort_IT+0x3b8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d05e      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a34      	ldr	r2, [pc, #208]	@ (8004094 <HAL_DMA_Abort_IT+0x3bc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d059      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a33      	ldr	r2, [pc, #204]	@ (8004098 <HAL_DMA_Abort_IT+0x3c0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d054      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	@ (800409c <HAL_DMA_Abort_IT+0x3c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d04f      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a30      	ldr	r2, [pc, #192]	@ (80040a0 <HAL_DMA_Abort_IT+0x3c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80040a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80040ac <HAL_DMA_Abort_IT+0x3d4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_DMA_Abort_IT+0x3d8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a28      	ldr	r2, [pc, #160]	@ (80040b4 <HAL_DMA_Abort_IT+0x3dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <HAL_DMA_Abort_IT+0x3e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a25      	ldr	r2, [pc, #148]	@ (80040bc <HAL_DMA_Abort_IT+0x3e4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_DMA_Abort_IT+0x3e8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <HAL_DMA_Abort_IT+0x3ec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a21      	ldr	r2, [pc, #132]	@ (80040c8 <HAL_DMA_Abort_IT+0x3f0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_DMA_Abort_IT+0x3f4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_DMA_Abort_IT+0x3f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <HAL_DMA_Abort_IT+0x3fc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <HAL_DMA_Abort_IT+0x400>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Abort_IT+0x3a2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_DMA_Abort_IT+0x404>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d132      	bne.n	80040e0 <HAL_DMA_Abort_IT+0x408>
 800407a:	2301      	movs	r3, #1
 800407c:	e031      	b.n	80040e2 <HAL_DMA_Abort_IT+0x40a>
 800407e:	bf00      	nop
 8004080:	40020010 	.word	0x40020010
 8004084:	40020028 	.word	0x40020028
 8004088:	40020040 	.word	0x40020040
 800408c:	40020058 	.word	0x40020058
 8004090:	40020070 	.word	0x40020070
 8004094:	40020088 	.word	0x40020088
 8004098:	400200a0 	.word	0x400200a0
 800409c:	400200b8 	.word	0x400200b8
 80040a0:	40020410 	.word	0x40020410
 80040a4:	40020428 	.word	0x40020428
 80040a8:	40020440 	.word	0x40020440
 80040ac:	40020458 	.word	0x40020458
 80040b0:	40020470 	.word	0x40020470
 80040b4:	40020488 	.word	0x40020488
 80040b8:	400204a0 	.word	0x400204a0
 80040bc:	400204b8 	.word	0x400204b8
 80040c0:	58025408 	.word	0x58025408
 80040c4:	5802541c 	.word	0x5802541c
 80040c8:	58025430 	.word	0x58025430
 80040cc:	58025444 	.word	0x58025444
 80040d0:	58025458 	.word	0x58025458
 80040d4:	5802546c 	.word	0x5802546c
 80040d8:	58025480 	.word	0x58025480
 80040dc:	58025494 	.word	0x58025494
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004114:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800412c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004136:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	@ 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004172:	4b89      	ldr	r3, [pc, #548]	@ (8004398 <HAL_GPIO_Init+0x234>)
 8004174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004176:	e194      	b.n	80044a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8186 	beq.w	800449c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d005      	beq.n	80041a8 <HAL_GPIO_Init+0x44>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d130      	bne.n	800420a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041de:	2201      	movs	r2, #1
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0201 	and.w	r2, r3, #1
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b03      	cmp	r3, #3
 8004214:	d017      	beq.n	8004246 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d123      	bne.n	800429a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	08da      	lsrs	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3208      	adds	r2, #8
 800425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0203 	and.w	r2, r3, #3
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80e0 	beq.w	800449c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042dc:	4b2f      	ldr	r3, [pc, #188]	@ (800439c <HAL_GPIO_Init+0x238>)
 80042de:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042e2:	4a2e      	ldr	r2, [pc, #184]	@ (800439c <HAL_GPIO_Init+0x238>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80042ec:	4b2b      	ldr	r3, [pc, #172]	@ (800439c <HAL_GPIO_Init+0x238>)
 80042ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fa:	4a29      	ldr	r2, [pc, #164]	@ (80043a0 <HAL_GPIO_Init+0x23c>)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <HAL_GPIO_Init+0x240>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d052      	beq.n	80043cc <HAL_GPIO_Init+0x268>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_GPIO_Init+0x244>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_GPIO_Init+0x22e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_GPIO_Init+0x248>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d02b      	beq.n	800438e <HAL_GPIO_Init+0x22a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_GPIO_Init+0x24c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d025      	beq.n	800438a <HAL_GPIO_Init+0x226>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	@ (80043b4 <HAL_GPIO_Init+0x250>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <HAL_GPIO_Init+0x222>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1b      	ldr	r2, [pc, #108]	@ (80043b8 <HAL_GPIO_Init+0x254>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d019      	beq.n	8004382 <HAL_GPIO_Init+0x21e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_GPIO_Init+0x258>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <HAL_GPIO_Init+0x21a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <HAL_GPIO_Init+0x25c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00d      	beq.n	800437a <HAL_GPIO_Init+0x216>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <HAL_GPIO_Init+0x260>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <HAL_GPIO_Init+0x212>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <HAL_GPIO_Init+0x264>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_GPIO_Init+0x20e>
 800436e:	2309      	movs	r3, #9
 8004370:	e02d      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004372:	230a      	movs	r3, #10
 8004374:	e02b      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004376:	2308      	movs	r3, #8
 8004378:	e029      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 800437a:	2307      	movs	r3, #7
 800437c:	e027      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 800437e:	2306      	movs	r3, #6
 8004380:	e025      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004382:	2305      	movs	r3, #5
 8004384:	e023      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004386:	2304      	movs	r3, #4
 8004388:	e021      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 800438a:	2303      	movs	r3, #3
 800438c:	e01f      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 800438e:	2302      	movs	r3, #2
 8004390:	e01d      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004392:	2301      	movs	r3, #1
 8004394:	e01b      	b.n	80043ce <HAL_GPIO_Init+0x26a>
 8004396:	bf00      	nop
 8004398:	58000080 	.word	0x58000080
 800439c:	58024400 	.word	0x58024400
 80043a0:	58000400 	.word	0x58000400
 80043a4:	58020000 	.word	0x58020000
 80043a8:	58020400 	.word	0x58020400
 80043ac:	58020800 	.word	0x58020800
 80043b0:	58020c00 	.word	0x58020c00
 80043b4:	58021000 	.word	0x58021000
 80043b8:	58021400 	.word	0x58021400
 80043bc:	58021800 	.word	0x58021800
 80043c0:	58021c00 	.word	0x58021c00
 80043c4:	58022000 	.word	0x58022000
 80043c8:	58022400 	.word	0x58022400
 80043cc:	2300      	movs	r3, #0
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	f002 0203 	and.w	r2, r2, #3
 80043d4:	0092      	lsls	r2, r2, #2
 80043d6:	4093      	lsls	r3, r2
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043de:	4938      	ldr	r1, [pc, #224]	@ (80044c0 <HAL_GPIO_Init+0x35c>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3302      	adds	r3, #2
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004412:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004440:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	43db      	mvns	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4013      	ands	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	3301      	adds	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f47f ae63 	bne.w	8004178 <HAL_GPIO_Init+0x14>
  }
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3724      	adds	r7, #36	@ 0x24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	58000400 	.word	0x58000400

080044c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
 80044d0:	4613      	mov	r3, r2
 80044d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044e0:	e003      	b.n	80044ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	041a      	lsls	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	619a      	str	r2, [r3, #24]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004500:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	2b06      	cmp	r3, #6
 800450a:	d00a      	beq.n	8004522 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800450c:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e040      	b.n	80045a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e03e      	b.n	80045a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004522:	4b21      	ldr	r3, [pc, #132]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800452a:	491f      	ldr	r1, [pc, #124]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4313      	orrs	r3, r2
 8004530:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004532:	f7fe fefb 	bl	800332c <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004538:	e009      	b.n	800454e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800453a:	f7fe fef7 	bl	800332c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004548:	d901      	bls.n	800454e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e028      	b.n	80045a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800454e:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455a:	d1ee      	bne.n	800453a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b1e      	cmp	r3, #30
 8004560:	d008      	beq.n	8004574 <HAL_PWREx_ConfigSupply+0x7c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b2e      	cmp	r3, #46	@ 0x2e
 8004566:	d005      	beq.n	8004574 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b1d      	cmp	r3, #29
 800456c:	d002      	beq.n	8004574 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b2d      	cmp	r3, #45	@ 0x2d
 8004572:	d114      	bne.n	800459e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004574:	f7fe feda 	bl	800332c <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800457a:	e009      	b.n	8004590 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800457c:	f7fe fed6 	bl	800332c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800458a:	d901      	bls.n	8004590 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e007      	b.n	80045a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459c:	d1ee      	bne.n	800457c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	58024800 	.word	0x58024800

080045ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08c      	sub	sp, #48	@ 0x30
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f000 bc1f 	b.w	8004dfe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80b3 	beq.w	8004734 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ce:	4b95      	ldr	r3, [pc, #596]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045d8:	4b92      	ldr	r3, [pc, #584]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d007      	beq.n	80045f4 <HAL_RCC_OscConfig+0x48>
 80045e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e6:	2b18      	cmp	r3, #24
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x64>
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d10d      	bne.n	8004610 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8098 	beq.w	8004732 <HAL_RCC_OscConfig+0x186>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8093 	bne.w	8004732 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e3f6      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x7c>
 800461a:	4b82      	ldr	r3, [pc, #520]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a81      	ldr	r2, [pc, #516]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e058      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d112      	bne.n	8004656 <HAL_RCC_OscConfig+0xaa>
 8004630:	4b7c      	ldr	r3, [pc, #496]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7b      	ldr	r2, [pc, #492]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b79      	ldr	r3, [pc, #484]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a78      	ldr	r2, [pc, #480]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004642:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a75      	ldr	r2, [pc, #468]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	e041      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800465e:	d112      	bne.n	8004686 <HAL_RCC_OscConfig+0xda>
 8004660:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6f      	ldr	r2, [pc, #444]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b6d      	ldr	r3, [pc, #436]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a6c      	ldr	r2, [pc, #432]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004672:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b6a      	ldr	r3, [pc, #424]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a69      	ldr	r2, [pc, #420]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e029      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800468e:	d112      	bne.n	80046b6 <HAL_RCC_OscConfig+0x10a>
 8004690:	4b64      	ldr	r3, [pc, #400]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a63      	ldr	r2, [pc, #396]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b61      	ldr	r3, [pc, #388]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a60      	ldr	r2, [pc, #384]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e011      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
 80046b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b58      	ldr	r3, [pc, #352]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a57      	ldr	r2, [pc, #348]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b55      	ldr	r3, [pc, #340]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a54      	ldr	r2, [pc, #336]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fe fe23 	bl	800332c <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ea:	f7fe fe1f 	bl	800332c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	@ 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e380      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fc:	4b49      	ldr	r3, [pc, #292]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x13e>
 8004708:	e014      	b.n	8004734 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fe fe0f 	bl	800332c <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004712:	f7fe fe0b 	bl	800332c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	@ 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e36c      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004724:	4b3f      	ldr	r3, [pc, #252]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x166>
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004732:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 808c 	beq.w	800485a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b38      	ldr	r3, [pc, #224]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800474a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800474c:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_RCC_OscConfig+0x1bc>
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b18      	cmp	r3, #24
 800475c:	d137      	bne.n	80047ce <HAL_RCC_OscConfig+0x222>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d132      	bne.n	80047ce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	4b2e      	ldr	r3, [pc, #184]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x1d4>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e33e      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004780:	4b28      	ldr	r3, [pc, #160]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 0219 	bic.w	r2, r3, #25
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4925      	ldr	r1, [pc, #148]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe fdcb 	bl	800332c <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fe fdc7 	bl	800332c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e328      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	4917      	ldr	r1, [pc, #92]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047cc:	e045      	b.n	800485a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 0219 	bic.w	r2, r3, #25
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4910      	ldr	r1, [pc, #64]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe fda0 	bl	800332c <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fe fd9c 	bl	800332c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e2fd      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004802:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	4901      	ldr	r1, [pc, #4]	@ (8004824 <HAL_RCC_OscConfig+0x278>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	e01a      	b.n	800485a <HAL_RCC_OscConfig+0x2ae>
 8004824:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004828:	4b97      	ldr	r3, [pc, #604]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a96      	ldr	r2, [pc, #600]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fe fd7a 	bl	800332c <HAL_GetTick>
 8004838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483c:	f7fe fd76 	bl	800332c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e2d7      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800484e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06a      	beq.n	800493c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004866:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800486e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004870:	4b85      	ldr	r3, [pc, #532]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d007      	beq.n	800488c <HAL_RCC_OscConfig+0x2e0>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b18      	cmp	r3, #24
 8004880:	d11b      	bne.n	80048ba <HAL_RCC_OscConfig+0x30e>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d116      	bne.n	80048ba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800488c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_OscConfig+0x2f8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b80      	cmp	r3, #128	@ 0x80
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e2ac      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048a4:	4b78      	ldr	r3, [pc, #480]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	4975      	ldr	r1, [pc, #468]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048b8:	e040      	b.n	800493c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d023      	beq.n	800490a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048c2:	4b71      	ldr	r3, [pc, #452]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a70      	ldr	r2, [pc, #448]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe fd2d 	bl	800332c <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048d6:	f7fe fd29 	bl	800332c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e28a      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048e8:	4b67      	ldr	r3, [pc, #412]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048f4:	4b64      	ldr	r3, [pc, #400]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	4961      	ldr	r1, [pc, #388]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
 8004908:	e018      	b.n	800493c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800490a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fe fd09 	bl	800332c <HAL_GetTick>
 800491a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800491e:	f7fe fd05 	bl	800332c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e266      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004930:	4b55      	ldr	r3, [pc, #340]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d036      	beq.n	80049b6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d019      	beq.n	8004984 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004950:	4b4d      	ldr	r3, [pc, #308]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	4a4c      	ldr	r2, [pc, #304]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fe fce6 	bl	800332c <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004964:	f7fe fce2 	bl	800332c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e243      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004976:	4b44      	ldr	r3, [pc, #272]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x3b8>
 8004982:	e018      	b.n	80049b6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004984:	4b40      	ldr	r3, [pc, #256]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004988:	4a3f      	ldr	r2, [pc, #252]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fe fccc 	bl	800332c <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004998:	f7fe fcc8 	bl	800332c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e229      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049aa:	4b37      	ldr	r3, [pc, #220]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80049ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d036      	beq.n	8004a30 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d019      	beq.n	80049fe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fca9 	bl	800332c <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049de:	f7fe fca5 	bl	800332c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e206      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x432>
 80049fc:	e018      	b.n	8004a30 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049fe:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004a04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a0a:	f7fe fc8f 	bl	800332c <HAL_GetTick>
 8004a0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a12:	f7fe fc8b 	bl	800332c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1ec      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a24:	4b18      	ldr	r3, [pc, #96]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80af 	beq.w	8004b9c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a3e:	4b13      	ldr	r3, [pc, #76]	@ (8004a8c <HAL_RCC_OscConfig+0x4e0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <HAL_RCC_OscConfig+0x4e0>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a4a:	f7fe fc6f 	bl	800332c <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fe fc6b 	bl	800332c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	@ 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1cc      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a64:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <HAL_RCC_OscConfig+0x4e0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4e4>
 8004a78:	4b03      	ldr	r3, [pc, #12]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	4a02      	ldr	r2, [pc, #8]	@ (8004a88 <HAL_RCC_OscConfig+0x4dc>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a84:	e05b      	b.n	8004b3e <HAL_RCC_OscConfig+0x592>
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	58024800 	.word	0x58024800
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d112      	bne.n	8004abe <HAL_RCC_OscConfig+0x512>
 8004a98:	4b9d      	ldr	r3, [pc, #628]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9c:	4a9c      	ldr	r2, [pc, #624]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa8:	4a99      	ldr	r2, [pc, #612]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab0:	4b97      	ldr	r3, [pc, #604]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab4:	4a96      	ldr	r2, [pc, #600]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ab6:	f023 0304 	bic.w	r3, r3, #4
 8004aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004abc:	e03f      	b.n	8004b3e <HAL_RCC_OscConfig+0x592>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d112      	bne.n	8004aec <HAL_RCC_OscConfig+0x540>
 8004ac6:	4b92      	ldr	r3, [pc, #584]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	4a91      	ldr	r2, [pc, #580]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	4a8e      	ldr	r2, [pc, #568]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ade:	4b8c      	ldr	r3, [pc, #560]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	4a8b      	ldr	r2, [pc, #556]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aea:	e028      	b.n	8004b3e <HAL_RCC_OscConfig+0x592>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b85      	cmp	r3, #133	@ 0x85
 8004af2:	d112      	bne.n	8004b1a <HAL_RCC_OscConfig+0x56e>
 8004af4:	4b86      	ldr	r3, [pc, #536]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af8:	4a85      	ldr	r2, [pc, #532]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b00:	4b83      	ldr	r3, [pc, #524]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b04:	4a82      	ldr	r2, [pc, #520]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0c:	4b80      	ldr	r3, [pc, #512]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	4a7f      	ldr	r2, [pc, #508]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b18:	e011      	b.n	8004b3e <HAL_RCC_OscConfig+0x592>
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b26:	4b7a      	ldr	r3, [pc, #488]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	4a79      	ldr	r2, [pc, #484]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b32:	4b77      	ldr	r3, [pc, #476]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	4a76      	ldr	r2, [pc, #472]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d015      	beq.n	8004b72 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7fe fbf1 	bl	800332c <HAL_GetTick>
 8004b4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fe fbed 	bl	800332c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e14c      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b64:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ee      	beq.n	8004b4e <HAL_RCC_OscConfig+0x5a2>
 8004b70:	e014      	b.n	8004b9c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fe fbdb 	bl	800332c <HAL_GetTick>
 8004b76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fe fbd7 	bl	800332c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e136      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b90:	4b5f      	ldr	r3, [pc, #380]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ee      	bne.n	8004b7a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 812b 	beq.w	8004dfc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bae:	2b18      	cmp	r3, #24
 8004bb0:	f000 80bb 	beq.w	8004d2a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f040 8095 	bne.w	8004ce8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b54      	ldr	r3, [pc, #336]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a53      	ldr	r2, [pc, #332]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fe fbaf 	bl	800332c <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fe fbab 	bl	800332c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e10c      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be4:	4b4a      	ldr	r3, [pc, #296]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf0:	4b47      	ldr	r3, [pc, #284]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bf4:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_RCC_OscConfig+0x768>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	430a      	orrs	r2, r1
 8004c04:	4942      	ldr	r1, [pc, #264]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	025b      	lsls	r3, r3, #9
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	3b01      	subs	r3, #1
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	3b01      	subs	r3, #1
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c3a:	4935      	ldr	r1, [pc, #212]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c40:	4b33      	ldr	r3, [pc, #204]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	4a32      	ldr	r2, [pc, #200]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c4c:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c50:	4b31      	ldr	r3, [pc, #196]	@ (8004d18 <HAL_RCC_OscConfig+0x76c>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c58:	00d2      	lsls	r2, r2, #3
 8004c5a:	492d      	ldr	r1, [pc, #180]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c60:	4b2b      	ldr	r3, [pc, #172]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	f023 020c 	bic.w	r2, r3, #12
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	4928      	ldr	r1, [pc, #160]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c72:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	f023 0202 	bic.w	r2, r3, #2
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	4924      	ldr	r1, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c84:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a21      	ldr	r2, [pc, #132]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	4a1e      	ldr	r2, [pc, #120]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ca8:	4b19      	ldr	r3, [pc, #100]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b16      	ldr	r3, [pc, #88]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fe fb34 	bl	800332c <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fe fb30 	bl	800332c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e091      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x71c>
 8004ce6:	e089      	b.n	8004dfc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a08      	ldr	r2, [pc, #32]	@ (8004d10 <HAL_RCC_OscConfig+0x764>)
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fb1a 	bl	800332c <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fe fb16 	bl	800332c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d908      	bls.n	8004d1c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e077      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400
 8004d14:	fffffc0c 	.word	0xfffffc0c
 8004d18:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e9      	bne.n	8004cfc <HAL_RCC_OscConfig+0x750>
 8004d28:	e068      	b.n	8004dfc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d2a:	4b37      	ldr	r3, [pc, #220]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d30:	4b35      	ldr	r3, [pc, #212]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d031      	beq.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d12a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d122      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d11a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	0a5b      	lsrs	r3, r3, #9
 8004d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d111      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d108      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0e1b      	lsrs	r3, r3, #24
 8004d94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e02b      	b.n	8004dfe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004da6:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d01f      	beq.n	8004dfc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dbc:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a11      	ldr	r2, [pc, #68]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc8:	f7fe fab0 	bl	800332c <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004dce:	bf00      	nop
 8004dd0:	f7fe faac 	bl	800332c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d0f9      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004de0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <HAL_RCC_OscConfig+0x860>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004de8:	00d2      	lsls	r2, r2, #3
 8004dea:	4907      	ldr	r1, [pc, #28]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004df0:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a04      	ldr	r2, [pc, #16]	@ (8004e08 <HAL_RCC_OscConfig+0x85c>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3730      	adds	r7, #48	@ 0x30
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	ffff0007 	.word	0xffff0007

08004e10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e19c      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b8a      	ldr	r3, [pc, #552]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d910      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b87      	ldr	r3, [pc, #540]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 020f 	bic.w	r2, r3, #15
 8004e3a:	4985      	ldr	r1, [pc, #532]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b83      	ldr	r3, [pc, #524]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e184      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d908      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e70:	4b78      	ldr	r3, [pc, #480]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	4975      	ldr	r1, [pc, #468]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	4b70      	ldr	r3, [pc, #448]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d908      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	496a      	ldr	r1, [pc, #424]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	4b64      	ldr	r3, [pc, #400]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d908      	bls.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ecc:	4b61      	ldr	r3, [pc, #388]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	495e      	ldr	r1, [pc, #376]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d010      	beq.n	8004f0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d908      	bls.n	8004f0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004efa:	4b56      	ldr	r3, [pc, #344]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	4953      	ldr	r1, [pc, #332]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d908      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b4a      	ldr	r3, [pc, #296]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f023 020f 	bic.w	r2, r3, #15
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4947      	ldr	r1, [pc, #284]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d055      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f46:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4940      	ldr	r1, [pc, #256]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f60:	4b3c      	ldr	r3, [pc, #240]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d121      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0f6      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f78:	4b36      	ldr	r3, [pc, #216]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d115      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0ea      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f90:	4b30      	ldr	r3, [pc, #192]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0de      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0d6      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fb0:	4b28      	ldr	r3, [pc, #160]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f023 0207 	bic.w	r2, r3, #7
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4925      	ldr	r1, [pc, #148]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fe f9b3 	bl	800332c <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fca:	f7fe f9af 	bl	800332c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0be      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d1eb      	bne.n	8004fca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d010      	beq.n	8005020 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	4b14      	ldr	r3, [pc, #80]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	429a      	cmp	r2, r3
 800500c:	d208      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500e:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f023 020f 	bic.w	r2, r3, #15
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	490e      	ldr	r1, [pc, #56]	@ (8005054 <HAL_RCC_ClockConfig+0x244>)
 800501c:	4313      	orrs	r3, r2
 800501e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d214      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 020f 	bic.w	r2, r3, #15
 8005036:	4906      	ldr	r1, [pc, #24]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <HAL_RCC_ClockConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e086      	b.n	800515e <HAL_RCC_ClockConfig+0x34e>
 8005050:	52002000 	.word	0x52002000
 8005054:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	4b3f      	ldr	r3, [pc, #252]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005070:	429a      	cmp	r2, r3
 8005072:	d208      	bcs.n	8005086 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005074:	4b3c      	ldr	r3, [pc, #240]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	4939      	ldr	r1, [pc, #228]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005082:	4313      	orrs	r3, r2
 8005084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d010      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	4b34      	ldr	r3, [pc, #208]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509e:	429a      	cmp	r2, r3
 80050a0:	d208      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050a2:	4b31      	ldr	r3, [pc, #196]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	492e      	ldr	r1, [pc, #184]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	4b28      	ldr	r3, [pc, #160]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d208      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050d0:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4922      	ldr	r1, [pc, #136]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d010      	beq.n	8005110 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d208      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	4917      	ldr	r1, [pc, #92]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 800510c:	4313      	orrs	r3, r2
 800510e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005110:	f000 f834 	bl	800517c <HAL_RCC_GetSysClockFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b14      	ldr	r3, [pc, #80]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	4912      	ldr	r1, [pc, #72]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800512e:	4b0e      	ldr	r3, [pc, #56]	@ (8005168 <HAL_RCC_ClockConfig+0x358>)
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	4a0d      	ldr	r2, [pc, #52]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005138:	5cd3      	ldrb	r3, [r2, r3]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	4a0a      	ldr	r2, [pc, #40]	@ (8005170 <HAL_RCC_ClockConfig+0x360>)
 8005146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005148:	4a0a      	ldr	r2, [pc, #40]	@ (8005174 <HAL_RCC_ClockConfig+0x364>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <HAL_RCC_ClockConfig+0x368>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe f8a0 	bl	8003298 <HAL_InitTick>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	0800acd8 	.word	0x0800acd8
 8005170:	24000004 	.word	0x24000004
 8005174:	24000000 	.word	0x24000000
 8005178:	24000008 	.word	0x24000008

0800517c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005182:	4bb3      	ldr	r3, [pc, #716]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800518a:	2b18      	cmp	r3, #24
 800518c:	f200 8155 	bhi.w	800543a <HAL_RCC_GetSysClockFreq+0x2be>
 8005190:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051fd 	.word	0x080051fd
 800519c:	0800543b 	.word	0x0800543b
 80051a0:	0800543b 	.word	0x0800543b
 80051a4:	0800543b 	.word	0x0800543b
 80051a8:	0800543b 	.word	0x0800543b
 80051ac:	0800543b 	.word	0x0800543b
 80051b0:	0800543b 	.word	0x0800543b
 80051b4:	0800543b 	.word	0x0800543b
 80051b8:	08005223 	.word	0x08005223
 80051bc:	0800543b 	.word	0x0800543b
 80051c0:	0800543b 	.word	0x0800543b
 80051c4:	0800543b 	.word	0x0800543b
 80051c8:	0800543b 	.word	0x0800543b
 80051cc:	0800543b 	.word	0x0800543b
 80051d0:	0800543b 	.word	0x0800543b
 80051d4:	0800543b 	.word	0x0800543b
 80051d8:	08005229 	.word	0x08005229
 80051dc:	0800543b 	.word	0x0800543b
 80051e0:	0800543b 	.word	0x0800543b
 80051e4:	0800543b 	.word	0x0800543b
 80051e8:	0800543b 	.word	0x0800543b
 80051ec:	0800543b 	.word	0x0800543b
 80051f0:	0800543b 	.word	0x0800543b
 80051f4:	0800543b 	.word	0x0800543b
 80051f8:	0800522f 	.word	0x0800522f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051fc:	4b94      	ldr	r3, [pc, #592]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005208:	4b91      	ldr	r3, [pc, #580]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	4a90      	ldr	r2, [pc, #576]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800521a:	e111      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800521c:	4b8d      	ldr	r3, [pc, #564]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800521e:	61bb      	str	r3, [r7, #24]
      break;
 8005220:	e10e      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005222:	4b8d      	ldr	r3, [pc, #564]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005224:	61bb      	str	r3, [r7, #24]
      break;
 8005226:	e10b      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005228:	4b8c      	ldr	r3, [pc, #560]	@ (800545c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800522a:	61bb      	str	r3, [r7, #24]
      break;
 800522c:	e108      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800522e:	4b88      	ldr	r3, [pc, #544]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005238:	4b85      	ldr	r3, [pc, #532]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005242:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005244:	4b82      	ldr	r3, [pc, #520]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800524e:	4b80      	ldr	r3, [pc, #512]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80e1 	beq.w	8005434 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b02      	cmp	r3, #2
 8005276:	f000 8083 	beq.w	8005380 <HAL_RCC_GetSysClockFreq+0x204>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f200 80a1 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x248>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x114>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d056      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x1c0>
 800528e:	e099      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005290:	4b6f      	ldr	r3, [pc, #444]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02d      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800529c:	4b6c      	ldr	r3, [pc, #432]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b62      	ldr	r3, [pc, #392]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052f6:	e087      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005464 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b51      	ldr	r3, [pc, #324]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a02 	vldr	s12, [r7, #8]
 800531e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800533a:	e065      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005468 <HAL_RCC_GetSysClockFreq+0x2ec>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b40      	ldr	r3, [pc, #256]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005362:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800537e:	e043      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800546c <HAL_RCC_GetSysClockFreq+0x2f0>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b2f      	ldr	r3, [pc, #188]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053c2:	e021      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005468 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005406:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005412:	3301      	adds	r3, #1
 8005414:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005420:	edd7 6a07 	vldr	s13, [r7, #28]
 8005424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542c:	ee17 3a90 	vmov	r3, s15
 8005430:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005432:	e005      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
      break;
 8005438:	e002      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800543a:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800543c:	61bb      	str	r3, [r7, #24]
      break;
 800543e:	bf00      	nop
  }

  return sysclockfreq;
 8005440:	69bb      	ldr	r3, [r7, #24]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	@ 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400
 8005454:	03d09000 	.word	0x03d09000
 8005458:	003d0900 	.word	0x003d0900
 800545c:	007a1200 	.word	0x007a1200
 8005460:	46000000 	.word	0x46000000
 8005464:	4c742400 	.word	0x4c742400
 8005468:	4a742400 	.word	0x4a742400
 800546c:	4af42400 	.word	0x4af42400

08005470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005476:	f7ff fe81 	bl	800517c <HAL_RCC_GetSysClockFreq>
 800547a:	4602      	mov	r2, r0
 800547c:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	490f      	ldr	r1, [pc, #60]	@ (80054c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005488:	5ccb      	ldrb	r3, [r1, r3]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005494:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	4a07      	ldr	r2, [pc, #28]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80054ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054ae:	4a07      	ldr	r2, [pc, #28]	@ (80054cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054b4:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	58024400 	.word	0x58024400
 80054c4:	0800acd8 	.word	0x0800acd8
 80054c8:	24000004 	.word	0x24000004
 80054cc:	24000000 	.word	0x24000000

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80054d4:	f7ff ffcc 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4904      	ldr	r1, [pc, #16]	@ (80054f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	58024400 	.word	0x58024400
 80054f8:	0800acd8 	.word	0x0800acd8

080054fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005500:	f7ff ffb6 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4904      	ldr	r1, [pc, #16]	@ (8005524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800551c:	4618      	mov	r0, r3
 800551e:	bd80      	pop	{r7, pc}
 8005520:	58024400 	.word	0x58024400
 8005524:	0800acd8 	.word	0x0800acd8

08005528 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800552c:	b0c8      	sub	sp, #288	@ 0x120
 800552e:	af00      	add	r7, sp, #0
 8005530:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005534:	2300      	movs	r3, #0
 8005536:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800553a:	2300      	movs	r3, #0
 800553c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800554c:	2500      	movs	r5, #0
 800554e:	ea54 0305 	orrs.w	r3, r4, r5
 8005552:	d049      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800555e:	d02f      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005560:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005564:	d828      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800556a:	d01a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800556c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005570:	d822      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800557a:	d007      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800557c:	e01c      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557e:	4ba7      	ldr	r3, [pc, #668]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4aa6      	ldr	r2, [pc, #664]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800558a:	e01a      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800558c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005590:	3308      	adds	r3, #8
 8005592:	2102      	movs	r1, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fc43 	bl	8006e20 <RCCEx_PLL2_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055a0:	e00f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a6:	3328      	adds	r3, #40	@ 0x28
 80055a8:	2102      	movs	r1, #2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 fcea 	bl	8006f84 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055ca:	4b94      	ldr	r3, [pc, #592]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d8:	4a90      	ldr	r2, [pc, #576]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80055f4:	f04f 0900 	mov.w	r9, #0
 80055f8:	ea58 0309 	orrs.w	r3, r8, r9
 80055fc:	d047      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	2b04      	cmp	r3, #4
 8005606:	d82a      	bhi.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005608:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005625 	.word	0x08005625
 8005614:	08005633 	.word	0x08005633
 8005618:	08005649 	.word	0x08005649
 800561c:	08005667 	.word	0x08005667
 8005620:	08005667 	.word	0x08005667
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005624:	4b7d      	ldr	r3, [pc, #500]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	4a7c      	ldr	r2, [pc, #496]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800562a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005630:	e01a      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005636:	3308      	adds	r3, #8
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fbf0 	bl	8006e20 <RCCEx_PLL2_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005646:	e00f      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800564c:	3328      	adds	r3, #40	@ 0x28
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fc97 	bl	8006f84 <RCCEx_PLL3_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800565c:	e004      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005670:	4b6a      	ldr	r3, [pc, #424]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005674:	f023 0107 	bic.w	r1, r3, #7
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	4a67      	ldr	r2, [pc, #412]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005680:	430b      	orrs	r3, r1
 8005682:	6513      	str	r3, [r2, #80]	@ 0x50
 8005684:	e003      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800568a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800569a:	f04f 0b00 	mov.w	fp, #0
 800569e:	ea5a 030b 	orrs.w	r3, sl, fp
 80056a2:	d054      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056ae:	d036      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80056b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056b4:	d82f      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ba:	d032      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c0:	d829      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056c4:	d02f      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80056c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056c8:	d825      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056ca:	2b80      	cmp	r3, #128	@ 0x80
 80056cc:	d018      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80056ce:	2b80      	cmp	r3, #128	@ 0x80
 80056d0:	d821      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80056d6:	2b40      	cmp	r3, #64	@ 0x40
 80056d8:	d007      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80056da:	e01c      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056dc:	4b4f      	ldr	r3, [pc, #316]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	4a4e      	ldr	r2, [pc, #312]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056e8:	e01e      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ee:	3308      	adds	r3, #8
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fb94 	bl	8006e20 <RCCEx_PLL2_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056fe:	e013      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005704:	3328      	adds	r3, #40	@ 0x28
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fc3b 	bl	8006f84 <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005714:	e008      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005730:	4b3a      	ldr	r3, [pc, #232]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005734:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573e:	4a37      	ldr	r2, [pc, #220]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005740:	430b      	orrs	r3, r1
 8005742:	6513      	str	r3, [r2, #80]	@ 0x50
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800574a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800574e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800575a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005764:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d05c      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005774:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005778:	d03b      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800577a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800577e:	d834      	bhi.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005784:	d037      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578a:	d82e      	bhi.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800578c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005790:	d033      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005792:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005796:	d828      	bhi.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579c:	d01a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a2:	d822      	bhi.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ac:	d007      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x296>
 80057ae:	e01c      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b1a      	ldr	r3, [pc, #104]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	4a19      	ldr	r2, [pc, #100]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057bc:	e01e      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c2:	3308      	adds	r3, #8
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 fb2a 	bl	8006e20 <RCCEx_PLL2_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057d2:	e013      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d8:	3328      	adds	r3, #40	@ 0x28
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 fbd1 	bl	8006f84 <RCCEx_PLL3_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057e8:	e008      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005808:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005812:	4a02      	ldr	r2, [pc, #8]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005814:	430b      	orrs	r3, r1
 8005816:	6513      	str	r3, [r2, #80]	@ 0x50
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800583e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d03a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584e:	2b30      	cmp	r3, #48	@ 0x30
 8005850:	d01f      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005852:	2b30      	cmp	r3, #48	@ 0x30
 8005854:	d819      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005856:	2b20      	cmp	r3, #32
 8005858:	d00c      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800585a:	2b20      	cmp	r3, #32
 800585c:	d815      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d019      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005862:	2b10      	cmp	r3, #16
 8005864:	d111      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005866:	4bae      	ldr	r3, [pc, #696]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	4aad      	ldr	r2, [pc, #692]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800586c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005878:	3308      	adds	r3, #8
 800587a:	2102      	movs	r1, #2
 800587c:	4618      	mov	r0, r3
 800587e:	f001 facf 	bl	8006e20 <RCCEx_PLL2_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058a0:	4b9f      	ldr	r3, [pc, #636]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	4a9c      	ldr	r2, [pc, #624]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058b4:	e003      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d051      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058e8:	d035      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80058ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ee:	d82e      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058f4:	d031      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80058f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058fa:	d828      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005900:	d01a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005906:	d822      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005910:	d007      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005912:	e01c      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005914:	4b82      	ldr	r3, [pc, #520]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	4a81      	ldr	r2, [pc, #516]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800591a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800591e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005920:	e01c      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005926:	3308      	adds	r3, #8
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f001 fa78 	bl	8006e20 <RCCEx_PLL2_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005936:	e011      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593c:	3328      	adds	r3, #40	@ 0x28
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f001 fb1f 	bl	8006f84 <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800594c:	e006      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005954:	e002      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800595a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005964:	4b6e      	ldr	r3, [pc, #440]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005968:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005972:	4a6b      	ldr	r2, [pc, #428]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6513      	str	r3, [r2, #80]	@ 0x50
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800597e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800598e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005998:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d053      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059ac:	d033      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80059ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059b2:	d82c      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059b8:	d02f      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80059ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059be:	d826      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059c4:	d02b      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ca:	d820      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059d0:	d012      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80059d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059d6:	d81a      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d022      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d115      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e6:	3308      	adds	r3, #8
 80059e8:	2101      	movs	r1, #1
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fa18 	bl	8006e20 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059f6:	e015      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fc:	3328      	adds	r3, #40	@ 0x28
 80059fe:	2101      	movs	r1, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fabf 	bl	8006f84 <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a14:	e006      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a3a:	4a39      	ldr	r2, [pc, #228]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a40:	e003      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	d060      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a72:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a76:	d039      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005a78:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a7c:	d832      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a82:	d035      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a88:	d82c      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8e:	d031      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a94:	d826      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a9a:	d02d      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005a9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005aa0:	d820      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa6:	d012      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aac:	d81a      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d024      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ab6:	d115      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	3308      	adds	r3, #8
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 f9ad 	bl	8006e20 <RCCEx_PLL2_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005acc:	e017      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad2:	3328      	adds	r3, #40	@ 0x28
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fa54 	bl	8006f84 <RCCEx_PLL3_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ae2:	e00c      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005aea:	e008      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005aec:	bf00      	nop
 8005aee:	e006      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005af0:	bf00      	nop
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10e      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b06:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b16:	4a02      	ldr	r2, [pc, #8]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b1e:	bf00      	nop
 8005b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d037      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b56:	d00e      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b5c:	d816      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b66:	d111      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b68:	4bc4      	ldr	r3, [pc, #784]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4ac3      	ldr	r2, [pc, #780]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b74:	e00f      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f94e 	bl	8006e20 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b8a:	e004      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b92:	e000      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b9e:	4bb7      	ldr	r3, [pc, #732]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bac:	4ab3      	ldr	r2, [pc, #716]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bb2:	e003      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	d039      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d81c      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005be6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c29 	.word	0x08005c29
 8005bf0:	08005bfd 	.word	0x08005bfd
 8005bf4:	08005c0b 	.word	0x08005c0b
 8005bf8:	08005c29 	.word	0x08005c29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfc:	4b9f      	ldr	r3, [pc, #636]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a9e      	ldr	r2, [pc, #632]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c08:	e00f      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c0e:	3308      	adds	r3, #8
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 f904 	bl	8006e20 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c1e:	e004      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c26:	e000      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c32:	4b92      	ldr	r3, [pc, #584]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	f023 0103 	bic.w	r1, r3, #3
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c40:	4a8e      	ldr	r2, [pc, #568]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c46:	e003      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c60:	2300      	movs	r3, #0
 8005c62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f000 8099 	beq.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c72:	4b83      	ldr	r3, [pc, #524]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a82      	ldr	r2, [pc, #520]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c7e:	f7fd fb55 	bl	800332c <HAL_GetTick>
 8005c82:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c86:	e00b      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c88:	f7fd fb50 	bl	800332c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b64      	cmp	r3, #100	@ 0x64
 8005c96:	d903      	bls.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c9e:	e005      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca0:	4b77      	ldr	r3, [pc, #476]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0ed      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d173      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cb4:	4b71      	ldr	r3, [pc, #452]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cc0:	4053      	eors	r3, r2
 8005cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d015      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cca:	4b6c      	ldr	r3, [pc, #432]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cd6:	4b69      	ldr	r3, [pc, #420]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cda:	4a68      	ldr	r2, [pc, #416]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ce2:	4b66      	ldr	r3, [pc, #408]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a65      	ldr	r2, [pc, #404]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cee:	4a63      	ldr	r2, [pc, #396]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d02:	d118      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fd fb12 	bl	800332c <HAL_GetTick>
 8005d08:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d0c:	e00d      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0e:	f7fd fb0d 	bl	800332c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d903      	bls.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005d28:	e005      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2a:	4b54      	ldr	r3, [pc, #336]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0eb      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d129      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d4e:	d10e      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d50:	4b4a      	ldr	r3, [pc, #296]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d60:	091a      	lsrs	r2, r3, #4
 8005d62:	4b48      	ldr	r3, [pc, #288]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	4a45      	ldr	r2, [pc, #276]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6113      	str	r3, [r2, #16]
 8005d6c:	e005      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d6e:	4b43      	ldr	r3, [pc, #268]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	4a42      	ldr	r2, [pc, #264]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d78:	6113      	str	r3, [r2, #16]
 8005d7a:	4b40      	ldr	r3, [pc, #256]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d90:	e008      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005d9a:	e003      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005da0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f002 0301 	and.w	r3, r2, #1
 8005db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f000 8090 	beq.w	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dce:	2b28      	cmp	r3, #40	@ 0x28
 8005dd0:	d870      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005ebd 	.word	0x08005ebd
 8005ddc:	08005eb5 	.word	0x08005eb5
 8005de0:	08005eb5 	.word	0x08005eb5
 8005de4:	08005eb5 	.word	0x08005eb5
 8005de8:	08005eb5 	.word	0x08005eb5
 8005dec:	08005eb5 	.word	0x08005eb5
 8005df0:	08005eb5 	.word	0x08005eb5
 8005df4:	08005eb5 	.word	0x08005eb5
 8005df8:	08005e89 	.word	0x08005e89
 8005dfc:	08005eb5 	.word	0x08005eb5
 8005e00:	08005eb5 	.word	0x08005eb5
 8005e04:	08005eb5 	.word	0x08005eb5
 8005e08:	08005eb5 	.word	0x08005eb5
 8005e0c:	08005eb5 	.word	0x08005eb5
 8005e10:	08005eb5 	.word	0x08005eb5
 8005e14:	08005eb5 	.word	0x08005eb5
 8005e18:	08005e9f 	.word	0x08005e9f
 8005e1c:	08005eb5 	.word	0x08005eb5
 8005e20:	08005eb5 	.word	0x08005eb5
 8005e24:	08005eb5 	.word	0x08005eb5
 8005e28:	08005eb5 	.word	0x08005eb5
 8005e2c:	08005eb5 	.word	0x08005eb5
 8005e30:	08005eb5 	.word	0x08005eb5
 8005e34:	08005eb5 	.word	0x08005eb5
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08005eb5 	.word	0x08005eb5
 8005e40:	08005eb5 	.word	0x08005eb5
 8005e44:	08005eb5 	.word	0x08005eb5
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005eb5 	.word	0x08005eb5
 8005e6c:	08005eb5 	.word	0x08005eb5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005ebd 	.word	0x08005ebd
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	58024800 	.word	0x58024800
 8005e84:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 ffc5 	bl	8006e20 <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e00f      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ea2:	3328      	adds	r3, #40	@ 0x28
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f86c 	bl	8006f84 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ec6:	4bc0      	ldr	r3, [pc, #768]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed6:	4abc      	ldr	r2, [pc, #752]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6553      	str	r3, [r2, #84]	@ 0x54
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ede:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ee2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f002 0302 	and.w	r3, r2, #2
 8005ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005efc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d043      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d824      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f47 	.word	0x08005f47
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f34:	3308      	adds	r3, #8
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ff71 	bl	8006e20 <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f44:	e00f      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4a:	3328      	adds	r3, #40	@ 0x28
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f818 	bl	8006f84 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f6e:	4b96      	ldr	r3, [pc, #600]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	f023 0107 	bic.w	r1, r3, #7
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f7e:	4a92      	ldr	r2, [pc, #584]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f002 0304 	and.w	r3, r2, #4
 8005f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d043      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d824      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	0800600d 	.word	0x0800600d
 8005fc4:	08005fd9 	.word	0x08005fd9
 8005fc8:	08005fef 	.word	0x08005fef
 8005fcc:	0800600d 	.word	0x0800600d
 8005fd0:	0800600d 	.word	0x0800600d
 8005fd4:	0800600d 	.word	0x0800600d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fdc:	3308      	adds	r3, #8
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff1d 	bl	8006e20 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fec:	e00f      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff2:	3328      	adds	r3, #40	@ 0x28
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ffc4 	bl	8006f84 <RCCEx_PLL3_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006002:	e004      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800600c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006016:	4b6c      	ldr	r3, [pc, #432]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	f023 0107 	bic.w	r1, r3, #7
 800601e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006022:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006026:	4a68      	ldr	r2, [pc, #416]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6593      	str	r3, [r2, #88]	@ 0x58
 800602c:	e003      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006032:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f002 0320 	and.w	r3, r2, #32
 8006042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006046:	2300      	movs	r3, #0
 8006048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800604c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006050:	460b      	mov	r3, r1
 8006052:	4313      	orrs	r3, r2
 8006054:	d055      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800605a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800605e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006062:	d033      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006068:	d82c      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d02f      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006074:	d826      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800607a:	d02b      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800607c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006080:	d820      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006086:	d012      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800608c:	d81a      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d022      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006096:	d115      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800609c:	3308      	adds	r3, #8
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 febd 	bl	8006e20 <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060ac:	e015      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b2:	3328      	adds	r3, #40	@ 0x28
 80060b4:	2102      	movs	r1, #2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 ff64 	bl	8006f84 <RCCEx_PLL3_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060c2:	e00a      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060ca:	e006      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060cc:	bf00      	nop
 80060ce:	e004      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060d0:	bf00      	nop
 80060d2:	e002      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060d4:	bf00      	nop
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b39      	ldr	r3, [pc, #228]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060f2:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80060f8:	e003      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800610e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006112:	2300      	movs	r3, #0
 8006114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006118:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800611c:	460b      	mov	r3, r1
 800611e:	4313      	orrs	r3, r2
 8006120:	d058      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800612a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800612e:	d033      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006130:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006134:	d82c      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d02f      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006140:	d826      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006146:	d02b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006148:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800614c:	d820      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800614e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006152:	d012      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006158:	d81a      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d022      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800615e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006162:	d115      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006168:	3308      	adds	r3, #8
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fe57 	bl	8006e20 <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006178:	e015      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800617a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800617e:	3328      	adds	r3, #40	@ 0x28
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fefe 	bl	8006f84 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800618e:	e00a      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006196:	e006      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006198:	bf00      	nop
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800619c:	bf00      	nop
 800619e:	e002      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10e      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ae:	4b06      	ldr	r3, [pc, #24]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061be:	4a02      	ldr	r2, [pc, #8]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80061c6:	bf00      	nop
 80061c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d055      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006200:	d033      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006202:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006206:	d82c      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620c:	d02f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006212:	d826      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006214:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006218:	d02b      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800621a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800621e:	d820      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006224:	d012      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800622a:	d81a      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d022      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006234:	d115      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623a:	3308      	adds	r3, #8
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fdee 	bl	8006e20 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800624a:	e015      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800624c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006250:	3328      	adds	r3, #40	@ 0x28
 8006252:	2102      	movs	r1, #2
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fe95 	bl	8006f84 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006260:	e00a      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800626a:	bf00      	nop
 800626c:	e004      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006280:	4ba1      	ldr	r3, [pc, #644]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006284:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800628c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006290:	4a9d      	ldr	r2, [pc, #628]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6593      	str	r3, [r2, #88]	@ 0x58
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800629c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 0308 	and.w	r3, r2, #8
 80062ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062ba:	460b      	mov	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	d01e      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d2:	3328      	adds	r3, #40	@ 0x28
 80062d4:	2102      	movs	r1, #2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fe54 	bl	8006f84 <RCCEx_PLL3_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062e8:	4b87      	ldr	r3, [pc, #540]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f8:	4a83      	ldr	r2, [pc, #524]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f002 0310 	and.w	r3, r2, #16
 800630a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800630e:	2300      	movs	r3, #0
 8006310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006314:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d01e      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800631e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632a:	d10c      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800632c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006330:	3328      	adds	r3, #40	@ 0x28
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fe25 	bl	8006f84 <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006346:	4b70      	ldr	r3, [pc, #448]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800634e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006356:	4a6c      	ldr	r2, [pc, #432]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006358:	430b      	orrs	r3, r1
 800635a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800635c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006368:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006372:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	d03e      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800637c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006388:	d022      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800638a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800638e:	d81b      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006398:	d00b      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800639a:	e015      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a0:	3308      	adds	r3, #8
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fd3b 	bl	8006e20 <RCCEx_PLL2_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063b0:	e00f      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063b6:	3328      	adds	r3, #40	@ 0x28
 80063b8:	2102      	movs	r1, #2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fde2 	bl	8006f84 <RCCEx_PLL3_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063c6:	e004      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80063d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063da:	4b4b      	ldr	r3, [pc, #300]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063ea:	4a47      	ldr	r2, [pc, #284]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80063f0:	e003      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006406:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006408:	2300      	movs	r3, #0
 800640a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800640c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006410:	460b      	mov	r3, r1
 8006412:	4313      	orrs	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006422:	d01f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006424:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006428:	d818      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006434:	d007      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006436:	e011      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006438:	4b33      	ldr	r3, [pc, #204]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	4a32      	ldr	r2, [pc, #200]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006444:	e00f      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800644a:	3328      	adds	r3, #40	@ 0x28
 800644c:	2101      	movs	r1, #1
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fd98 	bl	8006f84 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006462:	e000      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006466:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647e:	4a22      	ldr	r2, [pc, #136]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006480:	430b      	orrs	r3, r1
 8006482:	6553      	str	r3, [r2, #84]	@ 0x54
 8006484:	e003      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800648a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800648e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800649a:	673b      	str	r3, [r7, #112]	@ 0x70
 800649c:	2300      	movs	r3, #0
 800649e:	677b      	str	r3, [r7, #116]	@ 0x74
 80064a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d034      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d007      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80064ba:	e011      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4b12      	ldr	r3, [pc, #72]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064c8:	e00e      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ce:	3308      	adds	r3, #8
 80064d0:	2102      	movs	r1, #2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fca4 	bl	8006e20 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10d      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064f0:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fe:	4a02      	ldr	r2, [pc, #8]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006500:	430b      	orrs	r3, r1
 8006502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006510:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006522:	2300      	movs	r3, #0
 8006524:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006526:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800652a:	460b      	mov	r3, r1
 800652c:	4313      	orrs	r3, r2
 800652e:	d00c      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006534:	3328      	adds	r3, #40	@ 0x28
 8006536:	2102      	movs	r1, #2
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fd23 	bl	8006f84 <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800654a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006556:	663b      	str	r3, [r7, #96]	@ 0x60
 8006558:	2300      	movs	r3, #0
 800655a:	667b      	str	r3, [r7, #100]	@ 0x64
 800655c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006560:	460b      	mov	r3, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	d038      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006572:	d018      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006578:	d811      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800657a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800657e:	d014      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d80b      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800658a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658e:	d106      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006590:	4bc3      	ldr	r3, [pc, #780]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	4ac2      	ldr	r2, [pc, #776]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800659a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065a4:	e004      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065b8:	4bb9      	ldr	r3, [pc, #740]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	4ab5      	ldr	r2, [pc, #724]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80065ce:	e003      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e6:	2300      	movs	r3, #0
 80065e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065ee:	460b      	mov	r3, r1
 80065f0:	4313      	orrs	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065f4:	4baa      	ldr	r3, [pc, #680]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006602:	4aa7      	ldr	r2, [pc, #668]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006604:	430b      	orrs	r3, r1
 8006606:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006614:	653b      	str	r3, [r7, #80]	@ 0x50
 8006616:	2300      	movs	r3, #0
 8006618:	657b      	str	r3, [r7, #84]	@ 0x54
 800661a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800661e:	460b      	mov	r3, r1
 8006620:	4313      	orrs	r3, r2
 8006622:	d009      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006624:	4b9e      	ldr	r3, [pc, #632]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006628:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	4a9b      	ldr	r2, [pc, #620]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006644:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006646:	2300      	movs	r3, #0
 8006648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800664a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800664e:	460b      	mov	r3, r1
 8006650:	4313      	orrs	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006654:	4b92      	ldr	r3, [pc, #584]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	4a8f      	ldr	r2, [pc, #572]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006664:	430b      	orrs	r3, r1
 8006666:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006674:	643b      	str	r3, [r7, #64]	@ 0x40
 8006676:	2300      	movs	r3, #0
 8006678:	647b      	str	r3, [r7, #68]	@ 0x44
 800667a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d00e      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006684:	4b86      	ldr	r3, [pc, #536]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4a85      	ldr	r2, [pc, #532]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800668a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800668e:	6113      	str	r3, [r2, #16]
 8006690:	4b83      	ldr	r3, [pc, #524]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006692:	6919      	ldr	r1, [r3, #16]
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800669c:	4a80      	ldr	r2, [pc, #512]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066b0:	2300      	movs	r3, #0
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d009      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066be:	4b78      	ldr	r3, [pc, #480]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	4a74      	ldr	r2, [pc, #464]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066ce:	430b      	orrs	r3, r1
 80066d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066de:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e0:	2300      	movs	r3, #0
 80066e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d00a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066ee:	4b6c      	ldr	r3, [pc, #432]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fe:	4a68      	ldr	r2, [pc, #416]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006700:	430b      	orrs	r3, r1
 8006702:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	2100      	movs	r1, #0
 800670e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006716:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d011      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006724:	3308      	adds	r3, #8
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fb79 	bl	8006e20 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006734:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006740:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	2100      	movs	r1, #0
 800674e:	6239      	str	r1, [r7, #32]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24
 8006756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d011      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006764:	3308      	adds	r3, #8
 8006766:	2101      	movs	r1, #1
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fb59 	bl	8006e20 <RCCEx_PLL2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006780:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	2100      	movs	r1, #0
 800678e:	61b9      	str	r1, [r7, #24]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d011      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a4:	3308      	adds	r3, #8
 80067a6:	2102      	movs	r1, #2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fb39 	bl	8006e20 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	2100      	movs	r1, #0
 80067ce:	6139      	str	r1, [r7, #16]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067da:	460b      	mov	r3, r1
 80067dc:	4313      	orrs	r3, r2
 80067de:	d011      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e4:	3328      	adds	r3, #40	@ 0x28
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fbcb 	bl	8006f84 <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80067f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006800:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	2100      	movs	r1, #0
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d011      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006824:	3328      	adds	r3, #40	@ 0x28
 8006826:	2101      	movs	r1, #1
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fbab 	bl	8006f84 <RCCEx_PLL3_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006834:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006840:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	2100      	movs	r1, #0
 800684e:	6039      	str	r1, [r7, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	e9d7 1200 	ldrd	r1, r2, [r7]
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d011      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006864:	3328      	adds	r3, #40	@ 0x28
 8006866:	2102      	movs	r1, #2
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb8b 	bl	8006f84 <RCCEx_PLL3_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006874:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006880:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006884:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
}
 8006892:	4618      	mov	r0, r3
 8006894:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006898:	46bd      	mov	sp, r7
 800689a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689e:	bf00      	nop
 80068a0:	58024400 	.word	0x58024400

080068a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80068a8:	f7fe fde2 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	091b      	lsrs	r3, r3, #4
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	4904      	ldr	r1, [pc, #16]	@ (80068cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068ba:	5ccb      	ldrb	r3, [r1, r3]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	58024400 	.word	0x58024400
 80068cc:	0800acd8 	.word	0x0800acd8

080068d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	@ 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068e2:	4b9f      	ldr	r3, [pc, #636]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	0b1b      	lsrs	r3, r3, #12
 80068e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068fa:	4b99      	ldr	r3, [pc, #612]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8111 	beq.w	8006b40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b02      	cmp	r3, #2
 8006922:	f000 8083 	beq.w	8006a2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b02      	cmp	r3, #2
 800692a:	f200 80a1 	bhi.w	8006a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d056      	beq.n	80069e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800693a:	e099      	b.n	8006a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800693c:	4b88      	ldr	r3, [pc, #544]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02d      	beq.n	80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006948:	4b85      	ldr	r3, [pc, #532]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	08db      	lsrs	r3, r3, #3
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	4a84      	ldr	r2, [pc, #528]	@ (8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
 8006958:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006972:	4b7b      	ldr	r3, [pc, #492]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006982:	ed97 6a03 	vldr	s12, [r7, #12]
 8006986:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800698a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069a2:	e087      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069e6:	e065      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fa:	4b59      	ldr	r3, [pc, #356]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a2a:	e043      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b48      	ldr	r3, [pc, #288]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6e:	e021      	b.n	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b37      	ldr	r3, [pc, #220]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	0a5b      	lsrs	r3, r3, #9
 8006aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ada:	ee17 2a90 	vmov	r2, s15
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b08:	ee17 2a90 	vmov	r2, s15
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b10:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b36:	ee17 2a90 	vmov	r2, s15
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b3e:	e008      	b.n	8006b52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
}
 8006b52:	bf00      	nop
 8006b54:	3724      	adds	r7, #36	@ 0x24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	58024400 	.word	0x58024400
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	4c742400 	.word	0x4c742400
 8006b70:	4a742400 	.word	0x4a742400
 8006b74:	4af42400 	.word	0x4af42400

08006b78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	@ 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b80:	4ba1      	ldr	r3, [pc, #644]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b8a:	4b9f      	ldr	r3, [pc, #636]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	0d1b      	lsrs	r3, r3, #20
 8006b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b96:	4b9c      	ldr	r3, [pc, #624]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006ba2:	4b99      	ldr	r3, [pc, #612]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba6:	08db      	lsrs	r3, r3, #3
 8006ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8111 	beq.w	8006de8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	f000 8083 	beq.w	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	f200 80a1 	bhi.w	8006d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d056      	beq.n	8006c90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006be2:	e099      	b.n	8006d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be4:	4b88      	ldr	r3, [pc, #544]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02d      	beq.n	8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bf0:	4b85      	ldr	r3, [pc, #532]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	4a84      	ldr	r2, [pc, #528]	@ (8006e0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006c00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c4a:	e087      	b.n	8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8e:	e065      	b.n	8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b59      	ldr	r3, [pc, #356]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cd2:	e043      	b.n	8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b48      	ldr	r3, [pc, #288]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d16:	e021      	b.n	8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b37      	ldr	r3, [pc, #220]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	0a5b      	lsrs	r3, r3, #9
 8006d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d82:	ee17 2a90 	vmov	r2, s15
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db0:	ee17 2a90 	vmov	r2, s15
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbc:	0e1b      	lsrs	r3, r3, #24
 8006dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dde:	ee17 2a90 	vmov	r2, s15
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006de6:	e008      	b.n	8006dfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	609a      	str	r2, [r3, #8]
}
 8006dfa:	bf00      	nop
 8006dfc:	3724      	adds	r7, #36	@ 0x24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	03d09000 	.word	0x03d09000
 8006e10:	46000000 	.word	0x46000000
 8006e14:	4c742400 	.word	0x4c742400
 8006e18:	4a742400 	.word	0x4a742400
 8006e1c:	4af42400 	.word	0x4af42400

08006e20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e2e:	4b53      	ldr	r3, [pc, #332]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d101      	bne.n	8006e3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e099      	b.n	8006f72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a4e      	ldr	r2, [pc, #312]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4a:	f7fc fa6f 	bl	800332c <HAL_GetTick>
 8006e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e50:	e008      	b.n	8006e64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e52:	f7fc fa6b 	bl	800332c <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e086      	b.n	8006f72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e64:	4b45      	ldr	r3, [pc, #276]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f0      	bne.n	8006e52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e70:	4b42      	ldr	r3, [pc, #264]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	031b      	lsls	r3, r3, #12
 8006e7e:	493f      	ldr	r1, [pc, #252]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	025b      	lsls	r3, r3, #9
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	061b      	lsls	r3, r3, #24
 8006eb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006eb4:	4931      	ldr	r1, [pc, #196]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006eba:	4b30      	ldr	r3, [pc, #192]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492d      	ldr	r1, [pc, #180]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed0:	f023 0220 	bic.w	r2, r3, #32
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	4928      	ldr	r1, [pc, #160]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ede:	4b27      	ldr	r3, [pc, #156]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4a26      	ldr	r2, [pc, #152]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	f023 0310 	bic.w	r3, r3, #16
 8006ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eee:	4b24      	ldr	r3, [pc, #144]	@ (8006f80 <RCCEx_PLL2_Config+0x160>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	69d2      	ldr	r2, [r2, #28]
 8006ef6:	00d2      	lsls	r2, r2, #3
 8006ef8:	4920      	ldr	r1, [pc, #128]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006efe:	4b1f      	ldr	r3, [pc, #124]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	4a1e      	ldr	r2, [pc, #120]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f04:	f043 0310 	orr.w	r3, r3, #16
 8006f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f14:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f1c:	e00f      	b.n	8006f3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d106      	bne.n	8006f32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f24:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f30:	e005      	b.n	8006f3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	4a11      	ldr	r2, [pc, #68]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a0e      	ldr	r2, [pc, #56]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4a:	f7fc f9ef 	bl	800332c <HAL_GetTick>
 8006f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f50:	e008      	b.n	8006f64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f52:	f7fc f9eb 	bl	800332c <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e006      	b.n	8006f72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f64:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <RCCEx_PLL2_Config+0x15c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0f0      	beq.n	8006f52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	ffff0007 	.word	0xffff0007

08006f84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f92:	4b53      	ldr	r3, [pc, #332]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d101      	bne.n	8006fa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e099      	b.n	80070d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fae:	f7fc f9bd 	bl	800332c <HAL_GetTick>
 8006fb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fb6:	f7fc f9b9 	bl	800332c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e086      	b.n	80070d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fc8:	4b45      	ldr	r3, [pc, #276]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fd4:	4b42      	ldr	r3, [pc, #264]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	493f      	ldr	r1, [pc, #252]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	3b01      	subs	r3, #1
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007018:	4931      	ldr	r1, [pc, #196]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800701e:	4b30      	ldr	r3, [pc, #192]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	492d      	ldr	r1, [pc, #180]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007030:	4b2b      	ldr	r3, [pc, #172]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	4928      	ldr	r1, [pc, #160]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007042:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	4a26      	ldr	r2, [pc, #152]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800704c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800704e:	4b24      	ldr	r3, [pc, #144]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007052:	4b24      	ldr	r3, [pc, #144]	@ (80070e4 <RCCEx_PLL3_Config+0x160>)
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	69d2      	ldr	r2, [r2, #28]
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	4920      	ldr	r1, [pc, #128]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007062:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800706c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800707a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800707e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007080:	e00f      	b.n	80070a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d106      	bne.n	8007096 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007088:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800708e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007094:	e005      	b.n	80070a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007096:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 800709c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070a2:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ae:	f7fc f93d 	bl	800332c <HAL_GetTick>
 80070b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070b4:	e008      	b.n	80070c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070b6:	f7fc f939 	bl	800332c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e006      	b.n	80070d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <RCCEx_PLL3_Config+0x15c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0f0      	beq.n	80070b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
 80070e4:	ffff0007 	.word	0xffff0007

080070e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e042      	b.n	8007180 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7fb ffe9 	bl	80030e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2224      	movs	r2, #36	@ 0x24
 8007116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fb64 	bl	8008800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fcf5 	bl	8007b28 <UART_SetConfig>
 800713e:	4603      	mov	r3, r0
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e01b      	b.n	8007180 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fbe3 	bl	8008944 <UART_CheckIdleState>
 800717e:	4603      	mov	r3, r0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	@ 0x28
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d17b      	bne.n	800729a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_UART_Transmit+0x26>
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e074      	b.n	800729c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2221      	movs	r2, #33	@ 0x21
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071c2:	f7fc f8b3 	bl	800332c <HAL_GetTick>
 80071c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e0:	d108      	bne.n	80071f4 <HAL_UART_Transmit+0x6c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e003      	b.n	80071fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071fc:	e030      	b.n	8007260 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	@ 0x80
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f001 fc45 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e03d      	b.n	800729c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10b      	bne.n	800723e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007234:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	3302      	adds	r3, #2
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	e007      	b.n	800724e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3301      	adds	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1c8      	bne.n	80071fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2200      	movs	r2, #0
 8007274:	2140      	movs	r1, #64	@ 0x40
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f001 fc0e 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e006      	b.n	800729c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	e000      	b.n	800729c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800729a:	2302      	movs	r3, #2
  }
}
 800729c:	4618      	mov	r0, r3
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	@ 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d137      	bne.n	800732c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_UART_Receive_IT+0x24>
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e030      	b.n	800732e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <HAL_UART_Receive_IT+0x94>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d01f      	beq.n	800731c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d018      	beq.n	800731c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	613b      	str	r3, [r7, #16]
   return(result);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	623b      	str	r3, [r7, #32]
 800730a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69f9      	ldr	r1, [r7, #28]
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	61bb      	str	r3, [r7, #24]
   return(result);
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	461a      	mov	r2, r3
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 fc26 	bl	8008b74 <UART_Start_Receive_IT>
 8007328:	4603      	mov	r3, r0
 800732a:	e000      	b.n	800732e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
  }
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	@ 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	58000c00 	.word	0x58000c00

0800733c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b0ba      	sub	sp, #232	@ 0xe8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800736a:	4013      	ands	r3, r2
 800736c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11b      	bne.n	80073b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d015      	beq.n	80073b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8393 	beq.w	8007acc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
      }
      return;
 80073ae:	e38d      	b.n	8007acc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8123 	beq.w	8007600 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073be:	4b8d      	ldr	r3, [pc, #564]	@ (80075f4 <HAL_UART_IRQHandler+0x2b8>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073ca:	4b8b      	ldr	r3, [pc, #556]	@ (80075f8 <HAL_UART_IRQHandler+0x2bc>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8116 	beq.w	8007600 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d011      	beq.n	8007404 <HAL_UART_IRQHandler+0xc8>
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2201      	movs	r2, #1
 80073f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d011      	beq.n	8007434 <HAL_UART_IRQHandler+0xf8>
 8007410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2202      	movs	r2, #2
 8007422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742a:	f043 0204 	orr.w	r2, r3, #4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d011      	beq.n	8007464 <HAL_UART_IRQHandler+0x128>
 8007440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2204      	movs	r2, #4
 8007452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745a:	f043 0202 	orr.w	r2, r3, #2
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d017      	beq.n	80074a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d105      	bne.n	8007488 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800747c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007480:	4b5c      	ldr	r3, [pc, #368]	@ (80075f4 <HAL_UART_IRQHandler+0x2b8>)
 8007482:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2208      	movs	r2, #8
 800748e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	f043 0208 	orr.w	r2, r3, #8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d012      	beq.n	80074d2 <HAL_UART_IRQHandler+0x196>
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00c      	beq.n	80074d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c8:	f043 0220 	orr.w	r2, r3, #32
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 82f9 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d013      	beq.n	8007512 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d105      	bne.n	8007502 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	d005      	beq.n	8007536 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800752a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007532:	2b00      	cmp	r3, #0
 8007534:	d054      	beq.n	80075e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc3e 	bl	8008db8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007546:	2b40      	cmp	r3, #64	@ 0x40
 8007548:	d146      	bne.n	80075d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800757a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800758e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1d9      	bne.n	800754a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759c:	2b00      	cmp	r3, #0
 800759e:	d017      	beq.n	80075d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a6:	4a15      	ldr	r2, [pc, #84]	@ (80075fc <HAL_UART_IRQHandler+0x2c0>)
 80075a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fc fb91 	bl	8003cd8 <HAL_DMA_Abort_IT>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d019      	beq.n	80075f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075ca:	4610      	mov	r0, r2
 80075cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ce:	e00f      	b.n	80075f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa93 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d6:	e00b      	b.n	80075f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa8f 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075de:	e007      	b.n	80075f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa8b 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075ee:	e26f      	b.n	8007ad0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	bf00      	nop
    return;
 80075f2:	e26d      	b.n	8007ad0 <HAL_UART_IRQHandler+0x794>
 80075f4:	10000001 	.word	0x10000001
 80075f8:	04000120 	.word	0x04000120
 80075fc:	08008e85 	.word	0x08008e85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 8203 	bne.w	8007a10 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 81fc 	beq.w	8007a10 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 81f5 	beq.w	8007a10 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007638:	2b40      	cmp	r3, #64	@ 0x40
 800763a:	f040 816d 	bne.w	8007918 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4aa4      	ldr	r2, [pc, #656]	@ (80078d8 <HAL_UART_IRQHandler+0x59c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d068      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4aa1      	ldr	r2, [pc, #644]	@ (80078dc <HAL_UART_IRQHandler+0x5a0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d061      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a9f      	ldr	r2, [pc, #636]	@ (80078e0 <HAL_UART_IRQHandler+0x5a4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d05a      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a9c      	ldr	r2, [pc, #624]	@ (80078e4 <HAL_UART_IRQHandler+0x5a8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d053      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a9a      	ldr	r2, [pc, #616]	@ (80078e8 <HAL_UART_IRQHandler+0x5ac>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d04c      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a97      	ldr	r2, [pc, #604]	@ (80078ec <HAL_UART_IRQHandler+0x5b0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d045      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a95      	ldr	r2, [pc, #596]	@ (80078f0 <HAL_UART_IRQHandler+0x5b4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d03e      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a92      	ldr	r2, [pc, #584]	@ (80078f4 <HAL_UART_IRQHandler+0x5b8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d037      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a90      	ldr	r2, [pc, #576]	@ (80078f8 <HAL_UART_IRQHandler+0x5bc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d030      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a8d      	ldr	r2, [pc, #564]	@ (80078fc <HAL_UART_IRQHandler+0x5c0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d029      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a8b      	ldr	r2, [pc, #556]	@ (8007900 <HAL_UART_IRQHandler+0x5c4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d022      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a88      	ldr	r2, [pc, #544]	@ (8007904 <HAL_UART_IRQHandler+0x5c8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01b      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a86      	ldr	r2, [pc, #536]	@ (8007908 <HAL_UART_IRQHandler+0x5cc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d014      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a83      	ldr	r2, [pc, #524]	@ (800790c <HAL_UART_IRQHandler+0x5d0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00d      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a81      	ldr	r2, [pc, #516]	@ (8007910 <HAL_UART_IRQHandler+0x5d4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d006      	beq.n	800771e <HAL_UART_IRQHandler+0x3e2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a7e      	ldr	r2, [pc, #504]	@ (8007914 <HAL_UART_IRQHandler+0x5d8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d106      	bne.n	800772c <HAL_UART_IRQHandler+0x3f0>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b29b      	uxth	r3, r3
 800772a:	e005      	b.n	8007738 <HAL_UART_IRQHandler+0x3fc>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800773c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80ad 	beq.w	80078a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800774c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007750:	429a      	cmp	r2, r3
 8007752:	f080 80a5 	bcs.w	80078a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800775c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800776c:	f000 8087 	beq.w	800787e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800778c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800779a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800779e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1da      	bne.n	8007770 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e1      	bne.n	80077ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800780c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800781a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800781c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e3      	bne.n	80077f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800784a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800784c:	f023 0310 	bic.w	r3, r3, #16
 8007850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800785e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800786c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e4      	bne.n	800783c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007878:	4618      	mov	r0, r3
 800787a:	f7fb ff0f 	bl	800369c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007890:	b29b      	uxth	r3, r3
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	b29b      	uxth	r3, r3
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f939 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800789e:	e119      	b.n	8007ad4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078aa:	429a      	cmp	r2, r3
 80078ac:	f040 8112 	bne.w	8007ad4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078bc:	f040 810a 	bne.w	8007ad4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f91e 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
      return;
 80078d4:	e0fe      	b.n	8007ad4 <HAL_UART_IRQHandler+0x798>
 80078d6:	bf00      	nop
 80078d8:	40020010 	.word	0x40020010
 80078dc:	40020028 	.word	0x40020028
 80078e0:	40020040 	.word	0x40020040
 80078e4:	40020058 	.word	0x40020058
 80078e8:	40020070 	.word	0x40020070
 80078ec:	40020088 	.word	0x40020088
 80078f0:	400200a0 	.word	0x400200a0
 80078f4:	400200b8 	.word	0x400200b8
 80078f8:	40020410 	.word	0x40020410
 80078fc:	40020428 	.word	0x40020428
 8007900:	40020440 	.word	0x40020440
 8007904:	40020458 	.word	0x40020458
 8007908:	40020470 	.word	0x40020470
 800790c:	40020488 	.word	0x40020488
 8007910:	400204a0 	.word	0x400204a0
 8007914:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007924:	b29b      	uxth	r3, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80cf 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800793a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80ca 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007966:	647b      	str	r3, [r7, #68]	@ 0x44
 8007968:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800796c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	623b      	str	r3, [r7, #32]
   return(result);
 800798a:	6a3a      	ldr	r2, [r7, #32]
 800798c:	4b55      	ldr	r3, [pc, #340]	@ (8007ae4 <HAL_UART_IRQHandler+0x7a8>)
 800798e:	4013      	ands	r3, r2
 8007990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800799e:	633a      	str	r2, [r7, #48]	@ 0x30
 80079a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e3      	bne.n	800797a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0310 	bic.w	r3, r3, #16
 80079da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	617b      	str	r3, [r7, #20]
   return(result);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e4      	bne.n	80079c6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f881 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a0e:	e063      	b.n	8007ad8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <HAL_UART_IRQHandler+0x6fe>
 8007a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 ff84 	bl	8009940 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a38:	e051      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d03a      	beq.n	8007adc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
    }
    return;
 8007a6e:	e035      	b.n	8007adc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <HAL_UART_IRQHandler+0x754>
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fa0d 	bl	8008ea8 <UART_EndTransmit_IT>
    return;
 8007a8e:	e026      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x774>
 8007a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 ff5d 	bl	8009968 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aae:	e016      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <HAL_UART_IRQHandler+0x7a2>
 8007abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da0c      	bge.n	8007ade <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 ff45 	bl	8009954 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aca:	e008      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
      return;
 8007acc:	bf00      	nop
 8007ace:	e006      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
    return;
 8007ad0:	bf00      	nop
 8007ad2:	e004      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ad4:	bf00      	nop
 8007ad6:	e002      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ad8:	bf00      	nop
 8007ada:	e000      	b.n	8007ade <HAL_UART_IRQHandler+0x7a2>
    return;
 8007adc:	bf00      	nop
  }
}
 8007ade:	37e8      	adds	r7, #232	@ 0xe8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	effffffe 	.word	0xeffffffe

08007ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b2c:	b092      	sub	sp, #72	@ 0x48
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4bbe      	ldr	r3, [pc, #760]	@ (8007e50 <UART_SetConfig+0x328>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b60:	430b      	orrs	r3, r1
 8007b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4ab3      	ldr	r2, [pc, #716]	@ (8007e54 <UART_SetConfig+0x32c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b90:	4313      	orrs	r3, r2
 8007b92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	4baf      	ldr	r3, [pc, #700]	@ (8007e58 <UART_SetConfig+0x330>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	f023 010f 	bic.w	r1, r3, #15
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4aa6      	ldr	r2, [pc, #664]	@ (8007e5c <UART_SetConfig+0x334>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d177      	bne.n	8007cb8 <UART_SetConfig+0x190>
 8007bc8:	4ba5      	ldr	r3, [pc, #660]	@ (8007e60 <UART_SetConfig+0x338>)
 8007bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd0:	2b28      	cmp	r3, #40	@ 0x28
 8007bd2:	d86d      	bhi.n	8007cb0 <UART_SetConfig+0x188>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <UART_SetConfig+0xb4>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c81 	.word	0x08007c81
 8007be0:	08007cb1 	.word	0x08007cb1
 8007be4:	08007cb1 	.word	0x08007cb1
 8007be8:	08007cb1 	.word	0x08007cb1
 8007bec:	08007cb1 	.word	0x08007cb1
 8007bf0:	08007cb1 	.word	0x08007cb1
 8007bf4:	08007cb1 	.word	0x08007cb1
 8007bf8:	08007cb1 	.word	0x08007cb1
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007cb1 	.word	0x08007cb1
 8007c04:	08007cb1 	.word	0x08007cb1
 8007c08:	08007cb1 	.word	0x08007cb1
 8007c0c:	08007cb1 	.word	0x08007cb1
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb1 	.word	0x08007cb1
 8007c1c:	08007c91 	.word	0x08007c91
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb1 	.word	0x08007cb1
 8007c2c:	08007cb1 	.word	0x08007cb1
 8007c30:	08007cb1 	.word	0x08007cb1
 8007c34:	08007cb1 	.word	0x08007cb1
 8007c38:	08007cb1 	.word	0x08007cb1
 8007c3c:	08007c99 	.word	0x08007c99
 8007c40:	08007cb1 	.word	0x08007cb1
 8007c44:	08007cb1 	.word	0x08007cb1
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007cb1 	.word	0x08007cb1
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007ca1 	.word	0x08007ca1
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cb1 	.word	0x08007cb1
 8007c68:	08007cb1 	.word	0x08007cb1
 8007c6c:	08007cb1 	.word	0x08007cb1
 8007c70:	08007cb1 	.word	0x08007cb1
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e326      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e322      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e31e      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e31a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007ca0:	2320      	movs	r3, #32
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e316      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007ca8:	2340      	movs	r3, #64	@ 0x40
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e312      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007cb0:	2380      	movs	r3, #128	@ 0x80
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e30e      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a69      	ldr	r2, [pc, #420]	@ (8007e64 <UART_SetConfig+0x33c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d130      	bne.n	8007d24 <UART_SetConfig+0x1fc>
 8007cc2:	4b67      	ldr	r3, [pc, #412]	@ (8007e60 <UART_SetConfig+0x338>)
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d826      	bhi.n	8007d1c <UART_SetConfig+0x1f4>
 8007cce:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd4 <UART_SetConfig+0x1ac>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ced 	.word	0x08007ced
 8007cd8:	08007cf5 	.word	0x08007cf5
 8007cdc:	08007cfd 	.word	0x08007cfd
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d0d 	.word	0x08007d0d
 8007ce8:	08007d15 	.word	0x08007d15
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e2f0      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e2ec      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e2e8      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d04:	2310      	movs	r3, #16
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e2e4      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e2e0      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d14:	2340      	movs	r3, #64	@ 0x40
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e2dc      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d1c:	2380      	movs	r3, #128	@ 0x80
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e2d8      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a4f      	ldr	r2, [pc, #316]	@ (8007e68 <UART_SetConfig+0x340>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d130      	bne.n	8007d90 <UART_SetConfig+0x268>
 8007d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8007e60 <UART_SetConfig+0x338>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	d826      	bhi.n	8007d88 <UART_SetConfig+0x260>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <UART_SetConfig+0x218>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d59 	.word	0x08007d59
 8007d44:	08007d61 	.word	0x08007d61
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d79 	.word	0x08007d79
 8007d54:	08007d81 	.word	0x08007d81
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e2ba      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e2b6      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e2b2      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e2ae      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d78:	2320      	movs	r3, #32
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e2aa      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d80:	2340      	movs	r3, #64	@ 0x40
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e2a6      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d88:	2380      	movs	r3, #128	@ 0x80
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e2a2      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a35      	ldr	r2, [pc, #212]	@ (8007e6c <UART_SetConfig+0x344>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d130      	bne.n	8007dfc <UART_SetConfig+0x2d4>
 8007d9a:	4b31      	ldr	r3, [pc, #196]	@ (8007e60 <UART_SetConfig+0x338>)
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d826      	bhi.n	8007df4 <UART_SetConfig+0x2cc>
 8007da6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <UART_SetConfig+0x284>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dc5 	.word	0x08007dc5
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e284      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e280      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e27c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e278      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007de4:	2320      	movs	r3, #32
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e274      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007dec:	2340      	movs	r3, #64	@ 0x40
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e270      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007df4:	2380      	movs	r3, #128	@ 0x80
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e26c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1b      	ldr	r2, [pc, #108]	@ (8007e70 <UART_SetConfig+0x348>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d142      	bne.n	8007e8c <UART_SetConfig+0x364>
 8007e06:	4b16      	ldr	r3, [pc, #88]	@ (8007e60 <UART_SetConfig+0x338>)
 8007e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d838      	bhi.n	8007e84 <UART_SetConfig+0x35c>
 8007e12:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <UART_SetConfig+0x2f0>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e31 	.word	0x08007e31
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e75 	.word	0x08007e75
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e36:	e24e      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3e:	e24a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e40:	2308      	movs	r3, #8
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e246      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e242      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e50:	cfff69f3 	.word	0xcfff69f3
 8007e54:	58000c00 	.word	0x58000c00
 8007e58:	11fff4ff 	.word	0x11fff4ff
 8007e5c:	40011000 	.word	0x40011000
 8007e60:	58024400 	.word	0x58024400
 8007e64:	40004400 	.word	0x40004400
 8007e68:	40004800 	.word	0x40004800
 8007e6c:	40004c00 	.word	0x40004c00
 8007e70:	40005000 	.word	0x40005000
 8007e74:	2320      	movs	r3, #32
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e22c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e7c:	2340      	movs	r3, #64	@ 0x40
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e228      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e84:	2380      	movs	r3, #128	@ 0x80
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e224      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4ab1      	ldr	r2, [pc, #708]	@ (8008158 <UART_SetConfig+0x630>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d176      	bne.n	8007f84 <UART_SetConfig+0x45c>
 8007e96:	4bb1      	ldr	r3, [pc, #708]	@ (800815c <UART_SetConfig+0x634>)
 8007e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e9e:	2b28      	cmp	r3, #40	@ 0x28
 8007ea0:	d86c      	bhi.n	8007f7c <UART_SetConfig+0x454>
 8007ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea8 <UART_SetConfig+0x380>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007f4d 	.word	0x08007f4d
 8007eac:	08007f7d 	.word	0x08007f7d
 8007eb0:	08007f7d 	.word	0x08007f7d
 8007eb4:	08007f7d 	.word	0x08007f7d
 8007eb8:	08007f7d 	.word	0x08007f7d
 8007ebc:	08007f7d 	.word	0x08007f7d
 8007ec0:	08007f7d 	.word	0x08007f7d
 8007ec4:	08007f7d 	.word	0x08007f7d
 8007ec8:	08007f55 	.word	0x08007f55
 8007ecc:	08007f7d 	.word	0x08007f7d
 8007ed0:	08007f7d 	.word	0x08007f7d
 8007ed4:	08007f7d 	.word	0x08007f7d
 8007ed8:	08007f7d 	.word	0x08007f7d
 8007edc:	08007f7d 	.word	0x08007f7d
 8007ee0:	08007f7d 	.word	0x08007f7d
 8007ee4:	08007f7d 	.word	0x08007f7d
 8007ee8:	08007f5d 	.word	0x08007f5d
 8007eec:	08007f7d 	.word	0x08007f7d
 8007ef0:	08007f7d 	.word	0x08007f7d
 8007ef4:	08007f7d 	.word	0x08007f7d
 8007ef8:	08007f7d 	.word	0x08007f7d
 8007efc:	08007f7d 	.word	0x08007f7d
 8007f00:	08007f7d 	.word	0x08007f7d
 8007f04:	08007f7d 	.word	0x08007f7d
 8007f08:	08007f65 	.word	0x08007f65
 8007f0c:	08007f7d 	.word	0x08007f7d
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	08007f7d 	.word	0x08007f7d
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	08007f7d 	.word	0x08007f7d
 8007f20:	08007f7d 	.word	0x08007f7d
 8007f24:	08007f7d 	.word	0x08007f7d
 8007f28:	08007f6d 	.word	0x08007f6d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f7d 	.word	0x08007f7d
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e1c0      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e1bc      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e1b8      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e1b4      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e1b0      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f74:	2340      	movs	r3, #64	@ 0x40
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e1ac      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e1a8      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a75      	ldr	r2, [pc, #468]	@ (8008160 <UART_SetConfig+0x638>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d130      	bne.n	8007ff0 <UART_SetConfig+0x4c8>
 8007f8e:	4b73      	ldr	r3, [pc, #460]	@ (800815c <UART_SetConfig+0x634>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d826      	bhi.n	8007fe8 <UART_SetConfig+0x4c0>
 8007f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <UART_SetConfig+0x478>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd9 	.word	0x08007fd9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e18a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e186      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e182      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e17e      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e17a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fe0:	2340      	movs	r3, #64	@ 0x40
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e176      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e172      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8008164 <UART_SetConfig+0x63c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d130      	bne.n	800805c <UART_SetConfig+0x534>
 8007ffa:	4b58      	ldr	r3, [pc, #352]	@ (800815c <UART_SetConfig+0x634>)
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b05      	cmp	r3, #5
 8008004:	d826      	bhi.n	8008054 <UART_SetConfig+0x52c>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <UART_SetConfig+0x4e4>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008025 	.word	0x08008025
 8008010:	0800802d 	.word	0x0800802d
 8008014:	08008035 	.word	0x08008035
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804d 	.word	0x0800804d
 8008024:	2300      	movs	r3, #0
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802a:	e154      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e150      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e14c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e148      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008044:	2320      	movs	r3, #32
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e144      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800804c:	2340      	movs	r3, #64	@ 0x40
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e140      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008054:	2380      	movs	r3, #128	@ 0x80
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e13c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a41      	ldr	r2, [pc, #260]	@ (8008168 <UART_SetConfig+0x640>)
 8008062:	4293      	cmp	r3, r2
 8008064:	f040 8082 	bne.w	800816c <UART_SetConfig+0x644>
 8008068:	4b3c      	ldr	r3, [pc, #240]	@ (800815c <UART_SetConfig+0x634>)
 800806a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008070:	2b28      	cmp	r3, #40	@ 0x28
 8008072:	d86d      	bhi.n	8008150 <UART_SetConfig+0x628>
 8008074:	a201      	add	r2, pc, #4	@ (adr r2, 800807c <UART_SetConfig+0x554>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	08008121 	.word	0x08008121
 8008080:	08008151 	.word	0x08008151
 8008084:	08008151 	.word	0x08008151
 8008088:	08008151 	.word	0x08008151
 800808c:	08008151 	.word	0x08008151
 8008090:	08008151 	.word	0x08008151
 8008094:	08008151 	.word	0x08008151
 8008098:	08008151 	.word	0x08008151
 800809c:	08008129 	.word	0x08008129
 80080a0:	08008151 	.word	0x08008151
 80080a4:	08008151 	.word	0x08008151
 80080a8:	08008151 	.word	0x08008151
 80080ac:	08008151 	.word	0x08008151
 80080b0:	08008151 	.word	0x08008151
 80080b4:	08008151 	.word	0x08008151
 80080b8:	08008151 	.word	0x08008151
 80080bc:	08008131 	.word	0x08008131
 80080c0:	08008151 	.word	0x08008151
 80080c4:	08008151 	.word	0x08008151
 80080c8:	08008151 	.word	0x08008151
 80080cc:	08008151 	.word	0x08008151
 80080d0:	08008151 	.word	0x08008151
 80080d4:	08008151 	.word	0x08008151
 80080d8:	08008151 	.word	0x08008151
 80080dc:	08008139 	.word	0x08008139
 80080e0:	08008151 	.word	0x08008151
 80080e4:	08008151 	.word	0x08008151
 80080e8:	08008151 	.word	0x08008151
 80080ec:	08008151 	.word	0x08008151
 80080f0:	08008151 	.word	0x08008151
 80080f4:	08008151 	.word	0x08008151
 80080f8:	08008151 	.word	0x08008151
 80080fc:	08008141 	.word	0x08008141
 8008100:	08008151 	.word	0x08008151
 8008104:	08008151 	.word	0x08008151
 8008108:	08008151 	.word	0x08008151
 800810c:	08008151 	.word	0x08008151
 8008110:	08008151 	.word	0x08008151
 8008114:	08008151 	.word	0x08008151
 8008118:	08008151 	.word	0x08008151
 800811c:	08008149 	.word	0x08008149
 8008120:	2301      	movs	r3, #1
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e0d6      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812e:	e0d2      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008136:	e0ce      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813e:	e0ca      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008140:	2320      	movs	r3, #32
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008146:	e0c6      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008148:	2340      	movs	r3, #64	@ 0x40
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814e:	e0c2      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008150:	2380      	movs	r3, #128	@ 0x80
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008156:	e0be      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008158:	40011400 	.word	0x40011400
 800815c:	58024400 	.word	0x58024400
 8008160:	40007800 	.word	0x40007800
 8008164:	40007c00 	.word	0x40007c00
 8008168:	40011800 	.word	0x40011800
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4aad      	ldr	r2, [pc, #692]	@ (8008428 <UART_SetConfig+0x900>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d176      	bne.n	8008264 <UART_SetConfig+0x73c>
 8008176:	4bad      	ldr	r3, [pc, #692]	@ (800842c <UART_SetConfig+0x904>)
 8008178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800817e:	2b28      	cmp	r3, #40	@ 0x28
 8008180:	d86c      	bhi.n	800825c <UART_SetConfig+0x734>
 8008182:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <UART_SetConfig+0x660>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	0800822d 	.word	0x0800822d
 800818c:	0800825d 	.word	0x0800825d
 8008190:	0800825d 	.word	0x0800825d
 8008194:	0800825d 	.word	0x0800825d
 8008198:	0800825d 	.word	0x0800825d
 800819c:	0800825d 	.word	0x0800825d
 80081a0:	0800825d 	.word	0x0800825d
 80081a4:	0800825d 	.word	0x0800825d
 80081a8:	08008235 	.word	0x08008235
 80081ac:	0800825d 	.word	0x0800825d
 80081b0:	0800825d 	.word	0x0800825d
 80081b4:	0800825d 	.word	0x0800825d
 80081b8:	0800825d 	.word	0x0800825d
 80081bc:	0800825d 	.word	0x0800825d
 80081c0:	0800825d 	.word	0x0800825d
 80081c4:	0800825d 	.word	0x0800825d
 80081c8:	0800823d 	.word	0x0800823d
 80081cc:	0800825d 	.word	0x0800825d
 80081d0:	0800825d 	.word	0x0800825d
 80081d4:	0800825d 	.word	0x0800825d
 80081d8:	0800825d 	.word	0x0800825d
 80081dc:	0800825d 	.word	0x0800825d
 80081e0:	0800825d 	.word	0x0800825d
 80081e4:	0800825d 	.word	0x0800825d
 80081e8:	08008245 	.word	0x08008245
 80081ec:	0800825d 	.word	0x0800825d
 80081f0:	0800825d 	.word	0x0800825d
 80081f4:	0800825d 	.word	0x0800825d
 80081f8:	0800825d 	.word	0x0800825d
 80081fc:	0800825d 	.word	0x0800825d
 8008200:	0800825d 	.word	0x0800825d
 8008204:	0800825d 	.word	0x0800825d
 8008208:	0800824d 	.word	0x0800824d
 800820c:	0800825d 	.word	0x0800825d
 8008210:	0800825d 	.word	0x0800825d
 8008214:	0800825d 	.word	0x0800825d
 8008218:	0800825d 	.word	0x0800825d
 800821c:	0800825d 	.word	0x0800825d
 8008220:	0800825d 	.word	0x0800825d
 8008224:	0800825d 	.word	0x0800825d
 8008228:	08008255 	.word	0x08008255
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008232:	e050      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008234:	2304      	movs	r3, #4
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e04c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800823c:	2308      	movs	r3, #8
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e048      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008244:	2310      	movs	r3, #16
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e044      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800824c:	2320      	movs	r3, #32
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e040      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008254:	2340      	movs	r3, #64	@ 0x40
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e03c      	b.n	80082d6 <UART_SetConfig+0x7ae>
 800825c:	2380      	movs	r3, #128	@ 0x80
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e038      	b.n	80082d6 <UART_SetConfig+0x7ae>
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a71      	ldr	r2, [pc, #452]	@ (8008430 <UART_SetConfig+0x908>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d130      	bne.n	80082d0 <UART_SetConfig+0x7a8>
 800826e:	4b6f      	ldr	r3, [pc, #444]	@ (800842c <UART_SetConfig+0x904>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	2b05      	cmp	r3, #5
 8008278:	d826      	bhi.n	80082c8 <UART_SetConfig+0x7a0>
 800827a:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <UART_SetConfig+0x758>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	08008299 	.word	0x08008299
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082a9 	.word	0x080082a9
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	2302      	movs	r3, #2
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e01a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e016      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e012      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e00e      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082b8:	2320      	movs	r3, #32
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e00a      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082c0:	2340      	movs	r3, #64	@ 0x40
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e006      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082c8:	2380      	movs	r3, #128	@ 0x80
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e002      	b.n	80082d6 <UART_SetConfig+0x7ae>
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a55      	ldr	r2, [pc, #340]	@ (8008430 <UART_SetConfig+0x908>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	f040 80f8 	bne.w	80084d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	dc46      	bgt.n	8008378 <UART_SetConfig+0x850>
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	db75      	blt.n	80083da <UART_SetConfig+0x8b2>
 80082ee:	3b02      	subs	r3, #2
 80082f0:	2b1e      	cmp	r3, #30
 80082f2:	d872      	bhi.n	80083da <UART_SetConfig+0x8b2>
 80082f4:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x7d4>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	0800837f 	.word	0x0800837f
 8008300:	080083db 	.word	0x080083db
 8008304:	08008387 	.word	0x08008387
 8008308:	080083db 	.word	0x080083db
 800830c:	080083db 	.word	0x080083db
 8008310:	080083db 	.word	0x080083db
 8008314:	08008397 	.word	0x08008397
 8008318:	080083db 	.word	0x080083db
 800831c:	080083db 	.word	0x080083db
 8008320:	080083db 	.word	0x080083db
 8008324:	080083db 	.word	0x080083db
 8008328:	080083db 	.word	0x080083db
 800832c:	080083db 	.word	0x080083db
 8008330:	080083db 	.word	0x080083db
 8008334:	080083a7 	.word	0x080083a7
 8008338:	080083db 	.word	0x080083db
 800833c:	080083db 	.word	0x080083db
 8008340:	080083db 	.word	0x080083db
 8008344:	080083db 	.word	0x080083db
 8008348:	080083db 	.word	0x080083db
 800834c:	080083db 	.word	0x080083db
 8008350:	080083db 	.word	0x080083db
 8008354:	080083db 	.word	0x080083db
 8008358:	080083db 	.word	0x080083db
 800835c:	080083db 	.word	0x080083db
 8008360:	080083db 	.word	0x080083db
 8008364:	080083db 	.word	0x080083db
 8008368:	080083db 	.word	0x080083db
 800836c:	080083db 	.word	0x080083db
 8008370:	080083db 	.word	0x080083db
 8008374:	080083cd 	.word	0x080083cd
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	d02a      	beq.n	80083d2 <UART_SetConfig+0x8aa>
 800837c:	e02d      	b.n	80083da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800837e:	f7fe fa91 	bl	80068a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008384:	e02f      	b.n	80083e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe faa0 	bl	80068d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008394:	e027      	b.n	80083e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fbec 	bl	8006b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a4:	e01f      	b.n	80083e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a6:	4b21      	ldr	r3, [pc, #132]	@ (800842c <UART_SetConfig+0x904>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083b2:	4b1e      	ldr	r3, [pc, #120]	@ (800842c <UART_SetConfig+0x904>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008434 <UART_SetConfig+0x90c>)
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083c4:	e00f      	b.n	80083e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <UART_SetConfig+0x90c>)
 80083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ca:	e00c      	b.n	80083e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <UART_SetConfig+0x910>)
 80083ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d0:	e009      	b.n	80083e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d8:	e005      	b.n	80083e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 81ee 	beq.w	80087ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f2:	4a12      	ldr	r2, [pc, #72]	@ (800843c <UART_SetConfig+0x914>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008400:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	4413      	add	r3, r2
 800840c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840e:	429a      	cmp	r2, r3
 8008410:	d305      	bcc.n	800841e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800841a:	429a      	cmp	r2, r3
 800841c:	d910      	bls.n	8008440 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008424:	e1d1      	b.n	80087ca <UART_SetConfig+0xca2>
 8008426:	bf00      	nop
 8008428:	40011c00 	.word	0x40011c00
 800842c:	58024400 	.word	0x58024400
 8008430:	58000c00 	.word	0x58000c00
 8008434:	03d09000 	.word	0x03d09000
 8008438:	003d0900 	.word	0x003d0900
 800843c:	0800ace8 	.word	0x0800ace8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008442:	2200      	movs	r2, #0
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	60fa      	str	r2, [r7, #12]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	4ac0      	ldr	r2, [pc, #768]	@ (8008750 <UART_SetConfig+0xc28>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	b29b      	uxth	r3, r3
 8008454:	2200      	movs	r2, #0
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008462:	f7f7 ff95 	bl	8000390 <__aeabi_uldivmod>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	020b      	lsls	r3, r1, #8
 8008478:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800847c:	0202      	lsls	r2, r0, #8
 800847e:	6979      	ldr	r1, [r7, #20]
 8008480:	6849      	ldr	r1, [r1, #4]
 8008482:	0849      	lsrs	r1, r1, #1
 8008484:	2000      	movs	r0, #0
 8008486:	460c      	mov	r4, r1
 8008488:	4605      	mov	r5, r0
 800848a:	eb12 0804 	adds.w	r8, r2, r4
 800848e:	eb43 0905 	adc.w	r9, r3, r5
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	469a      	mov	sl, r3
 800849a:	4693      	mov	fp, r2
 800849c:	4652      	mov	r2, sl
 800849e:	465b      	mov	r3, fp
 80084a0:	4640      	mov	r0, r8
 80084a2:	4649      	mov	r1, r9
 80084a4:	f7f7 ff74 	bl	8000390 <__aeabi_uldivmod>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4613      	mov	r3, r2
 80084ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084b6:	d308      	bcc.n	80084ca <UART_SetConfig+0x9a2>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084be:	d204      	bcs.n	80084ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084c6:	60da      	str	r2, [r3, #12]
 80084c8:	e17f      	b.n	80087ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084d0:	e17b      	b.n	80087ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084da:	f040 80bd 	bne.w	8008658 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80084de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	dc48      	bgt.n	8008578 <UART_SetConfig+0xa50>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	db7b      	blt.n	80085e2 <UART_SetConfig+0xaba>
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d879      	bhi.n	80085e2 <UART_SetConfig+0xaba>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <UART_SetConfig+0x9cc>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	0800857f 	.word	0x0800857f
 80084f8:	08008587 	.word	0x08008587
 80084fc:	080085e3 	.word	0x080085e3
 8008500:	080085e3 	.word	0x080085e3
 8008504:	0800858f 	.word	0x0800858f
 8008508:	080085e3 	.word	0x080085e3
 800850c:	080085e3 	.word	0x080085e3
 8008510:	080085e3 	.word	0x080085e3
 8008514:	0800859f 	.word	0x0800859f
 8008518:	080085e3 	.word	0x080085e3
 800851c:	080085e3 	.word	0x080085e3
 8008520:	080085e3 	.word	0x080085e3
 8008524:	080085e3 	.word	0x080085e3
 8008528:	080085e3 	.word	0x080085e3
 800852c:	080085e3 	.word	0x080085e3
 8008530:	080085e3 	.word	0x080085e3
 8008534:	080085af 	.word	0x080085af
 8008538:	080085e3 	.word	0x080085e3
 800853c:	080085e3 	.word	0x080085e3
 8008540:	080085e3 	.word	0x080085e3
 8008544:	080085e3 	.word	0x080085e3
 8008548:	080085e3 	.word	0x080085e3
 800854c:	080085e3 	.word	0x080085e3
 8008550:	080085e3 	.word	0x080085e3
 8008554:	080085e3 	.word	0x080085e3
 8008558:	080085e3 	.word	0x080085e3
 800855c:	080085e3 	.word	0x080085e3
 8008560:	080085e3 	.word	0x080085e3
 8008564:	080085e3 	.word	0x080085e3
 8008568:	080085e3 	.word	0x080085e3
 800856c:	080085e3 	.word	0x080085e3
 8008570:	080085e3 	.word	0x080085e3
 8008574:	080085d5 	.word	0x080085d5
 8008578:	2b40      	cmp	r3, #64	@ 0x40
 800857a:	d02e      	beq.n	80085da <UART_SetConfig+0xab2>
 800857c:	e031      	b.n	80085e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800857e:	f7fc ffa7 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8008582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008584:	e033      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008586:	f7fc ffb9 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 800858a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800858c:	e02f      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe f99c 	bl	80068d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800859c:	e027      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fae8 	bl	8006b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ac:	e01f      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ae:	4b69      	ldr	r3, [pc, #420]	@ (8008754 <UART_SetConfig+0xc2c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ba:	4b66      	ldr	r3, [pc, #408]	@ (8008754 <UART_SetConfig+0xc2c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	4a64      	ldr	r2, [pc, #400]	@ (8008758 <UART_SetConfig+0xc30>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085cc:	e00f      	b.n	80085ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80085ce:	4b62      	ldr	r3, [pc, #392]	@ (8008758 <UART_SetConfig+0xc30>)
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d2:	e00c      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085d4:	4b61      	ldr	r3, [pc, #388]	@ (800875c <UART_SetConfig+0xc34>)
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e009      	b.n	80085ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e005      	b.n	80085ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80ea 	beq.w	80087ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fa:	4a55      	ldr	r2, [pc, #340]	@ (8008750 <UART_SetConfig+0xc28>)
 80085fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008600:	461a      	mov	r2, r3
 8008602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008604:	fbb3 f3f2 	udiv	r3, r3, r2
 8008608:	005a      	lsls	r2, r3, #1
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	441a      	add	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	fbb2 f3f3 	udiv	r3, r2, r3
 800861a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	2b0f      	cmp	r3, #15
 8008620:	d916      	bls.n	8008650 <UART_SetConfig+0xb28>
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008628:	d212      	bcs.n	8008650 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	b29b      	uxth	r3, r3
 800862e:	f023 030f 	bic.w	r3, r3, #15
 8008632:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	b29b      	uxth	r3, r3
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	b29a      	uxth	r2, r3
 8008640:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008642:	4313      	orrs	r3, r2
 8008644:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	e0bc      	b.n	80087ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008656:	e0b8      	b.n	80087ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008658:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800865c:	2b20      	cmp	r3, #32
 800865e:	dc4b      	bgt.n	80086f8 <UART_SetConfig+0xbd0>
 8008660:	2b00      	cmp	r3, #0
 8008662:	f2c0 8087 	blt.w	8008774 <UART_SetConfig+0xc4c>
 8008666:	2b20      	cmp	r3, #32
 8008668:	f200 8084 	bhi.w	8008774 <UART_SetConfig+0xc4c>
 800866c:	a201      	add	r2, pc, #4	@ (adr r2, 8008674 <UART_SetConfig+0xb4c>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008707 	.word	0x08008707
 800867c:	08008775 	.word	0x08008775
 8008680:	08008775 	.word	0x08008775
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008775 	.word	0x08008775
 800868c:	08008775 	.word	0x08008775
 8008690:	08008775 	.word	0x08008775
 8008694:	0800871f 	.word	0x0800871f
 8008698:	08008775 	.word	0x08008775
 800869c:	08008775 	.word	0x08008775
 80086a0:	08008775 	.word	0x08008775
 80086a4:	08008775 	.word	0x08008775
 80086a8:	08008775 	.word	0x08008775
 80086ac:	08008775 	.word	0x08008775
 80086b0:	08008775 	.word	0x08008775
 80086b4:	0800872f 	.word	0x0800872f
 80086b8:	08008775 	.word	0x08008775
 80086bc:	08008775 	.word	0x08008775
 80086c0:	08008775 	.word	0x08008775
 80086c4:	08008775 	.word	0x08008775
 80086c8:	08008775 	.word	0x08008775
 80086cc:	08008775 	.word	0x08008775
 80086d0:	08008775 	.word	0x08008775
 80086d4:	08008775 	.word	0x08008775
 80086d8:	08008775 	.word	0x08008775
 80086dc:	08008775 	.word	0x08008775
 80086e0:	08008775 	.word	0x08008775
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008775 	.word	0x08008775
 80086ec:	08008775 	.word	0x08008775
 80086f0:	08008775 	.word	0x08008775
 80086f4:	08008767 	.word	0x08008767
 80086f8:	2b40      	cmp	r3, #64	@ 0x40
 80086fa:	d037      	beq.n	800876c <UART_SetConfig+0xc44>
 80086fc:	e03a      	b.n	8008774 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086fe:	f7fc fee7 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8008702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008704:	e03c      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008706:	f7fc fef9 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 800870a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800870c:	e038      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe f8dc 	bl	80068d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871c:	e030      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871e:	f107 0318 	add.w	r3, r7, #24
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fa28 	bl	8006b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872c:	e028      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872e:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <UART_SetConfig+0xc2c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d012      	beq.n	8008760 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800873a:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <UART_SetConfig+0xc2c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <UART_SetConfig+0xc30>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800874c:	e018      	b.n	8008780 <UART_SetConfig+0xc58>
 800874e:	bf00      	nop
 8008750:	0800ace8 	.word	0x0800ace8
 8008754:	58024400 	.word	0x58024400
 8008758:	03d09000 	.word	0x03d09000
 800875c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008760:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <UART_SetConfig+0xccc>)
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008764:	e00c      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008766:	4b24      	ldr	r3, [pc, #144]	@ (80087f8 <UART_SetConfig+0xcd0>)
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876a:	e009      	b.n	8008780 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008772:	e005      	b.n	8008780 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800877e:	bf00      	nop
    }

    if (pclk != 0U)
 8008780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d021      	beq.n	80087ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878a:	4a1c      	ldr	r2, [pc, #112]	@ (80087fc <UART_SetConfig+0xcd4>)
 800878c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008790:	461a      	mov	r2, r3
 8008792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008794:	fbb3 f2f2 	udiv	r2, r3, r2
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	085b      	lsrs	r3, r3, #1
 800879e:	441a      	add	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	2b0f      	cmp	r3, #15
 80087ae:	d909      	bls.n	80087c4 <UART_SetConfig+0xc9c>
 80087b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b6:	d205      	bcs.n	80087c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	e002      	b.n	80087ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2200      	movs	r2, #0
 80087de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3748      	adds	r7, #72	@ 0x48
 80087ee:	46bd      	mov	sp, r7
 80087f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	003d0900 	.word	0x003d0900
 80087fc:	0800ace8 	.word	0x0800ace8

08008800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01a      	beq.n	8008916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088fe:	d10a      	bne.n	8008916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b098      	sub	sp, #96	@ 0x60
 8008948:	af02      	add	r7, sp, #8
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008954:	f7fa fcea 	bl	800332c <HAL_GetTick>
 8008958:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b08      	cmp	r3, #8
 8008966:	d12f      	bne.n	80089c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008970:	2200      	movs	r2, #0
 8008972:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f88e 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008996:	653b      	str	r3, [r7, #80]	@ 0x50
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e063      	b.n	8008a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d149      	bne.n	8008a6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089de:	2200      	movs	r2, #0
 80089e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f857 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d03c      	beq.n	8008a6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	623b      	str	r3, [r7, #32]
   return(result);
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a42:	61fa      	str	r2, [r7, #28]
 8008a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	69b9      	ldr	r1, [r7, #24]
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e012      	b.n	8008a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3758      	adds	r7, #88	@ 0x58
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa8:	e04f      	b.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d04b      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7fa fc3b 	bl	800332c <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e04e      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d037      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b80      	cmp	r3, #128	@ 0x80
 8008ade:	d034      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b40      	cmp	r3, #64	@ 0x40
 8008ae4:	d031      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d110      	bne.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2208      	movs	r2, #8
 8008afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f95b 	bl	8008db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2208      	movs	r2, #8
 8008b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e029      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b24:	d111      	bne.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f941 	bl	8008db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e00f      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69da      	ldr	r2, [r3, #28]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4013      	ands	r3, r2
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	bf0c      	ite	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	2300      	movne	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d0a0      	beq.n	8008aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b0a3      	sub	sp, #140	@ 0x8c
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba6:	d10e      	bne.n	8008bc6 <UART_Start_Receive_IT+0x52>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d105      	bne.n	8008bbc <UART_Start_Receive_IT+0x48>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bba:	e02d      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	22ff      	movs	r2, #255	@ 0xff
 8008bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bc4:	e028      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10d      	bne.n	8008bea <UART_Start_Receive_IT+0x76>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <UART_Start_Receive_IT+0x6c>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	22ff      	movs	r2, #255	@ 0xff
 8008bda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bde:	e01b      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	227f      	movs	r2, #127	@ 0x7f
 8008be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008be8:	e016      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bf2:	d10d      	bne.n	8008c10 <UART_Start_Receive_IT+0x9c>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <UART_Start_Receive_IT+0x92>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	227f      	movs	r2, #127	@ 0x7f
 8008c00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c04:	e008      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	223f      	movs	r2, #63	@ 0x3f
 8008c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c0e:	e003      	b.n	8008c18 <UART_Start_Receive_IT+0xa4>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2222      	movs	r2, #34	@ 0x22
 8008c24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c4c:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e3      	bne.n	8008c28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c68:	d14f      	bne.n	8008d0a <UART_Start_Receive_IT+0x196>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d349      	bcc.n	8008d0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7e:	d107      	bne.n	8008c90 <UART_Start_Receive_IT+0x11c>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4a47      	ldr	r2, [pc, #284]	@ (8008da8 <UART_Start_Receive_IT+0x234>)
 8008c8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c8e:	e002      	b.n	8008c96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4a46      	ldr	r2, [pc, #280]	@ (8008dac <UART_Start_Receive_IT+0x238>)
 8008c94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d01a      	beq.n	8008cd4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cc2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e4      	bne.n	8008c9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cf4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008cf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e5      	bne.n	8008cd4 <UART_Start_Receive_IT+0x160>
 8008d08:	e046      	b.n	8008d98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d12:	d107      	bne.n	8008d24 <UART_Start_Receive_IT+0x1b0>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4a24      	ldr	r2, [pc, #144]	@ (8008db0 <UART_Start_Receive_IT+0x23c>)
 8008d20:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d22:	e002      	b.n	8008d2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a23      	ldr	r2, [pc, #140]	@ (8008db4 <UART_Start_Receive_IT+0x240>)
 8008d28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d019      	beq.n	8008d66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d42:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d46:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d52:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e6      	bne.n	8008d32 <UART_Start_Receive_IT+0x1be>
 8008d64:	e018      	b.n	8008d98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	613b      	str	r3, [r7, #16]
   return(result);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f043 0320 	orr.w	r3, r3, #32
 8008d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d84:	623b      	str	r3, [r7, #32]
 8008d86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	69f9      	ldr	r1, [r7, #28]
 8008d8a:	6a3a      	ldr	r2, [r7, #32]
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e6      	bne.n	8008d66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	378c      	adds	r7, #140	@ 0x8c
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	080095d5 	.word	0x080095d5
 8008dac:	08009271 	.word	0x08009271
 8008db0:	080090b9 	.word	0x080090b9
 8008db4:	08008f01 	.word	0x08008f01

08008db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b095      	sub	sp, #84	@ 0x54
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8008de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	4b1e      	ldr	r3, [pc, #120]	@ (8008e80 <UART_EndRxTransfer+0xc8>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d118      	bne.n	8008e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f023 0310 	bic.w	r3, r3, #16
 8008e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6979      	ldr	r1, [r7, #20]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	613b      	str	r3, [r7, #16]
   return(result);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e6      	bne.n	8008e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e74:	bf00      	nop
 8008e76:	3754      	adds	r7, #84	@ 0x54
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	effffffe 	.word	0xeffffffe

08008e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7fe fe2e 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6979      	ldr	r1, [r7, #20]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	613b      	str	r3, [r7, #16]
   return(result);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e6      	bne.n	8008eb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fe fdf9 	bl	8007ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef6:	bf00      	nop
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b09c      	sub	sp, #112	@ 0x70
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f18:	2b22      	cmp	r3, #34	@ 0x22
 8008f1a:	f040 80be 	bne.w	800909a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f2c:	b2d9      	uxtb	r1, r3
 8008f2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	400a      	ands	r2, r1
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f040 80a1 	bne.w	80090aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e6      	bne.n	8008f68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a33      	ldr	r2, [pc, #204]	@ (80090b4 <UART_RxISR_8BIT+0x1b4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d01f      	beq.n	800902c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d018      	beq.n	800902c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	623b      	str	r3, [r7, #32]
   return(result);
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800900e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
 800901a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009030:	2b01      	cmp	r3, #1
 8009032:	d12e      	bne.n	8009092 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	60fb      	str	r3, [r7, #12]
   return(result);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0310 	bic.w	r3, r3, #16
 800904e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	69b9      	ldr	r1, [r7, #24]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	617b      	str	r3, [r7, #20]
   return(result);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e6      	bne.n	800903a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b10      	cmp	r3, #16
 8009078:	d103      	bne.n	8009082 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2210      	movs	r2, #16
 8009080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7fe fd40 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009090:	e00b      	b.n	80090aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7f7 fc6e 	bl	8000974 <HAL_UART_RxCpltCallback>
}
 8009098:	e007      	b.n	80090aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699a      	ldr	r2, [r3, #24]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f042 0208 	orr.w	r2, r2, #8
 80090a8:	619a      	str	r2, [r3, #24]
}
 80090aa:	bf00      	nop
 80090ac:	3770      	adds	r7, #112	@ 0x70
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	58000c00 	.word	0x58000c00

080090b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b09c      	sub	sp, #112	@ 0x70
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090d0:	2b22      	cmp	r3, #34	@ 0x22
 80090d2:	f040 80be 	bne.w	8009252 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80090ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80090ee:	4013      	ands	r3, r2
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	f040 80a1 	bne.w	8009262 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800912e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009134:	667b      	str	r3, [r7, #100]	@ 0x64
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800913e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009140:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009144:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800914c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e6      	bne.n	8009120 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	663b      	str	r3, [r7, #96]	@ 0x60
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009172:	643a      	str	r2, [r7, #64]	@ 0x40
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e5      	bne.n	8009152 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2220      	movs	r2, #32
 800918a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a33      	ldr	r2, [pc, #204]	@ (800926c <UART_RxISR_16BIT+0x1b4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d01f      	beq.n	80091e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d018      	beq.n	80091e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e6      	bne.n	80091b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d12e      	bne.n	800924a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f023 0310 	bic.w	r3, r3, #16
 8009206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6979      	ldr	r1, [r7, #20]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	613b      	str	r3, [r7, #16]
   return(result);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d103      	bne.n	800923a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2210      	movs	r2, #16
 8009238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe fc64 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009248:	e00b      	b.n	8009262 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7f7 fb92 	bl	8000974 <HAL_UART_RxCpltCallback>
}
 8009250:	e007      	b.n	8009262 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	699a      	ldr	r2, [r3, #24]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0208 	orr.w	r2, r2, #8
 8009260:	619a      	str	r2, [r3, #24]
}
 8009262:	bf00      	nop
 8009264:	3770      	adds	r7, #112	@ 0x70
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	58000c00 	.word	0x58000c00

08009270 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b0ac      	sub	sp, #176	@ 0xb0
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800927e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092a6:	2b22      	cmp	r3, #34	@ 0x22
 80092a8:	f040 8181 	bne.w	80095ae <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092b6:	e124      	b.n	8009502 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80092c6:	b2d9      	uxtb	r1, r3
 80092c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d2:	400a      	ands	r2, r1
 80092d4:	b2d2      	uxtb	r2, r2
 80092d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b00      	cmp	r3, #0
 8009308:	d053      	beq.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800930a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d011      	beq.n	800933a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800931a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2201      	movs	r2, #1
 8009328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009330:	f043 0201 	orr.w	r2, r3, #1
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800933a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d011      	beq.n	800936a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2202      	movs	r2, #2
 8009358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009360:	f043 0204 	orr.w	r2, r3, #4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800936a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d011      	beq.n	800939a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2204      	movs	r2, #4
 8009388:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009390:	f043 0202 	orr.w	r2, r3, #2
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7fe fba9 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 80a1 	bne.w	8009502 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80093ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80093e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80093f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e4      	bne.n	80093c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009406:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009408:	4b6f      	ldr	r3, [pc, #444]	@ (80095c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800940a:	4013      	ands	r3, r2
 800940c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3308      	adds	r3, #8
 8009416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800941a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800941c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009420:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a61      	ldr	r2, [pc, #388]	@ (80095cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d021      	beq.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01a      	beq.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800946a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800946e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800947c:	657b      	str	r3, [r7, #84]	@ 0x54
 800947e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009482:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800948a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e4      	bne.n	800945a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d130      	bne.n	80094fa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e4      	bne.n	800949e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f003 0310 	and.w	r3, r3, #16
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d103      	bne.n	80094ea <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2210      	movs	r2, #16
 80094e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe fb0c 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80094f8:	e00e      	b.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7f7 fa3a 	bl	8000974 <HAL_UART_RxCpltCallback>
        break;
 8009500:	e00a      	b.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009502:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009506:	2b00      	cmp	r3, #0
 8009508:	d006      	beq.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800950a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	f47f aed0 	bne.w	80092b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800951e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009522:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009526:	2b00      	cmp	r3, #0
 8009528:	d049      	beq.n	80095be <UART_RxISR_8BIT_FIFOEN+0x34e>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009530:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009534:	429a      	cmp	r2, r3
 8009536:	d242      	bcs.n	80095be <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	61fb      	str	r3, [r7, #28]
   return(result);
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800954e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800955c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800955e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e3      	bne.n	8009538 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a17      	ldr	r2, [pc, #92]	@ (80095d0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009574:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	60bb      	str	r3, [r7, #8]
   return(result);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f043 0320 	orr.w	r3, r3, #32
 800958a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6979      	ldr	r1, [r7, #20]
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	613b      	str	r3, [r7, #16]
   return(result);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e4      	bne.n	8009576 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ac:	e007      	b.n	80095be <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0208 	orr.w	r2, r2, #8
 80095bc:	619a      	str	r2, [r3, #24]
}
 80095be:	bf00      	nop
 80095c0:	37b0      	adds	r7, #176	@ 0xb0
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	effffffe 	.word	0xeffffffe
 80095cc:	58000c00 	.word	0x58000c00
 80095d0:	08008f01 	.word	0x08008f01

080095d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b0ae      	sub	sp, #184	@ 0xb8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800960a:	2b22      	cmp	r3, #34	@ 0x22
 800960c:	f040 8185 	bne.w	800991a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009616:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800961a:	e128      	b.n	800986e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800962e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009632:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009636:	4013      	ands	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800963e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009644:	1c9a      	adds	r2, r3, #2
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009650:	b29b      	uxth	r3, r3
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b00      	cmp	r3, #0
 8009670:	d053      	beq.n	800971a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800967e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00b      	beq.n	80096a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2201      	movs	r2, #1
 8009690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009698:	f043 0201 	orr.w	r2, r3, #1
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d011      	beq.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2202      	movs	r2, #2
 80096c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c8:	f043 0204 	orr.w	r2, r3, #4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2204      	movs	r2, #4
 80096f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f8:	f043 0202 	orr.w	r2, r3, #2
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fe f9f5 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	f040 80a3 	bne.w	800986e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800973c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800974a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800974e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800975c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e2      	bne.n	8009728 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009772:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009774:	4b6f      	ldr	r3, [pc, #444]	@ (8009934 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009776:	4013      	ands	r3, r2
 8009778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800978c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e3      	bne.n	8009762 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a61      	ldr	r2, [pc, #388]	@ (8009938 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d021      	beq.n	80097fc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01a      	beq.n	80097fc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e4      	bne.n	80097c6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009800:	2b01      	cmp	r3, #1
 8009802:	d130      	bne.n	8009866 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981a:	f023 0310 	bic.w	r3, r3, #16
 800981e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800982c:	647b      	str	r3, [r7, #68]	@ 0x44
 800982e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e4      	bne.n	800980a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b10      	cmp	r3, #16
 800984c:	d103      	bne.n	8009856 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2210      	movs	r2, #16
 8009854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe f956 	bl	8007b10 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009864:	e00e      	b.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7f7 f884 	bl	8000974 <HAL_UART_RxCpltCallback>
        break;
 800986c:	e00a      	b.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800986e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009872:	2b00      	cmp	r3, #0
 8009874:	d006      	beq.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8009876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	f47f aecc 	bne.w	800961c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800988a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800988e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009892:	2b00      	cmp	r3, #0
 8009894:	d049      	beq.n	800992a <UART_RxISR_16BIT_FIFOEN+0x356>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800989c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d242      	bcs.n	800992a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	623b      	str	r3, [r7, #32]
   return(result);
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80098c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80098ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e3      	bne.n	80098a4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a17      	ldr	r2, [pc, #92]	@ (800993c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80098e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f043 0320 	orr.w	r3, r3, #32
 80098f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	69b9      	ldr	r1, [r7, #24]
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	617b      	str	r3, [r7, #20]
   return(result);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e4      	bne.n	80098e2 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009918:	e007      	b.n	800992a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0208 	orr.w	r2, r2, #8
 8009928:	619a      	str	r2, [r3, #24]
}
 800992a:	bf00      	nop
 800992c:	37b8      	adds	r7, #184	@ 0xb8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	effffffe 	.word	0xeffffffe
 8009938:	58000c00 	.word	0x58000c00
 800993c:	080090b9 	.word	0x080090b9

08009940 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_UARTEx_DisableFifoMode+0x16>
 800998e:	2302      	movs	r3, #2
 8009990:	e027      	b.n	80099e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	@ 0x24
 800999e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d101      	bne.n	8009a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a02:	2302      	movs	r3, #2
 8009a04:	e02d      	b.n	8009a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2224      	movs	r2, #36	@ 0x24
 8009a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f850 	bl	8009ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e02d      	b.n	8009ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2224      	movs	r2, #36	@ 0x24
 8009a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f812 	bl	8009ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d108      	bne.n	8009b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b08:	e031      	b.n	8009b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b0a:	2310      	movs	r3, #16
 8009b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b0e:	2310      	movs	r3, #16
 8009b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	0e5b      	lsrs	r3, r3, #25
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	0f5b      	lsrs	r3, r3, #29
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 0307 	and.w	r3, r3, #7
 8009b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	7b3a      	ldrb	r2, [r7, #12]
 8009b36:	4911      	ldr	r1, [pc, #68]	@ (8009b7c <UARTEx_SetNbDataToProcess+0x94>)
 8009b38:	5c8a      	ldrb	r2, [r1, r2]
 8009b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b3e:	7b3a      	ldrb	r2, [r7, #12]
 8009b40:	490f      	ldr	r1, [pc, #60]	@ (8009b80 <UARTEx_SetNbDataToProcess+0x98>)
 8009b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	7b7a      	ldrb	r2, [r7, #13]
 8009b54:	4909      	ldr	r1, [pc, #36]	@ (8009b7c <UARTEx_SetNbDataToProcess+0x94>)
 8009b56:	5c8a      	ldrb	r2, [r1, r2]
 8009b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b5c:	7b7a      	ldrb	r2, [r7, #13]
 8009b5e:	4908      	ldr	r1, [pc, #32]	@ (8009b80 <UARTEx_SetNbDataToProcess+0x98>)
 8009b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b6e:	bf00      	nop
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	0800ad00 	.word	0x0800ad00
 8009b80:	0800ad08 	.word	0x0800ad08

08009b84 <std>:
 8009b84:	2300      	movs	r3, #0
 8009b86:	b510      	push	{r4, lr}
 8009b88:	4604      	mov	r4, r0
 8009b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b92:	6083      	str	r3, [r0, #8]
 8009b94:	8181      	strh	r1, [r0, #12]
 8009b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b98:	81c2      	strh	r2, [r0, #14]
 8009b9a:	6183      	str	r3, [r0, #24]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	305c      	adds	r0, #92	@ 0x5c
 8009ba2:	f000 f9f9 	bl	8009f98 <memset>
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bdc <std+0x58>)
 8009ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009baa:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <std+0x5c>)
 8009bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bae:	4b0d      	ldr	r3, [pc, #52]	@ (8009be4 <std+0x60>)
 8009bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <std+0x64>)
 8009bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <std+0x68>)
 8009bb8:	6224      	str	r4, [r4, #32]
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d006      	beq.n	8009bcc <std+0x48>
 8009bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bc2:	4294      	cmp	r4, r2
 8009bc4:	d002      	beq.n	8009bcc <std+0x48>
 8009bc6:	33d0      	adds	r3, #208	@ 0xd0
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d105      	bne.n	8009bd8 <std+0x54>
 8009bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd4:	f000 ba58 	b.w	800a088 <__retarget_lock_init_recursive>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	08009de9 	.word	0x08009de9
 8009be0:	08009e0b 	.word	0x08009e0b
 8009be4:	08009e43 	.word	0x08009e43
 8009be8:	08009e67 	.word	0x08009e67
 8009bec:	24000540 	.word	0x24000540

08009bf0 <stdio_exit_handler>:
 8009bf0:	4a02      	ldr	r2, [pc, #8]	@ (8009bfc <stdio_exit_handler+0xc>)
 8009bf2:	4903      	ldr	r1, [pc, #12]	@ (8009c00 <stdio_exit_handler+0x10>)
 8009bf4:	4803      	ldr	r0, [pc, #12]	@ (8009c04 <stdio_exit_handler+0x14>)
 8009bf6:	f000 b869 	b.w	8009ccc <_fwalk_sglue>
 8009bfa:	bf00      	nop
 8009bfc:	24000010 	.word	0x24000010
 8009c00:	0800a945 	.word	0x0800a945
 8009c04:	24000020 	.word	0x24000020

08009c08 <cleanup_stdio>:
 8009c08:	6841      	ldr	r1, [r0, #4]
 8009c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c3c <cleanup_stdio+0x34>)
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	4604      	mov	r4, r0
 8009c12:	d001      	beq.n	8009c18 <cleanup_stdio+0x10>
 8009c14:	f000 fe96 	bl	800a944 <_fflush_r>
 8009c18:	68a1      	ldr	r1, [r4, #8]
 8009c1a:	4b09      	ldr	r3, [pc, #36]	@ (8009c40 <cleanup_stdio+0x38>)
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	d002      	beq.n	8009c26 <cleanup_stdio+0x1e>
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fe8f 	bl	800a944 <_fflush_r>
 8009c26:	68e1      	ldr	r1, [r4, #12]
 8009c28:	4b06      	ldr	r3, [pc, #24]	@ (8009c44 <cleanup_stdio+0x3c>)
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	d004      	beq.n	8009c38 <cleanup_stdio+0x30>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c34:	f000 be86 	b.w	800a944 <_fflush_r>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	24000540 	.word	0x24000540
 8009c40:	240005a8 	.word	0x240005a8
 8009c44:	24000610 	.word	0x24000610

08009c48 <global_stdio_init.part.0>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c78 <global_stdio_init.part.0+0x30>)
 8009c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8009c7c <global_stdio_init.part.0+0x34>)
 8009c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009c80 <global_stdio_init.part.0+0x38>)
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	2200      	movs	r2, #0
 8009c56:	2104      	movs	r1, #4
 8009c58:	f7ff ff94 	bl	8009b84 <std>
 8009c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c60:	2201      	movs	r2, #1
 8009c62:	2109      	movs	r1, #9
 8009c64:	f7ff ff8e 	bl	8009b84 <std>
 8009c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c72:	2112      	movs	r1, #18
 8009c74:	f7ff bf86 	b.w	8009b84 <std>
 8009c78:	24000678 	.word	0x24000678
 8009c7c:	24000540 	.word	0x24000540
 8009c80:	08009bf1 	.word	0x08009bf1

08009c84 <__sfp_lock_acquire>:
 8009c84:	4801      	ldr	r0, [pc, #4]	@ (8009c8c <__sfp_lock_acquire+0x8>)
 8009c86:	f000 ba00 	b.w	800a08a <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	24000681 	.word	0x24000681

08009c90 <__sfp_lock_release>:
 8009c90:	4801      	ldr	r0, [pc, #4]	@ (8009c98 <__sfp_lock_release+0x8>)
 8009c92:	f000 b9fb 	b.w	800a08c <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	24000681 	.word	0x24000681

08009c9c <__sinit>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	f7ff fff0 	bl	8009c84 <__sfp_lock_acquire>
 8009ca4:	6a23      	ldr	r3, [r4, #32]
 8009ca6:	b11b      	cbz	r3, 8009cb0 <__sinit+0x14>
 8009ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cac:	f7ff bff0 	b.w	8009c90 <__sfp_lock_release>
 8009cb0:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <__sinit+0x28>)
 8009cb2:	6223      	str	r3, [r4, #32]
 8009cb4:	4b04      	ldr	r3, [pc, #16]	@ (8009cc8 <__sinit+0x2c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f5      	bne.n	8009ca8 <__sinit+0xc>
 8009cbc:	f7ff ffc4 	bl	8009c48 <global_stdio_init.part.0>
 8009cc0:	e7f2      	b.n	8009ca8 <__sinit+0xc>
 8009cc2:	bf00      	nop
 8009cc4:	08009c09 	.word	0x08009c09
 8009cc8:	24000678 	.word	0x24000678

08009ccc <_fwalk_sglue>:
 8009ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	4688      	mov	r8, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ce0:	d505      	bpl.n	8009cee <_fwalk_sglue+0x22>
 8009ce2:	6824      	ldr	r4, [r4, #0]
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	d1f7      	bne.n	8009cd8 <_fwalk_sglue+0xc>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d907      	bls.n	8009d04 <_fwalk_sglue+0x38>
 8009cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	d003      	beq.n	8009d04 <_fwalk_sglue+0x38>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4638      	mov	r0, r7
 8009d00:	47c0      	blx	r8
 8009d02:	4306      	orrs	r6, r0
 8009d04:	3568      	adds	r5, #104	@ 0x68
 8009d06:	e7e9      	b.n	8009cdc <_fwalk_sglue+0x10>

08009d08 <iprintf>:
 8009d08:	b40f      	push	{r0, r1, r2, r3}
 8009d0a:	b507      	push	{r0, r1, r2, lr}
 8009d0c:	4906      	ldr	r1, [pc, #24]	@ (8009d28 <iprintf+0x20>)
 8009d0e:	ab04      	add	r3, sp, #16
 8009d10:	6808      	ldr	r0, [r1, #0]
 8009d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d16:	6881      	ldr	r1, [r0, #8]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f000 fae9 	bl	800a2f0 <_vfiprintf_r>
 8009d1e:	b003      	add	sp, #12
 8009d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d24:	b004      	add	sp, #16
 8009d26:	4770      	bx	lr
 8009d28:	2400001c 	.word	0x2400001c

08009d2c <_puts_r>:
 8009d2c:	6a03      	ldr	r3, [r0, #32]
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	6884      	ldr	r4, [r0, #8]
 8009d32:	4605      	mov	r5, r0
 8009d34:	460e      	mov	r6, r1
 8009d36:	b90b      	cbnz	r3, 8009d3c <_puts_r+0x10>
 8009d38:	f7ff ffb0 	bl	8009c9c <__sinit>
 8009d3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d3e:	07db      	lsls	r3, r3, #31
 8009d40:	d405      	bmi.n	8009d4e <_puts_r+0x22>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	0598      	lsls	r0, r3, #22
 8009d46:	d402      	bmi.n	8009d4e <_puts_r+0x22>
 8009d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4a:	f000 f99e 	bl	800a08a <__retarget_lock_acquire_recursive>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	0719      	lsls	r1, r3, #28
 8009d52:	d502      	bpl.n	8009d5a <_puts_r+0x2e>
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d135      	bne.n	8009dc6 <_puts_r+0x9a>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f000 f8c5 	bl	8009eec <__swsetup_r>
 8009d62:	b380      	cbz	r0, 8009dc6 <_puts_r+0x9a>
 8009d64:	f04f 35ff 	mov.w	r5, #4294967295
 8009d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_puts_r+0x4e>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	059b      	lsls	r3, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_puts_r+0x4e>
 8009d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d76:	f000 f989 	bl	800a08c <__retarget_lock_release_recursive>
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da04      	bge.n	8009d8c <_puts_r+0x60>
 8009d82:	69a2      	ldr	r2, [r4, #24]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	dc17      	bgt.n	8009db8 <_puts_r+0x8c>
 8009d88:	290a      	cmp	r1, #10
 8009d8a:	d015      	beq.n	8009db8 <_puts_r+0x8c>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	6022      	str	r2, [r4, #0]
 8009d92:	7019      	strb	r1, [r3, #0]
 8009d94:	68a3      	ldr	r3, [r4, #8]
 8009d96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	2900      	cmp	r1, #0
 8009da0:	d1ed      	bne.n	8009d7e <_puts_r+0x52>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da11      	bge.n	8009dca <_puts_r+0x9e>
 8009da6:	4622      	mov	r2, r4
 8009da8:	210a      	movs	r1, #10
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f85f 	bl	8009e6e <__swbuf_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	d0d7      	beq.n	8009d64 <_puts_r+0x38>
 8009db4:	250a      	movs	r5, #10
 8009db6:	e7d7      	b.n	8009d68 <_puts_r+0x3c>
 8009db8:	4622      	mov	r2, r4
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 f857 	bl	8009e6e <__swbuf_r>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d1e7      	bne.n	8009d94 <_puts_r+0x68>
 8009dc4:	e7ce      	b.n	8009d64 <_puts_r+0x38>
 8009dc6:	3e01      	subs	r6, #1
 8009dc8:	e7e4      	b.n	8009d94 <_puts_r+0x68>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e7ee      	b.n	8009db4 <_puts_r+0x88>
	...

08009dd8 <puts>:
 8009dd8:	4b02      	ldr	r3, [pc, #8]	@ (8009de4 <puts+0xc>)
 8009dda:	4601      	mov	r1, r0
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	f7ff bfa5 	b.w	8009d2c <_puts_r>
 8009de2:	bf00      	nop
 8009de4:	2400001c 	.word	0x2400001c

08009de8 <__sread>:
 8009de8:	b510      	push	{r4, lr}
 8009dea:	460c      	mov	r4, r1
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	f000 f8fc 	bl	8009fec <_read_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	bfab      	itete	ge
 8009df8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8009dfc:	181b      	addge	r3, r3, r0
 8009dfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e02:	bfac      	ite	ge
 8009e04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e06:	81a3      	strhlt	r3, [r4, #12]
 8009e08:	bd10      	pop	{r4, pc}

08009e0a <__swrite>:
 8009e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0e:	461f      	mov	r7, r3
 8009e10:	898b      	ldrh	r3, [r1, #12]
 8009e12:	05db      	lsls	r3, r3, #23
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	4616      	mov	r6, r2
 8009e1a:	d505      	bpl.n	8009e28 <__swrite+0x1e>
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	2302      	movs	r3, #2
 8009e22:	2200      	movs	r2, #0
 8009e24:	f000 f8d0 	bl	8009fc8 <_lseek_r>
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	4632      	mov	r2, r6
 8009e36:	463b      	mov	r3, r7
 8009e38:	4628      	mov	r0, r5
 8009e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	f000 b8e7 	b.w	800a010 <_write_r>

08009e42 <__sseek>:
 8009e42:	b510      	push	{r4, lr}
 8009e44:	460c      	mov	r4, r1
 8009e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4a:	f000 f8bd 	bl	8009fc8 <_lseek_r>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	bf15      	itete	ne
 8009e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e5e:	81a3      	strheq	r3, [r4, #12]
 8009e60:	bf18      	it	ne
 8009e62:	81a3      	strhne	r3, [r4, #12]
 8009e64:	bd10      	pop	{r4, pc}

08009e66 <__sclose>:
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 b89d 	b.w	8009fa8 <_close_r>

08009e6e <__swbuf_r>:
 8009e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e70:	460e      	mov	r6, r1
 8009e72:	4614      	mov	r4, r2
 8009e74:	4605      	mov	r5, r0
 8009e76:	b118      	cbz	r0, 8009e80 <__swbuf_r+0x12>
 8009e78:	6a03      	ldr	r3, [r0, #32]
 8009e7a:	b90b      	cbnz	r3, 8009e80 <__swbuf_r+0x12>
 8009e7c:	f7ff ff0e 	bl	8009c9c <__sinit>
 8009e80:	69a3      	ldr	r3, [r4, #24]
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	071a      	lsls	r2, r3, #28
 8009e88:	d501      	bpl.n	8009e8e <__swbuf_r+0x20>
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	b943      	cbnz	r3, 8009ea0 <__swbuf_r+0x32>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 f82b 	bl	8009eec <__swsetup_r>
 8009e96:	b118      	cbz	r0, 8009ea0 <__swbuf_r+0x32>
 8009e98:	f04f 37ff 	mov.w	r7, #4294967295
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	6922      	ldr	r2, [r4, #16]
 8009ea4:	1a98      	subs	r0, r3, r2
 8009ea6:	6963      	ldr	r3, [r4, #20]
 8009ea8:	b2f6      	uxtb	r6, r6
 8009eaa:	4283      	cmp	r3, r0
 8009eac:	4637      	mov	r7, r6
 8009eae:	dc05      	bgt.n	8009ebc <__swbuf_r+0x4e>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 fd46 	bl	800a944 <_fflush_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1ed      	bne.n	8009e98 <__swbuf_r+0x2a>
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	701e      	strb	r6, [r3, #0]
 8009eca:	6962      	ldr	r2, [r4, #20]
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d004      	beq.n	8009edc <__swbuf_r+0x6e>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	07db      	lsls	r3, r3, #31
 8009ed6:	d5e1      	bpl.n	8009e9c <__swbuf_r+0x2e>
 8009ed8:	2e0a      	cmp	r6, #10
 8009eda:	d1df      	bne.n	8009e9c <__swbuf_r+0x2e>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fd30 	bl	800a944 <_fflush_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0d9      	beq.n	8009e9c <__swbuf_r+0x2e>
 8009ee8:	e7d6      	b.n	8009e98 <__swbuf_r+0x2a>
	...

08009eec <__swsetup_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4b29      	ldr	r3, [pc, #164]	@ (8009f94 <__swsetup_r+0xa8>)
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	b118      	cbz	r0, 8009f00 <__swsetup_r+0x14>
 8009ef8:	6a03      	ldr	r3, [r0, #32]
 8009efa:	b90b      	cbnz	r3, 8009f00 <__swsetup_r+0x14>
 8009efc:	f7ff fece 	bl	8009c9c <__sinit>
 8009f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f04:	0719      	lsls	r1, r3, #28
 8009f06:	d422      	bmi.n	8009f4e <__swsetup_r+0x62>
 8009f08:	06da      	lsls	r2, r3, #27
 8009f0a:	d407      	bmi.n	8009f1c <__swsetup_r+0x30>
 8009f0c:	2209      	movs	r2, #9
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	e033      	b.n	8009f84 <__swsetup_r+0x98>
 8009f1c:	0758      	lsls	r0, r3, #29
 8009f1e:	d512      	bpl.n	8009f46 <__swsetup_r+0x5a>
 8009f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f22:	b141      	cbz	r1, 8009f36 <__swsetup_r+0x4a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__swsetup_r+0x46>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f8bd 	bl	800a0ac <_free_r>
 8009f32:	2300      	movs	r3, #0
 8009f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b94b      	cbnz	r3, 8009f66 <__swsetup_r+0x7a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f5c:	d003      	beq.n	8009f66 <__swsetup_r+0x7a>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 fd3d 	bl	800a9e0 <__smakebuf_r>
 8009f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6a:	f013 0201 	ands.w	r2, r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <__swsetup_r+0x9a>
 8009f70:	2200      	movs	r2, #0
 8009f72:	60a2      	str	r2, [r4, #8]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	4252      	negs	r2, r2
 8009f78:	61a2      	str	r2, [r4, #24]
 8009f7a:	6922      	ldr	r2, [r4, #16]
 8009f7c:	b942      	cbnz	r2, 8009f90 <__swsetup_r+0xa4>
 8009f7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f82:	d1c5      	bne.n	8009f10 <__swsetup_r+0x24>
 8009f84:	bd38      	pop	{r3, r4, r5, pc}
 8009f86:	0799      	lsls	r1, r3, #30
 8009f88:	bf58      	it	pl
 8009f8a:	6962      	ldrpl	r2, [r4, #20]
 8009f8c:	60a2      	str	r2, [r4, #8]
 8009f8e:	e7f4      	b.n	8009f7a <__swsetup_r+0x8e>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7f7      	b.n	8009f84 <__swsetup_r+0x98>
 8009f94:	2400001c 	.word	0x2400001c

08009f98 <memset>:
 8009f98:	4402      	add	r2, r0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d100      	bne.n	8009fa2 <memset+0xa>
 8009fa0:	4770      	bx	lr
 8009fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fa6:	e7f9      	b.n	8009f9c <memset+0x4>

08009fa8 <_close_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d06      	ldr	r5, [pc, #24]	@ (8009fc4 <_close_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	f7f8 ff37 	bl	8002e26 <_close>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_close_r+0x1a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_close_r+0x1a>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	2400067c 	.word	0x2400067c

08009fc8 <_lseek_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	@ (8009fe8 <_lseek_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f8 ff4c 	bl	8002e74 <_lseek>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_lseek_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_lseek_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	2400067c 	.word	0x2400067c

08009fec <_read_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	@ (800a00c <_read_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f8 feda 	bl	8002db4 <_read>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_read_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_read_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	2400067c 	.word	0x2400067c

0800a010 <_write_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_write_r+0x20>)
 800a014:	4604      	mov	r4, r0
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7f8 fee5 	bl	8002dee <_write>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_write_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_write_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	2400067c 	.word	0x2400067c

0800a034 <__errno>:
 800a034:	4b01      	ldr	r3, [pc, #4]	@ (800a03c <__errno+0x8>)
 800a036:	6818      	ldr	r0, [r3, #0]
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	2400001c 	.word	0x2400001c

0800a040 <__libc_init_array>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	4d0d      	ldr	r5, [pc, #52]	@ (800a078 <__libc_init_array+0x38>)
 800a044:	4c0d      	ldr	r4, [pc, #52]	@ (800a07c <__libc_init_array+0x3c>)
 800a046:	1b64      	subs	r4, r4, r5
 800a048:	10a4      	asrs	r4, r4, #2
 800a04a:	2600      	movs	r6, #0
 800a04c:	42a6      	cmp	r6, r4
 800a04e:	d109      	bne.n	800a064 <__libc_init_array+0x24>
 800a050:	4d0b      	ldr	r5, [pc, #44]	@ (800a080 <__libc_init_array+0x40>)
 800a052:	4c0c      	ldr	r4, [pc, #48]	@ (800a084 <__libc_init_array+0x44>)
 800a054:	f000 fd32 	bl	800aabc <_init>
 800a058:	1b64      	subs	r4, r4, r5
 800a05a:	10a4      	asrs	r4, r4, #2
 800a05c:	2600      	movs	r6, #0
 800a05e:	42a6      	cmp	r6, r4
 800a060:	d105      	bne.n	800a06e <__libc_init_array+0x2e>
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	f855 3b04 	ldr.w	r3, [r5], #4
 800a068:	4798      	blx	r3
 800a06a:	3601      	adds	r6, #1
 800a06c:	e7ee      	b.n	800a04c <__libc_init_array+0xc>
 800a06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a072:	4798      	blx	r3
 800a074:	3601      	adds	r6, #1
 800a076:	e7f2      	b.n	800a05e <__libc_init_array+0x1e>
 800a078:	0800ad4c 	.word	0x0800ad4c
 800a07c:	0800ad4c 	.word	0x0800ad4c
 800a080:	0800ad4c 	.word	0x0800ad4c
 800a084:	0800ad50 	.word	0x0800ad50

0800a088 <__retarget_lock_init_recursive>:
 800a088:	4770      	bx	lr

0800a08a <__retarget_lock_acquire_recursive>:
 800a08a:	4770      	bx	lr

0800a08c <__retarget_lock_release_recursive>:
 800a08c:	4770      	bx	lr

0800a08e <memcpy>:
 800a08e:	440a      	add	r2, r1
 800a090:	4291      	cmp	r1, r2
 800a092:	f100 33ff 	add.w	r3, r0, #4294967295
 800a096:	d100      	bne.n	800a09a <memcpy+0xc>
 800a098:	4770      	bx	lr
 800a09a:	b510      	push	{r4, lr}
 800a09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a4:	4291      	cmp	r1, r2
 800a0a6:	d1f9      	bne.n	800a09c <memcpy+0xe>
 800a0a8:	bd10      	pop	{r4, pc}
	...

0800a0ac <_free_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d041      	beq.n	800a138 <_free_r+0x8c>
 800a0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b8:	1f0c      	subs	r4, r1, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfb8      	it	lt
 800a0be:	18e4      	addlt	r4, r4, r3
 800a0c0:	f000 f8e0 	bl	800a284 <__malloc_lock>
 800a0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a13c <_free_r+0x90>)
 800a0c6:	6813      	ldr	r3, [r2, #0]
 800a0c8:	b933      	cbnz	r3, 800a0d8 <_free_r+0x2c>
 800a0ca:	6063      	str	r3, [r4, #4]
 800a0cc:	6014      	str	r4, [r2, #0]
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d4:	f000 b8dc 	b.w	800a290 <__malloc_unlock>
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	d908      	bls.n	800a0ee <_free_r+0x42>
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	1821      	adds	r1, r4, r0
 800a0e0:	428b      	cmp	r3, r1
 800a0e2:	bf01      	itttt	eq
 800a0e4:	6819      	ldreq	r1, [r3, #0]
 800a0e6:	685b      	ldreq	r3, [r3, #4]
 800a0e8:	1809      	addeq	r1, r1, r0
 800a0ea:	6021      	streq	r1, [r4, #0]
 800a0ec:	e7ed      	b.n	800a0ca <_free_r+0x1e>
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	b10b      	cbz	r3, 800a0f8 <_free_r+0x4c>
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d9fa      	bls.n	800a0ee <_free_r+0x42>
 800a0f8:	6811      	ldr	r1, [r2, #0]
 800a0fa:	1850      	adds	r0, r2, r1
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	d10b      	bne.n	800a118 <_free_r+0x6c>
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	4401      	add	r1, r0
 800a104:	1850      	adds	r0, r2, r1
 800a106:	4283      	cmp	r3, r0
 800a108:	6011      	str	r1, [r2, #0]
 800a10a:	d1e0      	bne.n	800a0ce <_free_r+0x22>
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	6053      	str	r3, [r2, #4]
 800a112:	4408      	add	r0, r1
 800a114:	6010      	str	r0, [r2, #0]
 800a116:	e7da      	b.n	800a0ce <_free_r+0x22>
 800a118:	d902      	bls.n	800a120 <_free_r+0x74>
 800a11a:	230c      	movs	r3, #12
 800a11c:	602b      	str	r3, [r5, #0]
 800a11e:	e7d6      	b.n	800a0ce <_free_r+0x22>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	1821      	adds	r1, r4, r0
 800a124:	428b      	cmp	r3, r1
 800a126:	bf04      	itt	eq
 800a128:	6819      	ldreq	r1, [r3, #0]
 800a12a:	685b      	ldreq	r3, [r3, #4]
 800a12c:	6063      	str	r3, [r4, #4]
 800a12e:	bf04      	itt	eq
 800a130:	1809      	addeq	r1, r1, r0
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	6054      	str	r4, [r2, #4]
 800a136:	e7ca      	b.n	800a0ce <_free_r+0x22>
 800a138:	bd38      	pop	{r3, r4, r5, pc}
 800a13a:	bf00      	nop
 800a13c:	24000688 	.word	0x24000688

0800a140 <sbrk_aligned>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	4e0f      	ldr	r6, [pc, #60]	@ (800a180 <sbrk_aligned+0x40>)
 800a144:	460c      	mov	r4, r1
 800a146:	6831      	ldr	r1, [r6, #0]
 800a148:	4605      	mov	r5, r0
 800a14a:	b911      	cbnz	r1, 800a152 <sbrk_aligned+0x12>
 800a14c:	f000 fca6 	bl	800aa9c <_sbrk_r>
 800a150:	6030      	str	r0, [r6, #0]
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f000 fca1 	bl	800aa9c <_sbrk_r>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d103      	bne.n	800a166 <sbrk_aligned+0x26>
 800a15e:	f04f 34ff 	mov.w	r4, #4294967295
 800a162:	4620      	mov	r0, r4
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	1cc4      	adds	r4, r0, #3
 800a168:	f024 0403 	bic.w	r4, r4, #3
 800a16c:	42a0      	cmp	r0, r4
 800a16e:	d0f8      	beq.n	800a162 <sbrk_aligned+0x22>
 800a170:	1a21      	subs	r1, r4, r0
 800a172:	4628      	mov	r0, r5
 800a174:	f000 fc92 	bl	800aa9c <_sbrk_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	d1f2      	bne.n	800a162 <sbrk_aligned+0x22>
 800a17c:	e7ef      	b.n	800a15e <sbrk_aligned+0x1e>
 800a17e:	bf00      	nop
 800a180:	24000684 	.word	0x24000684

0800a184 <_malloc_r>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	1ccd      	adds	r5, r1, #3
 800a18a:	f025 0503 	bic.w	r5, r5, #3
 800a18e:	3508      	adds	r5, #8
 800a190:	2d0c      	cmp	r5, #12
 800a192:	bf38      	it	cc
 800a194:	250c      	movcc	r5, #12
 800a196:	2d00      	cmp	r5, #0
 800a198:	4606      	mov	r6, r0
 800a19a:	db01      	blt.n	800a1a0 <_malloc_r+0x1c>
 800a19c:	42a9      	cmp	r1, r5
 800a19e:	d904      	bls.n	800a1aa <_malloc_r+0x26>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	6033      	str	r3, [r6, #0]
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a280 <_malloc_r+0xfc>
 800a1ae:	f000 f869 	bl	800a284 <__malloc_lock>
 800a1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	bb44      	cbnz	r4, 800a20c <_malloc_r+0x88>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ffbf 	bl	800a140 <sbrk_aligned>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	d158      	bne.n	800a27a <_malloc_r+0xf6>
 800a1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a1cc:	4627      	mov	r7, r4
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d143      	bne.n	800a25a <_malloc_r+0xd6>
 800a1d2:	2c00      	cmp	r4, #0
 800a1d4:	d04b      	beq.n	800a26e <_malloc_r+0xea>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	4639      	mov	r1, r7
 800a1da:	4630      	mov	r0, r6
 800a1dc:	eb04 0903 	add.w	r9, r4, r3
 800a1e0:	f000 fc5c 	bl	800aa9c <_sbrk_r>
 800a1e4:	4581      	cmp	r9, r0
 800a1e6:	d142      	bne.n	800a26e <_malloc_r+0xea>
 800a1e8:	6821      	ldr	r1, [r4, #0]
 800a1ea:	1a6d      	subs	r5, r5, r1
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ffa6 	bl	800a140 <sbrk_aligned>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d03a      	beq.n	800a26e <_malloc_r+0xea>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	442b      	add	r3, r5
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	bb62      	cbnz	r2, 800a260 <_malloc_r+0xdc>
 800a206:	f8c8 7000 	str.w	r7, [r8]
 800a20a:	e00f      	b.n	800a22c <_malloc_r+0xa8>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	1b52      	subs	r2, r2, r5
 800a210:	d420      	bmi.n	800a254 <_malloc_r+0xd0>
 800a212:	2a0b      	cmp	r2, #11
 800a214:	d917      	bls.n	800a246 <_malloc_r+0xc2>
 800a216:	1961      	adds	r1, r4, r5
 800a218:	42a3      	cmp	r3, r4
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	bf18      	it	ne
 800a21e:	6059      	strne	r1, [r3, #4]
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	bf08      	it	eq
 800a224:	f8c8 1000 	streq.w	r1, [r8]
 800a228:	5162      	str	r2, [r4, r5]
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f82f 	bl	800a290 <__malloc_unlock>
 800a232:	f104 000b 	add.w	r0, r4, #11
 800a236:	1d23      	adds	r3, r4, #4
 800a238:	f020 0007 	bic.w	r0, r0, #7
 800a23c:	1ac2      	subs	r2, r0, r3
 800a23e:	bf1c      	itt	ne
 800a240:	1a1b      	subne	r3, r3, r0
 800a242:	50a3      	strne	r3, [r4, r2]
 800a244:	e7af      	b.n	800a1a6 <_malloc_r+0x22>
 800a246:	6862      	ldr	r2, [r4, #4]
 800a248:	42a3      	cmp	r3, r4
 800a24a:	bf0c      	ite	eq
 800a24c:	f8c8 2000 	streq.w	r2, [r8]
 800a250:	605a      	strne	r2, [r3, #4]
 800a252:	e7eb      	b.n	800a22c <_malloc_r+0xa8>
 800a254:	4623      	mov	r3, r4
 800a256:	6864      	ldr	r4, [r4, #4]
 800a258:	e7ae      	b.n	800a1b8 <_malloc_r+0x34>
 800a25a:	463c      	mov	r4, r7
 800a25c:	687f      	ldr	r7, [r7, #4]
 800a25e:	e7b6      	b.n	800a1ce <_malloc_r+0x4a>
 800a260:	461a      	mov	r2, r3
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	42a3      	cmp	r3, r4
 800a266:	d1fb      	bne.n	800a260 <_malloc_r+0xdc>
 800a268:	2300      	movs	r3, #0
 800a26a:	6053      	str	r3, [r2, #4]
 800a26c:	e7de      	b.n	800a22c <_malloc_r+0xa8>
 800a26e:	230c      	movs	r3, #12
 800a270:	6033      	str	r3, [r6, #0]
 800a272:	4630      	mov	r0, r6
 800a274:	f000 f80c 	bl	800a290 <__malloc_unlock>
 800a278:	e794      	b.n	800a1a4 <_malloc_r+0x20>
 800a27a:	6005      	str	r5, [r0, #0]
 800a27c:	e7d6      	b.n	800a22c <_malloc_r+0xa8>
 800a27e:	bf00      	nop
 800a280:	24000688 	.word	0x24000688

0800a284 <__malloc_lock>:
 800a284:	4801      	ldr	r0, [pc, #4]	@ (800a28c <__malloc_lock+0x8>)
 800a286:	f7ff bf00 	b.w	800a08a <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	24000680 	.word	0x24000680

0800a290 <__malloc_unlock>:
 800a290:	4801      	ldr	r0, [pc, #4]	@ (800a298 <__malloc_unlock+0x8>)
 800a292:	f7ff befb 	b.w	800a08c <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	24000680 	.word	0x24000680

0800a29c <__sfputc_r>:
 800a29c:	6893      	ldr	r3, [r2, #8]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	b410      	push	{r4}
 800a2a4:	6093      	str	r3, [r2, #8]
 800a2a6:	da08      	bge.n	800a2ba <__sfputc_r+0x1e>
 800a2a8:	6994      	ldr	r4, [r2, #24]
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	db01      	blt.n	800a2b2 <__sfputc_r+0x16>
 800a2ae:	290a      	cmp	r1, #10
 800a2b0:	d103      	bne.n	800a2ba <__sfputc_r+0x1e>
 800a2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b6:	f7ff bdda 	b.w	8009e6e <__swbuf_r>
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	1c58      	adds	r0, r3, #1
 800a2be:	6010      	str	r0, [r2, #0]
 800a2c0:	7019      	strb	r1, [r3, #0]
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <__sfputs_r>:
 800a2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	18d5      	adds	r5, r2, r3
 800a2d4:	42ac      	cmp	r4, r5
 800a2d6:	d101      	bne.n	800a2dc <__sfputs_r+0x12>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e007      	b.n	800a2ec <__sfputs_r+0x22>
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7ff ffda 	bl	800a29c <__sfputc_r>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d1f3      	bne.n	800a2d4 <__sfputs_r+0xa>
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2f0 <_vfiprintf_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	b09d      	sub	sp, #116	@ 0x74
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	4698      	mov	r8, r3
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	b118      	cbz	r0, 800a308 <_vfiprintf_r+0x18>
 800a300:	6a03      	ldr	r3, [r0, #32]
 800a302:	b90b      	cbnz	r3, 800a308 <_vfiprintf_r+0x18>
 800a304:	f7ff fcca 	bl	8009c9c <__sinit>
 800a308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a30a:	07d9      	lsls	r1, r3, #31
 800a30c:	d405      	bmi.n	800a31a <_vfiprintf_r+0x2a>
 800a30e:	89ab      	ldrh	r3, [r5, #12]
 800a310:	059a      	lsls	r2, r3, #22
 800a312:	d402      	bmi.n	800a31a <_vfiprintf_r+0x2a>
 800a314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a316:	f7ff feb8 	bl	800a08a <__retarget_lock_acquire_recursive>
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	071b      	lsls	r3, r3, #28
 800a31e:	d501      	bpl.n	800a324 <_vfiprintf_r+0x34>
 800a320:	692b      	ldr	r3, [r5, #16]
 800a322:	b99b      	cbnz	r3, 800a34c <_vfiprintf_r+0x5c>
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff fde0 	bl	8009eec <__swsetup_r>
 800a32c:	b170      	cbz	r0, 800a34c <_vfiprintf_r+0x5c>
 800a32e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a330:	07dc      	lsls	r4, r3, #31
 800a332:	d504      	bpl.n	800a33e <_vfiprintf_r+0x4e>
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	b01d      	add	sp, #116	@ 0x74
 800a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	0598      	lsls	r0, r3, #22
 800a342:	d4f7      	bmi.n	800a334 <_vfiprintf_r+0x44>
 800a344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a346:	f7ff fea1 	bl	800a08c <__retarget_lock_release_recursive>
 800a34a:	e7f3      	b.n	800a334 <_vfiprintf_r+0x44>
 800a34c:	2300      	movs	r3, #0
 800a34e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a350:	2320      	movs	r3, #32
 800a352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a356:	f8cd 800c 	str.w	r8, [sp, #12]
 800a35a:	2330      	movs	r3, #48	@ 0x30
 800a35c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a50c <_vfiprintf_r+0x21c>
 800a360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a364:	f04f 0901 	mov.w	r9, #1
 800a368:	4623      	mov	r3, r4
 800a36a:	469a      	mov	sl, r3
 800a36c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a370:	b10a      	cbz	r2, 800a376 <_vfiprintf_r+0x86>
 800a372:	2a25      	cmp	r2, #37	@ 0x25
 800a374:	d1f9      	bne.n	800a36a <_vfiprintf_r+0x7a>
 800a376:	ebba 0b04 	subs.w	fp, sl, r4
 800a37a:	d00b      	beq.n	800a394 <_vfiprintf_r+0xa4>
 800a37c:	465b      	mov	r3, fp
 800a37e:	4622      	mov	r2, r4
 800a380:	4629      	mov	r1, r5
 800a382:	4630      	mov	r0, r6
 800a384:	f7ff ffa1 	bl	800a2ca <__sfputs_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	f000 80a7 	beq.w	800a4dc <_vfiprintf_r+0x1ec>
 800a38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a390:	445a      	add	r2, fp
 800a392:	9209      	str	r2, [sp, #36]	@ 0x24
 800a394:	f89a 3000 	ldrb.w	r3, [sl]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 809f 	beq.w	800a4dc <_vfiprintf_r+0x1ec>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3a8:	f10a 0a01 	add.w	sl, sl, #1
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	9307      	str	r3, [sp, #28]
 800a3b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3b6:	4654      	mov	r4, sl
 800a3b8:	2205      	movs	r2, #5
 800a3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3be:	4853      	ldr	r0, [pc, #332]	@ (800a50c <_vfiprintf_r+0x21c>)
 800a3c0:	f7f5 ff96 	bl	80002f0 <memchr>
 800a3c4:	9a04      	ldr	r2, [sp, #16]
 800a3c6:	b9d8      	cbnz	r0, 800a400 <_vfiprintf_r+0x110>
 800a3c8:	06d1      	lsls	r1, r2, #27
 800a3ca:	bf44      	itt	mi
 800a3cc:	2320      	movmi	r3, #32
 800a3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3d2:	0713      	lsls	r3, r2, #28
 800a3d4:	bf44      	itt	mi
 800a3d6:	232b      	movmi	r3, #43	@ 0x2b
 800a3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3e2:	d015      	beq.n	800a410 <_vfiprintf_r+0x120>
 800a3e4:	9a07      	ldr	r2, [sp, #28]
 800a3e6:	4654      	mov	r4, sl
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	f04f 0c0a 	mov.w	ip, #10
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3f4:	3b30      	subs	r3, #48	@ 0x30
 800a3f6:	2b09      	cmp	r3, #9
 800a3f8:	d94b      	bls.n	800a492 <_vfiprintf_r+0x1a2>
 800a3fa:	b1b0      	cbz	r0, 800a42a <_vfiprintf_r+0x13a>
 800a3fc:	9207      	str	r2, [sp, #28]
 800a3fe:	e014      	b.n	800a42a <_vfiprintf_r+0x13a>
 800a400:	eba0 0308 	sub.w	r3, r0, r8
 800a404:	fa09 f303 	lsl.w	r3, r9, r3
 800a408:	4313      	orrs	r3, r2
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	46a2      	mov	sl, r4
 800a40e:	e7d2      	b.n	800a3b6 <_vfiprintf_r+0xc6>
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	1d19      	adds	r1, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	9103      	str	r1, [sp, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfbb      	ittet	lt
 800a41c:	425b      	neglt	r3, r3
 800a41e:	f042 0202 	orrlt.w	r2, r2, #2
 800a422:	9307      	strge	r3, [sp, #28]
 800a424:	9307      	strlt	r3, [sp, #28]
 800a426:	bfb8      	it	lt
 800a428:	9204      	strlt	r2, [sp, #16]
 800a42a:	7823      	ldrb	r3, [r4, #0]
 800a42c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a42e:	d10a      	bne.n	800a446 <_vfiprintf_r+0x156>
 800a430:	7863      	ldrb	r3, [r4, #1]
 800a432:	2b2a      	cmp	r3, #42	@ 0x2a
 800a434:	d132      	bne.n	800a49c <_vfiprintf_r+0x1ac>
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	9203      	str	r2, [sp, #12]
 800a43e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a442:	3402      	adds	r4, #2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a51c <_vfiprintf_r+0x22c>
 800a44a:	7821      	ldrb	r1, [r4, #0]
 800a44c:	2203      	movs	r2, #3
 800a44e:	4650      	mov	r0, sl
 800a450:	f7f5 ff4e 	bl	80002f0 <memchr>
 800a454:	b138      	cbz	r0, 800a466 <_vfiprintf_r+0x176>
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	eba0 000a 	sub.w	r0, r0, sl
 800a45c:	2240      	movs	r2, #64	@ 0x40
 800a45e:	4082      	lsls	r2, r0
 800a460:	4313      	orrs	r3, r2
 800a462:	3401      	adds	r4, #1
 800a464:	9304      	str	r3, [sp, #16]
 800a466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46a:	4829      	ldr	r0, [pc, #164]	@ (800a510 <_vfiprintf_r+0x220>)
 800a46c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a470:	2206      	movs	r2, #6
 800a472:	f7f5 ff3d 	bl	80002f0 <memchr>
 800a476:	2800      	cmp	r0, #0
 800a478:	d03f      	beq.n	800a4fa <_vfiprintf_r+0x20a>
 800a47a:	4b26      	ldr	r3, [pc, #152]	@ (800a514 <_vfiprintf_r+0x224>)
 800a47c:	bb1b      	cbnz	r3, 800a4c6 <_vfiprintf_r+0x1d6>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	3307      	adds	r3, #7
 800a482:	f023 0307 	bic.w	r3, r3, #7
 800a486:	3308      	adds	r3, #8
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48c:	443b      	add	r3, r7
 800a48e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a490:	e76a      	b.n	800a368 <_vfiprintf_r+0x78>
 800a492:	fb0c 3202 	mla	r2, ip, r2, r3
 800a496:	460c      	mov	r4, r1
 800a498:	2001      	movs	r0, #1
 800a49a:	e7a8      	b.n	800a3ee <_vfiprintf_r+0xfe>
 800a49c:	2300      	movs	r3, #0
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	f04f 0c0a 	mov.w	ip, #10
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ae:	3a30      	subs	r2, #48	@ 0x30
 800a4b0:	2a09      	cmp	r2, #9
 800a4b2:	d903      	bls.n	800a4bc <_vfiprintf_r+0x1cc>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0c6      	beq.n	800a446 <_vfiprintf_r+0x156>
 800a4b8:	9105      	str	r1, [sp, #20]
 800a4ba:	e7c4      	b.n	800a446 <_vfiprintf_r+0x156>
 800a4bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e7f0      	b.n	800a4a8 <_vfiprintf_r+0x1b8>
 800a4c6:	ab03      	add	r3, sp, #12
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	462a      	mov	r2, r5
 800a4cc:	4b12      	ldr	r3, [pc, #72]	@ (800a518 <_vfiprintf_r+0x228>)
 800a4ce:	a904      	add	r1, sp, #16
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f3af 8000 	nop.w
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	1c78      	adds	r0, r7, #1
 800a4da:	d1d6      	bne.n	800a48a <_vfiprintf_r+0x19a>
 800a4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d405      	bmi.n	800a4ee <_vfiprintf_r+0x1fe>
 800a4e2:	89ab      	ldrh	r3, [r5, #12]
 800a4e4:	059a      	lsls	r2, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_vfiprintf_r+0x1fe>
 800a4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ea:	f7ff fdcf 	bl	800a08c <__retarget_lock_release_recursive>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	065b      	lsls	r3, r3, #25
 800a4f2:	f53f af1f 	bmi.w	800a334 <_vfiprintf_r+0x44>
 800a4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4f8:	e71e      	b.n	800a338 <_vfiprintf_r+0x48>
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	462a      	mov	r2, r5
 800a500:	4b05      	ldr	r3, [pc, #20]	@ (800a518 <_vfiprintf_r+0x228>)
 800a502:	a904      	add	r1, sp, #16
 800a504:	4630      	mov	r0, r6
 800a506:	f000 f879 	bl	800a5fc <_printf_i>
 800a50a:	e7e4      	b.n	800a4d6 <_vfiprintf_r+0x1e6>
 800a50c:	0800ad10 	.word	0x0800ad10
 800a510:	0800ad1a 	.word	0x0800ad1a
 800a514:	00000000 	.word	0x00000000
 800a518:	0800a2cb 	.word	0x0800a2cb
 800a51c:	0800ad16 	.word	0x0800ad16

0800a520 <_printf_common>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	4616      	mov	r6, r2
 800a526:	4698      	mov	r8, r3
 800a528:	688a      	ldr	r2, [r1, #8]
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a530:	4293      	cmp	r3, r2
 800a532:	bfb8      	it	lt
 800a534:	4613      	movlt	r3, r2
 800a536:	6033      	str	r3, [r6, #0]
 800a538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a53c:	4607      	mov	r7, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b10a      	cbz	r2, 800a546 <_printf_common+0x26>
 800a542:	3301      	adds	r3, #1
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	0699      	lsls	r1, r3, #26
 800a54a:	bf42      	ittt	mi
 800a54c:	6833      	ldrmi	r3, [r6, #0]
 800a54e:	3302      	addmi	r3, #2
 800a550:	6033      	strmi	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	f015 0506 	ands.w	r5, r5, #6
 800a558:	d106      	bne.n	800a568 <_printf_common+0x48>
 800a55a:	f104 0a19 	add.w	sl, r4, #25
 800a55e:	68e3      	ldr	r3, [r4, #12]
 800a560:	6832      	ldr	r2, [r6, #0]
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	42ab      	cmp	r3, r5
 800a566:	dc26      	bgt.n	800a5b6 <_printf_common+0x96>
 800a568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	3b00      	subs	r3, #0
 800a570:	bf18      	it	ne
 800a572:	2301      	movne	r3, #1
 800a574:	0692      	lsls	r2, r2, #26
 800a576:	d42b      	bmi.n	800a5d0 <_printf_common+0xb0>
 800a578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a57c:	4641      	mov	r1, r8
 800a57e:	4638      	mov	r0, r7
 800a580:	47c8      	blx	r9
 800a582:	3001      	adds	r0, #1
 800a584:	d01e      	beq.n	800a5c4 <_printf_common+0xa4>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	6922      	ldr	r2, [r4, #16]
 800a58a:	f003 0306 	and.w	r3, r3, #6
 800a58e:	2b04      	cmp	r3, #4
 800a590:	bf02      	ittt	eq
 800a592:	68e5      	ldreq	r5, [r4, #12]
 800a594:	6833      	ldreq	r3, [r6, #0]
 800a596:	1aed      	subeq	r5, r5, r3
 800a598:	68a3      	ldr	r3, [r4, #8]
 800a59a:	bf0c      	ite	eq
 800a59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a0:	2500      	movne	r5, #0
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bfc4      	itt	gt
 800a5a6:	1a9b      	subgt	r3, r3, r2
 800a5a8:	18ed      	addgt	r5, r5, r3
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	341a      	adds	r4, #26
 800a5ae:	42b5      	cmp	r5, r6
 800a5b0:	d11a      	bne.n	800a5e8 <_printf_common+0xc8>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e008      	b.n	800a5c8 <_printf_common+0xa8>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	4638      	mov	r0, r7
 800a5be:	47c8      	blx	r9
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d103      	bne.n	800a5cc <_printf_common+0xac>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	e7c6      	b.n	800a55e <_printf_common+0x3e>
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	2030      	movs	r0, #48	@ 0x30
 800a5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5da:	4422      	add	r2, r4
 800a5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	e7c7      	b.n	800a578 <_printf_common+0x58>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c8      	blx	r9
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d0e6      	beq.n	800a5c4 <_printf_common+0xa4>
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7d9      	b.n	800a5ae <_printf_common+0x8e>
	...

0800a5fc <_printf_i>:
 800a5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	7e0f      	ldrb	r7, [r1, #24]
 800a602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a604:	2f78      	cmp	r7, #120	@ 0x78
 800a606:	4691      	mov	r9, r2
 800a608:	4680      	mov	r8, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	469a      	mov	sl, r3
 800a60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a612:	d807      	bhi.n	800a624 <_printf_i+0x28>
 800a614:	2f62      	cmp	r7, #98	@ 0x62
 800a616:	d80a      	bhi.n	800a62e <_printf_i+0x32>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f000 80d2 	beq.w	800a7c2 <_printf_i+0x1c6>
 800a61e:	2f58      	cmp	r7, #88	@ 0x58
 800a620:	f000 80b9 	beq.w	800a796 <_printf_i+0x19a>
 800a624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a62c:	e03a      	b.n	800a6a4 <_printf_i+0xa8>
 800a62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a632:	2b15      	cmp	r3, #21
 800a634:	d8f6      	bhi.n	800a624 <_printf_i+0x28>
 800a636:	a101      	add	r1, pc, #4	@ (adr r1, 800a63c <_printf_i+0x40>)
 800a638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a625 	.word	0x0800a625
 800a648:	0800a625 	.word	0x0800a625
 800a64c:	0800a625 	.word	0x0800a625
 800a650:	0800a625 	.word	0x0800a625
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a625 	.word	0x0800a625
 800a65c:	0800a625 	.word	0x0800a625
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a7a9 	.word	0x0800a7a9
 800a66c:	0800a6d3 	.word	0x0800a6d3
 800a670:	0800a763 	.word	0x0800a763
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7cb 	.word	0x0800a7cb
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a6d3 	.word	0x0800a6d3
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a76b 	.word	0x0800a76b
 800a694:	6833      	ldr	r3, [r6, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e09d      	b.n	800a7e4 <_printf_i+0x1e8>
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	6820      	ldr	r0, [r4, #0]
 800a6ac:	1d19      	adds	r1, r3, #4
 800a6ae:	6031      	str	r1, [r6, #0]
 800a6b0:	0606      	lsls	r6, r0, #24
 800a6b2:	d501      	bpl.n	800a6b8 <_printf_i+0xbc>
 800a6b4:	681d      	ldr	r5, [r3, #0]
 800a6b6:	e003      	b.n	800a6c0 <_printf_i+0xc4>
 800a6b8:	0645      	lsls	r5, r0, #25
 800a6ba:	d5fb      	bpl.n	800a6b4 <_printf_i+0xb8>
 800a6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	da03      	bge.n	800a6cc <_printf_i+0xd0>
 800a6c4:	232d      	movs	r3, #45	@ 0x2d
 800a6c6:	426d      	negs	r5, r5
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6cc:	4859      	ldr	r0, [pc, #356]	@ (800a834 <_printf_i+0x238>)
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	e011      	b.n	800a6f6 <_printf_i+0xfa>
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	0608      	lsls	r0, r1, #24
 800a6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6dc:	d402      	bmi.n	800a6e4 <_printf_i+0xe8>
 800a6de:	0649      	lsls	r1, r1, #25
 800a6e0:	bf48      	it	mi
 800a6e2:	b2ad      	uxthmi	r5, r5
 800a6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6e6:	4853      	ldr	r0, [pc, #332]	@ (800a834 <_printf_i+0x238>)
 800a6e8:	6033      	str	r3, [r6, #0]
 800a6ea:	bf14      	ite	ne
 800a6ec:	230a      	movne	r3, #10
 800a6ee:	2308      	moveq	r3, #8
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6f6:	6866      	ldr	r6, [r4, #4]
 800a6f8:	60a6      	str	r6, [r4, #8]
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	bfa2      	ittt	ge
 800a6fe:	6821      	ldrge	r1, [r4, #0]
 800a700:	f021 0104 	bicge.w	r1, r1, #4
 800a704:	6021      	strge	r1, [r4, #0]
 800a706:	b90d      	cbnz	r5, 800a70c <_printf_i+0x110>
 800a708:	2e00      	cmp	r6, #0
 800a70a:	d04b      	beq.n	800a7a4 <_printf_i+0x1a8>
 800a70c:	4616      	mov	r6, r2
 800a70e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a712:	fb03 5711 	mls	r7, r3, r1, r5
 800a716:	5dc7      	ldrb	r7, [r0, r7]
 800a718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a71c:	462f      	mov	r7, r5
 800a71e:	42bb      	cmp	r3, r7
 800a720:	460d      	mov	r5, r1
 800a722:	d9f4      	bls.n	800a70e <_printf_i+0x112>
 800a724:	2b08      	cmp	r3, #8
 800a726:	d10b      	bne.n	800a740 <_printf_i+0x144>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	07df      	lsls	r7, r3, #31
 800a72c:	d508      	bpl.n	800a740 <_printf_i+0x144>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6861      	ldr	r1, [r4, #4]
 800a732:	4299      	cmp	r1, r3
 800a734:	bfde      	ittt	le
 800a736:	2330      	movle	r3, #48	@ 0x30
 800a738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a73c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a740:	1b92      	subs	r2, r2, r6
 800a742:	6122      	str	r2, [r4, #16]
 800a744:	f8cd a000 	str.w	sl, [sp]
 800a748:	464b      	mov	r3, r9
 800a74a:	aa03      	add	r2, sp, #12
 800a74c:	4621      	mov	r1, r4
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fee6 	bl	800a520 <_printf_common>
 800a754:	3001      	adds	r0, #1
 800a756:	d14a      	bne.n	800a7ee <_printf_i+0x1f2>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	b004      	add	sp, #16
 800a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	f043 0320 	orr.w	r3, r3, #32
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	4833      	ldr	r0, [pc, #204]	@ (800a838 <_printf_i+0x23c>)
 800a76c:	2778      	movs	r7, #120	@ 0x78
 800a76e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	6831      	ldr	r1, [r6, #0]
 800a776:	061f      	lsls	r7, r3, #24
 800a778:	f851 5b04 	ldr.w	r5, [r1], #4
 800a77c:	d402      	bmi.n	800a784 <_printf_i+0x188>
 800a77e:	065f      	lsls	r7, r3, #25
 800a780:	bf48      	it	mi
 800a782:	b2ad      	uxthmi	r5, r5
 800a784:	6031      	str	r1, [r6, #0]
 800a786:	07d9      	lsls	r1, r3, #31
 800a788:	bf44      	itt	mi
 800a78a:	f043 0320 	orrmi.w	r3, r3, #32
 800a78e:	6023      	strmi	r3, [r4, #0]
 800a790:	b11d      	cbz	r5, 800a79a <_printf_i+0x19e>
 800a792:	2310      	movs	r3, #16
 800a794:	e7ac      	b.n	800a6f0 <_printf_i+0xf4>
 800a796:	4827      	ldr	r0, [pc, #156]	@ (800a834 <_printf_i+0x238>)
 800a798:	e7e9      	b.n	800a76e <_printf_i+0x172>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	f023 0320 	bic.w	r3, r3, #32
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	e7f6      	b.n	800a792 <_printf_i+0x196>
 800a7a4:	4616      	mov	r6, r2
 800a7a6:	e7bd      	b.n	800a724 <_printf_i+0x128>
 800a7a8:	6833      	ldr	r3, [r6, #0]
 800a7aa:	6825      	ldr	r5, [r4, #0]
 800a7ac:	6961      	ldr	r1, [r4, #20]
 800a7ae:	1d18      	adds	r0, r3, #4
 800a7b0:	6030      	str	r0, [r6, #0]
 800a7b2:	062e      	lsls	r6, r5, #24
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	d501      	bpl.n	800a7bc <_printf_i+0x1c0>
 800a7b8:	6019      	str	r1, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <_printf_i+0x1c6>
 800a7bc:	0668      	lsls	r0, r5, #25
 800a7be:	d5fb      	bpl.n	800a7b8 <_printf_i+0x1bc>
 800a7c0:	8019      	strh	r1, [r3, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	4616      	mov	r6, r2
 800a7c8:	e7bc      	b.n	800a744 <_printf_i+0x148>
 800a7ca:	6833      	ldr	r3, [r6, #0]
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	6032      	str	r2, [r6, #0]
 800a7d0:	681e      	ldr	r6, [r3, #0]
 800a7d2:	6862      	ldr	r2, [r4, #4]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7f5 fd8a 	bl	80002f0 <memchr>
 800a7dc:	b108      	cbz	r0, 800a7e2 <_printf_i+0x1e6>
 800a7de:	1b80      	subs	r0, r0, r6
 800a7e0:	6060      	str	r0, [r4, #4]
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ec:	e7aa      	b.n	800a744 <_printf_i+0x148>
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	47d0      	blx	sl
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d0ad      	beq.n	800a758 <_printf_i+0x15c>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	079b      	lsls	r3, r3, #30
 800a800:	d413      	bmi.n	800a82a <_printf_i+0x22e>
 800a802:	68e0      	ldr	r0, [r4, #12]
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	4298      	cmp	r0, r3
 800a808:	bfb8      	it	lt
 800a80a:	4618      	movlt	r0, r3
 800a80c:	e7a6      	b.n	800a75c <_printf_i+0x160>
 800a80e:	2301      	movs	r3, #1
 800a810:	4632      	mov	r2, r6
 800a812:	4649      	mov	r1, r9
 800a814:	4640      	mov	r0, r8
 800a816:	47d0      	blx	sl
 800a818:	3001      	adds	r0, #1
 800a81a:	d09d      	beq.n	800a758 <_printf_i+0x15c>
 800a81c:	3501      	adds	r5, #1
 800a81e:	68e3      	ldr	r3, [r4, #12]
 800a820:	9903      	ldr	r1, [sp, #12]
 800a822:	1a5b      	subs	r3, r3, r1
 800a824:	42ab      	cmp	r3, r5
 800a826:	dcf2      	bgt.n	800a80e <_printf_i+0x212>
 800a828:	e7eb      	b.n	800a802 <_printf_i+0x206>
 800a82a:	2500      	movs	r5, #0
 800a82c:	f104 0619 	add.w	r6, r4, #25
 800a830:	e7f5      	b.n	800a81e <_printf_i+0x222>
 800a832:	bf00      	nop
 800a834:	0800ad21 	.word	0x0800ad21
 800a838:	0800ad32 	.word	0x0800ad32

0800a83c <__sflush_r>:
 800a83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a844:	0716      	lsls	r6, r2, #28
 800a846:	4605      	mov	r5, r0
 800a848:	460c      	mov	r4, r1
 800a84a:	d454      	bmi.n	800a8f6 <__sflush_r+0xba>
 800a84c:	684b      	ldr	r3, [r1, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dc02      	bgt.n	800a858 <__sflush_r+0x1c>
 800a852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd48      	ble.n	800a8ea <__sflush_r+0xae>
 800a858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a85a:	2e00      	cmp	r6, #0
 800a85c:	d045      	beq.n	800a8ea <__sflush_r+0xae>
 800a85e:	2300      	movs	r3, #0
 800a860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a864:	682f      	ldr	r7, [r5, #0]
 800a866:	6a21      	ldr	r1, [r4, #32]
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	d030      	beq.n	800a8ce <__sflush_r+0x92>
 800a86c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	0759      	lsls	r1, r3, #29
 800a872:	d505      	bpl.n	800a880 <__sflush_r+0x44>
 800a874:	6863      	ldr	r3, [r4, #4]
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a87a:	b10b      	cbz	r3, 800a880 <__sflush_r+0x44>
 800a87c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	2300      	movs	r3, #0
 800a882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a884:	6a21      	ldr	r1, [r4, #32]
 800a886:	4628      	mov	r0, r5
 800a888:	47b0      	blx	r6
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	d106      	bne.n	800a89e <__sflush_r+0x62>
 800a890:	6829      	ldr	r1, [r5, #0]
 800a892:	291d      	cmp	r1, #29
 800a894:	d82b      	bhi.n	800a8ee <__sflush_r+0xb2>
 800a896:	4a2a      	ldr	r2, [pc, #168]	@ (800a940 <__sflush_r+0x104>)
 800a898:	410a      	asrs	r2, r1
 800a89a:	07d6      	lsls	r6, r2, #31
 800a89c:	d427      	bmi.n	800a8ee <__sflush_r+0xb2>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	6062      	str	r2, [r4, #4]
 800a8a2:	04d9      	lsls	r1, r3, #19
 800a8a4:	6922      	ldr	r2, [r4, #16]
 800a8a6:	6022      	str	r2, [r4, #0]
 800a8a8:	d504      	bpl.n	800a8b4 <__sflush_r+0x78>
 800a8aa:	1c42      	adds	r2, r0, #1
 800a8ac:	d101      	bne.n	800a8b2 <__sflush_r+0x76>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	b903      	cbnz	r3, 800a8b4 <__sflush_r+0x78>
 800a8b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8b6:	602f      	str	r7, [r5, #0]
 800a8b8:	b1b9      	cbz	r1, 800a8ea <__sflush_r+0xae>
 800a8ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8be:	4299      	cmp	r1, r3
 800a8c0:	d002      	beq.n	800a8c8 <__sflush_r+0x8c>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f7ff fbf2 	bl	800a0ac <_free_r>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8cc:	e00d      	b.n	800a8ea <__sflush_r+0xae>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b0      	blx	r6
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	1c50      	adds	r0, r2, #1
 800a8d8:	d1c9      	bne.n	800a86e <__sflush_r+0x32>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0c6      	beq.n	800a86e <__sflush_r+0x32>
 800a8e0:	2b1d      	cmp	r3, #29
 800a8e2:	d001      	beq.n	800a8e8 <__sflush_r+0xac>
 800a8e4:	2b16      	cmp	r3, #22
 800a8e6:	d11e      	bne.n	800a926 <__sflush_r+0xea>
 800a8e8:	602f      	str	r7, [r5, #0]
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e022      	b.n	800a934 <__sflush_r+0xf8>
 800a8ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8f2:	b21b      	sxth	r3, r3
 800a8f4:	e01b      	b.n	800a92e <__sflush_r+0xf2>
 800a8f6:	690f      	ldr	r7, [r1, #16]
 800a8f8:	2f00      	cmp	r7, #0
 800a8fa:	d0f6      	beq.n	800a8ea <__sflush_r+0xae>
 800a8fc:	0793      	lsls	r3, r2, #30
 800a8fe:	680e      	ldr	r6, [r1, #0]
 800a900:	bf08      	it	eq
 800a902:	694b      	ldreq	r3, [r1, #20]
 800a904:	600f      	str	r7, [r1, #0]
 800a906:	bf18      	it	ne
 800a908:	2300      	movne	r3, #0
 800a90a:	eba6 0807 	sub.w	r8, r6, r7
 800a90e:	608b      	str	r3, [r1, #8]
 800a910:	f1b8 0f00 	cmp.w	r8, #0
 800a914:	dde9      	ble.n	800a8ea <__sflush_r+0xae>
 800a916:	6a21      	ldr	r1, [r4, #32]
 800a918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a91a:	4643      	mov	r3, r8
 800a91c:	463a      	mov	r2, r7
 800a91e:	4628      	mov	r0, r5
 800a920:	47b0      	blx	r6
 800a922:	2800      	cmp	r0, #0
 800a924:	dc08      	bgt.n	800a938 <__sflush_r+0xfc>
 800a926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92e:	81a3      	strh	r3, [r4, #12]
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	4407      	add	r7, r0
 800a93a:	eba8 0800 	sub.w	r8, r8, r0
 800a93e:	e7e7      	b.n	800a910 <__sflush_r+0xd4>
 800a940:	dfbffffe 	.word	0xdfbffffe

0800a944 <_fflush_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	690b      	ldr	r3, [r1, #16]
 800a948:	4605      	mov	r5, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b913      	cbnz	r3, 800a954 <_fflush_r+0x10>
 800a94e:	2500      	movs	r5, #0
 800a950:	4628      	mov	r0, r5
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	b118      	cbz	r0, 800a95e <_fflush_r+0x1a>
 800a956:	6a03      	ldr	r3, [r0, #32]
 800a958:	b90b      	cbnz	r3, 800a95e <_fflush_r+0x1a>
 800a95a:	f7ff f99f 	bl	8009c9c <__sinit>
 800a95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f3      	beq.n	800a94e <_fflush_r+0xa>
 800a966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a968:	07d0      	lsls	r0, r2, #31
 800a96a:	d404      	bmi.n	800a976 <_fflush_r+0x32>
 800a96c:	0599      	lsls	r1, r3, #22
 800a96e:	d402      	bmi.n	800a976 <_fflush_r+0x32>
 800a970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a972:	f7ff fb8a 	bl	800a08a <__retarget_lock_acquire_recursive>
 800a976:	4628      	mov	r0, r5
 800a978:	4621      	mov	r1, r4
 800a97a:	f7ff ff5f 	bl	800a83c <__sflush_r>
 800a97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a980:	07da      	lsls	r2, r3, #31
 800a982:	4605      	mov	r5, r0
 800a984:	d4e4      	bmi.n	800a950 <_fflush_r+0xc>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	059b      	lsls	r3, r3, #22
 800a98a:	d4e1      	bmi.n	800a950 <_fflush_r+0xc>
 800a98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a98e:	f7ff fb7d 	bl	800a08c <__retarget_lock_release_recursive>
 800a992:	e7dd      	b.n	800a950 <_fflush_r+0xc>

0800a994 <__swhatbuf_r>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	460c      	mov	r4, r1
 800a998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99c:	2900      	cmp	r1, #0
 800a99e:	b096      	sub	sp, #88	@ 0x58
 800a9a0:	4615      	mov	r5, r2
 800a9a2:	461e      	mov	r6, r3
 800a9a4:	da0d      	bge.n	800a9c2 <__swhatbuf_r+0x2e>
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9ac:	f04f 0100 	mov.w	r1, #0
 800a9b0:	bf14      	ite	ne
 800a9b2:	2340      	movne	r3, #64	@ 0x40
 800a9b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	6031      	str	r1, [r6, #0]
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	b016      	add	sp, #88	@ 0x58
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	466a      	mov	r2, sp
 800a9c4:	f000 f848 	bl	800aa58 <_fstat_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dbec      	blt.n	800a9a6 <__swhatbuf_r+0x12>
 800a9cc:	9901      	ldr	r1, [sp, #4]
 800a9ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9d6:	4259      	negs	r1, r3
 800a9d8:	4159      	adcs	r1, r3
 800a9da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9de:	e7eb      	b.n	800a9b8 <__swhatbuf_r+0x24>

0800a9e0 <__smakebuf_r>:
 800a9e0:	898b      	ldrh	r3, [r1, #12]
 800a9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9e4:	079d      	lsls	r5, r3, #30
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	d507      	bpl.n	800a9fc <__smakebuf_r+0x1c>
 800a9ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	6163      	str	r3, [r4, #20]
 800a9f8:	b003      	add	sp, #12
 800a9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fc:	ab01      	add	r3, sp, #4
 800a9fe:	466a      	mov	r2, sp
 800aa00:	f7ff ffc8 	bl	800a994 <__swhatbuf_r>
 800aa04:	9f00      	ldr	r7, [sp, #0]
 800aa06:	4605      	mov	r5, r0
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff fbba 	bl	800a184 <_malloc_r>
 800aa10:	b948      	cbnz	r0, 800aa26 <__smakebuf_r+0x46>
 800aa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa16:	059a      	lsls	r2, r3, #22
 800aa18:	d4ee      	bmi.n	800a9f8 <__smakebuf_r+0x18>
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	f043 0302 	orr.w	r3, r3, #2
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	e7e2      	b.n	800a9ec <__smakebuf_r+0xc>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	6020      	str	r0, [r4, #0]
 800aa2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa2e:	81a3      	strh	r3, [r4, #12]
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa36:	b15b      	cbz	r3, 800aa50 <__smakebuf_r+0x70>
 800aa38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f000 f81d 	bl	800aa7c <_isatty_r>
 800aa42:	b128      	cbz	r0, 800aa50 <__smakebuf_r+0x70>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	431d      	orrs	r5, r3
 800aa54:	81a5      	strh	r5, [r4, #12]
 800aa56:	e7cf      	b.n	800a9f8 <__smakebuf_r+0x18>

0800aa58 <_fstat_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	@ (800aa78 <_fstat_r+0x20>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	f7f8 f9ea 	bl	8002e3e <_fstat>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d102      	bne.n	800aa74 <_fstat_r+0x1c>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	b103      	cbz	r3, 800aa74 <_fstat_r+0x1c>
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
 800aa76:	bf00      	nop
 800aa78:	2400067c 	.word	0x2400067c

0800aa7c <_isatty_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d06      	ldr	r5, [pc, #24]	@ (800aa98 <_isatty_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f8 f9e9 	bl	8002e5e <_isatty>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_isatty_r+0x1a>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_isatty_r+0x1a>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	2400067c 	.word	0x2400067c

0800aa9c <_sbrk_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d06      	ldr	r5, [pc, #24]	@ (800aab8 <_sbrk_r+0x1c>)
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	602b      	str	r3, [r5, #0]
 800aaa8:	f7f8 f9f2 	bl	8002e90 <_sbrk>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d102      	bne.n	800aab6 <_sbrk_r+0x1a>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	b103      	cbz	r3, 800aab6 <_sbrk_r+0x1a>
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	2400067c 	.word	0x2400067c

0800aabc <_init>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr

0800aac8 <_fini>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr
