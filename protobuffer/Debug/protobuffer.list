
protobuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08009954  08009954  0000a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009cfc  08009cfc  0000acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009d08  08009d08  0000ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08009d0c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2400006c  08009d78  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  08009d78  0000b270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012c06  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002883  00000000  00000000  0001dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000de8  00000000  00000000  00020528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ac4  00000000  00000000  00021310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031075  00000000  00000000  00021dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c82  00000000  00000000  00052e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013bada  00000000  00000000  00065acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a15a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004098  00000000  00000000  001a15e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001a5680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800993c 	.word	0x0800993c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	0800993c 	.word	0x0800993c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 8000688:	1d39      	adds	r1, r7, #4
 800068a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800068e:	2201      	movs	r2, #1
 8000690:	4803      	ldr	r0, [pc, #12]	@ (80006a0 <__io_putchar+0x20>)
 8000692:	f006 fff7 	bl	8007684 <HAL_UART_Transmit>
	return ch;
 8000696:	687b      	ldr	r3, [r7, #4]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	24000088 	.word	0x24000088

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0ae      	sub	sp, #184	@ 0xb8
 80006a8:	af00      	add	r7, sp, #0
	 bool status;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006aa:	f000 f9d7 	bl	8000a5c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f003 fde9 	bl	8004284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f87b 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f939 	bl	800092c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006ba:	f000 f8eb 	bl	8000894 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char data='a';
 80006be:	2361      	movs	r3, #97	@ 0x61
 80006c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  HAL_UART_Transmit(&huart3, (uint8_t*)&data, 1, 0xFFFF);
 80006c4:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 80006c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006cc:	2201      	movs	r2, #1
 80006ce:	4831      	ldr	r0, [pc, #196]	@ (8000794 <main+0xf0>)
 80006d0:	f006 ffd8 	bl	8007684 <HAL_UART_Transmit>

  {

  	  	  SimpleMessage message = SimpleMessage_init_zero;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28

         /* Create a stream that will write to our buffer. */
         pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fae0 	bl	8002ca8 <pb_ostream_from_buffer>

         /* Fill in the lucky number */
         message.lucky_number = 13;
 80006e8:	230d      	movs	r3, #13
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28

         /* Now we are ready to encode the message! */
         status = pb_encode(&stream, SimpleMessage_fields, &message);
 80006ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4928      	ldr	r1, [pc, #160]	@ (8000798 <main+0xf4>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 ff43 	bl	8003582 <pb_encode>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
         message_length = stream.bytes_written;
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

         /* Then just check for any errors.. */
         if (!status)
 8000708:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00b      	beq.n	800072e <main+0x8a>
         {
             printf("Encoding failed: %s\n", PB_GET_ERROR(&stream));
 8000716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <main+0x7c>
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	e000      	b.n	8000722 <main+0x7e>
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <main+0xf8>)
 8000722:	4619      	mov	r1, r3
 8000724:	481e      	ldr	r0, [pc, #120]	@ (80007a0 <main+0xfc>)
 8000726:	f008 fa8d 	bl	8008c44 <iprintf>
             return 1;
 800072a:	2301      	movs	r3, #1
 800072c:	e02d      	b.n	800078a <main+0xe6>

  }

  {
         /* Allocate space for the decoded message. */
         SimpleMessage message = SimpleMessage_init_zero;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

         /* Create a stream that reads from the buffer. */
         pb_istream_t stream = pb_istream_from_buffer(buffer, message_length);
 8000732:	463b      	mov	r3, r7
 8000734:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000738:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fda7 	bl	8001290 <pb_istream_from_buffer>

         /* Now we are ready to decode the message. */
         status = pb_decode(&stream, SimpleMessage_fields, &message);
 8000742:	f107 0210 	add.w	r2, r7, #16
 8000746:	463b      	mov	r3, r7
 8000748:	4913      	ldr	r1, [pc, #76]	@ (8000798 <main+0xf4>)
 800074a:	4618      	mov	r0, r3
 800074c:	f001 feda 	bl	8002504 <pb_decode>
 8000750:	4603      	mov	r3, r0
 8000752:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

         /* Check for errors... */
         if (!status)
 8000756:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00b      	beq.n	800077c <main+0xd8>
         {
             printf("Decoding failed: %s\n", PB_GET_ERROR(&stream));
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <main+0xca>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	e000      	b.n	8000770 <main+0xcc>
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <main+0xf8>)
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <main+0x100>)
 8000774:	f008 fa66 	bl	8008c44 <iprintf>
             return 1;
 8000778:	2301      	movs	r3, #1
 800077a:	e006      	b.n	800078a <main+0xe6>
         }

         /* Print the data contained in the message. */
         printf("Your lucky number was %d!\n", (int)message.lucky_number);
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	4619      	mov	r1, r3
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <main+0x104>)
 8000782:	f008 fa5f 	bl	8008c44 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <main+0xe2>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800078a:	4618      	mov	r0, r3
 800078c:	37b8      	adds	r7, #184	@ 0xb8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000088 	.word	0x24000088
 8000798:	08009c78 	.word	0x08009c78
 800079c:	08009954 	.word	0x08009954
 80007a0:	0800995c 	.word	0x0800995c
 80007a4:	08009974 	.word	0x08009974
 80007a8:	0800998c 	.word	0x0800998c

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	@ 0x70
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	224c      	movs	r2, #76	@ 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f008 fa97 	bl	8008cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f008 fa91 	bl	8008cee <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <SystemClock_Config+0xe0>)
 80007ce:	f04f 32ff 	mov.w	r2, #4294967295
 80007d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d6:	2004      	movs	r0, #4
 80007d8:	f004 f90c 	bl	80049f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <SystemClock_Config+0xe4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <SystemClock_Config+0xe4>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <SystemClock_Config+0xe4>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f8:	bf00      	nop
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <SystemClock_Config+0xe4>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000806:	d1f8      	bne.n	80007fa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000810:	2340      	movs	r3, #64	@ 0x40
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000820:	2308      	movs	r3, #8
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000830:	230c      	movs	r3, #12
 8000832:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000834:	2300      	movs	r3, #0
 8000836:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4618      	mov	r0, r3
 8000842:	f004 f931 	bl	8004aa8 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800084c:	f000 f932 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	233f      	movs	r3, #63	@ 0x3f
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2303      	movs	r3, #3
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f004 fd49 	bl	800530c <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000880:	f000 f918 	bl	8000ab4 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3770      	adds	r7, #112	@ 0x70
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400
 8000890:	58024800 	.word	0x58024800

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	@ (8000928 <MX_USART3_UART_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d6:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008de:	f006 fe81 	bl	80075e4 <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f8e4 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 80008f0:	f008 f81b 	bl	800892a <HAL_UARTEx_SetTxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f8db 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4808      	ldr	r0, [pc, #32]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 8000902:	f008 f850 	bl	80089a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f8d2 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_USART3_UART_Init+0x90>)
 8000912:	f007 ffd1 	bl	80088b8 <HAL_UARTEx_DisableFifoMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f8ca 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000088 	.word	0x24000088
 8000928:	40004800 	.word	0x40004800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b42      	ldr	r3, [pc, #264]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000944:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000948:	4a40      	ldr	r2, [pc, #256]	@ (8000a4c <MX_GPIO_Init+0x120>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000954:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	4b3a      	ldr	r3, [pc, #232]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000962:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000966:	4a39      	ldr	r2, [pc, #228]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800096c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000972:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000980:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000984:	4a31      	ldr	r2, [pc, #196]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800098e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <MX_GPIO_Init+0x120>)
 8000990:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <MX_GPIO_Init+0x120>)
 800099e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009a2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a4c <MX_GPIO_Init+0x120>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ac:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <MX_GPIO_Init+0x120>)
 80009ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	4b24      	ldr	r3, [pc, #144]	@ (8000a4c <MX_GPIO_Init+0x120>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <MX_GPIO_Init+0x120>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_GPIO_Init+0x120>)
 80009cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d0:	f003 0310 	and.w	r3, r3, #16
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009de:	481c      	ldr	r0, [pc, #112]	@ (8000a50 <MX_GPIO_Init+0x124>)
 80009e0:	f003 ffee 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <MX_GPIO_Init+0x128>)
 80009ea:	f003 ffe9 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <MX_GPIO_Init+0x12c>)
 8000a04:	f003 fe2c 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a08:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <MX_GPIO_Init+0x124>)
 8000a22:	f003 fe1d 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a26:	2302      	movs	r3, #2
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_GPIO_Init+0x128>)
 8000a3e:	f003 fe0f 	bl	8004660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58021000 	.word	0x58021000
 8000a58:	58020800 	.word	0x58020800

08000a5c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a6e:	f003 fd7f 	bl	8004570 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a7e:	231f      	movs	r3, #31
 8000a80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a82:	2387      	movs	r3, #135	@ 0x87
 8000a84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fd9d 	bl	80045e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	f003 fd7a 	bl	80045a0 <HAL_MPU_Enable>

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b08f      	sub	sp, #60	@ 0x3c
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	891a      	ldrh	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	8a1b      	ldrh	r3, [r3, #16]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d301      	bcc.n	8000ada <load_descriptor_values+0x1a>
        return false;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e156      	b.n	8000d88 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	895b      	ldrh	r3, [r3, #10]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8000af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d05a      	beq.n	8000bb6 <load_descriptor_values+0xf6>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	f200 8094 	bhi.w	8000c2e <load_descriptor_values+0x16e>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <load_descriptor_values+0x50>
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d01f      	beq.n	8000b4e <load_descriptor_values+0x8e>
 8000b0e:	e08e      	b.n	8000c2e <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8000b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8000b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b28:	0e1b      	lsrs	r3, r3, #24
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b36:	0c1b      	lsrs	r3, r3, #16
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3e:	0f1b      	lsrs	r3, r3, #28
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	825a      	strh	r2, [r3, #18]
            break;
 8000b4c:	e0b4      	b.n	8000cb8 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	895b      	ldrh	r3, [r3, #10]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	0f1b      	lsrs	r3, r3, #28
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b92:	0f1b      	lsrs	r3, r3, #28
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	0c1b      	lsrs	r3, r3, #16
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	825a      	strh	r2, [r3, #18]
            break;
 8000bb4:	e080      	b.n	8000cb8 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	895b      	ldrh	r3, [r3, #10]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	895b      	ldrh	r3, [r3, #10]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	895b      	ldrh	r3, [r3, #10]
 8000be8:	3303      	adds	r3, #3
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	019b      	lsls	r3, r3, #6
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	825a      	strh	r2, [r3, #18]
            break;
 8000c2c:	e044      	b.n	8000cb8 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	895b      	ldrh	r3, [r3, #10]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	895b      	ldrh	r3, [r3, #10]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	895b      	ldrh	r3, [r3, #10]
 8000c60:	3303      	adds	r3, #3
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	895b      	ldrh	r3, [r3, #10]
 8000c74:	3304      	adds	r3, #4
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	825a      	strh	r2, [r3, #18]
            break;
 8000cb6:	bf00      	nop
        }
    }

    if (!iter->message)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d106      	bne.n	8000cce <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
 8000ccc:	e041      	b.n	8000d52 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd4:	441a      	add	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000cda:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699a      	ldr	r2, [r3, #24]
 8000ce6:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000cea:	425b      	negs	r3, r3
 8000cec:	441a      	add	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	621a      	str	r2, [r3, #32]
 8000cf2:	e01a      	b.n	8000d2a <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7d9b      	ldrb	r3, [r3, #22]
 8000cf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000cfc:	2b20      	cmp	r3, #32
 8000cfe:	d111      	bne.n	8000d24 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7d9b      	ldrb	r3, [r3, #22]
 8000d04:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7d9b      	ldrb	r3, [r3, #22]
 8000d10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000d14:	2b80      	cmp	r3, #128	@ 0x80
 8000d16:	d105      	bne.n	8000d24 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f103 0214 	add.w	r2, r3, #20
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	621a      	str	r2, [r3, #32]
 8000d22:	e002      	b.n	8000d2a <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7d9b      	ldrb	r3, [r3, #22]
 8000d2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000d32:	2b80      	cmp	r3, #128	@ 0x80
 8000d34:	d109      	bne.n	8000d4a <load_descriptor_values+0x28a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	61da      	str	r2, [r3, #28]
 8000d48:	e003      	b.n	8000d52 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7d9b      	ldrb	r3, [r3, #22]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d005      	beq.n	8000d6a <load_descriptor_values+0x2aa>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7d9b      	ldrb	r3, [r3, #22]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d10a      	bne.n	8000d80 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	89db      	ldrh	r3, [r3, #14]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d7e:	e002      	b.n	8000d86 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	373c      	adds	r7, #60	@ 0x3c
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	891b      	ldrh	r3, [r3, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	891a      	ldrh	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	8a1b      	ldrh	r3, [r3, #16]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d30c      	bcc.n	8000dd0 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000dce:	e03b      	b.n	8000e48 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	895b      	ldrh	r3, [r3, #10]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2201      	movs	r2, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	895a      	ldrh	r2, [r3, #10]
 8000dfa:	893b      	ldrh	r3, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	899b      	ldrh	r3, [r3, #12]
 8000e08:	7afa      	ldrb	r2, [r7, #11]
 8000e0a:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	bf0c      	ite	eq
 8000e12:	2201      	moveq	r2, #1
 8000e14:	2200      	movne	r2, #0
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	89da      	ldrh	r2, [r3, #14]
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d004      	beq.n	8000e38 <advance_iterator+0xa4>
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d101      	bne.n	8000e3c <advance_iterator+0xa8>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <advance_iterator+0xaa>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	81da      	strh	r2, [r3, #14]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8000e60:	2228      	movs	r2, #40	@ 0x28
 8000e62:	2100      	movs	r1, #0
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f007 ff42 	bl	8008cee <memset>

    iter->descriptor = desc;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff fe22 	bl	8000ac0 <load_descriptor_values>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000ea8:	2b80      	cmp	r3, #128	@ 0x80
 8000eaa:	d109      	bne.n	8000ec0 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	6939      	ldr	r1, [r7, #16]
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffcd 	bl	8000e54 <pb_field_iter_begin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]
 8000ebe:	e008      	b.n	8000ed2 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffc3 	bl	8000e54 <pb_field_iter_begin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f103 020c 	add.w	r2, r3, #12
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	621a      	str	r2, [r3, #32]
    return status;
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff50 	bl	8000d94 <advance_iterator>
    (void)load_descriptor_values(iter);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fde3 	bl	8000ac0 <load_descriptor_values>
    return iter->index != 0;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	891b      	ldrh	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8a1b      	ldrh	r3, [r3, #16]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e044      	b.n	8000fb4 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	8a9b      	ldrh	r3, [r3, #20]
 8000f30:	461a      	mov	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d901      	bls.n	8000f3c <pb_field_iter_find+0x2c>
    {
        return false;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e03b      	b.n	8000fb4 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	891b      	ldrh	r3, [r3, #8]
 8000f40:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	8a1b      	ldrh	r3, [r3, #16]
 8000f46:	461a      	mov	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d204      	bcs.n	8000f58 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	8a1a      	ldrh	r2, [r3, #16]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff1b 	bl	8000d94 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	895b      	ldrh	r3, [r3, #10]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	089a      	lsrs	r2, r3, #2
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	4053      	eors	r3, r2
 8000f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d110      	bne.n	8000fa2 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fd9d 	bl	8000ac0 <load_descriptor_values>

                if (iter->tag == tag &&
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	8a1b      	ldrh	r3, [r3, #16]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d107      	bne.n	8000fa2 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7d9b      	ldrb	r3, [r3, #22]
 8000f96:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8000f9a:	2b0a      	cmp	r3, #10
 8000f9c:	d001      	beq.n	8000fa2 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e008      	b.n	8000fb4 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	891b      	ldrh	r3, [r3, #8]
 8000fa6:	89fa      	ldrh	r2, [r7, #14]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d1d5      	bne.n	8000f58 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fd87 	bl	8000ac0 <load_descriptor_values>
        return false;
 8000fb2:	2300      	movs	r3, #0
    }
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7d9b      	ldrb	r3, [r3, #22]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d101      	bne.n	8000fd4 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e022      	b.n	800101a <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	891b      	ldrh	r3, [r3, #8]
 8000fd8:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff feda 	bl	8000d94 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	895b      	ldrh	r3, [r3, #10]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	2b0a      	cmp	r3, #10
 8000ffc:	d104      	bne.n	8001008 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fd5e 	bl	8000ac0 <load_descriptor_values>
 8001004:	4603      	mov	r3, r0
 8001006:	e008      	b.n	800101a <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	89fa      	ldrh	r2, [r7, #14]
 800100e:	429a      	cmp	r2, r3
 8001010:	d1e3      	bne.n	8000fda <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fd54 	bl	8000ac0 <load_descriptor_values>
        return false;
 8001018:	2300      	movs	r3, #0
    }
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffea 	bl	8001022 <pb_const_cast>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fefd 	bl	8000e54 <pb_field_iter_begin>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f7ff ffd7 	bl	8001022 <pb_const_cast>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff04 	bl	8000e86 <pb_field_iter_begin_extension>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8a5b      	ldrh	r3, [r3, #18]
 8001098:	2b08      	cmp	r3, #8
 800109a:	d125      	bne.n	80010e8 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <pb_default_field_callback+0x40>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	3204      	adds	r2, #4
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	4798      	blx	r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	e010      	b.n	80010ea <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <pb_default_field_callback+0x60>
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	3204      	adds	r2, #4
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	4798      	blx	r3
 80010e4:	4603      	mov	r3, r0
 80010e6:	e000      	b.n	80010ea <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 80010e8:	2301      	movs	r3, #1

}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	441a      	add	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f007 fe63 	bl	8008de6 <memcpy>
    }
    
    return true;
 8001120:	2301      	movs	r3, #1
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <pb_read+0x16>
        return true;
 800113e:	2301      	movs	r3, #1
 8001140:	e05f      	b.n	8001202 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d123      	bne.n	8001190 <pb_read+0x64>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2f      	ldr	r2, [pc, #188]	@ (800120c <pb_read+0xe0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01e      	beq.n	8001190 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8001152:	e011      	b.n	8001178 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2210      	movs	r2, #16
 800115a:	4619      	mov	r1, r3
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff ffe5 	bl	800112c <pb_read>
 8001162:	4603      	mov	r3, r0
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <pb_read+0x46>
				return false;
 800116e:	2300      	movs	r3, #0
 8001170:	e047      	b.n	8001202 <pb_read+0xd6>
			
			count -= 16;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3b10      	subs	r3, #16
 8001176:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d8ea      	bhi.n	8001154 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4619      	mov	r1, r3
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f7ff ffd0 	bl	800112c <pb_read>
 800118c:	4603      	mov	r3, r0
 800118e:	e038      	b.n	8001202 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d90b      	bls.n	80011b2 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <pb_read+0x7c>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	e000      	b.n	80011aa <pb_read+0x7e>
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <pb_read+0xe4>)
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	60d3      	str	r3, [r2, #12]
 80011ae:	2300      	movs	r3, #0
 80011b0:	e027      	b.n	8001202 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	4798      	blx	r3
 80011be:	4603      	mov	r3, r0
 80011c0:	f083 0301 	eor.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <pb_read+0xac>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	e000      	b.n	80011da <pb_read+0xae>
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <pb_read+0xe8>)
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	60d3      	str	r3, [r2, #12]
 80011de:	2300      	movs	r3, #0
 80011e0:	e00f      	b.n	8001202 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d903      	bls.n	80011f4 <pb_read+0xc8>
        stream->bytes_left = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	e005      	b.n	8001200 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]

    return true;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	080010f3 	.word	0x080010f3
 8001210:	080099a8 	.word	0x080099a8
 8001214:	080099b8 	.word	0x080099b8

08001218 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10b      	bne.n	8001242 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <pb_readbyte+0x20>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	e000      	b.n	800123a <pb_readbyte+0x22>
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <pb_readbyte+0x70>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	60d3      	str	r3, [r2, #12]
 800123e:	2300      	movs	r3, #0
 8001240:	e01d      	b.n	800127e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
 800124e:	4603      	mov	r3, r0
 8001250:	f083 0301 	eor.w	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <pb_readbyte+0x50>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	e000      	b.n	800126a <pb_readbyte+0x52>
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <pb_readbyte+0x74>)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	60d3      	str	r3, [r2, #12]
 800126e:	2300      	movs	r3, #0
 8001270:	e005      	b.n	800127e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
    
    return true;    
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	080099a8 	.word	0x080099a8
 800128c:	080099b8 	.word	0x080099b8

08001290 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001290:	b490      	push	{r4, r7}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <pb_istream_from_buffer+0x38>)
 800129e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	461c      	mov	r4, r3
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc90      	pop	{r4, r7}
 80012c6:	4770      	bx	lr
 80012c8:	080010f3 	.word	0x080010f3

080012cc <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80012d8:	f107 0315 	add.w	r3, r7, #21
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff ff9a 	bl	8001218 <pb_readbyte>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00b      	beq.n	8001308 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8001304:	2300      	movs	r3, #0
 8001306:	e084      	b.n	8001412 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8001308:	7d7b      	ldrb	r3, [r7, #21]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	db02      	blt.n	8001316 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8001310:	7d7b      	ldrb	r3, [r7, #21]
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e079      	b.n	800140a <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8001316:	2307      	movs	r3, #7
 8001318:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800131a:	7d7b      	ldrb	r3, [r7, #21]
 800131c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001320:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8001322:	f107 0315 	add.w	r3, r7, #21
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff ff75 	bl	8001218 <pb_readbyte>
 800132e:	4603      	mov	r3, r0
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <pb_decode_varint32_eof+0x72>
                return false;
 800133a:	2300      	movs	r3, #0
 800133c:	e069      	b.n	8001412 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b1f      	cmp	r3, #31
 8001342:	d92f      	bls.n	80013a4 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b3e      	cmp	r3, #62	@ 0x3e
 8001348:	d801      	bhi.n	800134e <pb_decode_varint32_eof+0x82>
 800134a:	23ff      	movs	r3, #255	@ 0xff
 800134c:	e000      	b.n	8001350 <pb_decode_varint32_eof+0x84>
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001352:	7d7b      	ldrb	r3, [r7, #21]
 8001354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 800135c:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800135e:	2b00      	cmp	r3, #0
 8001360:	da05      	bge.n	800136e <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001362:	7d7b      	ldrb	r3, [r7, #21]
 8001364:	7dfa      	ldrb	r2, [r7, #23]
 8001366:	429a      	cmp	r2, r3
 8001368:	d101      	bne.n	800136e <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <pb_decode_varint32_eof+0xa4>
 800136e:	2300      	movs	r3, #0
 8001370:	75bb      	strb	r3, [r7, #22]
 8001372:	7dbb      	ldrb	r3, [r7, #22]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b3f      	cmp	r3, #63	@ 0x3f
 800137e:	d805      	bhi.n	800138c <pb_decode_varint32_eof+0xc0>
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d037      	beq.n	80013fc <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <pb_decode_varint32_eof+0xce>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	e000      	b.n	800139c <pb_decode_varint32_eof+0xd0>
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <pb_decode_varint32_eof+0x150>)
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	60d3      	str	r3, [r2, #12]
 80013a0:	2300      	movs	r3, #0
 80013a2:	e036      	b.n	8001412 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b1c      	cmp	r3, #28
 80013a8:	d11f      	bne.n	80013ea <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d010      	beq.n	80013d6 <pb_decode_varint32_eof+0x10a>
 80013b4:	7d7b      	ldrb	r3, [r7, #21]
 80013b6:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80013ba:	2b78      	cmp	r3, #120	@ 0x78
 80013bc:	d00b      	beq.n	80013d6 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <pb_decode_varint32_eof+0x100>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	e000      	b.n	80013ce <pb_decode_varint32_eof+0x102>
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <pb_decode_varint32_eof+0x150>)
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	60d3      	str	r3, [r2, #12]
 80013d2:	2300      	movs	r3, #0
 80013d4:	e01d      	b.n	8001412 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 80013d6:	7d7b      	ldrb	r3, [r7, #21]
 80013d8:	f003 020f 	and.w	r2, r3, #15
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e008      	b.n	80013fc <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3307      	adds	r3, #7
 8001400:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	b25b      	sxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	db8b      	blt.n	8001322 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	601a      	str	r2, [r3, #0]
   return true;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	080099c4 	.word	0x080099c4

08001420 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800142a:	2200      	movs	r2, #0
 800142c:	6839      	ldr	r1, [r7, #0]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff4c 	bl	80012cc <pb_decode_varint32_eof>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b08a      	sub	sp, #40	@ 0x28
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 800145c:	f107 0317 	add.w	r3, r7, #23
 8001460:	4619      	mov	r1, r3
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fed8 	bl	8001218 <pb_readbyte>
 8001468:	4603      	mov	r3, r0
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <pb_decode_varint+0x38>
            return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e041      	b.n	80014fc <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	2b3e      	cmp	r3, #62	@ 0x3e
 800147c:	d910      	bls.n	80014a0 <pb_decode_varint+0x60>
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <pb_decode_varint+0x56>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	e000      	b.n	8001498 <pb_decode_varint+0x58>
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <pb_decode_varint+0xc8>)
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	60d3      	str	r3, [r2, #12]
 800149c:	2300      	movs	r3, #0
 800149e:	e02d      	b.n	80014fc <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 80014b0:	f04f 0900 	mov.w	r9, #0
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f1a3 0120 	sub.w	r1, r3, #32
 80014ba:	f1c3 0220 	rsb	r2, r3, #32
 80014be:	fa09 f503 	lsl.w	r5, r9, r3
 80014c2:	fa08 f101 	lsl.w	r1, r8, r1
 80014c6:	430d      	orrs	r5, r1
 80014c8:	fa28 f202 	lsr.w	r2, r8, r2
 80014cc:	4315      	orrs	r5, r2
 80014ce:	fa08 f403 	lsl.w	r4, r8, r3
 80014d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014d6:	ea42 0a04 	orr.w	sl, r2, r4
 80014da:	ea43 0b05 	orr.w	fp, r3, r5
 80014de:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	3307      	adds	r3, #7
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dbb5      	blt.n	800145c <pb_decode_varint+0x1c>
    
    *dest = result;
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014f6:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3728      	adds	r7, #40	@ 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001506:	bf00      	nop
 8001508:	080099c4 	.word	0x080099c4

0800150c <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8001514:	f107 030f 	add.w	r3, r7, #15
 8001518:	2201      	movs	r2, #1
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe05 	bl	800112c <pb_read>
 8001522:	4603      	mov	r3, r0
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <pb_skip_varint+0x26>
            return false;
 800152e:	2300      	movs	r3, #0
 8001530:	e004      	b.n	800153c <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	dbec      	blt.n	8001514 <pb_skip_varint+0x8>
    return true;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff64 	bl	8001420 <pb_decode_varint32>
 8001558:	4603      	mov	r3, r0
 800155a:	f083 0301 	eor.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <pb_skip_string+0x24>
        return false;
 8001564:	2300      	movs	r3, #0
 8001566:	e006      	b.n	8001576 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	461a      	mov	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fddc 	bl	800112c <pb_read>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fe90 	bl	80012cc <pb_decode_varint32_eof>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <pb_decode_tag+0x3e>
    {
        return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e00b      	b.n	80015d4 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	701a      	strb	r2, [r3, #0]
    return true;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d826      	bhi.n	800163c <pb_skip_field+0x60>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <pb_skip_field+0x18>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001617 	.word	0x08001617
 80015fc:	08001625 	.word	0x08001625
 8001600:	0800163d 	.word	0x0800163d
 8001604:	0800163d 	.word	0x0800163d
 8001608:	0800162f 	.word	0x0800162f
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff7d 	bl	800150c <pb_skip_varint>
 8001612:	4603      	mov	r3, r0
 8001614:	e01d      	b.n	8001652 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8001616:	2208      	movs	r2, #8
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fd86 	bl	800112c <pb_read>
 8001620:	4603      	mov	r3, r0
 8001622:	e016      	b.n	8001652 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff8d 	bl	8001544 <pb_skip_string>
 800162a:	4603      	mov	r3, r0
 800162c:	e011      	b.n	8001652 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800162e:	2204      	movs	r2, #4
 8001630:	2100      	movs	r1, #0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd7a 	bl	800112c <pb_read>
 8001638:	4603      	mov	r3, r0
 800163a:	e00a      	b.n	8001652 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <pb_skip_field+0x6e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	e000      	b.n	800164c <pb_skip_field+0x70>
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <pb_skip_field+0x80>)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	60d3      	str	r3, [r2, #12]
 8001650:	2300      	movs	r3, #0
    }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	080099d4 	.word	0x080099d4

08001660 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	460b      	mov	r3, r1
 800166e:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d03f      	beq.n	80016fc <read_raw_value+0x9c>
 800167c:	2b05      	cmp	r3, #5
 800167e:	dc47      	bgt.n	8001710 <read_raw_value+0xb0>
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <read_raw_value+0x2a>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d02f      	beq.n	80016e8 <read_raw_value+0x88>
 8001688:	e042      	b.n	8001710 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20b      	bcs.n	80016bc <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <read_raw_value+0x52>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	e000      	b.n	80016b4 <read_raw_value+0x54>
 80016b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <read_raw_value+0xd0>)
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	60d3      	str	r3, [r2, #12]
 80016b8:	2300      	movs	r3, #0
 80016ba:	e034      	b.n	8001726 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 80016bc:	2201      	movs	r2, #1
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fd33 	bl	800112c <pb_read>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <read_raw_value+0x76>
                    return false;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e027      	b.n	8001726 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dbd5      	blt.n	8001690 <read_raw_value+0x30>
            return true;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e01e      	b.n	8001726 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2208      	movs	r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80016ee:	2208      	movs	r2, #8
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7ff fd1a 	bl	800112c <pb_read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	e014      	b.n	8001726 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2204      	movs	r2, #4
 8001700:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8001702:	2204      	movs	r2, #4
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd10 	bl	800112c <pb_read>
 800170c:	4603      	mov	r3, r0
 800170e:	e00a      	b.n	8001726 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <read_raw_value+0xbe>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	e000      	b.n	8001720 <read_raw_value+0xc0>
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <read_raw_value+0xd4>)
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	60d3      	str	r3, [r2, #12]
 8001724:	2300      	movs	r3, #0
    }
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	080099c4 	.word	0x080099c4
 8001734:	080099d4 	.word	0x080099d4

08001738 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4619      	mov	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe69 	bl	8001420 <pb_decode_varint32>
 800174e:	4603      	mov	r3, r0
 8001750:	f083 0301 	eor.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <pb_make_string_substream+0x26>
        return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e020      	b.n	80017a0 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4614      	mov	r4, r2
 8001764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d20b      	bcs.n	800178c <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <pb_make_string_substream+0x4a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	e000      	b.n	8001784 <pb_make_string_substream+0x4c>
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <pb_make_string_substream+0x70>)
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	60d3      	str	r3, [r2, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	e009      	b.n	80017a0 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad2      	subs	r2, r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
    return true;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	080099e8 	.word	0x080099e8

080017ac <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00e      	beq.n	80017dc <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	461a      	mov	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f7ff fcb0 	bl	800112c <pb_read>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <pb_close_string_substream+0x30>
            return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e008      	b.n	80017ee <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	460b      	mov	r3, r1
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7d9b      	ldrb	r3, [r3, #22]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	2b0b      	cmp	r3, #11
 8001810:	f200 80d4 	bhi.w	80019bc <decode_basic_field+0x1c4>
 8001814:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <decode_basic_field+0x24>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	0800184d 	.word	0x0800184d
 8001820:	0800187d 	.word	0x0800187d
 8001824:	0800187d 	.word	0x0800187d
 8001828:	0800187d 	.word	0x0800187d
 800182c:	080018ad 	.word	0x080018ad
 8001830:	080018e1 	.word	0x080018e1
 8001834:	08001915 	.word	0x08001915
 8001838:	0800193f 	.word	0x0800193f
 800183c:	08001969 	.word	0x08001969
 8001840:	08001969 	.word	0x08001969
 8001844:	080019bd 	.word	0x080019bd
 8001848:	08001993 	.word	0x08001993
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <decode_basic_field+0x78>
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	2bff      	cmp	r3, #255	@ 0xff
 8001856:	d00b      	beq.n	8001870 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <decode_basic_field+0x6e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	e000      	b.n	8001868 <decode_basic_field+0x70>
 8001866:	4b5d      	ldr	r3, [pc, #372]	@ (80019dc <decode_basic_field+0x1e4>)
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	60d3      	str	r3, [r2, #12]
 800186c:	2300      	movs	r3, #0
 800186e:	e0b0      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fef6 	bl	8002664 <pb_dec_bool>
 8001878:	4603      	mov	r3, r0
 800187a:	e0aa      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00e      	beq.n	80018a0 <decode_basic_field+0xa8>
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2bff      	cmp	r3, #255	@ 0xff
 8001886:	d00b      	beq.n	80018a0 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <decode_basic_field+0x9e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	e000      	b.n	8001898 <decode_basic_field+0xa0>
 8001896:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <decode_basic_field+0x1e4>)
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	60d3      	str	r3, [r2, #12]
 800189c:	2300      	movs	r3, #0
 800189e:	e098      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 feee 	bl	8002684 <pb_dec_varint>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e092      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d00e      	beq.n	80018d0 <decode_basic_field+0xd8>
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	2bff      	cmp	r3, #255	@ 0xff
 80018b6:	d00b      	beq.n	80018d0 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <decode_basic_field+0xce>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	e000      	b.n	80018c8 <decode_basic_field+0xd0>
 80018c6:	4b45      	ldr	r3, [pc, #276]	@ (80019dc <decode_basic_field+0x1e4>)
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	60d3      	str	r3, [r2, #12]
 80018cc:	2300      	movs	r3, #0
 80018ce:	e080      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fe8a 	bl	80025f0 <pb_decode_fixed32>
 80018dc:	4603      	mov	r3, r0
 80018de:	e078      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d00e      	beq.n	8001904 <decode_basic_field+0x10c>
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	2bff      	cmp	r3, #255	@ 0xff
 80018ea:	d00b      	beq.n	8001904 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <decode_basic_field+0x102>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	e000      	b.n	80018fc <decode_basic_field+0x104>
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <decode_basic_field+0x1e4>)
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	60d3      	str	r3, [r2, #12]
 8001900:	2300      	movs	r3, #0
 8001902:	e066      	b.n	80019d2 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4619      	mov	r1, r3
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fe8c 	bl	8002628 <pb_decode_fixed64>
 8001910:	4603      	mov	r3, r0
 8001912:	e05e      	b.n	80019d2 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d00b      	beq.n	8001932 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <decode_basic_field+0x130>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	e000      	b.n	800192a <decode_basic_field+0x132>
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <decode_basic_field+0x1e4>)
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	60d3      	str	r3, [r2, #12]
 800192e:	2300      	movs	r3, #0
 8001930:	e04f      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 ffd1 	bl	80028dc <pb_dec_bytes>
 800193a:	4603      	mov	r3, r0
 800193c:	e049      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d00b      	beq.n	800195c <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <decode_basic_field+0x15a>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	e000      	b.n	8001954 <decode_basic_field+0x15c>
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <decode_basic_field+0x1e4>)
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	60d3      	str	r3, [r2, #12]
 8001958:	2300      	movs	r3, #0
 800195a:	e03a      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f001 f830 	bl	80029c4 <pb_dec_string>
 8001964:	4603      	mov	r3, r0
 8001966:	e034      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d00b      	beq.n	8001986 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <decode_basic_field+0x184>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	e000      	b.n	800197e <decode_basic_field+0x186>
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <decode_basic_field+0x1e4>)
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	60d3      	str	r3, [r2, #12]
 8001982:	2300      	movs	r3, #0
 8001984:	e025      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f001 f897 	bl	8002abc <pb_dec_submessage>
 800198e:	4603      	mov	r3, r0
 8001990:	e01f      	b.n	80019d2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d00b      	beq.n	80019b0 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <decode_basic_field+0x1ae>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	e000      	b.n	80019a8 <decode_basic_field+0x1b0>
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <decode_basic_field+0x1e4>)
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	60d3      	str	r3, [r2, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	e010      	b.n	80019d2 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f001 f90c 	bl	8002bd0 <pb_dec_fixed_length_bytes>
 80019b8:	4603      	mov	r3, r0
 80019ba:	e00a      	b.n	80019d2 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <decode_basic_field+0x1d2>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	e000      	b.n	80019cc <decode_basic_field+0x1d4>
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <decode_basic_field+0x1e8>)
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	60d3      	str	r3, [r2, #12]
 80019d0:	2300      	movs	r3, #0
    }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	08009a00 	.word	0x08009a00
 80019e0:	08009a10 	.word	0x08009a10

080019e4 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	@ 0x58
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	460b      	mov	r3, r1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7d9b      	ldrb	r3, [r3, #22]
 80019f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019fa:	2b30      	cmp	r3, #48	@ 0x30
 80019fc:	f000 80c2 	beq.w	8001b84 <decode_static_field+0x1a0>
 8001a00:	2b30      	cmp	r3, #48	@ 0x30
 8001a02:	f200 811a 	bhi.w	8001c3a <decode_static_field+0x256>
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d01f      	beq.n	8001a4a <decode_static_field+0x66>
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	f200 8115 	bhi.w	8001c3a <decode_static_field+0x256>
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <decode_static_field+0x36>
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d008      	beq.n	8001a2a <decode_static_field+0x46>
 8001a18:	e10f      	b.n	8001c3a <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7ff fee9 	bl	80017f8 <decode_basic_field>
 8001a26:	4603      	mov	r3, r0
 8001a28:	e112      	b.n	8001c50 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fed9 	bl	80017f8 <decode_basic_field>
 8001a46:	4603      	mov	r3, r0
 8001a48:	e102      	b.n	8001c50 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d16c      	bne.n	8001b2a <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7d9b      	ldrb	r3, [r3, #22]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d866      	bhi.n	8001b2a <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	8a52      	ldrh	r2, [r2, #18]
 8001a70:	4611      	mov	r1, r2
 8001a72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a74:	8812      	ldrh	r2, [r2, #0]
 8001a76:	fb01 f202 	mul.w	r2, r1, r2
 8001a7a:	441a      	add	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001a80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fe56 	bl	8001738 <pb_make_string_substream>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01f      	beq.n	8001ad8 <decode_static_field+0xf4>
                    return false;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e0d9      	b.n	8001c50 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8001a9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	21ff      	movs	r1, #255	@ 0xff
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fea7 	bl	80017f8 <decode_basic_field>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f083 0301 	eor.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <decode_static_field+0xda>
                    {
                        status = false;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8001abc:	e015      	b.n	8001aea <decode_static_field+0x106>
                    }
                    (*size)++;
 8001abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac8:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	8a52      	ldrh	r2, [r2, #18]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <decode_static_field+0x106>
 8001ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8a9b      	ldrh	r3, [r3, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d8      	bcc.n	8001a9c <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8001aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <decode_static_field+0x11a>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	e000      	b.n	8001b00 <decode_static_field+0x11c>
 8001afe:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <decode_static_field+0x274>)
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	60d3      	str	r3, [r2, #12]
 8001b04:	2300      	movs	r3, #0
 8001b06:	e0a3      	b.n	8001c50 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8001b08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fe4c 	bl	80017ac <pb_close_string_substream>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f083 0301 	eor.w	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <decode_static_field+0x140>
                    return false;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e095      	b.n	8001c50 <decode_static_field+0x26c>

                return status;
 8001b24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001b28:	e092      	b.n	8001c50 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	8a52      	ldrh	r2, [r2, #18]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b3c:	8812      	ldrh	r2, [r2, #0]
 8001b3e:	fb01 f202 	mul.w	r2, r1, r2
 8001b42:	441a      	add	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8001b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	b291      	uxth	r1, r2
 8001b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b52:	8011      	strh	r1, [r2, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	8a92      	ldrh	r2, [r2, #20]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d30b      	bcc.n	8001b74 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <decode_static_field+0x186>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	e000      	b.n	8001b6c <decode_static_field+0x188>
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <decode_static_field+0x274>)
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	60d3      	str	r3, [r2, #12]
 8001b70:	2300      	movs	r3, #0
 8001b72:	e06d      	b.n	8001c50 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7ff fe3c 	bl	80017f8 <decode_basic_field>
 8001b80:	4603      	mov	r3, r0
 8001b82:	e065      	b.n	8001c50 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7d9b      	ldrb	r3, [r3, #22]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d005      	beq.n	8001b9c <decode_static_field+0x1b8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7d9b      	ldrb	r3, [r3, #22]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d141      	bne.n	8001c20 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d03a      	beq.n	8001c20 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69d8      	ldr	r0, [r3, #28]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	8a5b      	ldrh	r3, [r3, #18]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f007 f89a 	bl	8008cee <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d022      	beq.n	8001c20 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f934 	bl	8000e54 <pb_field_iter_begin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fa4d 	bl	8002096 <pb_message_set_to_defaults>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f083 0301 	eor.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <decode_static_field+0x232>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	e000      	b.n	8001c18 <decode_static_field+0x234>
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <decode_static_field+0x278>)
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	60d3      	str	r3, [r2, #12]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e017      	b.n	8001c50 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	8a12      	ldrh	r2, [r2, #16]
 8001c28:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fde1 	bl	80017f8 <decode_basic_field>
 8001c36:	4603      	mov	r3, r0
 8001c38:	e00a      	b.n	8001c50 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <decode_static_field+0x264>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	e000      	b.n	8001c4a <decode_static_field+0x266>
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <decode_static_field+0x27c>)
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	60d3      	str	r3, [r2, #12]
 8001c4e:	2300      	movs	r3, #0
    }
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3758      	adds	r7, #88	@ 0x58
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08009a24 	.word	0x08009a24
 8001c5c:	08009a34 	.word	0x08009a34
 8001c60:	08009a10 	.word	0x08009a10

08001c64 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <decode_pointer_field+0x1c>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	e000      	b.n	8001c82 <decode_pointer_field+0x1e>
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <decode_pointer_field+0x30>)
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	60d3      	str	r3, [r2, #12]
 8001c86:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	08009a4c 	.word	0x08009a4c

08001c98 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b097      	sub	sp, #92	@ 0x5c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	61f8      	str	r0, [r7, #28]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	617a      	str	r2, [r7, #20]
 8001ca4:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d106      	bne.n	8001cbe <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001cb0:	7efb      	ldrb	r3, [r7, #27]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	69f8      	ldr	r0, [r7, #28]
 8001cb6:	f7ff fc91 	bl	80015dc <pb_skip_field>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	e070      	b.n	8001da0 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001cbe:	7efb      	ldrb	r3, [r7, #27]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d145      	bne.n	8001d50 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001cc4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cc8:	4619      	mov	r1, r3
 8001cca:	69f8      	ldr	r0, [r7, #28]
 8001ccc:	f7ff fd34 	bl	8001738 <pb_make_string_substream>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <decode_callback_field+0x48>
            return false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e05f      	b.n	8001da0 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce2:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4798      	blx	r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <decode_callback_field+0x76>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	e005      	b.n	8001d1a <decode_callback_field+0x82>
 8001d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <decode_callback_field+0x80>
 8001d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d16:	e000      	b.n	8001d1a <decode_callback_field+0x82>
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <decode_callback_field+0x110>)
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	60d3      	str	r3, [r2, #12]
                return false;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e03e      	b.n	8001da0 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <decode_callback_field+0x98>
 8001d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8d7      	bhi.n	8001ce0 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001d30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d34:	4619      	mov	r1, r3
 8001d36:	69f8      	ldr	r0, [r7, #28]
 8001d38:	f7ff fd38 	bl	80017ac <pb_close_string_substream>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <decode_callback_field+0xb4>
            return false;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e029      	b.n	8001da0 <decode_callback_field+0x108>

        return true;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e027      	b.n	8001da0 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001d50:	230a      	movs	r3, #10
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d5c:	7ef9      	ldrb	r1, [r7, #27]
 8001d5e:	69f8      	ldr	r0, [r7, #28]
 8001d60:	f7ff fc7e 	bl	8001660 <read_raw_value>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <decode_callback_field+0xdc>
            return false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e015      	b.n	8001da0 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d76:	463b      	mov	r3, r7
 8001d78:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa87 	bl	8001290 <pb_istream_from_buffer>
 8001d82:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001d86:	463b      	mov	r3, r7
 8001d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4798      	blx	r3
 8001d9e:	4603      	mov	r3, r0
    }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	375c      	adds	r7, #92	@ 0x5c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	08009a60 	.word	0x08009a60

08001dac <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	460b      	mov	r3, r1
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7d9b      	ldrb	r3, [r3, #22]
 8001dbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001dc2:	2b80      	cmp	r3, #128	@ 0x80
 8001dc4:	d00e      	beq.n	8001de4 <decode_field+0x38>
 8001dc6:	2b80      	cmp	r3, #128	@ 0x80
 8001dc8:	d81c      	bhi.n	8001e04 <decode_field+0x58>
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <decode_field+0x28>
 8001dce:	2b40      	cmp	r3, #64	@ 0x40
 8001dd0:	d010      	beq.n	8001df4 <decode_field+0x48>
 8001dd2:	e017      	b.n	8001e04 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff fe02 	bl	80019e4 <decode_static_field>
 8001de0:	4603      	mov	r3, r0
 8001de2:	e01a      	b.n	8001e1a <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff ff3a 	bl	8001c64 <decode_pointer_field>
 8001df0:	4603      	mov	r3, r0
 8001df2:	e012      	b.n	8001e1a <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff ff4c 	bl	8001c98 <decode_callback_field>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e00a      	b.n	8001e1a <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <decode_field+0x66>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	e000      	b.n	8001e14 <decode_field+0x68>
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <decode_field+0x78>)
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	60d3      	str	r3, [r2, #12]
 8001e18:	2300      	movs	r3, #0
    }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	08009a10 	.word	0x08009a10

08001e28 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	@ 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f822 	bl	8000e86 <pb_field_iter_begin_extension>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f083 0301 	eor.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <default_extension_decoder+0x34>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	e000      	b.n	8001e5e <default_extension_decoder+0x36>
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <default_extension_decoder+0x70>)
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	60d3      	str	r3, [r2, #12]
 8001e62:	2300      	movs	r3, #0
 8001e64:	e014      	b.n	8001e90 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001e66:	8c3b      	ldrh	r3, [r7, #32]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d102      	bne.n	8001e76 <default_extension_decoder+0x4e>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <default_extension_decoder+0x52>
        return true;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00a      	b.n	8001e90 <default_extension_decoder+0x68>

    extension->found = true;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001e80:	f107 0210 	add.w	r2, r7, #16
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff ff8f 	bl	8001dac <decode_field>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3738      	adds	r7, #56	@ 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	08009a70 	.word	0x08009a70

08001e9c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001eb2:	e022      	b.n	8001efa <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681c      	ldr	r4, [r3, #0]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	47a0      	blx	r4
 8001ece:	4603      	mov	r3, r0
 8001ed0:	75fb      	strb	r3, [r7, #23]
 8001ed2:	e007      	b.n	8001ee4 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ffa4 	bl	8001e28 <default_extension_decoder>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <decode_extension+0x58>
            return false;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e00b      	b.n	8001f0c <decode_extension+0x70>
        
        extension = extension->next;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <decode_extension+0x6e>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d0d4      	beq.n	8001eb4 <decode_extension+0x18>
    }
    
    return true;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	@ 0x38
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7d9b      	ldrb	r3, [r3, #22]
 8001f20:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8001f24:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	2b0a      	cmp	r3, #10
 8001f2e:	d124      	bne.n	8001f7a <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001f38:	e01b      	b.n	8001f72 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ffa0 	bl	8000e86 <pb_field_iter_begin_extension>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4e:	2200      	movs	r2, #0
 8001f50:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f89d 	bl	8002096 <pb_message_set_to_defaults>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <pb_field_set_to_default+0x58>
                    return false;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e090      	b.n	800208e <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e0      	bne.n	8001f3a <pb_field_set_to_default+0x26>
 8001f78:	e088      	b.n	800208c <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8001f7a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d166      	bne.n	8002054 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8001f8c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d108      	bne.n	8001faa <pb_field_set_to_default+0x96>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e012      	b.n	8001fd0 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001faa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d005      	beq.n	8001fc2 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8001fb6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8001fbe:	2b30      	cmp	r3, #48	@ 0x30
 8001fc0:	d106      	bne.n	8001fd0 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8001fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d059      	beq.n	800208c <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7d9b      	ldrb	r3, [r3, #22]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d005      	beq.n	8001ff0 <pb_field_set_to_default+0xdc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7d9b      	ldrb	r3, [r3, #22]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d128      	bne.n	8002042 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d018      	beq.n	8002042 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe ff19 	bl	8000e54 <pb_field_iter_begin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d030      	beq.n	800208a <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f832 	bl	8002096 <pb_message_set_to_defaults>
 8002032:	4603      	mov	r3, r0
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d025      	beq.n	800208a <pb_field_set_to_default+0x176>
                        return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e025      	b.n	800208e <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69d8      	ldr	r0, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8a5b      	ldrh	r3, [r3, #18]
 800204a:	461a      	mov	r2, r3
 800204c:	2100      	movs	r1, #0
 800204e:	f006 fe4e 	bl	8008cee <memset>
 8002052:	e01b      	b.n	800208c <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8002054:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002058:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800205c:	2b80      	cmp	r3, #128	@ 0x80
 800205e:	d115      	bne.n	800208c <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002068:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800206c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002070:	2b20      	cmp	r3, #32
 8002072:	d005      	beq.n	8002080 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8002074:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002078:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800207c:	2b30      	cmp	r3, #48	@ 0x30
 800207e:	d105      	bne.n	800208c <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	e000      	b.n	800208c <pb_field_set_to_default+0x178>
            {
 800208a:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	3738      	adds	r7, #56	@ 0x38
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8002096:	b590      	push	{r4, r7, lr}
 8002098:	b08d      	sub	sp, #52	@ 0x34
 800209a:	af00      	add	r7, sp, #0
 800209c:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	463b      	mov	r3, r7
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f8e0 	bl	8001290 <pb_istream_from_buffer>
 80020d0:	f107 0420 	add.w	r4, r7, #32
 80020d4:	463b      	mov	r3, r7
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80020dc:	f107 031a 	add.w	r3, r7, #26
 80020e0:	f107 021c 	add.w	r2, r7, #28
 80020e4:	f107 011b 	add.w	r1, r7, #27
 80020e8:	f107 0020 	add.w	r0, r7, #32
 80020ec:	f7ff fa47 	bl	800157e <pb_decode_tag>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <pb_message_set_to_defaults+0x6a>
            return false;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e043      	b.n	8002188 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f7ff ff07 	bl	8001f14 <pb_field_set_to_default>
 8002106:	4603      	mov	r3, r0
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <pb_message_set_to_defaults+0x80>
            return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e038      	b.n	8002188 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02e      	beq.n	800217a <pb_message_set_to_defaults+0xe4>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	8a1b      	ldrh	r3, [r3, #16]
 8002120:	461a      	mov	r2, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	d128      	bne.n	800217a <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8002128:	7ef9      	ldrb	r1, [r7, #27]
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe3b 	bl	8001dac <decode_field>
 8002136:	4603      	mov	r3, r0
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <pb_message_set_to_defaults+0xb0>
                return false;
 8002142:	2300      	movs	r3, #0
 8002144:	e020      	b.n	8002188 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002146:	f107 031a 	add.w	r3, r7, #26
 800214a:	f107 021c 	add.w	r2, r7, #28
 800214e:	f107 011b 	add.w	r1, r7, #27
 8002152:	f107 0020 	add.w	r0, r7, #32
 8002156:	f7ff fa12 	bl	800157e <pb_decode_tag>
 800215a:	4603      	mov	r3, r0
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <pb_message_set_to_defaults+0xd4>
                return false;
 8002166:	2300      	movs	r3, #0
 8002168:	e00e      	b.n	8002188 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7fe feb3 	bl	8000ee6 <pb_field_iter_next>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1bc      	bne.n	8002100 <pb_message_set_to_defaults+0x6a>

    return true;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3734      	adds	r7, #52	@ 0x34
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09a      	sub	sp, #104	@ 0x68
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 80021a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021aa:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 80021ba:	2300      	movs	r3, #0
 80021bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80021be:	2300      	movs	r3, #0
 80021c0:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fe3f 	bl	8000e54 <pb_field_iter_begin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8102 	beq.w	80023e2 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 80fc 	bne.w	80023e2 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 80021ea:	f107 0318 	add.w	r3, r7, #24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff51 	bl	8002096 <pb_message_set_to_defaults>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80f0 	beq.w	80023e2 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <pb_decode_inner+0x80>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	e000      	b.n	8002212 <pb_decode_inner+0x82>
 8002210:	4b99      	ldr	r3, [pc, #612]	@ (8002478 <pb_decode_inner+0x2e8>)
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	60d3      	str	r3, [r2, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	e16d      	b.n	80024f6 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800221a:	f107 0312 	add.w	r3, r7, #18
 800221e:	f107 0214 	add.w	r2, r7, #20
 8002222:	f107 0113 	add.w	r1, r7, #19
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff f9a9 	bl	800157e <pb_decode_tag>
 800222c:	4603      	mov	r3, r0
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <pb_decode_inner+0xb4>
        {
            if (eof)
 8002238:	7cbb      	ldrb	r3, [r7, #18]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80d7 	bne.w	80023ee <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8002240:	2300      	movs	r3, #0
 8002242:	e158      	b.n	80024f6 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d111      	bne.n	800226e <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 80ce 	bne.w	80023f2 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <pb_decode_inner+0xd4>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	e000      	b.n	8002266 <pb_decode_inner+0xd6>
 8002264:	4b85      	ldr	r3, [pc, #532]	@ (800247c <pb_decode_inner+0x2ec>)
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	60d3      	str	r3, [r2, #12]
 800226a:	2300      	movs	r3, #0
 800226c:	e143      	b.n	80024f6 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fe4a 	bl	8000f10 <pb_field_iter_find>
 800227c:	4603      	mov	r3, r0
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <pb_decode_inner+0x104>
 8002288:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d13c      	bne.n	800230e <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8002294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002296:	2b00      	cmp	r3, #0
 8002298:	d112      	bne.n	80022c0 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fe8c 	bl	8000fbc <pb_field_iter_find_extension>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 80022b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022b2:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 80022b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d815      	bhi.n	80022f4 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	7cfa      	ldrb	r2, [r7, #19]
 80022d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fde1 	bl	8001e9c <decode_extension>
 80022da:	4603      	mov	r3, r0
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <pb_decode_inner+0x15a>
                    return false;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e105      	b.n	80024f6 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d173      	bne.n	80023dc <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	4619      	mov	r1, r3
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff f96f 	bl	80015dc <pb_skip_field>
 80022fe:	4603      	mov	r3, r0
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d06a      	beq.n	80023e0 <pb_decode_inner+0x250>
                return false;
 800230a:	2300      	movs	r3, #0
 800230c:	e0f3      	b.n	80024f6 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 800230e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002312:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002316:	2b20      	cmp	r3, #32
 8002318:	d12e      	bne.n	8002378 <pb_decode_inner+0x1e8>
 800231a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	3314      	adds	r3, #20
 8002322:	429a      	cmp	r2, r3
 8002324:	d128      	bne.n	8002378 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8002326:	8c3b      	ldrh	r3, [r7, #32]
 8002328:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800232c:	429a      	cmp	r2, r3
 800232e:	d020      	beq.n	8002372 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8002330:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002338:	4293      	cmp	r3, r2
 800233a:	d011      	beq.n	8002360 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 800233c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8002340:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8002344:	429a      	cmp	r2, r3
 8002346:	d00b      	beq.n	8002360 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <pb_decode_inner+0x1c6>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	e000      	b.n	8002358 <pb_decode_inner+0x1c8>
 8002356:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <pb_decode_inner+0x2f0>)
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	60d3      	str	r3, [r2, #12]
 800235c:	2300      	movs	r3, #0
 800235e:	e0ca      	b.n	80024f6 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8002360:	8c3b      	ldrh	r3, [r7, #32]
 8002362:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 800236c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800236e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8002372:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8002378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800237c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11c      	bne.n	80023be <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8002384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002386:	2b3f      	cmp	r3, #63	@ 0x3f
 8002388:	d819      	bhi.n	80023be <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800238a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2201      	movs	r2, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8002398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b29b      	uxth	r3, r3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3368      	adds	r3, #104	@ 0x68
 80023a2:	443b      	add	r3, r7
 80023a4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80023a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b2:	431a      	orrs	r2, r3
 80023b4:	008b      	lsls	r3, r1, #2
 80023b6:	3368      	adds	r3, #104	@ 0x68
 80023b8:	443b      	add	r3, r7
 80023ba:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	f107 0218 	add.w	r2, r7, #24
 80023c4:	4619      	mov	r1, r3
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fcf0 	bl	8001dac <decode_field>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <pb_decode_inner+0x252>
            return false;
 80023d8:	2300      	movs	r3, #0
 80023da:	e08c      	b.n	80024f6 <pb_decode_inner+0x366>
                    continue;
 80023dc:	bf00      	nop
 80023de:	e000      	b.n	80023e2 <pb_decode_inner+0x252>
            continue;
 80023e0:	bf00      	nop
    while (stream->bytes_left)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f af17 	bne.w	800221a <pb_decode_inner+0x8a>
 80023ec:	e002      	b.n	80023f4 <pb_decode_inner+0x264>
                break;
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <pb_decode_inner+0x264>
            break;
 80023f2:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80023f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80023f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d011      	beq.n	8002424 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8002400:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8002404:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8002408:	429a      	cmp	r2, r3
 800240a:	d00b      	beq.n	8002424 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <pb_decode_inner+0x28a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	e000      	b.n	800241c <pb_decode_inner+0x28c>
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <pb_decode_inner+0x2f0>)
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	60d3      	str	r3, [r2, #12]
 8002420:	2300      	movs	r3, #0
 8002422:	e068      	b.n	80024f6 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	8a5b      	ldrh	r3, [r3, #18]
 8002428:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 800242c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05f      	beq.n	80024f4 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8002434:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d902      	bls.n	8002442 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 800243c:	2340      	movs	r3, #64	@ 0x40
 800243e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8002442:	2300      	movs	r3, #0
 8002444:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002448:	e023      	b.n	8002492 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800244a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3368      	adds	r3, #104	@ 0x68
 8002452:	443b      	add	r3, r7
 8002454:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800245a:	429a      	cmp	r2, r3
 800245c:	d014      	beq.n	8002488 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <pb_decode_inner+0x2dc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	e000      	b.n	800246e <pb_decode_inner+0x2de>
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <pb_decode_inner+0x2f4>)
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	60d3      	str	r3, [r2, #12]
 8002472:	2300      	movs	r3, #0
 8002474:	e03f      	b.n	80024f6 <pb_decode_inner+0x366>
 8002476:	bf00      	nop
 8002478:	08009a34 	.word	0x08009a34
 800247c:	08009a84 	.word	0x08009a84
 8002480:	08009a90 	.word	0x08009a90
 8002484:	08009ab4 	.word	0x08009ab4
            for (i = 0; i < (req_field_count >> 5); i++)
 8002488:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800248c:	3301      	adds	r3, #1
 800248e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002492:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	b29b      	uxth	r3, r3
 800249a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3d3      	bcc.n	800244a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80024a2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d022      	beq.n	80024f4 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80024ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3368      	adds	r3, #104	@ 0x68
 80024ba:	443b      	add	r3, r7
 80024bc:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 80024c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f1c3 0320 	rsb	r3, r3, #32
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d6:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80024d8:	429a      	cmp	r2, r3
 80024da:	d00b      	beq.n	80024f4 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <pb_decode_inner+0x35a>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	e000      	b.n	80024ec <pb_decode_inner+0x35c>
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <pb_decode_inner+0x370>)
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	60d3      	str	r3, [r2, #12]
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3768      	adds	r7, #104	@ 0x68
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	08009ab4 	.word	0x08009ab4

08002504 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8002510:	2300      	movs	r3, #0
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff fe3a 	bl	8002190 <pb_decode_inner>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8002520:	7dfb      	ldrb	r3, [r7, #23]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe ff70 	bl	8001420 <pb_decode_varint32>
 8002540:	4603      	mov	r3, r0
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <pb_decode_bool+0x26>
        return false;
 800254c:	2300      	movs	r3, #0
 800254e:	e008      	b.n	8002562 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2da      	uxtb	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	701a      	strb	r2, [r3, #0]
    return true;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800256a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe ff5f 	bl	8001440 <pb_decode_varint>
 8002582:	4603      	mov	r3, r0
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <pb_decode_svarint+0x28>
        return false;
 800258e:	2300      	movs	r3, #0
 8002590:	e029      	b.n	80025e6 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8002592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002596:	f002 0401 	and.w	r4, r2, #1
 800259a:	2500      	movs	r5, #0
 800259c:	ea54 0305 	orrs.w	r3, r4, r5
 80025a0:	d013      	beq.n	80025ca <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80025a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	0842      	lsrs	r2, r0, #1
 80025b0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80025b4:	084b      	lsrs	r3, r1, #1
 80025b6:	ea6f 0802 	mvn.w	r8, r2
 80025ba:	ea6f 0903 	mvn.w	r9, r3
 80025be:	4642      	mov	r2, r8
 80025c0:	464b      	mov	r3, r9
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	e9c1 2300 	strd	r2, r3, [r1]
 80025c8:	e00c      	b.n	80025e4 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 80025ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	0842      	lsrs	r2, r0, #1
 80025d8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80025dc:	084b      	lsrs	r3, r1, #1
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080025f0 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	2204      	movs	r2, #4
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fd92 	bl	800112c <pb_read>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <pb_decode_fixed32+0x28>
        return false;
 8002614:	2300      	movs	r3, #0
 8002616:	e003      	b.n	8002620 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	2208      	movs	r2, #8
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fd76 	bl	800112c <pb_read>
 8002640:	4603      	mov	r3, r0
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <pb_decode_fixed64+0x28>
        return false;
 800264c:	2300      	movs	r3, #0
 800264e:	e005      	b.n	800265c <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8002650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff58 	bl	800252a <pb_decode_bool>
 800267a:	4603      	mov	r3, r0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b094      	sub	sp, #80	@ 0x50
 800268a:	af00      	add	r7, sp, #0
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24
 800268e:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	7d9b      	ldrb	r3, [r3, #22]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	2b02      	cmp	r3, #2
 800269a:	d179      	bne.n	8002790 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 800269c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026a0:	4619      	mov	r1, r3
 80026a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026a4:	f7fe fecc 	bl	8001440 <pb_decode_varint>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <pb_dec_varint+0x34>
            return false;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e107      	b.n	80028c8 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	8a5b      	ldrh	r3, [r3, #18]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d10a      	bne.n	80026d6 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
 80026cc:	e9d1 2300 	ldrd	r2, r3, [r1]
 80026d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80026d4:	e046      	b.n	8002764 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	8a5b      	ldrh	r3, [r3, #18]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d10e      	bne.n	80026fc <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 80026de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4602      	mov	r2, r0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	617a      	str	r2, [r7, #20]
 80026f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80026fa:	e033      	b.n	8002764 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	8a5b      	ldrh	r3, [r3, #18]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10f      	bne.n	8002724 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8002704:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	b282      	uxth	r2, r0
 800270e:	801a      	strh	r2, [r3, #0]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	60fa      	str	r2, [r7, #12]
 800271a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800271e:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8002722:	e01f      	b.n	8002764 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	8a5b      	ldrh	r3, [r3, #18]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10f      	bne.n	800274c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 800272c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	b2c2      	uxtb	r2, r0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2200      	movs	r2, #0
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002746:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800274a:	e00b      	b.n	8002764 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <pb_dec_varint+0xd6>
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	e000      	b.n	800275c <pb_dec_varint+0xd8>
 800275a:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <pb_dec_varint+0x250>)
 800275c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275e:	60d3      	str	r3, [r2, #12]
 8002760:	2300      	movs	r3, #0
 8002762:	e0b1      	b.n	80028c8 <pb_dec_varint+0x244>

        if (clamped != value)
 8002764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002768:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800276c:	4299      	cmp	r1, r3
 800276e:	bf08      	it	eq
 8002770:	4290      	cmpeq	r0, r2
 8002772:	d00b      	beq.n	800278c <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <pb_dec_varint+0xfe>
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	e000      	b.n	8002784 <pb_dec_varint+0x100>
 8002782:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <pb_dec_varint+0x254>)
 8002784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002786:	60d3      	str	r3, [r2, #12]
 8002788:	2300      	movs	r3, #0
 800278a:	e09d      	b.n	80028c8 <pb_dec_varint+0x244>

        return true;
 800278c:	2301      	movs	r3, #1
 800278e:	e09b      	b.n	80028c8 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	7d9b      	ldrb	r3, [r3, #22]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	2b03      	cmp	r3, #3
 800279a:	d10d      	bne.n	80027b8 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800279c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027a0:	4619      	mov	r1, r3
 80027a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027a4:	f7ff fee1 	bl	800256a <pb_decode_svarint>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d022      	beq.n	80027fa <pb_dec_varint+0x176>
                return false;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e087      	b.n	80028c8 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 80027b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027bc:	4619      	mov	r1, r3
 80027be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027c0:	f7fe fe3e 	bl	8001440 <pb_decode_varint>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <pb_dec_varint+0x150>
                return false;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e079      	b.n	80028c8 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	8a5b      	ldrh	r3, [r3, #18]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d104      	bne.n	80027e6 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80027dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80027e4:	e009      	b.n	80027fa <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80027e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027ea:	4613      	mov	r3, r2
 80027ec:	17da      	asrs	r2, r3, #31
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	61fa      	str	r2, [r7, #28]
 80027f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	8a5b      	ldrh	r3, [r3, #18]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d10a      	bne.n	8002818 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	69d9      	ldr	r1, [r3, #28]
 8002806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800280a:	e9c1 2300 	strd	r2, r3, [r1]
 800280e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002812:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002816:	e042      	b.n	800289e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	8a5b      	ldrh	r3, [r3, #18]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d10c      	bne.n	800283a <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8002820:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4602      	mov	r2, r0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	17da      	asrs	r2, r3, #31
 8002830:	469a      	mov	sl, r3
 8002832:	4693      	mov	fp, r2
 8002834:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8002838:	e031      	b.n	800289e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	8a5b      	ldrh	r3, [r3, #18]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d10e      	bne.n	8002860 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8002842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	b202      	sxth	r2, r0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002852:	b21b      	sxth	r3, r3
 8002854:	17da      	asrs	r2, r3, #31
 8002856:	4698      	mov	r8, r3
 8002858:	4691      	mov	r9, r2
 800285a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 800285e:	e01e      	b.n	800289e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	8a5b      	ldrh	r3, [r3, #18]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10e      	bne.n	8002886 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8002868:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	b242      	sxtb	r2, r0
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	f993 3000 	ldrsb.w	r3, [r3]
 8002878:	b25b      	sxtb	r3, r3
 800287a:	17da      	asrs	r2, r3, #31
 800287c:	461c      	mov	r4, r3
 800287e:	4615      	mov	r5, r2
 8002880:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8002884:	e00b      	b.n	800289e <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <pb_dec_varint+0x210>
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	e000      	b.n	8002896 <pb_dec_varint+0x212>
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <pb_dec_varint+0x250>)
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	60d3      	str	r3, [r2, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	e014      	b.n	80028c8 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800289e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028a6:	4299      	cmp	r1, r3
 80028a8:	bf08      	it	eq
 80028aa:	4290      	cmpeq	r0, r2
 80028ac:	d00b      	beq.n	80028c6 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <pb_dec_varint+0x238>
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	e000      	b.n	80028be <pb_dec_varint+0x23a>
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <pb_dec_varint+0x254>)
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	60d3      	str	r3, [r2, #12]
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <pb_dec_varint+0x244>

        return true;
 80028c6:	2301      	movs	r3, #1
    }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3750      	adds	r7, #80	@ 0x50
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	08009acc 	.word	0x08009acc
 80028d8:	08009ae0 	.word	0x08009ae0

080028dc <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7fe fd97 	bl	8001420 <pb_decode_varint32>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <pb_dec_bytes+0x26>
        return false;
 80028fe:	2300      	movs	r3, #0
 8002900:	e055      	b.n	80029ae <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002908:	d30b      	bcc.n	8002922 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <pb_dec_bytes+0x3c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	e000      	b.n	800291a <pb_dec_bytes+0x3e>
 8002918:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <pb_dec_bytes+0xdc>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	60d3      	str	r3, [r2, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	e045      	b.n	80029ae <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3302      	adds	r3, #2
 8002926:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	d20b      	bcs.n	8002948 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <pb_dec_bytes+0x62>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	e000      	b.n	8002940 <pb_dec_bytes+0x64>
 800293e:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <pb_dec_bytes+0xe0>)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	60d3      	str	r3, [r2, #12]
 8002944:	2300      	movs	r3, #0
 8002946:	e032      	b.n	80029ae <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	7d9b      	ldrb	r3, [r3, #22]
 800294c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002950:	2b80      	cmp	r3, #128	@ 0x80
 8002952:	d10b      	bne.n	800296c <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <pb_dec_bytes+0x86>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	e000      	b.n	8002964 <pb_dec_bytes+0x88>
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <pb_dec_bytes+0xe4>)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	60d3      	str	r3, [r2, #12]
 8002968:	2300      	movs	r3, #0
 800296a:	e020      	b.n	80029ae <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	8a5b      	ldrh	r3, [r3, #18]
 8002970:	461a      	mov	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4293      	cmp	r3, r2
 8002976:	d90b      	bls.n	8002990 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <pb_dec_bytes+0xaa>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	e000      	b.n	8002988 <pb_dec_bytes+0xac>
 8002986:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <pb_dec_bytes+0xdc>)
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60d3      	str	r3, [r2, #12]
 800298c:	2300      	movs	r3, #0
 800298e:	e00e      	b.n	80029ae <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	b29a      	uxth	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3302      	adds	r3, #2
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fbc0 	bl	800112c <pb_read>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08009af4 	.word	0x08009af4
 80029bc:	08009b04 	.word	0x08009b04
 80029c0:	08009a4c 	.word	0x08009a4c

080029c4 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fd20 	bl	8001420 <pb_decode_varint32>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <pb_dec_string+0x2c>
        return false;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e05a      	b.n	8002aa6 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d10b      	bne.n	8002a10 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <pb_dec_string+0x42>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	e000      	b.n	8002a08 <pb_dec_string+0x44>
 8002a06:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <pb_dec_string+0xec>)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60d3      	str	r3, [r2, #12]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e04a      	b.n	8002aa6 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3301      	adds	r3, #1
 8002a14:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20b      	bcs.n	8002a36 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <pb_dec_string+0x68>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	e000      	b.n	8002a2e <pb_dec_string+0x6a>
 8002a2c:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <pb_dec_string+0xec>)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	60d3      	str	r3, [r2, #12]
 8002a32:	2300      	movs	r3, #0
 8002a34:	e037      	b.n	8002aa6 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	7d9b      	ldrb	r3, [r3, #22]
 8002a3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a3e:	2b80      	cmp	r3, #128	@ 0x80
 8002a40:	d10b      	bne.n	8002a5a <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <pb_dec_string+0x8c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	e000      	b.n	8002a52 <pb_dec_string+0x8e>
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <pb_dec_string+0xf0>)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	2300      	movs	r3, #0
 8002a58:	e025      	b.n	8002aa6 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	8a5b      	ldrh	r3, [r3, #18]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d90b      	bls.n	8002a7e <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <pb_dec_string+0xb0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	e000      	b.n	8002a76 <pb_dec_string+0xb2>
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <pb_dec_string+0xf4>)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	60d3      	str	r3, [r2, #12]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e013      	b.n	8002aa6 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4413      	add	r3, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fb4c 	bl	800112c <pb_read>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f083 0301 	eor.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <pb_dec_string+0xe0>
        return false;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	08009b04 	.word	0x08009b04
 8002ab4:	08009a4c 	.word	0x08009a4c
 8002ab8:	08009b14 	.word	0x08009b14

08002abc <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    bool status = true;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7fe fe2d 	bl	8001738 <pb_make_string_substream>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <pb_dec_submessage+0x32>
        return false;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e069      	b.n	8002bc2 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <pb_dec_submessage+0x48>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	e000      	b.n	8002b06 <pb_dec_submessage+0x4a>
 8002b04:	4b31      	ldr	r3, [pc, #196]	@ (8002bcc <pb_dec_submessage+0x110>)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	60d3      	str	r3, [r2, #12]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e059      	b.n	8002bc2 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	7d9b      	ldrb	r3, [r3, #22]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d11c      	bne.n	8002b54 <pb_dec_submessage+0x98>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d018      	beq.n	8002b54 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	3b08      	subs	r3, #8
 8002b28:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	3204      	adds	r2, #4
 8002b3a:	f107 000c 	add.w	r0, r7, #12
 8002b3e:	6839      	ldr	r1, [r7, #0]
 8002b40:	4798      	blx	r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d022      	beq.n	8002ba2 <pb_dec_submessage+0xe6>
 8002b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002b60:	f083 0301 	eor.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01b      	beq.n	8002ba2 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7d9b      	ldrb	r3, [r3, #22]
 8002b72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	7d9b      	ldrb	r3, [r3, #22]
 8002b7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d001      	beq.n	8002b8a <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8002b86:	2301      	movs	r3, #1
 8002b88:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	f107 000c 	add.w	r0, r7, #12
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f7ff fafa 	bl	8002190 <pb_decode_inner>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fdff 	bl	80017ac <pb_close_string_substream>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f083 0301 	eor.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <pb_dec_submessage+0x102>
        return false;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e001      	b.n	8002bc2 <pb_dec_submessage+0x106>

    return status;
 8002bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3728      	adds	r7, #40	@ 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	08009b24 	.word	0x08009b24

08002bd0 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe fc1d 	bl	8001420 <pb_decode_varint32>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e037      	b.n	8002c66 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d30b      	bcc.n	8002c16 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <pb_dec_fixed_length_bytes+0x3c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	e000      	b.n	8002c0e <pb_dec_fixed_length_bytes+0x3e>
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <pb_dec_fixed_length_bytes+0xa0>)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	60d3      	str	r3, [r2, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	e027      	b.n	8002c66 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	69d8      	ldr	r0, [r3, #28]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	8a5b      	ldrh	r3, [r3, #18]
 8002c24:	461a      	mov	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f006 f861 	bl	8008cee <memset>
        return true;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e01a      	b.n	8002c66 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	8a5b      	ldrh	r3, [r3, #18]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d00b      	beq.n	8002c54 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <pb_dec_fixed_length_bytes+0x7a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	e000      	b.n	8002c4c <pb_dec_fixed_length_bytes+0x7c>
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <pb_dec_fixed_length_bytes+0xa4>)
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	60d3      	str	r3, [r2, #12]
 8002c50:	2300      	movs	r3, #0
 8002c52:	e008      	b.n	8002c66 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	8a5b      	ldrh	r3, [r3, #18]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fa64 	bl	800112c <pb_read>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	08009af4 	.word	0x08009af4
 8002c74:	08009b40 	.word	0x08009b40

08002c78 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	6978      	ldr	r0, [r7, #20]
 8002c9a:	f006 f8a4 	bl	8008de6 <memcpy>
    
    return true;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8002ca8:	b4b0      	push	{r4, r5, r7}
 8002caa:	b08b      	sub	sp, #44	@ 0x2c
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <pb_ostream_from_buffer+0x3c>)
 8002cb6:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	461d      	mov	r5, r3
 8002ccc:	f107 0414 	add.w	r4, r7, #20
 8002cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	602b      	str	r3, [r5, #0]
}
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	372c      	adds	r7, #44	@ 0x2c
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bcb0      	pop	{r4, r5, r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	08002c79 	.word	0x08002c79

08002ce8 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d037      	beq.n	8002d6a <pb_write+0x82>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d033      	beq.n	8002d6a <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	441a      	add	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d307      	bcc.n	8002d22 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	441a      	add	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d90b      	bls.n	8002d3a <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <pb_write+0x48>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	e000      	b.n	8002d32 <pb_write+0x4a>
 8002d30:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <pb_write+0x98>)
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6113      	str	r3, [r2, #16]
 8002d36:	2300      	movs	r3, #0
 8002d38:	e01e      	b.n	8002d78 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	4798      	blx	r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <pb_write+0x78>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	e000      	b.n	8002d62 <pb_write+0x7a>
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <pb_write+0x9c>)
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6113      	str	r3, [r2, #16]
 8002d66:	2300      	movs	r3, #0
 8002d68:	e006      	b.n	8002d78 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	60da      	str	r2, [r3, #12]
    return true;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	08009b64 	.word	0x08009b64
 8002d84:	08009b70 	.word	0x08009b70

08002d88 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e00a      	b.n	8002db0 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <safe_read_bool+0x22>
            return true;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e006      	b.n	8002db8 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f1      	beq.n	8002d9a <safe_read_bool+0x12>
    }
    return false;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (count == 0)
 8002dd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <encode_array+0x1c>
        return true;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e13d      	b.n	800305c <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7d9b      	ldrb	r3, [r3, #22]
 8002de4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002de8:	2b80      	cmp	r3, #128	@ 0x80
 8002dea:	d010      	beq.n	8002e0e <encode_array+0x4a>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	8a9b      	ldrh	r3, [r3, #20]
 8002df0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90b      	bls.n	8002e0e <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <encode_array+0x40>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	e000      	b.n	8002e06 <encode_array+0x42>
 8002e04:	4b97      	ldr	r3, [pc, #604]	@ (8003064 <encode_array+0x2a0>)
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6113      	str	r3, [r2, #16]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e126      	b.n	800305c <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	7d9b      	ldrb	r3, [r3, #22]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	f200 80b3 	bhi.w	8002f82 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	8a1b      	ldrh	r3, [r3, #16]
 8002e20:	461a      	mov	r2, r3
 8002e22:	2102      	movs	r1, #2
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fcdd 	bl	80037e4 <pb_encode_tag>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f083 0301 	eor.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <encode_array+0x76>
            return false;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e110      	b.n	800305c <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	7d9b      	ldrb	r3, [r3, #22]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d103      	bne.n	8002e4e <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8002e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4c:	e047      	b.n	8002ede <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7d9b      	ldrb	r3, [r3, #22]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d103      	bne.n	8002e62 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8002e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e60:	e03d      	b.n	8002ede <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002e7c:	e026      	b.n	8002ecc <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fdef 	bl	8003a68 <pb_enc_varint>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <encode_array+0xe0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	e005      	b.n	8002eb0 <encode_array+0xec>
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <encode_array+0xea>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	e000      	b.n	8002eb0 <encode_array+0xec>
 8002eae:	4b6e      	ldr	r3, [pc, #440]	@ (8003068 <encode_array+0x2a4>)
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6113      	str	r3, [r2, #16]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e0d1      	b.n	800305c <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	8a52      	ldrh	r2, [r2, #18]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8002ec6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002ec8:	3301      	adds	r3, #1
 8002eca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002ecc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3d4      	bcc.n	8002e7e <encode_array+0xba>
            }
            field->pData = pData_orig;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8002ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	4615      	mov	r5, r2
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fbf7 	bl	80036de <pb_encode_varint>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <encode_array+0x13c>
            return false;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e0ad      	b.n	800305c <encode_array+0x298>
        
        if (stream->callback == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8002f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff feeb 	bl	8002ce8 <pb_write>
 8002f12:	4603      	mov	r3, r0
 8002f14:	e0a2      	b.n	800305c <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002f1a:	e02d      	b.n	8002f78 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	7d9b      	ldrb	r3, [r3, #22]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d005      	beq.n	8002f34 <encode_array+0x170>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	7d9b      	ldrb	r3, [r3, #22]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10b      	bne.n	8002f4c <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fe58 	bl	8003bec <pb_enc_fixed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <encode_array+0x1a0>
                    return false;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e087      	b.n	800305c <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fd8a 	bl	8003a68 <pb_enc_varint>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <encode_array+0x1a0>
                    return false;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e07b      	b.n	800305c <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	8a52      	ldrh	r2, [r2, #18]
 8002f6c:	441a      	add	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 8002f72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002f74:	3301      	adds	r3, #1
 8002f76:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002f78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3cd      	bcc.n	8002f1c <encode_array+0x158>
 8002f80:	e06b      	b.n	800305a <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002f86:	e064      	b.n	8003052 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	7d9b      	ldrb	r3, [r3, #22]
 8002f8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d147      	bne.n	8003024 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	7d9b      	ldrb	r3, [r3, #22]
 8002f98:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d005      	beq.n	8002fac <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	7d9b      	ldrb	r3, [r3, #22]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d13b      	bne.n	8003024 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11c      	bne.n	8002ffe <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fc36 	bl	8003838 <pb_encode_tag_for_field>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fb7f 	bl	80036de <pb_encode_varint>
 8002fe0:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <encode_array+0x226>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <encode_array+0x228>
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ffc:	e006      	b.n	800300c <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f951 	bl	80032a8 <encode_basic_field>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }

                field->pData = pData_orig;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	61da      	str	r2, [r3, #28]

                if (!status)
 8003012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003016:	f083 0301 	eor.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <encode_array+0x278>
                    return false;
 8003020:	2300      	movs	r3, #0
 8003022:	e01b      	b.n	800305c <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f93e 	bl	80032a8 <encode_basic_field>
 800302c:	4603      	mov	r3, r0
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <encode_array+0x27a>
                    return false;
 8003038:	2300      	movs	r3, #0
 800303a:	e00f      	b.n	800305c <encode_array+0x298>
            {
 800303c:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	8a52      	ldrh	r2, [r2, #18]
 8003046:	441a      	add	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800304c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800304e:	3301      	adds	r3, #1
 8003050:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003052:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003054:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003056:	429a      	cmp	r2, r3
 8003058:	d396      	bcc.n	8002f88 <encode_array+0x1c4>
        }
    }
    
    return true;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3730      	adds	r7, #48	@ 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	08009b7c 	.word	0x08009b7c
 8003068:	08009b94 	.word	0x08009b94

0800306c <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b092      	sub	sp, #72	@ 0x48
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7d9b      	ldrb	r3, [r3, #22]
 8003078:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800307c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003080:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 80c9 	bne.w	800321c <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800308a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800308e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8003096:	2300      	movs	r3, #0
 8003098:	e100      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800309a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800309e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d108      	bne.n	80030b8 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e0f1      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80030b8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80030bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030c0:	2b30      	cmp	r3, #48	@ 0x30
 80030c2:	d108      	bne.n	80030d6 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e0e2      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80030d6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80030da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d115      	bne.n	800310e <pb_check_proto3_default_value+0xa2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d011      	beq.n	800310e <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fe4a 	bl	8002d88 <safe_read_bool>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e0c6      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8003118:	2300      	movs	r3, #0
 800311a:	e0bf      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800311c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	2b05      	cmp	r3, #5
 8003126:	d81c      	bhi.n	8003162 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
            for (i = 0; i < field->data_size; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003134:	e00d      	b.n	8003152 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8003136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800313a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8003144:	2300      	movs	r3, #0
 8003146:	e0a9      	b.n	800329c <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8003148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800314c:	3301      	adds	r3, #1
 800314e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8a5b      	ldrh	r3, [r3, #18]
 8003156:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800315a:	429a      	cmp	r2, r3
 800315c:	d3eb      	bcc.n	8003136 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 800315e:	2301      	movs	r3, #1
 8003160:	e09c      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8003162:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	2b06      	cmp	r3, #6
 800316c:	d10a      	bne.n	8003184 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	63bb      	str	r3, [r7, #56]	@ 0x38
            return bytes->size == 0;
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e08b      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8003184:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b07      	cmp	r3, #7
 800318e:	d108      	bne.n	80031a2 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e07c      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80031a2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	2b0b      	cmp	r3, #11
 80031ac:	d107      	bne.n	80031be <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8a5b      	ldrh	r3, [r3, #18]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e06e      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 80031be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d005      	beq.n	80031d6 <pb_check_proto3_default_value+0x16a>
 80031ca:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d161      	bne.n	800329a <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fe36 	bl	8000e54 <pb_field_iter_begin>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d014      	beq.n	8003218 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff3a 	bl	800306c <pb_check_proto3_default_value>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f083 0301 	eor.w	r3, r3, #1
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8003204:	2300      	movs	r3, #0
 8003206:	e049      	b.n	800329c <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fe6a 	bl	8000ee6 <pb_field_iter_next>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ea      	bne.n	80031ee <pb_check_proto3_default_value+0x182>
            }
            return true;
 8003218:	2301      	movs	r3, #1
 800321a:	e03f      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800321c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003220:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003224:	2b80      	cmp	r3, #128	@ 0x80
 8003226:	d107      	bne.n	8003238 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e031      	b.n	800329c <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8003238:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800323c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003240:	2b40      	cmp	r3, #64	@ 0x40
 8003242:	d12a      	bne.n	800329a <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8003244:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2b0a      	cmp	r3, #10
 800324e:	d10a      	bne.n	8003266 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
            return extension == NULL;
 8003258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e01a      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a0d      	ldr	r2, [pc, #52]	@ (80032a4 <pb_check_proto3_default_value+0x238>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10a      	bne.n	8003288 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
            return pCallback->funcs.encode == NULL;
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e009      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e000      	b.n	800329c <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3748      	adds	r7, #72	@ 0x48
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	08001089 	.word	0x08001089

080032a8 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e061      	b.n	8003382 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fab9 	bl	8003838 <pb_encode_tag_for_field>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <encode_basic_field+0x2e>
        return false;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e055      	b.n	8003382 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7d9b      	ldrb	r3, [r3, #22]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2b0b      	cmp	r3, #11
 80032e0:	d844      	bhi.n	800336c <encode_basic_field+0xc4>
 80032e2:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <encode_basic_field+0x40>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	08003319 	.word	0x08003319
 80032ec:	08003325 	.word	0x08003325
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003331 	.word	0x08003331
 80032fc:	08003331 	.word	0x08003331
 8003300:	0800333d 	.word	0x0800333d
 8003304:	08003349 	.word	0x08003349
 8003308:	08003355 	.word	0x08003355
 800330c:	08003355 	.word	0x08003355
 8003310:	0800336d 	.word	0x0800336d
 8003314:	08003361 	.word	0x08003361
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fb8a 	bl	8003a34 <pb_enc_bool>
 8003320:	4603      	mov	r3, r0
 8003322:	e02e      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fb9e 	bl	8003a68 <pb_enc_varint>
 800332c:	4603      	mov	r3, r0
 800332e:	e028      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fc5a 	bl	8003bec <pb_enc_fixed>
 8003338:	4603      	mov	r3, r0
 800333a:	e022      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fc82 	bl	8003c48 <pb_enc_bytes>
 8003344:	4603      	mov	r3, r0
 8003346:	e01c      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8003348:	6839      	ldr	r1, [r7, #0]
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fcba 	bl	8003cc4 <pb_enc_string>
 8003350:	4603      	mov	r3, r0
 8003352:	e016      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fd12 	bl	8003d80 <pb_enc_submessage>
 800335c:	4603      	mov	r3, r0
 800335e:	e010      	b.n	8003382 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fd52 	bl	8003e0c <pb_enc_fixed_length_bytes>
 8003368:	4603      	mov	r3, r0
 800336a:	e00a      	b.n	8003382 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <encode_basic_field+0xd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	e000      	b.n	800337c <encode_basic_field+0xd4>
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <encode_basic_field+0xe4>)
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6113      	str	r3, [r2, #16]
 8003380:	2300      	movs	r3, #0
    }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	08009b9c 	.word	0x08009b9c

08003390 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d018      	beq.n	80033d6 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	2000      	movs	r0, #0
 80033b0:	4798      	blx	r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	f083 0301 	eor.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <encode_callback_field+0x3c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	e000      	b.n	80033ce <encode_callback_field+0x3e>
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <encode_callback_field+0x50>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6113      	str	r3, [r2, #16]
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <encode_callback_field+0x48>
    }
    return true;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	08009bb0 	.word	0x08009bb0

080033e4 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7d9b      	ldrb	r3, [r3, #22]
 80033f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033f6:	2b30      	cmp	r3, #48	@ 0x30
 80033f8:	d108      	bne.n	800340c <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	8a1b      	ldrh	r3, [r3, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	d026      	beq.n	8003456 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8003408:	2301      	movs	r3, #1
 800340a:	e059      	b.n	80034c0 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	7d9b      	ldrb	r3, [r3, #22]
 8003410:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003414:	2b10      	cmp	r3, #16
 8003416:	d11e      	bne.n	8003456 <encode_field+0x72>
    {
        if (field->pSize)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fcaf 	bl	8002d88 <safe_read_bool>
 800342a:	4603      	mov	r3, r0
 800342c:	f083 0301 	eor.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00f      	beq.n	8003456 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8003436:	2301      	movs	r3, #1
 8003438:	e042      	b.n	80034c0 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	7d9b      	ldrb	r3, [r3, #22]
 800343e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f7ff fe10 	bl	800306c <pb_check_proto3_default_value>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <encode_field+0x72>
                return true;
 8003452:	2301      	movs	r3, #1
 8003454:	e034      	b.n	80034c0 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	7d9b      	ldrb	r3, [r3, #22]
 8003462:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10b      	bne.n	8003482 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <encode_field+0x94>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	e000      	b.n	800347a <encode_field+0x96>
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <encode_field+0xe4>)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6113      	str	r3, [r2, #16]
 800347e:	2300      	movs	r3, #0
 8003480:	e01e      	b.n	80034c0 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8003482:	2301      	movs	r3, #1
 8003484:	e01c      	b.n	80034c0 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	7d9b      	ldrb	r3, [r3, #22]
 800348a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d105      	bne.n	800349e <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff7b 	bl	8003390 <encode_callback_field>
 800349a:	4603      	mov	r3, r0
 800349c:	e010      	b.n	80034c0 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	7d9b      	ldrb	r3, [r3, #22]
 80034a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d105      	bne.n	80034b6 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fc89 	bl	8002dc4 <encode_array>
 80034b2:	4603      	mov	r3, r0
 80034b4:	e004      	b.n	80034c0 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fef5 	bl	80032a8 <encode_basic_field>
 80034be:	4603      	mov	r3, r0
    }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08009bc0 	.word	0x08009bc0

080034cc <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08c      	sub	sp, #48	@ 0x30
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fdc1 	bl	8001064 <pb_field_iter_begin_extension_const>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f083 0301 	eor.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <default_extension_encoder+0x30>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	e000      	b.n	80034fe <default_extension_encoder+0x32>
 80034fc:	4b07      	ldr	r3, [pc, #28]	@ (800351c <default_extension_encoder+0x50>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6113      	str	r3, [r2, #16]
 8003502:	2300      	movs	r3, #0
 8003504:	e006      	b.n	8003514 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff69 	bl	80033e4 <encode_field>
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3730      	adds	r7, #48	@ 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	08009bd8 	.word	0x08009bd8

08003520 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]

    while (extension)
 8003532:	e01e      	b.n	8003572 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	4603      	mov	r3, r0
 800354c:	72fb      	strb	r3, [r7, #11]
 800354e:	e005      	b.n	800355c <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffba 	bl	80034cc <default_extension_encoder>
 8003558:	4603      	mov	r3, r0
 800355a:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <encode_extension_field+0x4c>
            return false;
 8003568:	2300      	movs	r3, #0
 800356a:	e006      	b.n	800357a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60fb      	str	r3, [r7, #12]
    while (extension)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1dd      	bne.n	8003534 <encode_extension_field+0x14>
    }
    
    return true;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08e      	sub	sp, #56	@ 0x38
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800358e:	f107 0310 	add.w	r3, r7, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fd50 	bl	800103c <pb_field_iter_begin_const>
 800359c:	4603      	mov	r3, r0
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <pb_encode+0x2a>
        return true; /* Empty message type */
 80035a8:	2301      	movs	r3, #1
 80035aa:	e02a      	b.n	8003602 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80035ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2b0a      	cmp	r3, #10
 80035b6:	d10d      	bne.n	80035d4 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ffae 	bl	8003520 <encode_extension_field>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f083 0301 	eor.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <pb_encode+0x6e>
                return false;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e016      	b.n	8003602 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	4619      	mov	r1, r3
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff02 	bl	80033e4 <encode_field>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <pb_encode+0x6e>
                return false;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e008      	b.n	8003602 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fc76 	bl	8000ee6 <pb_field_iter_next>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1d5      	bne.n	80035ac <pb_encode+0x2a>
    
    return true;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	3738      	adds	r7, #56	@ 0x38
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003622:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	09db      	lsrs	r3, r3, #7
 8003628:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800362a:	e013      	b.n	8003654 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 800362c:	7efb      	ldrb	r3, [r7, #27]
 800362e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003632:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	61fa      	str	r2, [r7, #28]
 800363a:	3320      	adds	r3, #32
 800363c:	443b      	add	r3, r7
 800363e:	7efa      	ldrb	r2, [r7, #27]
 8003640:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800364c:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	09db      	lsrs	r3, r3, #7
 8003652:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d805      	bhi.n	8003666 <pb_encode_varint_32+0x5c>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <pb_encode_varint_32+0x22>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e2      	bne.n	800362c <pb_encode_varint_32+0x22>
    }

    if (high)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d024      	beq.n	80036b6 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7efb      	ldrb	r3, [r7, #27]
 800367c:	4313      	orrs	r3, r2
 800367e:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	08db      	lsrs	r3, r3, #3
 8003684:	607b      	str	r3, [r7, #4]

        while (high)
 8003686:	e013      	b.n	80036b0 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8003688:	7efb      	ldrb	r3, [r7, #27]
 800368a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800368e:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	3320      	adds	r3, #32
 8003698:	443b      	add	r3, r7
 800369a:	7efa      	ldrb	r2, [r7, #27]
 800369c:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a8:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	09db      	lsrs	r3, r3, #7
 80036ae:	607b      	str	r3, [r7, #4]
        while (high)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e8      	bne.n	8003688 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	61fa      	str	r2, [r7, #28]
 80036bc:	3320      	adds	r3, #32
 80036be:	443b      	add	r3, r7
 80036c0:	7efa      	ldrb	r2, [r7, #27]
 80036c2:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	4619      	mov	r1, r3
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fb0a 	bl	8002ce8 <pb_write>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 80036de:	b590      	push	{r4, r7, lr}
 80036e0:	b087      	sub	sp, #28
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 80036ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ee:	2a80      	cmp	r2, #128	@ 0x80
 80036f0:	f173 0300 	sbcs.w	r3, r3, #0
 80036f4:	d20a      	bcs.n	800370c <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 80036f6:	783b      	ldrb	r3, [r7, #0]
 80036f8:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 80036fa:	f107 0317 	add.w	r3, r7, #23
 80036fe:	2201      	movs	r2, #1
 8003700:	4619      	mov	r1, r3
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff faf0 	bl	8002ce8 <pb_write>
 8003708:	4603      	mov	r3, r0
 800370a:	e00f      	b.n	800372c <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800370c:	683c      	ldr	r4, [r7, #0]
 800370e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	000a      	movs	r2, r1
 800371c:	2300      	movs	r3, #0
 800371e:	4613      	mov	r3, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4621      	mov	r1, r4
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ff70 	bl	800360a <pb_encode_varint_32>
 800372a:	4603      	mov	r3, r0
#endif
    }
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b08a      	sub	sp, #40	@ 0x28
 800373a:	af00      	add	r7, sp, #0
 800373c:	6178      	str	r0, [r7, #20]
 800373e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800374a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 800374e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da15      	bge.n	8003782 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 8003756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	ea00 0402 	and.w	r4, r0, r2
 8003762:	ea01 0503 	and.w	r5, r1, r3
 8003766:	1923      	adds	r3, r4, r4
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	eb45 0305 	adc.w	r3, r5, r5
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003774:	ea6f 0a02 	mvn.w	sl, r2
 8003778:	ea6f 0b03 	mvn.w	fp, r3
 800377c:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8003780:	e007      	b.n	8003792 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8003782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003786:	eb12 0802 	adds.w	r8, r2, r2
 800378a:	eb43 0903 	adc.w	r9, r3, r3
 800378e:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8003792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ffa1 	bl	80036de <pb_encode_varint>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3728      	adds	r7, #40	@ 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037a8 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 80037b2:	2204      	movs	r2, #4
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fa96 	bl	8002ce8 <pb_write>
 80037bc:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 80037d0:	2208      	movs	r2, #8
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fa87 	bl	8002ce8 <pb_write>
 80037da:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 80037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e8:	b088      	sub	sp, #32
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6178      	str	r0, [r7, #20]
 80037ee:	460b      	mov	r3, r1
 80037f0:	60fa      	str	r2, [r7, #12]
 80037f2:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	469a      	mov	sl, r3
 80037fa:	4693      	mov	fp, r2
 80037fc:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8003800:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2200      	movs	r2, #0
 8003808:	4698      	mov	r8, r3
 800380a:	4691      	mov	r9, r2
 800380c:	ea44 0308 	orr.w	r3, r4, r8
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	ea45 0309 	orr.w	r3, r5, r9
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e9d7 3400 	ldrd	r3, r4, [r7]
 800381c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8003820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f7ff ff5a 	bl	80036de <pb_encode_varint>
 800382a:	4603      	mov	r3, r0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003838 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	7d9b      	ldrb	r3, [r3, #22]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b0b      	cmp	r3, #11
 800384c:	d826      	bhi.n	800389c <pb_encode_tag_for_field+0x64>
 800384e:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <pb_encode_tag_for_field+0x1c>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003885 	.word	0x08003885
 8003858:	08003885 	.word	0x08003885
 800385c:	08003885 	.word	0x08003885
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388b 	.word	0x0800388b
 8003868:	08003891 	.word	0x08003891
 800386c:	08003897 	.word	0x08003897
 8003870:	08003897 	.word	0x08003897
 8003874:	08003897 	.word	0x08003897
 8003878:	08003897 	.word	0x08003897
 800387c:	0800389d 	.word	0x0800389d
 8003880:	08003897 	.word	0x08003897
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
            break;
 8003888:	e014      	b.n	80038b4 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800388a:	2305      	movs	r3, #5
 800388c:	73fb      	strb	r3, [r7, #15]
            break;
 800388e:	e011      	b.n	80038b4 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
            break;
 8003894:	e00e      	b.n	80038b4 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8003896:	2302      	movs	r3, #2
 8003898:	73fb      	strb	r3, [r7, #15]
            break;
 800389a:	e00b      	b.n	80038b4 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <pb_encode_tag_for_field+0x72>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	e000      	b.n	80038ac <pb_encode_tag_for_field+0x74>
 80038aa:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <pb_encode_tag_for_field+0x98>)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6113      	str	r3, [r2, #16]
 80038b0:	2300      	movs	r3, #0
 80038b2:	e008      	b.n	80038c6 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	8a1b      	ldrh	r3, [r3, #16]
 80038b8:	461a      	mov	r2, r3
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff90 	bl	80037e4 <pb_encode_tag>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	08009b9c 	.word	0x08009b9c

080038d4 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 80038d4:	b5b0      	push	{r4, r5, r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	461c      	mov	r4, r3
 80038e6:	4615      	mov	r5, r2
 80038e8:	4622      	mov	r2, r4
 80038ea:	462b      	mov	r3, r5
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fef6 	bl	80036de <pb_encode_varint>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f083 0301 	eor.w	r3, r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <pb_encode_string+0x2e>
        return false;
 80038fe:	2300      	movs	r3, #0
 8003900:	e005      	b.n	800390e <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff f9ee 	bl	8002ce8 <pb_write>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003918 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b08c      	sub	sp, #48	@ 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fe20 	bl	8003582 <pb_encode>
 8003942:	4603      	mov	r3, r0
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8003954:	2300      	movs	r3, #0
 8003956:	e065      	b.n	8003a24 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	2200      	movs	r2, #0
 8003960:	461c      	mov	r4, r3
 8003962:	4615      	mov	r5, r2
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff feb8 	bl	80036de <pb_encode_varint>
 800396e:	4603      	mov	r3, r0
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <pb_encode_submessage+0x66>
        return false;
 800397a:	2300      	movs	r3, #0
 800397c:	e052      	b.n	8003a24 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8003986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003988:	2100      	movs	r1, #0
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff f9ac 	bl	8002ce8 <pb_write>
 8003990:	4603      	mov	r3, r0
 8003992:	e047      	b.n	8003a24 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	441a      	add	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90b      	bls.n	80039bc <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <pb_encode_submessage+0x9a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	e000      	b.n	80039b4 <pb_encode_submessage+0x9c>
 80039b2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a2c <pb_encode_submessage+0x114>)
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	6113      	str	r3, [r2, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	e033      	b.n	8003a24 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fdd0 	bl	8003582 <pb_encode>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    stream->bytes_written += substream.bytes_written;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d00b      	beq.n	8003a20 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <pb_encode_submessage+0xfe>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	e000      	b.n	8003a18 <pb_encode_submessage+0x100>
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <pb_encode_submessage+0x118>)
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	6113      	str	r3, [r2, #16]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e001      	b.n	8003a24 <pb_encode_submessage+0x10c>
    
    return status;
 8003a20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3730      	adds	r7, #48	@ 0x30
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2c:	08009b64 	.word	0x08009b64
 8003a30:	08009bec 	.word	0x08009bec

08003a34 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f9a0 	bl	8002d88 <safe_read_bool>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	461c      	mov	r4, r3
 8003a52:	4615      	mov	r5, r2
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fe40 	bl	80036de <pb_encode_varint>
 8003a5e:	4603      	mov	r3, r0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bdb0      	pop	{r4, r5, r7, pc}

08003a68 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b08c      	sub	sp, #48	@ 0x30
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	61f8      	str	r0, [r7, #28]
 8003a72:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	7d9b      	ldrb	r3, [r3, #22]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d152      	bne.n	8003b26 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	8a5b      	ldrh	r3, [r3, #18]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10b      	bne.n	8003aac <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	617a      	str	r2, [r7, #20]
 8003aa2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003aa6:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8003aaa:	e035      	b.n	8003b18 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	8a5b      	ldrh	r3, [r3, #18]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d10b      	bne.n	8003acc <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	60fa      	str	r2, [r7, #12]
 8003ac2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ac6:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8003aca:	e025      	b.n	8003b18 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	8a5b      	ldrh	r3, [r3, #18]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d10a      	bne.n	8003aea <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ae4:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 8003ae8:	e016      	b.n	8003b18 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	8a5b      	ldrh	r3, [r3, #18]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d106      	bne.n	8003b00 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003afe:	e00b      	b.n	8003b18 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <pb_enc_varint+0xa6>
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	e000      	b.n	8003b10 <pb_enc_varint+0xa8>
 8003b0e:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <pb_enc_varint+0x180>)
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	6113      	str	r3, [r2, #16]
 8003b14:	2300      	movs	r3, #0
 8003b16:	e061      	b.n	8003bdc <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b1c:	69f8      	ldr	r0, [r7, #28]
 8003b1e:	f7ff fdde 	bl	80036de <pb_encode_varint>
 8003b22:	4603      	mov	r3, r0
 8003b24:	e05a      	b.n	8003bdc <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	8a5b      	ldrh	r3, [r3, #18]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10a      	bne.n	8003b50 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	17da      	asrs	r2, r3, #31
 8003b46:	469a      	mov	sl, r3
 8003b48:	4693      	mov	fp, r2
 8003b4a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8003b4e:	e032      	b.n	8003bb6 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	8a5b      	ldrh	r3, [r3, #18]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d10a      	bne.n	8003b6e <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b60:	b21b      	sxth	r3, r3
 8003b62:	17da      	asrs	r2, r3, #31
 8003b64:	4698      	mov	r8, r3
 8003b66:	4691      	mov	r9, r2
 8003b68:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8003b6c:	e023      	b.n	8003bb6 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	8a5b      	ldrh	r3, [r3, #18]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d108      	bne.n	8003b88 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	17da      	asrs	r2, r3, #31
 8003b7e:	461c      	mov	r4, r3
 8003b80:	4615      	mov	r5, r2
 8003b82:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8003b86:	e016      	b.n	8003bb6 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	8a5b      	ldrh	r3, [r3, #18]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d106      	bne.n	8003b9e <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003b9c:	e00b      	b.n	8003bb6 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <pb_enc_varint+0x144>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	e000      	b.n	8003bae <pb_enc_varint+0x146>
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <pb_enc_varint+0x180>)
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	6113      	str	r3, [r2, #16]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e012      	b.n	8003bdc <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	7d9b      	ldrb	r3, [r3, #22]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d106      	bne.n	8003bd0 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8003bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc6:	69f8      	ldr	r0, [r7, #28]
 8003bc8:	f7ff fdb4 	bl	8003734 <pb_encode_svarint>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	e005      	b.n	8003bdc <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8003bd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd4:	69f8      	ldr	r0, [r7, #28]
 8003bd6:	f7ff fd82 	bl	80036de <pb_encode_varint>
 8003bda:	4603      	mov	r3, r0

    }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3730      	adds	r7, #48	@ 0x30
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	08009c00 	.word	0x08009c00

08003bec <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	8a5b      	ldrh	r3, [r3, #18]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fdcf 	bl	80037a8 <pb_encode_fixed32>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	e016      	b.n	8003c3c <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	8a5b      	ldrh	r3, [r3, #18]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d107      	bne.n	8003c26 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fdd2 	bl	80037c6 <pb_encode_fixed64>
 8003c22:	4603      	mov	r3, r0
 8003c24:	e00a      	b.n	8003c3c <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <pb_enc_fixed+0x48>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	e000      	b.n	8003c36 <pb_enc_fixed+0x4a>
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <pb_enc_fixed+0x58>)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6113      	str	r3, [r2, #16]
 8003c3a:	2300      	movs	r3, #0
    }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08009c00 	.word	0x08009c00

08003c48 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fe34 	bl	80038d4 <pb_encode_string>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	e022      	b.n	8003cb6 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	7d9b      	ldrb	r3, [r3, #22]
 8003c74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	8a5b      	ldrh	r3, [r3, #18]
 8003c86:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d90b      	bls.n	8003ca4 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <pb_enc_bytes+0x52>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	e000      	b.n	8003c9c <pb_enc_bytes+0x54>
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <pb_enc_bytes+0x78>)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6113      	str	r3, [r2, #16]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e008      	b.n	8003cb6 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1c99      	adds	r1, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fe10 	bl	80038d4 <pb_encode_string>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08009c14 	.word	0x08009c14

08003cc4 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	8a5b      	ldrh	r3, [r3, #18]
 8003cd6:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7d9b      	ldrb	r3, [r3, #22]
 8003ce2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d103      	bne.n	8003cf2 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e011      	b.n	8003d16 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <pb_enc_string+0x42>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	e000      	b.n	8003d08 <pb_enc_string+0x44>
 8003d06:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <pb_enc_string+0xb4>)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6113      	str	r3, [r2, #16]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e02f      	b.n	8003d70 <pb_enc_string+0xac>

        max_size -= 1;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e020      	b.n	8003d64 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8003d26:	e005      	b.n	8003d34 <pb_enc_string+0x70>
        {
            size++;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
            p++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d203      	bcs.n	8003d44 <pb_enc_string+0x80>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f1      	bne.n	8003d28 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00b      	beq.n	8003d64 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <pb_enc_string+0x96>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	e000      	b.n	8003d5c <pb_enc_string+0x98>
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <pb_enc_string+0xb8>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6113      	str	r3, [r2, #16]
 8003d60:	2300      	movs	r3, #0
 8003d62:	e005      	b.n	8003d70 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fdb3 	bl	80038d4 <pb_encode_string>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	08009c28 	.word	0x08009c28
 8003d7c:	08009c3c 	.word	0x08009c3c

08003d80 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <pb_enc_submessage+0x20>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	e000      	b.n	8003da2 <pb_enc_submessage+0x22>
 8003da0:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <pb_enc_submessage+0x88>)
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6113      	str	r3, [r2, #16]
 8003da6:	2300      	movs	r3, #0
 8003da8:	e029      	b.n	8003dfe <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7d9b      	ldrb	r3, [r3, #22]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d11a      	bne.n	8003dec <pb_enc_submessage+0x6c>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	3b08      	subs	r3, #8
 8003dc4:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	3204      	adds	r2, #4
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <pb_enc_submessage+0x6c>
                return false;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e008      	b.n	8003dfe <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff fd8e 	bl	8003918 <pb_encode_submessage>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	08009c50 	.word	0x08009c50

08003e0c <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	69d9      	ldr	r1, [r3, #28]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	8a5b      	ldrh	r3, [r3, #18]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fd57 	bl	80038d4 <pb_encode_string>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_MspInit+0x30>)
 8003e38:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003e3c:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <HAL_MspInit+0x30>)
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_MspInit+0x30>)
 8003e48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	58024400 	.word	0x58024400

08003e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0ba      	sub	sp, #232	@ 0xe8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e7c:	f107 0310 	add.w	r3, r7, #16
 8003e80:	22c0      	movs	r2, #192	@ 0xc0
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f004 ff32 	bl	8008cee <memset>
  if(huart->Instance==USART3)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <HAL_UART_MspInit+0xc8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d146      	bne.n	8003f22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e94:	f04f 0202 	mov.w	r2, #2
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fdba 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003eb6:	f7fc fdfd 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003eba:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003ebc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003eca:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003ecc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed8:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ede:	4a14      	ldr	r2, [pc, #80]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_UART_MspInit+0xcc>)
 8003eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003ef6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	2302      	movs	r3, #2
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f10:	2307      	movs	r3, #7
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4805      	ldr	r0, [pc, #20]	@ (8003f34 <HAL_UART_MspInit+0xd0>)
 8003f1e:	f000 fb9f 	bl	8004660 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003f22:	bf00      	nop
 8003f24:	37e8      	adds	r7, #232	@ 0xe8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40004800 	.word	0x40004800
 8003f30:	58024400 	.word	0x58024400
 8003f34:	58020c00 	.word	0x58020c00

08003f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <NMI_Handler+0x4>

08003f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <HardFault_Handler+0x4>

08003f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <MemManage_Handler+0x4>

08003f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <BusFault_Handler+0x4>

08003f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <UsageFault_Handler+0x4>

08003f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f8e:	f000 f9eb 	bl	8004368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e00a      	b.n	8003fbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fa8:	f3af 8000 	nop.w
 8003fac:	4601      	mov	r1, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	60ba      	str	r2, [r7, #8]
 8003fb4:	b2ca      	uxtb	r2, r1
 8003fb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dbf0      	blt.n	8003fa8 <_read+0x12>
  }

  return len;
 8003fc6:	687b      	ldr	r3, [r7, #4]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e009      	b.n	8003ff6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	60ba      	str	r2, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fb48 	bl	8000680 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbf1      	blt.n	8003fe2 <_write+0x12>
  }
  return len;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_close>:

int _close(int file)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004030:	605a      	str	r2, [r3, #4]
  return 0;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_isatty>:

int _isatty(int file)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004048:	2301      	movs	r3, #1
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004078:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <_sbrk+0x5c>)
 800407a:	4b15      	ldr	r3, [pc, #84]	@ (80040d0 <_sbrk+0x60>)
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004084:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <_sbrk+0x64>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <_sbrk+0x64>)
 800408e:	4a12      	ldr	r2, [pc, #72]	@ (80040d8 <_sbrk+0x68>)
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <_sbrk+0x64>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d207      	bcs.n	80040b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040a0:	f004 fe74 	bl	8008d8c <__errno>
 80040a4:	4603      	mov	r3, r0
 80040a6:	220c      	movs	r2, #12
 80040a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	e009      	b.n	80040c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040b0:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <_sbrk+0x64>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040b6:	4b07      	ldr	r3, [pc, #28]	@ (80040d4 <_sbrk+0x64>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	4a05      	ldr	r2, [pc, #20]	@ (80040d4 <_sbrk+0x64>)
 80040c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	24100000 	.word	0x24100000
 80040d0:	00000400 	.word	0x00000400
 80040d4:	2400011c 	.word	0x2400011c
 80040d8:	24000270 	.word	0x24000270

080040dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040e0:	4b3e      	ldr	r3, [pc, #248]	@ (80041dc <SystemInit+0x100>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	4a3d      	ldr	r2, [pc, #244]	@ (80041dc <SystemInit+0x100>)
 80040e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <SystemInit+0x104>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d807      	bhi.n	800410c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040fc:	4b38      	ldr	r3, [pc, #224]	@ (80041e0 <SystemInit+0x104>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 030f 	bic.w	r3, r3, #15
 8004104:	4a36      	ldr	r2, [pc, #216]	@ (80041e0 <SystemInit+0x104>)
 8004106:	f043 0303 	orr.w	r3, r3, #3
 800410a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800410c:	4b35      	ldr	r3, [pc, #212]	@ (80041e4 <SystemInit+0x108>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a34      	ldr	r2, [pc, #208]	@ (80041e4 <SystemInit+0x108>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004118:	4b32      	ldr	r3, [pc, #200]	@ (80041e4 <SystemInit+0x108>)
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800411e:	4b31      	ldr	r3, [pc, #196]	@ (80041e4 <SystemInit+0x108>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4930      	ldr	r1, [pc, #192]	@ (80041e4 <SystemInit+0x108>)
 8004124:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <SystemInit+0x10c>)
 8004126:	4013      	ands	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800412a:	4b2d      	ldr	r3, [pc, #180]	@ (80041e0 <SystemInit+0x104>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004136:	4b2a      	ldr	r3, [pc, #168]	@ (80041e0 <SystemInit+0x104>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 030f 	bic.w	r3, r3, #15
 800413e:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <SystemInit+0x104>)
 8004140:	f043 0303 	orr.w	r3, r3, #3
 8004144:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004146:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <SystemInit+0x108>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800414c:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <SystemInit+0x108>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004152:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <SystemInit+0x108>)
 8004154:	2200      	movs	r2, #0
 8004156:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004158:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <SystemInit+0x108>)
 800415a:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <SystemInit+0x110>)
 800415c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800415e:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <SystemInit+0x108>)
 8004160:	4a23      	ldr	r2, [pc, #140]	@ (80041f0 <SystemInit+0x114>)
 8004162:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004164:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <SystemInit+0x108>)
 8004166:	4a23      	ldr	r2, [pc, #140]	@ (80041f4 <SystemInit+0x118>)
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800416a:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <SystemInit+0x108>)
 800416c:	2200      	movs	r2, #0
 800416e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004170:	4b1c      	ldr	r3, [pc, #112]	@ (80041e4 <SystemInit+0x108>)
 8004172:	4a20      	ldr	r2, [pc, #128]	@ (80041f4 <SystemInit+0x118>)
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <SystemInit+0x108>)
 8004178:	2200      	movs	r2, #0
 800417a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <SystemInit+0x108>)
 800417e:	4a1d      	ldr	r2, [pc, #116]	@ (80041f4 <SystemInit+0x118>)
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004182:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <SystemInit+0x108>)
 8004184:	2200      	movs	r2, #0
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004188:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <SystemInit+0x108>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <SystemInit+0x108>)
 800418e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004194:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <SystemInit+0x108>)
 8004196:	2200      	movs	r2, #0
 8004198:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <SystemInit+0x108>)
 800419c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80041a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d113      	bne.n	80041d0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <SystemInit+0x108>)
 80041aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80041ae:	4a0d      	ldr	r2, [pc, #52]	@ (80041e4 <SystemInit+0x108>)
 80041b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041b4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <SystemInit+0x11c>)
 80041ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80041be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <SystemInit+0x108>)
 80041c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80041c6:	4a07      	ldr	r2, [pc, #28]	@ (80041e4 <SystemInit+0x108>)
 80041c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041cc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	52002000 	.word	0x52002000
 80041e4:	58024400 	.word	0x58024400
 80041e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80041ec:	02020200 	.word	0x02020200
 80041f0:	01ff0000 	.word	0x01ff0000
 80041f4:	01010280 	.word	0x01010280
 80041f8:	52004000 	.word	0x52004000

080041fc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004206:	f023 0302 	bic.w	r3, r3, #2
 800420a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800420c:	bf00      	nop
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <ExitRun0Mode+0x2c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f9      	beq.n	800420e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	58024800 	.word	0x58024800

0800422c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800422c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8004268 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8004230:	f7ff ffe4 	bl	80041fc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004234:	f7ff ff52 	bl	80040dc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004238:	480c      	ldr	r0, [pc, #48]	@ (800426c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800423a:	490d      	ldr	r1, [pc, #52]	@ (8004270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800423e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004240:	e002      	b.n	8004248 <LoopCopyDataInit>

08004242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004246:	3304      	adds	r3, #4

08004248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800424a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800424c:	d3f9      	bcc.n	8004242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004250:	4c0a      	ldr	r4, [pc, #40]	@ (800427c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004254:	e001      	b.n	800425a <LoopFillZerobss>

08004256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004258:	3204      	adds	r2, #4

0800425a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800425a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800425c:	d3fb      	bcc.n	8004256 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800425e:	f004 fd9b 	bl	8008d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004262:	f7fc fa1f 	bl	80006a4 <main>
  bx  lr
 8004266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004268:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800426c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004270:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8004274:	08009d0c 	.word	0x08009d0c
  ldr r2, =_sbss
 8004278:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800427c:	24000270 	.word	0x24000270

08004280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004280:	e7fe      	b.n	8004280 <ADC_IRQHandler>
	...

08004284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800428a:	2003      	movs	r0, #3
 800428c:	f000 f93e 	bl	800450c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004290:	f001 f9f2 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_Init+0x68>)
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4913      	ldr	r1, [pc, #76]	@ (80042f0 <HAL_Init+0x6c>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <HAL_Init+0x68>)
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	4a0e      	ldr	r2, [pc, #56]	@ (80042f0 <HAL_Init+0x6c>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	4a0b      	ldr	r2, [pc, #44]	@ (80042f4 <HAL_Init+0x70>)
 80042c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042c8:	4a0b      	ldr	r2, [pc, #44]	@ (80042f8 <HAL_Init+0x74>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ce:	2000      	movs	r0, #0
 80042d0:	f000 f814 	bl	80042fc <HAL_InitTick>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e002      	b.n	80042e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042de:	f7ff fda7 	bl	8003e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58024400 	.word	0x58024400
 80042f0:	08009c90 	.word	0x08009c90
 80042f4:	24000004 	.word	0x24000004
 80042f8:	24000000 	.word	0x24000000

080042fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004304:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_InitTick+0x60>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e021      	b.n	8004354 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004310:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <HAL_InitTick+0x64>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b11      	ldr	r3, [pc, #68]	@ (800435c <HAL_InitTick+0x60>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800431e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f915 	bl	8004556 <HAL_SYSTICK_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e00e      	b.n	8004354 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b0f      	cmp	r3, #15
 800433a:	d80a      	bhi.n	8004352 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800433c:	2200      	movs	r2, #0
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	f000 f8ed 	bl	8004522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004348:	4a06      	ldr	r2, [pc, #24]	@ (8004364 <HAL_InitTick+0x68>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2400000c 	.word	0x2400000c
 8004360:	24000000 	.word	0x24000000
 8004364:	24000008 	.word	0x24000008

08004368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <HAL_IncTick+0x20>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_IncTick+0x24>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4413      	add	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	@ (800438c <HAL_IncTick+0x24>)
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	2400000c 	.word	0x2400000c
 800438c:	24000120 	.word	0x24000120

08004390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return uwTick;
 8004394:	4b03      	ldr	r3, [pc, #12]	@ (80043a4 <HAL_GetTick+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	24000120 	.word	0x24000120

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <__NVIC_SetPriorityGrouping+0x40>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d6:	4a04      	ldr	r2, [pc, #16]	@ (80043e8 <__NVIC_SetPriorityGrouping+0x40>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	05fa0000 	.word	0x05fa0000

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	@ (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	@ (800445c <__NVIC_SetPriority+0x50>)
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d8:	d301      	bcc.n	80044de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <SysTick_Config+0x40>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e6:	210f      	movs	r1, #15
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f7ff ff8e 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <SysTick_Config+0x40>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f6:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <SysTick_Config+0x40>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff47 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004530:	f7ff ff5e 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff90 	bl	8004460 <NVIC_EncodePriority>
 8004540:	4602      	mov	r2, r0
 8004542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff5f 	bl	800440c <__NVIC_SetPriority>
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffb2 	bl	80044c8 <SysTick_Config>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004574:	f3bf 8f5f 	dmb	sy
}
 8004578:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800457a:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <HAL_MPU_Disable+0x28>)
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	4a06      	ldr	r2, [pc, #24]	@ (8004598 <HAL_MPU_Disable+0x28>)
 8004580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004584:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_MPU_Disable+0x2c>)
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000ed00 	.word	0xe000ed00
 800459c:	e000ed90 	.word	0xe000ed90

080045a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80045a8:	4a0b      	ldr	r2, [pc, #44]	@ (80045d8 <HAL_MPU_Enable+0x38>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80045b2:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <HAL_MPU_Enable+0x3c>)
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <HAL_MPU_Enable+0x3c>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80045be:	f3bf 8f4f 	dsb	sy
}
 80045c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045c4:	f3bf 8f6f 	isb	sy
}
 80045c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	e000ed90 	.word	0xe000ed90
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	785a      	ldrb	r2, [r3, #1]
 80045ec:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_MPU_ConfigRegion+0x7c>)
 80045ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <HAL_MPU_ConfigRegion+0x7c>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_MPU_ConfigRegion+0x7c>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80045fc:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_MPU_ConfigRegion+0x7c>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
 8004608:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7adb      	ldrb	r3, [r3, #11]
 800460e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	7a9b      	ldrb	r3, [r3, #10]
 8004616:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7b5b      	ldrb	r3, [r3, #13]
 800461e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7b9b      	ldrb	r3, [r3, #14]
 8004626:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	7bdb      	ldrb	r3, [r3, #15]
 800462e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7a5b      	ldrb	r3, [r3, #9]
 8004636:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7a1b      	ldrb	r3, [r3, #8]
 800463e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004640:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004648:	4a04      	ldr	r2, [pc, #16]	@ (800465c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800464a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800464c:	6113      	str	r3, [r2, #16]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed90 	.word	0xe000ed90

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	@ 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800466e:	4b89      	ldr	r3, [pc, #548]	@ (8004894 <HAL_GPIO_Init+0x234>)
 8004670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004672:	e194      	b.n	800499e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8186 	beq.w	8004998 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d005      	beq.n	80046a4 <HAL_GPIO_Init+0x44>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d130      	bne.n	8004706 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046da:	2201      	movs	r2, #1
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0201 	and.w	r2, r3, #1
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d017      	beq.n	8004742 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d123      	bne.n	8004796 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80e0 	beq.w	8004998 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <HAL_GPIO_Init+0x238>)
 80047da:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80047de:	4a2e      	ldr	r2, [pc, #184]	@ (8004898 <HAL_GPIO_Init+0x238>)
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_GPIO_Init+0x238>)
 80047ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f6:	4a29      	ldr	r2, [pc, #164]	@ (800489c <HAL_GPIO_Init+0x23c>)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	220f      	movs	r2, #15
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a20      	ldr	r2, [pc, #128]	@ (80048a0 <HAL_GPIO_Init+0x240>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d052      	beq.n	80048c8 <HAL_GPIO_Init+0x268>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1f      	ldr	r2, [pc, #124]	@ (80048a4 <HAL_GPIO_Init+0x244>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_GPIO_Init+0x22e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_GPIO_Init+0x248>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02b      	beq.n	800488a <HAL_GPIO_Init+0x22a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <HAL_GPIO_Init+0x24c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d025      	beq.n	8004886 <HAL_GPIO_Init+0x226>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <HAL_GPIO_Init+0x250>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <HAL_GPIO_Init+0x222>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <HAL_GPIO_Init+0x254>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_GPIO_Init+0x21e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1a      	ldr	r2, [pc, #104]	@ (80048b8 <HAL_GPIO_Init+0x258>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_GPIO_Init+0x21a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a19      	ldr	r2, [pc, #100]	@ (80048bc <HAL_GPIO_Init+0x25c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_GPIO_Init+0x216>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_GPIO_Init+0x260>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_GPIO_Init+0x212>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <HAL_GPIO_Init+0x264>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_GPIO_Init+0x20e>
 800486a:	2309      	movs	r3, #9
 800486c:	e02d      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800486e:	230a      	movs	r3, #10
 8004870:	e02b      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004872:	2308      	movs	r3, #8
 8004874:	e029      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004876:	2307      	movs	r3, #7
 8004878:	e027      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800487a:	2306      	movs	r3, #6
 800487c:	e025      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800487e:	2305      	movs	r3, #5
 8004880:	e023      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004882:	2304      	movs	r3, #4
 8004884:	e021      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004886:	2303      	movs	r3, #3
 8004888:	e01f      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800488a:	2302      	movs	r3, #2
 800488c:	e01d      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800488e:	2301      	movs	r3, #1
 8004890:	e01b      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004892:	bf00      	nop
 8004894:	58000080 	.word	0x58000080
 8004898:	58024400 	.word	0x58024400
 800489c:	58000400 	.word	0x58000400
 80048a0:	58020000 	.word	0x58020000
 80048a4:	58020400 	.word	0x58020400
 80048a8:	58020800 	.word	0x58020800
 80048ac:	58020c00 	.word	0x58020c00
 80048b0:	58021000 	.word	0x58021000
 80048b4:	58021400 	.word	0x58021400
 80048b8:	58021800 	.word	0x58021800
 80048bc:	58021c00 	.word	0x58021c00
 80048c0:	58022000 	.word	0x58022000
 80048c4:	58022400 	.word	0x58022400
 80048c8:	2300      	movs	r3, #0
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	f002 0203 	and.w	r2, r2, #3
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	4093      	lsls	r3, r2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048da:	4938      	ldr	r1, [pc, #224]	@ (80049bc <HAL_GPIO_Init+0x35c>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f ae63 	bne.w	8004674 <HAL_GPIO_Init+0x14>
  }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3724      	adds	r7, #36	@ 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58000400 	.word	0x58000400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049dc:	e003      	b.n	80049e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049de:	887b      	ldrh	r3, [r7, #2]
 80049e0:	041a      	lsls	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	619a      	str	r2, [r3, #24]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049fc:	4b29      	ldr	r3, [pc, #164]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	2b06      	cmp	r3, #6
 8004a06:	d00a      	beq.n	8004a1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a08:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d001      	beq.n	8004a1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e040      	b.n	8004a9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e03e      	b.n	8004a9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a1e:	4b21      	ldr	r3, [pc, #132]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004a26:	491f      	ldr	r1, [pc, #124]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a2e:	f7ff fcaf 	bl	8004390 <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a34:	e009      	b.n	8004a4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a36:	f7ff fcab 	bl	8004390 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a44:	d901      	bls.n	8004a4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e028      	b.n	8004a9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a4a:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a56:	d1ee      	bne.n	8004a36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b1e      	cmp	r3, #30
 8004a5c:	d008      	beq.n	8004a70 <HAL_PWREx_ConfigSupply+0x7c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a62:	d005      	beq.n	8004a70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b1d      	cmp	r3, #29
 8004a68:	d002      	beq.n	8004a70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a6e:	d114      	bne.n	8004a9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a70:	f7ff fc8e 	bl	8004390 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a76:	e009      	b.n	8004a8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a78:	f7ff fc8a 	bl	8004390 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a86:	d901      	bls.n	8004a8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e007      	b.n	8004a9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a98:	d1ee      	bne.n	8004a78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58024800 	.word	0x58024800

08004aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	@ 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f000 bc1f 	b.w	80052fa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80b3 	beq.w	8004c30 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b95      	ldr	r3, [pc, #596]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad4:	4b92      	ldr	r3, [pc, #584]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d007      	beq.n	8004af0 <HAL_RCC_OscConfig+0x48>
 8004ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae2:	2b18      	cmp	r3, #24
 8004ae4:	d112      	bne.n	8004b0c <HAL_RCC_OscConfig+0x64>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d10d      	bne.n	8004b0c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	4b8b      	ldr	r3, [pc, #556]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8098 	beq.w	8004c2e <HAL_RCC_OscConfig+0x186>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 8093 	bne.w	8004c2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e3f6      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x7c>
 8004b16:	4b82      	ldr	r3, [pc, #520]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a81      	ldr	r2, [pc, #516]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e058      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d112      	bne.n	8004b52 <HAL_RCC_OscConfig+0xaa>
 8004b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a7b      	ldr	r2, [pc, #492]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	4b79      	ldr	r3, [pc, #484]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a78      	ldr	r2, [pc, #480]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a75      	ldr	r2, [pc, #468]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e041      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b5a:	d112      	bne.n	8004b82 <HAL_RCC_OscConfig+0xda>
 8004b5c:	4b70      	ldr	r3, [pc, #448]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6f      	ldr	r2, [pc, #444]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6d      	ldr	r3, [pc, #436]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6c      	ldr	r2, [pc, #432]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b6e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b6a      	ldr	r3, [pc, #424]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a69      	ldr	r2, [pc, #420]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e029      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004b8a:	d112      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x10a>
 8004b8c:	4b64      	ldr	r3, [pc, #400]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a63      	ldr	r2, [pc, #396]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b61      	ldr	r3, [pc, #388]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a60      	ldr	r2, [pc, #384]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e011      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b58      	ldr	r3, [pc, #352]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a57      	ldr	r2, [pc, #348]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b55      	ldr	r3, [pc, #340]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004bd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7ff fbd7 	bl	8004390 <HAL_GetTick>
 8004be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be6:	f7ff fbd3 	bl	8004390 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	@ 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e380      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf8:	4b49      	ldr	r3, [pc, #292]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x13e>
 8004c04:	e014      	b.n	8004c30 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7ff fbc3 	bl	8004390 <HAL_GetTick>
 8004c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0e:	f7ff fbbf 	bl	8004390 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b64      	cmp	r3, #100	@ 0x64
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e36c      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c20:	4b3f      	ldr	r3, [pc, #252]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x166>
 8004c2c:	e000      	b.n	8004c30 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 808c 	beq.w	8004d56 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3e:	4b38      	ldr	r3, [pc, #224]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c46:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c48:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1bc>
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2b18      	cmp	r3, #24
 8004c58:	d137      	bne.n	8004cca <HAL_RCC_OscConfig+0x222>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d132      	bne.n	8004cca <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c64:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1d4>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e33e      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c7c:	4b28      	ldr	r3, [pc, #160]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f023 0219 	bic.w	r2, r3, #25
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4925      	ldr	r1, [pc, #148]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7ff fb7f 	bl	8004390 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7ff fb7b 	bl	8004390 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e328      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	4917      	ldr	r1, [pc, #92]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc8:	e045      	b.n	8004d56 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cd2:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0219 	bic.w	r2, r3, #25
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4910      	ldr	r1, [pc, #64]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7ff fb54 	bl	8004390 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cec:	f7ff fb50 	bl	8004390 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e2fd      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cfe:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	4901      	ldr	r1, [pc, #4]	@ (8004d20 <HAL_RCC_OscConfig+0x278>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
 8004d1e:	e01a      	b.n	8004d56 <HAL_RCC_OscConfig+0x2ae>
 8004d20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d24:	4b97      	ldr	r3, [pc, #604]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a96      	ldr	r2, [pc, #600]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7ff fb2e 	bl	8004390 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7ff fb2a 	bl	8004390 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e2d7      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d06a      	beq.n	8004e38 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d62:	4b88      	ldr	r3, [pc, #544]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d6c:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d007      	beq.n	8004d88 <HAL_RCC_OscConfig+0x2e0>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b18      	cmp	r3, #24
 8004d7c:	d11b      	bne.n	8004db6 <HAL_RCC_OscConfig+0x30e>
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d116      	bne.n	8004db6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d88:	4b7e      	ldr	r3, [pc, #504]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_OscConfig+0x2f8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	2b80      	cmp	r3, #128	@ 0x80
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e2ac      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004da0:	4b78      	ldr	r3, [pc, #480]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	4975      	ldr	r1, [pc, #468]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db4:	e040      	b.n	8004e38 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d023      	beq.n	8004e06 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004dbe:	4b71      	ldr	r3, [pc, #452]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a70      	ldr	r2, [pc, #448]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7ff fae1 	bl	8004390 <HAL_GetTick>
 8004dce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dd2:	f7ff fadd 	bl	8004390 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e28a      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004de4:	4b67      	ldr	r3, [pc, #412]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004df0:	4b64      	ldr	r3, [pc, #400]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	4961      	ldr	r1, [pc, #388]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60cb      	str	r3, [r1, #12]
 8004e04:	e018      	b.n	8004e38 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e06:	4b5f      	ldr	r3, [pc, #380]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7ff fabd 	bl	8004390 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e1a:	f7ff fab9 	bl	8004390 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e266      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e2c:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d036      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d019      	beq.n	8004e80 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e50:	4a4c      	ldr	r2, [pc, #304]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7ff fa9a 	bl	8004390 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7ff fa96 	bl	8004390 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e243      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e72:	4b44      	ldr	r3, [pc, #272]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x3b8>
 8004e7e:	e018      	b.n	8004eb2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e80:	4b40      	ldr	r3, [pc, #256]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e84:	4a3f      	ldr	r2, [pc, #252]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7ff fa80 	bl	8004390 <HAL_GetTick>
 8004e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e94:	f7ff fa7c 	bl	8004390 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e229      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ea6:	4b37      	ldr	r3, [pc, #220]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d036      	beq.n	8004f2c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d019      	beq.n	8004efa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2e      	ldr	r2, [pc, #184]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ed2:	f7ff fa5d 	bl	8004390 <HAL_GetTick>
 8004ed6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eda:	f7ff fa59 	bl	8004390 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e206      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eec:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x432>
 8004ef8:	e018      	b.n	8004f2c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004efa:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004f00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f06:	f7ff fa43 	bl	8004390 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f0e:	f7ff fa3f 	bl	8004390 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1ec      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f20:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80af 	beq.w	8005098 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <HAL_RCC_OscConfig+0x4e0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <HAL_RCC_OscConfig+0x4e0>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f46:	f7ff fa23 	bl	8004390 <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4e:	f7ff fa1f 	bl	8004390 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b64      	cmp	r3, #100	@ 0x64
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1cc      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f60:	4b09      	ldr	r3, [pc, #36]	@ (8004f88 <HAL_RCC_OscConfig+0x4e0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4e4>
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	4a02      	ldr	r2, [pc, #8]	@ (8004f84 <HAL_RCC_OscConfig+0x4dc>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f80:	e05b      	b.n	800503a <HAL_RCC_OscConfig+0x592>
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	58024800 	.word	0x58024800
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d112      	bne.n	8004fba <HAL_RCC_OscConfig+0x512>
 8004f94:	4b9d      	ldr	r3, [pc, #628]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	4a9c      	ldr	r2, [pc, #624]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa0:	4b9a      	ldr	r3, [pc, #616]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	4a99      	ldr	r2, [pc, #612]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fac:	4b97      	ldr	r3, [pc, #604]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	4a96      	ldr	r2, [pc, #600]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb8:	e03f      	b.n	800503a <HAL_RCC_OscConfig+0x592>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x540>
 8004fc2:	4b92      	ldr	r3, [pc, #584]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4a91      	ldr	r2, [pc, #580]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fc8:	f043 0304 	orr.w	r3, r3, #4
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fce:	4b8f      	ldr	r3, [pc, #572]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd2:	4a8e      	ldr	r2, [pc, #568]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fda:	4b8c      	ldr	r3, [pc, #560]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	4a8b      	ldr	r2, [pc, #556]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe6:	e028      	b.n	800503a <HAL_RCC_OscConfig+0x592>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b85      	cmp	r3, #133	@ 0x85
 8004fee:	d112      	bne.n	8005016 <HAL_RCC_OscConfig+0x56e>
 8004ff0:	4b86      	ldr	r3, [pc, #536]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff4:	4a85      	ldr	r2, [pc, #532]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffc:	4b83      	ldr	r3, [pc, #524]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005000:	4a82      	ldr	r2, [pc, #520]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005006:	6713      	str	r3, [r2, #112]	@ 0x70
 8005008:	4b80      	ldr	r3, [pc, #512]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500c:	4a7f      	ldr	r2, [pc, #508]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6713      	str	r3, [r2, #112]	@ 0x70
 8005014:	e011      	b.n	800503a <HAL_RCC_OscConfig+0x592>
 8005016:	4b7d      	ldr	r3, [pc, #500]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	4a7c      	ldr	r2, [pc, #496]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6713      	str	r3, [r2, #112]	@ 0x70
 8005022:	4b7a      	ldr	r3, [pc, #488]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	4a79      	ldr	r2, [pc, #484]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005028:	f023 0304 	bic.w	r3, r3, #4
 800502c:	6713      	str	r3, [r2, #112]	@ 0x70
 800502e:	4b77      	ldr	r3, [pc, #476]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a76      	ldr	r2, [pc, #472]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d015      	beq.n	800506e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7ff f9a5 	bl	8004390 <HAL_GetTick>
 8005046:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7ff f9a1 	bl	8004390 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e14c      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005060:	4b6a      	ldr	r3, [pc, #424]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ee      	beq.n	800504a <HAL_RCC_OscConfig+0x5a2>
 800506c:	e014      	b.n	8005098 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506e:	f7ff f98f 	bl	8004390 <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005074:	e00a      	b.n	800508c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7ff f98b 	bl	8004390 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e136      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800508c:	4b5f      	ldr	r3, [pc, #380]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ee      	bne.n	8005076 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 812b 	beq.w	80052f8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050a2:	4b5a      	ldr	r3, [pc, #360]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050aa:	2b18      	cmp	r3, #24
 80050ac:	f000 80bb 	beq.w	8005226 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	f040 8095 	bne.w	80051e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b54      	ldr	r3, [pc, #336]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a53      	ldr	r2, [pc, #332]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80050c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7ff f963 	bl	8004390 <HAL_GetTick>
 80050ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ce:	f7ff f95f 	bl	8004390 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e10c      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e0:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ec:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80050ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050f0:	4b47      	ldr	r3, [pc, #284]	@ (8005210 <HAL_RCC_OscConfig+0x768>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	430a      	orrs	r2, r1
 8005100:	4942      	ldr	r1, [pc, #264]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005102:	4313      	orrs	r3, r2
 8005104:	628b      	str	r3, [r1, #40]	@ 0x28
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	3b01      	subs	r3, #1
 800510c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	3b01      	subs	r3, #1
 8005116:	025b      	lsls	r3, r3, #9
 8005118:	b29b      	uxth	r3, r3
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	3b01      	subs	r3, #1
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005136:	4935      	ldr	r1, [pc, #212]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005138:	4313      	orrs	r3, r2
 800513a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800513c:	4b33      	ldr	r3, [pc, #204]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	4a32      	ldr	r2, [pc, #200]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800514a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800514c:	4b31      	ldr	r3, [pc, #196]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800514e:	4013      	ands	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005154:	00d2      	lsls	r2, r2, #3
 8005156:	492d      	ldr	r1, [pc, #180]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005158:	4313      	orrs	r3, r2
 800515a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800515c:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	f023 020c 	bic.w	r2, r3, #12
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	4928      	ldr	r1, [pc, #160]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800516a:	4313      	orrs	r3, r2
 800516c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	f023 0202 	bic.w	r2, r3, #2
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	4924      	ldr	r1, [pc, #144]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800517c:	4313      	orrs	r3, r2
 800517e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005180:	4b22      	ldr	r3, [pc, #136]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	4a21      	ldr	r2, [pc, #132]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518c:	4b1f      	ldr	r3, [pc, #124]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 8005192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005198:	4b1c      	ldr	r3, [pc, #112]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 800519e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a15      	ldr	r2, [pc, #84]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7ff f8e8 	bl	8004390 <HAL_GetTick>
 80051c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c4:	f7ff f8e4 	bl	8004390 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e091      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x71c>
 80051e2:	e089      	b.n	80052f8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a08      	ldr	r2, [pc, #32]	@ (800520c <HAL_RCC_OscConfig+0x764>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7ff f8ce 	bl	8004390 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051f6:	e00f      	b.n	8005218 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7ff f8ca 	bl	8004390 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d908      	bls.n	8005218 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e077      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
 800520a:	bf00      	nop
 800520c:	58024400 	.word	0x58024400
 8005210:	fffffc0c 	.word	0xfffffc0c
 8005214:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005218:	4b3a      	ldr	r3, [pc, #232]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e9      	bne.n	80051f8 <HAL_RCC_OscConfig+0x750>
 8005224:	e068      	b.n	80052f8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005226:	4b37      	ldr	r3, [pc, #220]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800522c:	4b35      	ldr	r3, [pc, #212]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	2b01      	cmp	r3, #1
 8005238:	d031      	beq.n	800529e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d12a      	bne.n	800529e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d122      	bne.n	800529e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d11a      	bne.n	800529e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005274:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d111      	bne.n	800529e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d108      	bne.n	800529e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0e1b      	lsrs	r3, r3, #24
 8005290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e02b      	b.n	80052fa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052a2:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052ac:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d01f      	beq.n	80052f8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052b8:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	4a11      	ldr	r2, [pc, #68]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c4:	f7ff f864 	bl	8004390 <HAL_GetTick>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052ca:	bf00      	nop
 80052cc:	f7ff f860 	bl	8004390 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d0f9      	beq.n	80052cc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <HAL_RCC_OscConfig+0x860>)
 80052de:	4013      	ands	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052e4:	00d2      	lsls	r2, r2, #3
 80052e6:	4907      	ldr	r1, [pc, #28]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <HAL_RCC_OscConfig+0x85c>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3730      	adds	r7, #48	@ 0x30
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	ffff0007 	.word	0xffff0007

0800530c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e19c      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005320:	4b8a      	ldr	r3, [pc, #552]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d910      	bls.n	8005350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b87      	ldr	r3, [pc, #540]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 020f 	bic.w	r2, r3, #15
 8005336:	4985      	ldr	r1, [pc, #532]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b83      	ldr	r3, [pc, #524]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e184      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	4b7b      	ldr	r3, [pc, #492]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005368:	429a      	cmp	r2, r3
 800536a:	d908      	bls.n	800537e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800536c:	4b78      	ldr	r3, [pc, #480]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	4975      	ldr	r1, [pc, #468]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800537a:	4313      	orrs	r3, r2
 800537c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	4b70      	ldr	r3, [pc, #448]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005396:	429a      	cmp	r2, r3
 8005398:	d908      	bls.n	80053ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800539a:	4b6d      	ldr	r3, [pc, #436]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	496a      	ldr	r1, [pc, #424]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b64      	ldr	r3, [pc, #400]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d908      	bls.n	80053da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053c8:	4b61      	ldr	r3, [pc, #388]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	495e      	ldr	r1, [pc, #376]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d908      	bls.n	8005408 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053f6:	4b56      	ldr	r3, [pc, #344]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	4953      	ldr	r1, [pc, #332]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	4b4d      	ldr	r3, [pc, #308]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	429a      	cmp	r2, r3
 8005422:	d908      	bls.n	8005436 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005424:	4b4a      	ldr	r3, [pc, #296]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f023 020f 	bic.w	r2, r3, #15
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4947      	ldr	r1, [pc, #284]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005432:	4313      	orrs	r3, r2
 8005434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d055      	beq.n	80054ee <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005442:	4b43      	ldr	r3, [pc, #268]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4940      	ldr	r1, [pc, #256]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005450:	4313      	orrs	r3, r2
 8005452:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d107      	bne.n	800546c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800545c:	4b3c      	ldr	r3, [pc, #240]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d121      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0f6      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d107      	bne.n	8005484 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005474:	4b36      	ldr	r3, [pc, #216]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d115      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0ea      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800548c:	4b30      	ldr	r3, [pc, #192]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d109      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0de      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549c:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0d6      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054ac:	4b28      	ldr	r3, [pc, #160]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f023 0207 	bic.w	r2, r3, #7
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4925      	ldr	r1, [pc, #148]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054be:	f7fe ff67 	bl	8004390 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c4:	e00a      	b.n	80054dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c6:	f7fe ff63 	bl	8004390 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e0be      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d1eb      	bne.n	80054c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	429a      	cmp	r2, r3
 8005508:	d208      	bcs.n	800551c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550a:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f023 020f 	bic.w	r2, r3, #15
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	490e      	ldr	r1, [pc, #56]	@ (8005550 <HAL_RCC_ClockConfig+0x244>)
 8005518:	4313      	orrs	r3, r2
 800551a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800551c:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d214      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b08      	ldr	r3, [pc, #32]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 020f 	bic.w	r2, r3, #15
 8005532:	4906      	ldr	r1, [pc, #24]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b04      	ldr	r3, [pc, #16]	@ (800554c <HAL_RCC_ClockConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e086      	b.n	800565a <HAL_RCC_ClockConfig+0x34e>
 800554c:	52002000 	.word	0x52002000
 8005550:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	4b3f      	ldr	r3, [pc, #252]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800556c:	429a      	cmp	r2, r3
 800556e:	d208      	bcs.n	8005582 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005570:	4b3c      	ldr	r3, [pc, #240]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4939      	ldr	r1, [pc, #228]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 800557e:	4313      	orrs	r3, r2
 8005580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	4b34      	ldr	r3, [pc, #208]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800559a:	429a      	cmp	r2, r3
 800559c:	d208      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	492e      	ldr	r1, [pc, #184]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d010      	beq.n	80055de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	4b28      	ldr	r3, [pc, #160]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d208      	bcs.n	80055de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055cc:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	4922      	ldr	r1, [pc, #136]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d010      	beq.n	800560c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d208      	bcs.n	800560c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4917      	ldr	r1, [pc, #92]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 8005608:	4313      	orrs	r3, r2
 800560a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800560c:	f000 f834 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b14      	ldr	r3, [pc, #80]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	4912      	ldr	r1, [pc, #72]	@ (8005668 <HAL_RCC_ClockConfig+0x35c>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800562a:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <HAL_RCC_ClockConfig+0x358>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <HAL_RCC_ClockConfig+0x35c>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <HAL_RCC_ClockConfig+0x360>)
 8005642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005644:	4a0a      	ldr	r2, [pc, #40]	@ (8005670 <HAL_RCC_ClockConfig+0x364>)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800564a:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <HAL_RCC_ClockConfig+0x368>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fe54 	bl	80042fc <HAL_InitTick>
 8005654:	4603      	mov	r3, r0
 8005656:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
 8005668:	08009c90 	.word	0x08009c90
 800566c:	24000004 	.word	0x24000004
 8005670:	24000000 	.word	0x24000000
 8005674:	24000008 	.word	0x24000008

08005678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	@ 0x24
 800567c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800567e:	4bb3      	ldr	r3, [pc, #716]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005686:	2b18      	cmp	r3, #24
 8005688:	f200 8155 	bhi.w	8005936 <HAL_RCC_GetSysClockFreq+0x2be>
 800568c:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <HAL_RCC_GetSysClockFreq+0x1c>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056f9 	.word	0x080056f9
 8005698:	08005937 	.word	0x08005937
 800569c:	08005937 	.word	0x08005937
 80056a0:	08005937 	.word	0x08005937
 80056a4:	08005937 	.word	0x08005937
 80056a8:	08005937 	.word	0x08005937
 80056ac:	08005937 	.word	0x08005937
 80056b0:	08005937 	.word	0x08005937
 80056b4:	0800571f 	.word	0x0800571f
 80056b8:	08005937 	.word	0x08005937
 80056bc:	08005937 	.word	0x08005937
 80056c0:	08005937 	.word	0x08005937
 80056c4:	08005937 	.word	0x08005937
 80056c8:	08005937 	.word	0x08005937
 80056cc:	08005937 	.word	0x08005937
 80056d0:	08005937 	.word	0x08005937
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005937 	.word	0x08005937
 80056dc:	08005937 	.word	0x08005937
 80056e0:	08005937 	.word	0x08005937
 80056e4:	08005937 	.word	0x08005937
 80056e8:	08005937 	.word	0x08005937
 80056ec:	08005937 	.word	0x08005937
 80056f0:	08005937 	.word	0x08005937
 80056f4:	0800572b 	.word	0x0800572b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f8:	4b94      	ldr	r3, [pc, #592]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005704:	4b91      	ldr	r3, [pc, #580]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	4a90      	ldr	r2, [pc, #576]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
 8005714:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005716:	e111      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005718:	4b8d      	ldr	r3, [pc, #564]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800571a:	61bb      	str	r3, [r7, #24]
      break;
 800571c:	e10e      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800571e:	4b8d      	ldr	r3, [pc, #564]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005720:	61bb      	str	r3, [r7, #24]
      break;
 8005722:	e10b      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005724:	4b8c      	ldr	r3, [pc, #560]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005726:	61bb      	str	r3, [r7, #24]
      break;
 8005728:	e108      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800572a:	4b88      	ldr	r3, [pc, #544]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005734:	4b85      	ldr	r3, [pc, #532]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800573e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005740:	4b82      	ldr	r3, [pc, #520]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800574a:	4b80      	ldr	r3, [pc, #512]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80e1 	beq.w	8005930 <HAL_RCC_GetSysClockFreq+0x2b8>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f000 8083 	beq.w	800587c <HAL_RCC_GetSysClockFreq+0x204>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f200 80a1 	bhi.w	80058c0 <HAL_RCC_GetSysClockFreq+0x248>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x114>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d056      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x1c0>
 800578a:	e099      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578c:	4b6f      	ldr	r3, [pc, #444]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02d      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005798:	4b6c      	ldr	r3, [pc, #432]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	08db      	lsrs	r3, r3, #3
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	4a6b      	ldr	r2, [pc, #428]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b62      	ldr	r3, [pc, #392]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057f2:	e087      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005960 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b51      	ldr	r3, [pc, #324]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e4>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005836:	e065      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b40      	ldr	r3, [pc, #256]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800587a:	e043      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005968 <HAL_RCC_GetSysClockFreq+0x2f0>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b2f      	ldr	r3, [pc, #188]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058be:	e021      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005964 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b1e      	ldr	r3, [pc, #120]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800595c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005902:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005904:	4b11      	ldr	r3, [pc, #68]	@ (800594c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005908:	0a5b      	lsrs	r3, r3, #9
 800590a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800590e:	3301      	adds	r3, #1
 8005910:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800591c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005928:	ee17 3a90 	vmov	r3, s15
 800592c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800592e:	e005      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
      break;
 8005934:	e002      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005936:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005938:	61bb      	str	r3, [r7, #24]
      break;
 800593a:	bf00      	nop
  }

  return sysclockfreq;
 800593c:	69bb      	ldr	r3, [r7, #24]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3724      	adds	r7, #36	@ 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	58024400 	.word	0x58024400
 8005950:	03d09000 	.word	0x03d09000
 8005954:	003d0900 	.word	0x003d0900
 8005958:	007a1200 	.word	0x007a1200
 800595c:	46000000 	.word	0x46000000
 8005960:	4c742400 	.word	0x4c742400
 8005964:	4a742400 	.word	0x4a742400
 8005968:	4af42400 	.word	0x4af42400

0800596c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005972:	f7ff fe81 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005976:	4602      	mov	r2, r0
 8005978:	4b10      	ldr	r3, [pc, #64]	@ (80059bc <HAL_RCC_GetHCLKFreq+0x50>)
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	490f      	ldr	r1, [pc, #60]	@ (80059c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005984:	5ccb      	ldrb	r3, [r1, r3]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005990:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <HAL_RCC_GetHCLKFreq+0x50>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	4a09      	ldr	r2, [pc, #36]	@ (80059c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800599a:	5cd3      	ldrb	r3, [r2, r3]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	4a07      	ldr	r2, [pc, #28]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80059a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059aa:	4a07      	ldr	r2, [pc, #28]	@ (80059c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	58024400 	.word	0x58024400
 80059c0:	08009c90 	.word	0x08009c90
 80059c4:	24000004 	.word	0x24000004
 80059c8:	24000000 	.word	0x24000000

080059cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80059d0:	f7ff ffcc 	bl	800596c <HAL_RCC_GetHCLKFreq>
 80059d4:	4602      	mov	r2, r0
 80059d6:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	4904      	ldr	r1, [pc, #16]	@ (80059f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059e2:	5ccb      	ldrb	r3, [r1, r3]
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	58024400 	.word	0x58024400
 80059f4:	08009c90 	.word	0x08009c90

080059f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80059fc:	f7ff ffb6 	bl	800596c <HAL_RCC_GetHCLKFreq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	4904      	ldr	r1, [pc, #16]	@ (8005a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a0e:	5ccb      	ldrb	r3, [r1, r3]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	08009c90 	.word	0x08009c90

08005a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a28:	b0c8      	sub	sp, #288	@ 0x120
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a48:	2500      	movs	r5, #0
 8005a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a4e:	d049      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a5a:	d02f      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a60:	d828      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a66:	d01a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a6c:	d822      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a76:	d007      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a78:	e01c      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7a:	4ba7      	ldr	r3, [pc, #668]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4aa6      	ldr	r2, [pc, #664]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a86:	e01a      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fc43 	bl	800731c <RCCEx_PLL2_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a9c:	e00f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa2:	3328      	adds	r3, #40	@ 0x28
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 fcea 	bl	8007480 <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ac6:	4b94      	ldr	r3, [pc, #592]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	4a90      	ldr	r2, [pc, #576]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ae0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005af0:	f04f 0900 	mov.w	r9, #0
 8005af4:	ea58 0309 	orrs.w	r3, r8, r9
 8005af8:	d047      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d82a      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b21 	.word	0x08005b21
 8005b10:	08005b2f 	.word	0x08005b2f
 8005b14:	08005b45 	.word	0x08005b45
 8005b18:	08005b63 	.word	0x08005b63
 8005b1c:	08005b63 	.word	0x08005b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b20:	4b7d      	ldr	r3, [pc, #500]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	4a7c      	ldr	r2, [pc, #496]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b2c:	e01a      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b32:	3308      	adds	r3, #8
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 fbf0 	bl	800731c <RCCEx_PLL2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b42:	e00f      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b48:	3328      	adds	r3, #40	@ 0x28
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fc97 	bl	8007480 <RCCEx_PLL3_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b58:	e004      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b70:	f023 0107 	bic.w	r1, r3, #7
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	4a67      	ldr	r2, [pc, #412]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b96:	f04f 0b00 	mov.w	fp, #0
 8005b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b9e:	d054      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005baa:	d036      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005bac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005bb0:	d82f      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb6:	d032      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbc:	d829      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc0:	d02f      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc4:	d825      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bc6:	2b80      	cmp	r3, #128	@ 0x80
 8005bc8:	d018      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005bca:	2b80      	cmp	r3, #128	@ 0x80
 8005bcc:	d821      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005bd2:	2b40      	cmp	r3, #64	@ 0x40
 8005bd4:	d007      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005bd6:	e01c      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005be4:	e01e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bea:	3308      	adds	r3, #8
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fb94 	bl	800731c <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005bfa:	e013      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c00:	3328      	adds	r3, #40	@ 0x28
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fc3b 	bl	8007480 <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005c10:	e008      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c18:	e004      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3a:	4a37      	ldr	r2, [pc, #220]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d05c      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005c74:	d03b      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c76:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005c7a:	d834      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c80:	d037      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c86:	d82e      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c8c:	d033      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c8e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c92:	d828      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c98:	d01a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9e:	d822      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca8:	d007      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005caa:	e01c      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4a19      	ldr	r2, [pc, #100]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01e      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fb2a 	bl	800731c <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005cce:	e013      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cd4:	3328      	adds	r3, #40	@ 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fbd1 	bl	8007480 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cec:	e004      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005d00:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d04:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	4a02      	ldr	r2, [pc, #8]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d14:	e006      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d16:	bf00      	nop
 8005d18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d03a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4a:	2b30      	cmp	r3, #48	@ 0x30
 8005d4c:	d01f      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005d4e:	2b30      	cmp	r3, #48	@ 0x30
 8005d50:	d819      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d00c      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d815      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d019      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d111      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d62:	4bae      	ldr	r3, [pc, #696]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4aad      	ldr	r2, [pc, #692]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d6e:	e011      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d74:	3308      	adds	r3, #8
 8005d76:	2102      	movs	r1, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 facf 	bl	800731c <RCCEx_PLL2_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d84:	e006      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d8c:	e002      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d9c:	4b9f      	ldr	r3, [pc, #636]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	4a9c      	ldr	r2, [pc, #624]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005db6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d051      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de4:	d035      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dea:	d82e      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005dec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005df0:	d031      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005df2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005df6:	d828      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfc:	d01a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e02:	d822      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005e0e:	e01c      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e10:	4b82      	ldr	r3, [pc, #520]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	4a81      	ldr	r2, [pc, #516]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e01c      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e22:	3308      	adds	r3, #8
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fa78 	bl	800731c <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e32:	e011      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e38:	3328      	adds	r3, #40	@ 0x28
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fb1f 	bl	8007480 <RCCEx_PLL3_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e48:	e006      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e50:	e002      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e60:	4b6e      	ldr	r3, [pc, #440]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6e:	4a6b      	ldr	r2, [pc, #428]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e74:	e003      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	d053      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea8:	d033      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005eaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eae:	d82c      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005eb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eb4:	d02f      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eba:	d826      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec0:	d02b      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec6:	d820      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ecc:	d012      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed2:	d81a      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d022      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005edc:	d115      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fa18 	bl	800731c <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ef2:	e015      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef8:	3328      	adds	r3, #40	@ 0x28
 8005efa:	2101      	movs	r1, #1
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fabf 	bl	8007480 <RCCEx_PLL3_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f08:	e00a      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f10:	e006      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f12:	bf00      	nop
 8005f14:	e004      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f28:	4b3c      	ldr	r3, [pc, #240]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f36:	4a39      	ldr	r2, [pc, #228]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f3c:	e003      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4313      	orrs	r3, r2
 8005f64:	d060      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005f72:	d039      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005f74:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005f78:	d832      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f7e:	d035      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f84:	d82c      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d031      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f90:	d826      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f96:	d02d      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f9c:	d820      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa2:	d012      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa8:	d81a      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d024      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb2:	d115      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb8:	3308      	adds	r3, #8
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f9ad 	bl	800731c <RCCEx_PLL2_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e017      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	3328      	adds	r3, #40	@ 0x28
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fa54 	bl	8007480 <RCCEx_PLL3_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fde:	e00c      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fe6:	e008      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fe8:	bf00      	nop
 8005fea:	e006      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fec:	bf00      	nop
 8005fee:	e004      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10e      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006002:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800600a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800600e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006012:	4a02      	ldr	r2, [pc, #8]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6593      	str	r3, [r2, #88]	@ 0x58
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800601a:	bf00      	nop
 800601c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006024:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800603e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d037      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800604c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800604e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006052:	d00e      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006058:	d816      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800605e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006062:	d111      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006064:	4bc4      	ldr	r3, [pc, #784]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	4ac3      	ldr	r2, [pc, #780]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800606a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800606e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006070:	e00f      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006076:	3308      	adds	r3, #8
 8006078:	2101      	movs	r1, #1
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f94e 	bl	800731c <RCCEx_PLL2_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800609a:	4bb7      	ldr	r3, [pc, #732]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060a8:	4ab3      	ldr	r2, [pc, #716]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060aa:	430b      	orrs	r3, r1
 80060ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80060ae:	e003      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c8:	2300      	movs	r3, #0
 80060ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d039      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d81c      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80060e2:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006125 	.word	0x08006125
 80060ec:	080060f9 	.word	0x080060f9
 80060f0:	08006107 	.word	0x08006107
 80060f4:	08006125 	.word	0x08006125
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f8:	4b9f      	ldr	r3, [pc, #636]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	4a9e      	ldr	r2, [pc, #632]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006104:	e00f      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800610a:	3308      	adds	r3, #8
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f904 	bl	800731c <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800611a:	e004      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800612e:	4b92      	ldr	r3, [pc, #584]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006132:	f023 0103 	bic.w	r1, r3, #3
 8006136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800613a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800613c:	4a8e      	ldr	r2, [pc, #568]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800613e:	430b      	orrs	r3, r1
 8006140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800614c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006162:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006166:	460b      	mov	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	f000 8099 	beq.w	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800616e:	4b83      	ldr	r3, [pc, #524]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a82      	ldr	r2, [pc, #520]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800617a:	f7fe f909 	bl	8004390 <HAL_GetTick>
 800617e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006182:	e00b      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006184:	f7fe f904 	bl	8004390 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b64      	cmp	r3, #100	@ 0x64
 8006192:	d903      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800619a:	e005      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619c:	4b77      	ldr	r3, [pc, #476]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ed      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d173      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061b0:	4b71      	ldr	r3, [pc, #452]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061bc:	4053      	eors	r3, r2
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d015      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d2:	4b69      	ldr	r3, [pc, #420]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	4a68      	ldr	r2, [pc, #416]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061de:	4b66      	ldr	r3, [pc, #408]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	4a65      	ldr	r2, [pc, #404]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061ea:	4a63      	ldr	r2, [pc, #396]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fe:	d118      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fe f8c6 	bl	8004390 <HAL_GetTick>
 8006204:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006208:	e00d      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fe f8c1 	bl	8004390 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	f241 3388 	movw	r3, #5000	@ 0x1388
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006224:	e005      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006226:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0eb      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006236:	2b00      	cmp	r3, #0
 8006238:	d129      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800623a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624a:	d10e      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800624c:	4b4a      	ldr	r3, [pc, #296]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800625c:	091a      	lsrs	r2, r3, #4
 800625e:	4b48      	ldr	r3, [pc, #288]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006260:	4013      	ands	r3, r2
 8006262:	4a45      	ldr	r2, [pc, #276]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006264:	430b      	orrs	r3, r1
 8006266:	6113      	str	r3, [r2, #16]
 8006268:	e005      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800626a:	4b43      	ldr	r3, [pc, #268]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	4a42      	ldr	r2, [pc, #264]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006270:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006274:	6113      	str	r3, [r2, #16]
 8006276:	4b40      	ldr	r3, [pc, #256]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800627a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006286:	4a3c      	ldr	r2, [pc, #240]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6713      	str	r3, [r2, #112]	@ 0x70
 800628c:	e008      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800628e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006292:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800629c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 0301 	and.w	r3, r2, #1
 80062ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4313      	orrs	r3, r2
 80062be:	f000 8090 	beq.w	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ca:	2b28      	cmp	r3, #40	@ 0x28
 80062cc:	d870      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80062ce:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080063b9 	.word	0x080063b9
 80062d8:	080063b1 	.word	0x080063b1
 80062dc:	080063b1 	.word	0x080063b1
 80062e0:	080063b1 	.word	0x080063b1
 80062e4:	080063b1 	.word	0x080063b1
 80062e8:	080063b1 	.word	0x080063b1
 80062ec:	080063b1 	.word	0x080063b1
 80062f0:	080063b1 	.word	0x080063b1
 80062f4:	08006385 	.word	0x08006385
 80062f8:	080063b1 	.word	0x080063b1
 80062fc:	080063b1 	.word	0x080063b1
 8006300:	080063b1 	.word	0x080063b1
 8006304:	080063b1 	.word	0x080063b1
 8006308:	080063b1 	.word	0x080063b1
 800630c:	080063b1 	.word	0x080063b1
 8006310:	080063b1 	.word	0x080063b1
 8006314:	0800639b 	.word	0x0800639b
 8006318:	080063b1 	.word	0x080063b1
 800631c:	080063b1 	.word	0x080063b1
 8006320:	080063b1 	.word	0x080063b1
 8006324:	080063b1 	.word	0x080063b1
 8006328:	080063b1 	.word	0x080063b1
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080063b1 	.word	0x080063b1
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063b1 	.word	0x080063b1
 800633c:	080063b1 	.word	0x080063b1
 8006340:	080063b1 	.word	0x080063b1
 8006344:	080063b1 	.word	0x080063b1
 8006348:	080063b1 	.word	0x080063b1
 800634c:	080063b1 	.word	0x080063b1
 8006350:	080063b1 	.word	0x080063b1
 8006354:	080063b9 	.word	0x080063b9
 8006358:	080063b1 	.word	0x080063b1
 800635c:	080063b1 	.word	0x080063b1
 8006360:	080063b1 	.word	0x080063b1
 8006364:	080063b1 	.word	0x080063b1
 8006368:	080063b1 	.word	0x080063b1
 800636c:	080063b1 	.word	0x080063b1
 8006370:	080063b1 	.word	0x080063b1
 8006374:	080063b9 	.word	0x080063b9
 8006378:	58024400 	.word	0x58024400
 800637c:	58024800 	.word	0x58024800
 8006380:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006388:	3308      	adds	r3, #8
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f000 ffc5 	bl	800731c <RCCEx_PLL2_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006398:	e00f      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f86c 	bl	8007480 <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063c2:	4bc0      	ldr	r3, [pc, #768]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d2:	4abc      	ldr	r2, [pc, #752]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f002 0302 	and.w	r3, r2, #2
 80063ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d043      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800640a:	2b05      	cmp	r3, #5
 800640c:	d824      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800640e:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006461 	.word	0x08006461
 8006418:	0800642d 	.word	0x0800642d
 800641c:	08006443 	.word	0x08006443
 8006420:	08006461 	.word	0x08006461
 8006424:	08006461 	.word	0x08006461
 8006428:	08006461 	.word	0x08006461
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800642c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006430:	3308      	adds	r3, #8
 8006432:	2101      	movs	r1, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f000 ff71 	bl	800731c <RCCEx_PLL2_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006440:	e00f      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006446:	3328      	adds	r3, #40	@ 0x28
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f818 	bl	8007480 <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006456:	e004      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800645e:	e000      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800646a:	4b96      	ldr	r3, [pc, #600]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f023 0107 	bic.w	r1, r3, #7
 8006472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647a:	4a92      	ldr	r2, [pc, #584]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800647c:	430b      	orrs	r3, r1
 800647e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006486:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800648a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f002 0304 	and.w	r3, r2, #4
 8006496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d043      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d824      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80064b6:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	08006509 	.word	0x08006509
 80064c0:	080064d5 	.word	0x080064d5
 80064c4:	080064eb 	.word	0x080064eb
 80064c8:	08006509 	.word	0x08006509
 80064cc:	08006509 	.word	0x08006509
 80064d0:	08006509 	.word	0x08006509
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064d8:	3308      	adds	r3, #8
 80064da:	2101      	movs	r1, #1
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 ff1d 	bl	800731c <RCCEx_PLL2_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064e8:	e00f      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ee:	3328      	adds	r3, #40	@ 0x28
 80064f0:	2101      	movs	r1, #1
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 ffc4 	bl	8007480 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006512:	4b6c      	ldr	r3, [pc, #432]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006516:	f023 0107 	bic.w	r1, r3, #7
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006522:	4a68      	ldr	r2, [pc, #416]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006524:	430b      	orrs	r3, r1
 8006526:	6593      	str	r3, [r2, #88]	@ 0x58
 8006528:	e003      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800652e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f002 0320 	and.w	r3, r2, #32
 800653e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006542:	2300      	movs	r3, #0
 8006544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800654c:	460b      	mov	r3, r1
 800654e:	4313      	orrs	r3, r2
 8006550:	d055      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800655a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800655e:	d033      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006564:	d82c      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	d02f      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006570:	d826      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006576:	d02b      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800657c:	d820      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800657e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006582:	d012      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006588:	d81a      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d022      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006592:	d115      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006598:	3308      	adds	r3, #8
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f000 febd 	bl	800731c <RCCEx_PLL2_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065a8:	e015      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ae:	3328      	adds	r3, #40	@ 0x28
 80065b0:	2102      	movs	r1, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 ff64 	bl	8007480 <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065be:	e00a      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065c6:	e006      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065c8:	bf00      	nop
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065de:	4b39      	ldr	r3, [pc, #228]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ee:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065f4:	e003      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800660a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800660e:	2300      	movs	r3, #0
 8006610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006614:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d058      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800661e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006626:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800662a:	d033      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800662c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006630:	d82c      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006636:	d02f      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663c:	d826      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800663e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006642:	d02b      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006648:	d820      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800664a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664e:	d012      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006654:	d81a      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d022      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800665a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665e:	d115      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006664:	3308      	adds	r3, #8
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fe57 	bl	800731c <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006674:	e015      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800667a:	3328      	adds	r3, #40	@ 0x28
 800667c:	2102      	movs	r1, #2
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fefe 	bl	8007480 <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800668a:	e00a      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006692:	e006      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066aa:	4b06      	ldr	r3, [pc, #24]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ba:	4a02      	ldr	r2, [pc, #8]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c0:	e006      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d055      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066fc:	d033      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80066fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006702:	d82c      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006708:	d02f      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800670a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670e:	d826      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006710:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006714:	d02b      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006716:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800671a:	d820      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800671c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006720:	d012      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006726:	d81a      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d022      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006730:	d115      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006736:	3308      	adds	r3, #8
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fdee 	bl	800731c <RCCEx_PLL2_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006746:	e015      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674c:	3328      	adds	r3, #40	@ 0x28
 800674e:	2102      	movs	r1, #2
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fe95 	bl	8007480 <RCCEx_PLL3_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800675c:	e00a      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006764:	e006      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800677c:	4ba1      	ldr	r3, [pc, #644]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006780:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006788:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800678c:	4a9d      	ldr	r2, [pc, #628]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800678e:	430b      	orrs	r3, r1
 8006790:	6593      	str	r3, [r2, #88]	@ 0x58
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006798:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 0308 	and.w	r3, r2, #8
 80067a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d01e      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ce:	3328      	adds	r3, #40	@ 0x28
 80067d0:	2102      	movs	r1, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fe54 	bl	8007480 <RCCEx_PLL3_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067e4:	4b87      	ldr	r3, [pc, #540]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067f4:	4a83      	ldr	r2, [pc, #524]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f002 0310 	and.w	r3, r2, #16
 8006806:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800680a:	2300      	movs	r3, #0
 800680c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006810:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006814:	460b      	mov	r3, r1
 8006816:	4313      	orrs	r3, r2
 8006818:	d01e      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800681a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006826:	d10c      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682c:	3328      	adds	r3, #40	@ 0x28
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fe25 	bl	8007480 <RCCEx_PLL3_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006842:	4b70      	ldr	r3, [pc, #448]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006846:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006852:	4a6c      	ldr	r2, [pc, #432]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006854:	430b      	orrs	r3, r1
 8006856:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800686e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006872:	460b      	mov	r3, r1
 8006874:	4313      	orrs	r3, r2
 8006876:	d03e      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800687c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006884:	d022      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688a:	d81b      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d00b      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006896:	e015      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689c:	3308      	adds	r3, #8
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fd3b 	bl	800731c <RCCEx_PLL2_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ac:	e00f      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b2:	3328      	adds	r3, #40	@ 0x28
 80068b4:	2102      	movs	r1, #2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fde2 	bl	8007480 <RCCEx_PLL3_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068c2:	e004      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068ca:	e000      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80068cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068e6:	4a47      	ldr	r2, [pc, #284]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ec:	e003      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006904:	2300      	movs	r3, #0
 8006906:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006908:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d03b      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800691e:	d01f      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006924:	d818      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692a:	d003      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800692c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006930:	d007      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006932:	e011      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006934:	4b33      	ldr	r3, [pc, #204]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800693e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006940:	e00f      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006946:	3328      	adds	r3, #40	@ 0x28
 8006948:	2101      	movs	r1, #1
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fd98 	bl	8007480 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10b      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800696a:	4b26      	ldr	r3, [pc, #152]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800696c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800696e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697a:	4a22      	ldr	r2, [pc, #136]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800697c:	430b      	orrs	r3, r1
 800697e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006980:	e003      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006986:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800698a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006996:	673b      	str	r3, [r7, #112]	@ 0x70
 8006998:	2300      	movs	r3, #0
 800699a:	677b      	str	r3, [r7, #116]	@ 0x74
 800699c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d034      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b4:	d007      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80069b6:	e011      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4b12      	ldr	r3, [pc, #72]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	4a11      	ldr	r2, [pc, #68]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069c4:	e00e      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ca:	3308      	adds	r3, #8
 80069cc:	2102      	movs	r1, #2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fca4 	bl	800731c <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069da:	e003      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10d      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fa:	4a02      	ldr	r2, [pc, #8]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069fc:	430b      	orrs	r3, r1
 80069fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a00:	e006      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006a02:	bf00      	nop
 8006a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a1e:	2300      	movs	r3, #0
 8006a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d00c      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a30:	3328      	adds	r3, #40	@ 0x28
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fd23 	bl	8007480 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a54:	2300      	movs	r3, #0
 8006a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d038      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a6e:	d018      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a74:	d811      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a7a:	d014      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a80:	d80b      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8c:	4bc3      	ldr	r3, [pc, #780]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	4ac2      	ldr	r2, [pc, #776]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a98:	e008      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006aa0:	e004      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ab4:	4bb9      	ldr	r3, [pc, #740]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac4:	4ab5      	ldr	r2, [pc, #724]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ad0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006af0:	4baa      	ldr	r3, [pc, #680]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006afe:	4aa7      	ldr	r2, [pc, #668]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b12:	2300      	movs	r3, #0
 8006b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b20:	4b9e      	ldr	r3, [pc, #632]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2e:	4a9b      	ldr	r2, [pc, #620]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b42:	2300      	movs	r3, #0
 8006b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006b50:	4b92      	ldr	r3, [pc, #584]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b54:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	4a8f      	ldr	r2, [pc, #572]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b72:	2300      	movs	r3, #0
 8006b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b80:	4b86      	ldr	r3, [pc, #536]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	4a85      	ldr	r2, [pc, #532]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b8a:	6113      	str	r3, [r2, #16]
 8006b8c:	4b83      	ldr	r3, [pc, #524]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b8e:	6919      	ldr	r1, [r3, #16]
 8006b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b98:	4a80      	ldr	r2, [pc, #512]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bac:	2300      	movs	r3, #0
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bba:	4b78      	ldr	r3, [pc, #480]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	4a74      	ldr	r2, [pc, #464]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d00a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bea:	4b6c      	ldr	r3, [pc, #432]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfa:	4a68      	ldr	r2, [pc, #416]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c16:	460b      	mov	r3, r1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	d011      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c20:	3308      	adds	r3, #8
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fb79 	bl	800731c <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006c30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6239      	str	r1, [r7, #32]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c56:	460b      	mov	r3, r1
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	d011      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c60:	3308      	adds	r3, #8
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb59 	bl	800731c <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006c70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	61b9      	str	r1, [r7, #24]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d011      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	2102      	movs	r1, #2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fb39 	bl	800731c <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6139      	str	r1, [r7, #16]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	d011      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce0:	3328      	adds	r3, #40	@ 0x28
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fbcb 	bl	8007480 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006cf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d011      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d20:	3328      	adds	r3, #40	@ 0x28
 8006d22:	2101      	movs	r1, #1
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fbab 	bl	8007480 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006d30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6039      	str	r1, [r7, #0]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d011      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d60:	3328      	adds	r3, #40	@ 0x28
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fb8b 	bl	8007480 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006d70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006d80:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006d94:	46bd      	mov	sp, r7
 8006d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d9a:	bf00      	nop
 8006d9c:	58024400 	.word	0x58024400

08006da0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006da4:	f7fe fde2 	bl	800596c <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4904      	ldr	r1, [pc, #16]	@ (8006dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	08009c90 	.word	0x08009c90

08006dcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b089      	sub	sp, #36	@ 0x24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dde:	4b9f      	ldr	r3, [pc, #636]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	0b1b      	lsrs	r3, r3, #12
 8006de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006de8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dea:	4b9c      	ldr	r3, [pc, #624]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006df6:	4b99      	ldr	r3, [pc, #612]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8111 	beq.w	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f000 8083 	beq.w	8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	f200 80a1 	bhi.w	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d056      	beq.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e36:	e099      	b.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e38:	4b88      	ldr	r3, [pc, #544]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d02d      	beq.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e44:	4b85      	ldr	r3, [pc, #532]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	08db      	lsrs	r3, r3, #3
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	4a84      	ldr	r2, [pc, #528]	@ (8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e9e:	e087      	b.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee2:	e065      	b.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800706c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef6:	4b59      	ldr	r3, [pc, #356]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f26:	e043      	b.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3a:	4b48      	ldr	r3, [pc, #288]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6a:	e021      	b.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800706c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	4b37      	ldr	r3, [pc, #220]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	0a5b      	lsrs	r3, r3, #9
 8006fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006fde:	4b1f      	ldr	r3, [pc, #124]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	0c1b      	lsrs	r3, r3, #16
 8006fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007004:	ee17 2a90 	vmov	r2, s15
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800700c:	4b13      	ldr	r3, [pc, #76]	@ (800705c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800703a:	e008      	b.n	800704e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	609a      	str	r2, [r3, #8]
}
 800704e:	bf00      	nop
 8007050:	3724      	adds	r7, #36	@ 0x24
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	58024400 	.word	0x58024400
 8007060:	03d09000 	.word	0x03d09000
 8007064:	46000000 	.word	0x46000000
 8007068:	4c742400 	.word	0x4c742400
 800706c:	4a742400 	.word	0x4a742400
 8007070:	4af42400 	.word	0x4af42400

08007074 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	@ 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800707c:	4ba1      	ldr	r3, [pc, #644]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007086:	4b9f      	ldr	r3, [pc, #636]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	0d1b      	lsrs	r3, r3, #20
 800708c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007090:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007092:	4b9c      	ldr	r3, [pc, #624]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800709e:	4b99      	ldr	r3, [pc, #612]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8111 	beq.w	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f000 8083 	beq.w	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	f200 80a1 	bhi.w	8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d056      	beq.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070de:	e099      	b.n	8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e0:	4b88      	ldr	r3, [pc, #544]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02d      	beq.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070ec:	4b85      	ldr	r3, [pc, #532]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	4a84      	ldr	r2, [pc, #528]	@ (8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b7b      	ldr	r3, [pc, #492]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007146:	e087      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b6a      	ldr	r3, [pc, #424]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718a:	e065      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b59      	ldr	r3, [pc, #356]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ce:	e043      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b48      	ldr	r3, [pc, #288]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	e021      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b37      	ldr	r3, [pc, #220]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800730c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007258:	4b2a      	ldr	r3, [pc, #168]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	0a5b      	lsrs	r3, r3, #9
 800725e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800726e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007272:	edd7 6a07 	vldr	s13, [r7, #28]
 8007276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727e:	ee17 2a90 	vmov	r2, s15
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007286:	4b1f      	ldr	r3, [pc, #124]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800729c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ac:	ee17 2a90 	vmov	r2, s15
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072b4:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072e2:	e008      	b.n	80072f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	609a      	str	r2, [r3, #8]
}
 80072f6:	bf00      	nop
 80072f8:	3724      	adds	r7, #36	@ 0x24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
 8007308:	03d09000 	.word	0x03d09000
 800730c:	46000000 	.word	0x46000000
 8007310:	4c742400 	.word	0x4c742400
 8007314:	4a742400 	.word	0x4a742400
 8007318:	4af42400 	.word	0x4af42400

0800731c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800732a:	4b53      	ldr	r3, [pc, #332]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d101      	bne.n	800733a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e099      	b.n	800746e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800733a:	4b4f      	ldr	r3, [pc, #316]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a4e      	ldr	r2, [pc, #312]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007340:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007346:	f7fd f823 	bl	8004390 <HAL_GetTick>
 800734a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800734c:	e008      	b.n	8007360 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800734e:	f7fd f81f 	bl	8004390 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e086      	b.n	800746e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007360:	4b45      	ldr	r3, [pc, #276]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f0      	bne.n	800734e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800736c:	4b42      	ldr	r3, [pc, #264]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	031b      	lsls	r3, r3, #12
 800737a:	493f      	ldr	r1, [pc, #252]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800737c:	4313      	orrs	r3, r2
 800737e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	3b01      	subs	r3, #1
 8007386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	3b01      	subs	r3, #1
 8007390:	025b      	lsls	r3, r3, #9
 8007392:	b29b      	uxth	r3, r3
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	061b      	lsls	r3, r3, #24
 80073ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073b0:	4931      	ldr	r1, [pc, #196]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073b6:	4b30      	ldr	r3, [pc, #192]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	492d      	ldr	r1, [pc, #180]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	f023 0220 	bic.w	r2, r3, #32
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	4928      	ldr	r1, [pc, #160]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073da:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	4a26      	ldr	r2, [pc, #152]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	f023 0310 	bic.w	r3, r3, #16
 80073e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073e6:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ea:	4b24      	ldr	r3, [pc, #144]	@ (800747c <RCCEx_PLL2_Config+0x160>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	69d2      	ldr	r2, [r2, #28]
 80073f2:	00d2      	lsls	r2, r2, #3
 80073f4:	4920      	ldr	r1, [pc, #128]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007400:	f043 0310 	orr.w	r3, r3, #16
 8007404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800740c:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007418:	e00f      	b.n	800743a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d106      	bne.n	800742e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007420:	4b15      	ldr	r3, [pc, #84]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a14      	ldr	r2, [pc, #80]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800742c:	e005      	b.n	800743a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800742e:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a11      	ldr	r2, [pc, #68]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800743a:	4b0f      	ldr	r3, [pc, #60]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a0e      	ldr	r2, [pc, #56]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007440:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007446:	f7fc ffa3 	bl	8004390 <HAL_GetTick>
 800744a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800744c:	e008      	b.n	8007460 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800744e:	f7fc ff9f 	bl	8004390 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e006      	b.n	800746e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007460:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <RCCEx_PLL2_Config+0x15c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0f0      	beq.n	800744e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	58024400 	.word	0x58024400
 800747c:	ffff0007 	.word	0xffff0007

08007480 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800748e:	4b53      	ldr	r3, [pc, #332]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b03      	cmp	r3, #3
 8007498:	d101      	bne.n	800749e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e099      	b.n	80075d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800749e:	4b4f      	ldr	r3, [pc, #316]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a4e      	ldr	r2, [pc, #312]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80074a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074aa:	f7fc ff71 	bl	8004390 <HAL_GetTick>
 80074ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074b0:	e008      	b.n	80074c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074b2:	f7fc ff6d 	bl	8004390 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e086      	b.n	80075d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c4:	4b45      	ldr	r3, [pc, #276]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1f0      	bne.n	80074b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074d0:	4b42      	ldr	r3, [pc, #264]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	051b      	lsls	r3, r3, #20
 80074de:	493f      	ldr	r1, [pc, #252]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	025b      	lsls	r3, r3, #9
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	3b01      	subs	r3, #1
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	3b01      	subs	r3, #1
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007514:	4931      	ldr	r1, [pc, #196]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007516:	4313      	orrs	r3, r2
 8007518:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800751a:	4b30      	ldr	r3, [pc, #192]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	492d      	ldr	r1, [pc, #180]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007528:	4313      	orrs	r3, r2
 800752a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800752c:	4b2b      	ldr	r3, [pc, #172]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	4928      	ldr	r1, [pc, #160]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800753a:	4313      	orrs	r3, r2
 800753c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800753e:	4b27      	ldr	r3, [pc, #156]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	4a26      	ldr	r2, [pc, #152]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800754a:	4b24      	ldr	r3, [pc, #144]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800754c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800754e:	4b24      	ldr	r3, [pc, #144]	@ (80075e0 <RCCEx_PLL3_Config+0x160>)
 8007550:	4013      	ands	r3, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	69d2      	ldr	r2, [r2, #28]
 8007556:	00d2      	lsls	r2, r2, #3
 8007558:	4920      	ldr	r1, [pc, #128]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800755e:	4b1f      	ldr	r3, [pc, #124]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	4a1e      	ldr	r2, [pc, #120]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007570:	4b1a      	ldr	r3, [pc, #104]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007576:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800757a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800757c:	e00f      	b.n	800759e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d106      	bne.n	8007592 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007584:	4b15      	ldr	r3, [pc, #84]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	4a14      	ldr	r2, [pc, #80]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 800758a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800758e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007590:	e005      	b.n	800759e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007592:	4b12      	ldr	r3, [pc, #72]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	4a11      	ldr	r2, [pc, #68]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 8007598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800759c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800759e:	4b0f      	ldr	r3, [pc, #60]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a0e      	ldr	r2, [pc, #56]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075aa:	f7fc fef1 	bl	8004390 <HAL_GetTick>
 80075ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b0:	e008      	b.n	80075c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075b2:	f7fc feed 	bl	8004390 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e006      	b.n	80075d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <RCCEx_PLL3_Config+0x15c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	58024400 	.word	0x58024400
 80075e0:	ffff0007 	.word	0xffff0007

080075e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e042      	b.n	800767c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fc fc2b 	bl	8003e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2224      	movs	r2, #36	@ 0x24
 8007612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ff22 	bl	8008478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8b3 	bl	80077a0 <UART_SetConfig>
 800763a:	4603      	mov	r3, r0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e01b      	b.n	800767c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ffa1 	bl	80085bc <UART_CheckIdleState>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08a      	sub	sp, #40	@ 0x28
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769a:	2b20      	cmp	r3, #32
 800769c:	d17b      	bne.n	8007796 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_UART_Transmit+0x26>
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e074      	b.n	8007798 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2221      	movs	r2, #33	@ 0x21
 80076ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076be:	f7fc fe67 	bl	8004390 <HAL_GetTick>
 80076c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076dc:	d108      	bne.n	80076f0 <HAL_UART_Transmit+0x6c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	e003      	b.n	80076f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076f8:	e030      	b.n	800775c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	2180      	movs	r1, #128	@ 0x80
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f001 f803 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e03d      	b.n	8007798 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10b      	bne.n	800773a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	3302      	adds	r3, #2
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	e007      	b.n	800774a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1c8      	bne.n	80076fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2200      	movs	r2, #0
 8007770:	2140      	movs	r1, #64	@ 0x40
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 ffcc 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e006      	b.n	8007798 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b092      	sub	sp, #72	@ 0x48
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	431a      	orrs	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4bbe      	ldr	r3, [pc, #760]	@ (8007ac8 <UART_SetConfig+0x328>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077d8:	430b      	orrs	r3, r1
 80077da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4ab3      	ldr	r2, [pc, #716]	@ (8007acc <UART_SetConfig+0x32c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007808:	4313      	orrs	r3, r2
 800780a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	4baf      	ldr	r3, [pc, #700]	@ (8007ad0 <UART_SetConfig+0x330>)
 8007814:	4013      	ands	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800781c:	430b      	orrs	r3, r1
 800781e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	f023 010f 	bic.w	r1, r3, #15
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ad4 <UART_SetConfig+0x334>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d177      	bne.n	8007930 <UART_SetConfig+0x190>
 8007840:	4ba5      	ldr	r3, [pc, #660]	@ (8007ad8 <UART_SetConfig+0x338>)
 8007842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007848:	2b28      	cmp	r3, #40	@ 0x28
 800784a:	d86d      	bhi.n	8007928 <UART_SetConfig+0x188>
 800784c:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <UART_SetConfig+0xb4>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	080078f9 	.word	0x080078f9
 8007858:	08007929 	.word	0x08007929
 800785c:	08007929 	.word	0x08007929
 8007860:	08007929 	.word	0x08007929
 8007864:	08007929 	.word	0x08007929
 8007868:	08007929 	.word	0x08007929
 800786c:	08007929 	.word	0x08007929
 8007870:	08007929 	.word	0x08007929
 8007874:	08007901 	.word	0x08007901
 8007878:	08007929 	.word	0x08007929
 800787c:	08007929 	.word	0x08007929
 8007880:	08007929 	.word	0x08007929
 8007884:	08007929 	.word	0x08007929
 8007888:	08007929 	.word	0x08007929
 800788c:	08007929 	.word	0x08007929
 8007890:	08007929 	.word	0x08007929
 8007894:	08007909 	.word	0x08007909
 8007898:	08007929 	.word	0x08007929
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007929 	.word	0x08007929
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007929 	.word	0x08007929
 80078b4:	08007911 	.word	0x08007911
 80078b8:	08007929 	.word	0x08007929
 80078bc:	08007929 	.word	0x08007929
 80078c0:	08007929 	.word	0x08007929
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007929 	.word	0x08007929
 80078cc:	08007929 	.word	0x08007929
 80078d0:	08007929 	.word	0x08007929
 80078d4:	08007919 	.word	0x08007919
 80078d8:	08007929 	.word	0x08007929
 80078dc:	08007929 	.word	0x08007929
 80078e0:	08007929 	.word	0x08007929
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007929 	.word	0x08007929
 80078ec:	08007929 	.word	0x08007929
 80078f0:	08007929 	.word	0x08007929
 80078f4:	08007921 	.word	0x08007921
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e326      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007900:	2304      	movs	r3, #4
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e322      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007908:	2308      	movs	r3, #8
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e31e      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007910:	2310      	movs	r3, #16
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e31a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007918:	2320      	movs	r3, #32
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e316      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007920:	2340      	movs	r3, #64	@ 0x40
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e312      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007928:	2380      	movs	r3, #128	@ 0x80
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e30e      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a69      	ldr	r2, [pc, #420]	@ (8007adc <UART_SetConfig+0x33c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d130      	bne.n	800799c <UART_SetConfig+0x1fc>
 800793a:	4b67      	ldr	r3, [pc, #412]	@ (8007ad8 <UART_SetConfig+0x338>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	2b05      	cmp	r3, #5
 8007944:	d826      	bhi.n	8007994 <UART_SetConfig+0x1f4>
 8007946:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <UART_SetConfig+0x1ac>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007965 	.word	0x08007965
 8007950:	0800796d 	.word	0x0800796d
 8007954:	08007975 	.word	0x08007975
 8007958:	0800797d 	.word	0x0800797d
 800795c:	08007985 	.word	0x08007985
 8007960:	0800798d 	.word	0x0800798d
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e2f0      	b.n	8007f4e <UART_SetConfig+0x7ae>
 800796c:	2304      	movs	r3, #4
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e2ec      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007974:	2308      	movs	r3, #8
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e2e8      	b.n	8007f4e <UART_SetConfig+0x7ae>
 800797c:	2310      	movs	r3, #16
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e2e4      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007984:	2320      	movs	r3, #32
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e2e0      	b.n	8007f4e <UART_SetConfig+0x7ae>
 800798c:	2340      	movs	r3, #64	@ 0x40
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e2dc      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e2d8      	b.n	8007f4e <UART_SetConfig+0x7ae>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a4f      	ldr	r2, [pc, #316]	@ (8007ae0 <UART_SetConfig+0x340>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d130      	bne.n	8007a08 <UART_SetConfig+0x268>
 80079a6:	4b4c      	ldr	r3, [pc, #304]	@ (8007ad8 <UART_SetConfig+0x338>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d826      	bhi.n	8007a00 <UART_SetConfig+0x260>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <UART_SetConfig+0x218>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079d9 	.word	0x080079d9
 80079c0:	080079e1 	.word	0x080079e1
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e2ba      	b.n	8007f4e <UART_SetConfig+0x7ae>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e2b6      	b.n	8007f4e <UART_SetConfig+0x7ae>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e2b2      	b.n	8007f4e <UART_SetConfig+0x7ae>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e2ae      	b.n	8007f4e <UART_SetConfig+0x7ae>
 80079f0:	2320      	movs	r3, #32
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e2aa      	b.n	8007f4e <UART_SetConfig+0x7ae>
 80079f8:	2340      	movs	r3, #64	@ 0x40
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e2a6      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a00:	2380      	movs	r3, #128	@ 0x80
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e2a2      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ae4 <UART_SetConfig+0x344>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d130      	bne.n	8007a74 <UART_SetConfig+0x2d4>
 8007a12:	4b31      	ldr	r3, [pc, #196]	@ (8007ad8 <UART_SetConfig+0x338>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	d826      	bhi.n	8007a6c <UART_SetConfig+0x2cc>
 8007a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <UART_SetConfig+0x284>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a3d 	.word	0x08007a3d
 8007a28:	08007a45 	.word	0x08007a45
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a65 	.word	0x08007a65
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e284      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a44:	2304      	movs	r3, #4
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e280      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e27c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a54:	2310      	movs	r3, #16
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e278      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e274      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a64:	2340      	movs	r3, #64	@ 0x40
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e270      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a6c:	2380      	movs	r3, #128	@ 0x80
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e26c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae8 <UART_SetConfig+0x348>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d142      	bne.n	8007b04 <UART_SetConfig+0x364>
 8007a7e:	4b16      	ldr	r3, [pc, #88]	@ (8007ad8 <UART_SetConfig+0x338>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d838      	bhi.n	8007afc <UART_SetConfig+0x35c>
 8007a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <UART_SetConfig+0x2f0>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007aa9 	.word	0x08007aa9
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007aed 	.word	0x08007aed
 8007aa4:	08007af5 	.word	0x08007af5
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e24e      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e24a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e246      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e242      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ac8:	cfff69f3 	.word	0xcfff69f3
 8007acc:	58000c00 	.word	0x58000c00
 8007ad0:	11fff4ff 	.word	0x11fff4ff
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	40004400 	.word	0x40004400
 8007ae0:	40004800 	.word	0x40004800
 8007ae4:	40004c00 	.word	0x40004c00
 8007ae8:	40005000 	.word	0x40005000
 8007aec:	2320      	movs	r3, #32
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e22c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007af4:	2340      	movs	r3, #64	@ 0x40
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e228      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007afc:	2380      	movs	r3, #128	@ 0x80
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e224      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4ab1      	ldr	r2, [pc, #708]	@ (8007dd0 <UART_SetConfig+0x630>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d176      	bne.n	8007bfc <UART_SetConfig+0x45c>
 8007b0e:	4bb1      	ldr	r3, [pc, #708]	@ (8007dd4 <UART_SetConfig+0x634>)
 8007b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b16:	2b28      	cmp	r3, #40	@ 0x28
 8007b18:	d86c      	bhi.n	8007bf4 <UART_SetConfig+0x454>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <UART_SetConfig+0x380>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bf5 	.word	0x08007bf5
 8007b28:	08007bf5 	.word	0x08007bf5
 8007b2c:	08007bf5 	.word	0x08007bf5
 8007b30:	08007bf5 	.word	0x08007bf5
 8007b34:	08007bf5 	.word	0x08007bf5
 8007b38:	08007bf5 	.word	0x08007bf5
 8007b3c:	08007bf5 	.word	0x08007bf5
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007bf5 	.word	0x08007bf5
 8007b48:	08007bf5 	.word	0x08007bf5
 8007b4c:	08007bf5 	.word	0x08007bf5
 8007b50:	08007bf5 	.word	0x08007bf5
 8007b54:	08007bf5 	.word	0x08007bf5
 8007b58:	08007bf5 	.word	0x08007bf5
 8007b5c:	08007bf5 	.word	0x08007bf5
 8007b60:	08007bd5 	.word	0x08007bd5
 8007b64:	08007bf5 	.word	0x08007bf5
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007bf5 	.word	0x08007bf5
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bf5 	.word	0x08007bf5
 8007b7c:	08007bf5 	.word	0x08007bf5
 8007b80:	08007bdd 	.word	0x08007bdd
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007bf5 	.word	0x08007bf5
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007be5 	.word	0x08007be5
 8007ba4:	08007bf5 	.word	0x08007bf5
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bf5 	.word	0x08007bf5
 8007bb0:	08007bf5 	.word	0x08007bf5
 8007bb4:	08007bf5 	.word	0x08007bf5
 8007bb8:	08007bf5 	.word	0x08007bf5
 8007bbc:	08007bf5 	.word	0x08007bf5
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e1c0      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e1bc      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e1b8      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e1b4      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007be4:	2320      	movs	r3, #32
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e1b0      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bec:	2340      	movs	r3, #64	@ 0x40
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e1ac      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bf4:	2380      	movs	r3, #128	@ 0x80
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e1a8      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a75      	ldr	r2, [pc, #468]	@ (8007dd8 <UART_SetConfig+0x638>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d130      	bne.n	8007c68 <UART_SetConfig+0x4c8>
 8007c06:	4b73      	ldr	r3, [pc, #460]	@ (8007dd4 <UART_SetConfig+0x634>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d826      	bhi.n	8007c60 <UART_SetConfig+0x4c0>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x478>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e18a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e186      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e182      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e17e      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c50:	2320      	movs	r3, #32
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e17a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c58:	2340      	movs	r3, #64	@ 0x40
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e176      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c60:	2380      	movs	r3, #128	@ 0x80
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e172      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8007ddc <UART_SetConfig+0x63c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d130      	bne.n	8007cd4 <UART_SetConfig+0x534>
 8007c72:	4b58      	ldr	r3, [pc, #352]	@ (8007dd4 <UART_SetConfig+0x634>)
 8007c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d826      	bhi.n	8007ccc <UART_SetConfig+0x52c>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <UART_SetConfig+0x4e4>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007ca5 	.word	0x08007ca5
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cbd 	.word	0x08007cbd
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e154      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e150      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007cac:	2308      	movs	r3, #8
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e14c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e148      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e144      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007cc4:	2340      	movs	r3, #64	@ 0x40
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e140      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ccc:	2380      	movs	r3, #128	@ 0x80
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e13c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a41      	ldr	r2, [pc, #260]	@ (8007de0 <UART_SetConfig+0x640>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	f040 8082 	bne.w	8007de4 <UART_SetConfig+0x644>
 8007ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8007dd4 <UART_SetConfig+0x634>)
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ce8:	2b28      	cmp	r3, #40	@ 0x28
 8007cea:	d86d      	bhi.n	8007dc8 <UART_SetConfig+0x628>
 8007cec:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <UART_SetConfig+0x554>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d99 	.word	0x08007d99
 8007cf8:	08007dc9 	.word	0x08007dc9
 8007cfc:	08007dc9 	.word	0x08007dc9
 8007d00:	08007dc9 	.word	0x08007dc9
 8007d04:	08007dc9 	.word	0x08007dc9
 8007d08:	08007dc9 	.word	0x08007dc9
 8007d0c:	08007dc9 	.word	0x08007dc9
 8007d10:	08007dc9 	.word	0x08007dc9
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007dc9 	.word	0x08007dc9
 8007d1c:	08007dc9 	.word	0x08007dc9
 8007d20:	08007dc9 	.word	0x08007dc9
 8007d24:	08007dc9 	.word	0x08007dc9
 8007d28:	08007dc9 	.word	0x08007dc9
 8007d2c:	08007dc9 	.word	0x08007dc9
 8007d30:	08007dc9 	.word	0x08007dc9
 8007d34:	08007da9 	.word	0x08007da9
 8007d38:	08007dc9 	.word	0x08007dc9
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007dc9 	.word	0x08007dc9
 8007d44:	08007dc9 	.word	0x08007dc9
 8007d48:	08007dc9 	.word	0x08007dc9
 8007d4c:	08007dc9 	.word	0x08007dc9
 8007d50:	08007dc9 	.word	0x08007dc9
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007dc9 	.word	0x08007dc9
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007dc9 	.word	0x08007dc9
 8007d6c:	08007dc9 	.word	0x08007dc9
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007db9 	.word	0x08007db9
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007dc1 	.word	0x08007dc1
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e0d6      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007da0:	2304      	movs	r3, #4
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e0d2      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007da8:	2308      	movs	r3, #8
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e0ce      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007db0:	2310      	movs	r3, #16
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e0ca      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007db8:	2320      	movs	r3, #32
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e0c6      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007dc0:	2340      	movs	r3, #64	@ 0x40
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e0c2      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007dc8:	2380      	movs	r3, #128	@ 0x80
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e0be      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007dd0:	40011400 	.word	0x40011400
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	40007800 	.word	0x40007800
 8007ddc:	40007c00 	.word	0x40007c00
 8007de0:	40011800 	.word	0x40011800
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4aad      	ldr	r2, [pc, #692]	@ (80080a0 <UART_SetConfig+0x900>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d176      	bne.n	8007edc <UART_SetConfig+0x73c>
 8007dee:	4bad      	ldr	r3, [pc, #692]	@ (80080a4 <UART_SetConfig+0x904>)
 8007df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df6:	2b28      	cmp	r3, #40	@ 0x28
 8007df8:	d86c      	bhi.n	8007ed4 <UART_SetConfig+0x734>
 8007dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <UART_SetConfig+0x660>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007ea5 	.word	0x08007ea5
 8007e04:	08007ed5 	.word	0x08007ed5
 8007e08:	08007ed5 	.word	0x08007ed5
 8007e0c:	08007ed5 	.word	0x08007ed5
 8007e10:	08007ed5 	.word	0x08007ed5
 8007e14:	08007ed5 	.word	0x08007ed5
 8007e18:	08007ed5 	.word	0x08007ed5
 8007e1c:	08007ed5 	.word	0x08007ed5
 8007e20:	08007ead 	.word	0x08007ead
 8007e24:	08007ed5 	.word	0x08007ed5
 8007e28:	08007ed5 	.word	0x08007ed5
 8007e2c:	08007ed5 	.word	0x08007ed5
 8007e30:	08007ed5 	.word	0x08007ed5
 8007e34:	08007ed5 	.word	0x08007ed5
 8007e38:	08007ed5 	.word	0x08007ed5
 8007e3c:	08007ed5 	.word	0x08007ed5
 8007e40:	08007eb5 	.word	0x08007eb5
 8007e44:	08007ed5 	.word	0x08007ed5
 8007e48:	08007ed5 	.word	0x08007ed5
 8007e4c:	08007ed5 	.word	0x08007ed5
 8007e50:	08007ed5 	.word	0x08007ed5
 8007e54:	08007ed5 	.word	0x08007ed5
 8007e58:	08007ed5 	.word	0x08007ed5
 8007e5c:	08007ed5 	.word	0x08007ed5
 8007e60:	08007ebd 	.word	0x08007ebd
 8007e64:	08007ed5 	.word	0x08007ed5
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08007ed5 	.word	0x08007ed5
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ec5 	.word	0x08007ec5
 8007e84:	08007ed5 	.word	0x08007ed5
 8007e88:	08007ed5 	.word	0x08007ed5
 8007e8c:	08007ed5 	.word	0x08007ed5
 8007e90:	08007ed5 	.word	0x08007ed5
 8007e94:	08007ed5 	.word	0x08007ed5
 8007e98:	08007ed5 	.word	0x08007ed5
 8007e9c:	08007ed5 	.word	0x08007ed5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eaa:	e050      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e04c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e048      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e044      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e040      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ecc:	2340      	movs	r3, #64	@ 0x40
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e03c      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e038      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a71      	ldr	r2, [pc, #452]	@ (80080a8 <UART_SetConfig+0x908>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d130      	bne.n	8007f48 <UART_SetConfig+0x7a8>
 8007ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80080a4 <UART_SetConfig+0x904>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d826      	bhi.n	8007f40 <UART_SetConfig+0x7a0>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <UART_SetConfig+0x758>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2302      	movs	r3, #2
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e01a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e016      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e012      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e00e      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e00a      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f38:	2340      	movs	r3, #64	@ 0x40
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e006      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f40:	2380      	movs	r3, #128	@ 0x80
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e002      	b.n	8007f4e <UART_SetConfig+0x7ae>
 8007f48:	2380      	movs	r3, #128	@ 0x80
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a55      	ldr	r2, [pc, #340]	@ (80080a8 <UART_SetConfig+0x908>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	f040 80f8 	bne.w	800814a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	dc46      	bgt.n	8007ff0 <UART_SetConfig+0x850>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	db75      	blt.n	8008052 <UART_SetConfig+0x8b2>
 8007f66:	3b02      	subs	r3, #2
 8007f68:	2b1e      	cmp	r3, #30
 8007f6a:	d872      	bhi.n	8008052 <UART_SetConfig+0x8b2>
 8007f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <UART_SetConfig+0x7d4>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	08008053 	.word	0x08008053
 8007f7c:	08007fff 	.word	0x08007fff
 8007f80:	08008053 	.word	0x08008053
 8007f84:	08008053 	.word	0x08008053
 8007f88:	08008053 	.word	0x08008053
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	08008053 	.word	0x08008053
 8007f94:	08008053 	.word	0x08008053
 8007f98:	08008053 	.word	0x08008053
 8007f9c:	08008053 	.word	0x08008053
 8007fa0:	08008053 	.word	0x08008053
 8007fa4:	08008053 	.word	0x08008053
 8007fa8:	08008053 	.word	0x08008053
 8007fac:	0800801f 	.word	0x0800801f
 8007fb0:	08008053 	.word	0x08008053
 8007fb4:	08008053 	.word	0x08008053
 8007fb8:	08008053 	.word	0x08008053
 8007fbc:	08008053 	.word	0x08008053
 8007fc0:	08008053 	.word	0x08008053
 8007fc4:	08008053 	.word	0x08008053
 8007fc8:	08008053 	.word	0x08008053
 8007fcc:	08008053 	.word	0x08008053
 8007fd0:	08008053 	.word	0x08008053
 8007fd4:	08008053 	.word	0x08008053
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008053 	.word	0x08008053
 8007fe0:	08008053 	.word	0x08008053
 8007fe4:	08008053 	.word	0x08008053
 8007fe8:	08008053 	.word	0x08008053
 8007fec:	08008045 	.word	0x08008045
 8007ff0:	2b40      	cmp	r3, #64	@ 0x40
 8007ff2:	d02a      	beq.n	800804a <UART_SetConfig+0x8aa>
 8007ff4:	e02d      	b.n	8008052 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ff6:	f7fe fed3 	bl	8006da0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ffc:	e02f      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fee2 	bl	8006dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800c:	e027      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff f82e 	bl	8007074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801c:	e01f      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b21      	ldr	r3, [pc, #132]	@ (80080a4 <UART_SetConfig+0x904>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800802a:	4b1e      	ldr	r3, [pc, #120]	@ (80080a4 <UART_SetConfig+0x904>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <UART_SetConfig+0x90c>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803c:	e00f      	b.n	800805e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <UART_SetConfig+0x90c>)
 8008040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008042:	e00c      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008044:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <UART_SetConfig+0x910>)
 8008046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008048:	e009      	b.n	800805e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e005      	b.n	800805e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800805c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800805e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 81ee 	beq.w	8008442 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	4a12      	ldr	r2, [pc, #72]	@ (80080b4 <UART_SetConfig+0x914>)
 800806c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008070:	461a      	mov	r2, r3
 8008072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008074:	fbb3 f3f2 	udiv	r3, r3, r2
 8008078:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008086:	429a      	cmp	r2, r3
 8008088:	d305      	bcc.n	8008096 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008092:	429a      	cmp	r2, r3
 8008094:	d910      	bls.n	80080b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800809c:	e1d1      	b.n	8008442 <UART_SetConfig+0xca2>
 800809e:	bf00      	nop
 80080a0:	40011c00 	.word	0x40011c00
 80080a4:	58024400 	.word	0x58024400
 80080a8:	58000c00 	.word	0x58000c00
 80080ac:	03d09000 	.word	0x03d09000
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	08009ca0 	.word	0x08009ca0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ba:	2200      	movs	r2, #0
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	60fa      	str	r2, [r7, #12]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	4ac0      	ldr	r2, [pc, #768]	@ (80083c8 <UART_SetConfig+0xc28>)
 80080c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2200      	movs	r2, #0
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080da:	f7f8 f959 	bl	8000390 <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4610      	mov	r0, r2
 80080e4:	4619      	mov	r1, r3
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	020b      	lsls	r3, r1, #8
 80080f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080f4:	0202      	lsls	r2, r0, #8
 80080f6:	6979      	ldr	r1, [r7, #20]
 80080f8:	6849      	ldr	r1, [r1, #4]
 80080fa:	0849      	lsrs	r1, r1, #1
 80080fc:	2000      	movs	r0, #0
 80080fe:	460c      	mov	r4, r1
 8008100:	4605      	mov	r5, r0
 8008102:	eb12 0804 	adds.w	r8, r2, r4
 8008106:	eb43 0905 	adc.w	r9, r3, r5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	469a      	mov	sl, r3
 8008112:	4693      	mov	fp, r2
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	f7f8 f938 	bl	8000390 <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800812e:	d308      	bcc.n	8008142 <UART_SetConfig+0x9a2>
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008136:	d204      	bcs.n	8008142 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e17f      	b.n	8008442 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008148:	e17b      	b.n	8008442 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008152:	f040 80bd 	bne.w	80082d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008156:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800815a:	2b20      	cmp	r3, #32
 800815c:	dc48      	bgt.n	80081f0 <UART_SetConfig+0xa50>
 800815e:	2b00      	cmp	r3, #0
 8008160:	db7b      	blt.n	800825a <UART_SetConfig+0xaba>
 8008162:	2b20      	cmp	r3, #32
 8008164:	d879      	bhi.n	800825a <UART_SetConfig+0xaba>
 8008166:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <UART_SetConfig+0x9cc>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081f7 	.word	0x080081f7
 8008170:	080081ff 	.word	0x080081ff
 8008174:	0800825b 	.word	0x0800825b
 8008178:	0800825b 	.word	0x0800825b
 800817c:	08008207 	.word	0x08008207
 8008180:	0800825b 	.word	0x0800825b
 8008184:	0800825b 	.word	0x0800825b
 8008188:	0800825b 	.word	0x0800825b
 800818c:	08008217 	.word	0x08008217
 8008190:	0800825b 	.word	0x0800825b
 8008194:	0800825b 	.word	0x0800825b
 8008198:	0800825b 	.word	0x0800825b
 800819c:	0800825b 	.word	0x0800825b
 80081a0:	0800825b 	.word	0x0800825b
 80081a4:	0800825b 	.word	0x0800825b
 80081a8:	0800825b 	.word	0x0800825b
 80081ac:	08008227 	.word	0x08008227
 80081b0:	0800825b 	.word	0x0800825b
 80081b4:	0800825b 	.word	0x0800825b
 80081b8:	0800825b 	.word	0x0800825b
 80081bc:	0800825b 	.word	0x0800825b
 80081c0:	0800825b 	.word	0x0800825b
 80081c4:	0800825b 	.word	0x0800825b
 80081c8:	0800825b 	.word	0x0800825b
 80081cc:	0800825b 	.word	0x0800825b
 80081d0:	0800825b 	.word	0x0800825b
 80081d4:	0800825b 	.word	0x0800825b
 80081d8:	0800825b 	.word	0x0800825b
 80081dc:	0800825b 	.word	0x0800825b
 80081e0:	0800825b 	.word	0x0800825b
 80081e4:	0800825b 	.word	0x0800825b
 80081e8:	0800825b 	.word	0x0800825b
 80081ec:	0800824d 	.word	0x0800824d
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d02e      	beq.n	8008252 <UART_SetConfig+0xab2>
 80081f4:	e031      	b.n	800825a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7fd fbe9 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 80081fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081fc:	e033      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fe:	f7fd fbfb 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8008202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008204:	e02f      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fdde 	bl	8006dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008214:	e027      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008216:	f107 0318 	add.w	r3, r7, #24
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe ff2a 	bl	8007074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008224:	e01f      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008226:	4b69      	ldr	r3, [pc, #420]	@ (80083cc <UART_SetConfig+0xc2c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008232:	4b66      	ldr	r3, [pc, #408]	@ (80083cc <UART_SetConfig+0xc2c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	08db      	lsrs	r3, r3, #3
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	4a64      	ldr	r2, [pc, #400]	@ (80083d0 <UART_SetConfig+0xc30>)
 800823e:	fa22 f303 	lsr.w	r3, r2, r3
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008244:	e00f      	b.n	8008266 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008246:	4b62      	ldr	r3, [pc, #392]	@ (80083d0 <UART_SetConfig+0xc30>)
 8008248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824a:	e00c      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800824c:	4b61      	ldr	r3, [pc, #388]	@ (80083d4 <UART_SetConfig+0xc34>)
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e009      	b.n	8008266 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008258:	e005      	b.n	8008266 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80ea 	beq.w	8008442 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008272:	4a55      	ldr	r2, [pc, #340]	@ (80083c8 <UART_SetConfig+0xc28>)
 8008274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008278:	461a      	mov	r2, r3
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008280:	005a      	lsls	r2, r3, #1
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	441a      	add	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d916      	bls.n	80082c8 <UART_SetConfig+0xb28>
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a0:	d212      	bcs.n	80082c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f023 030f 	bic.w	r3, r3, #15
 80082aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80082ba:	4313      	orrs	r3, r2
 80082bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e0bc      	b.n	8008442 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082ce:	e0b8      	b.n	8008442 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	dc4b      	bgt.n	8008370 <UART_SetConfig+0xbd0>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f2c0 8087 	blt.w	80083ec <UART_SetConfig+0xc4c>
 80082de:	2b20      	cmp	r3, #32
 80082e0:	f200 8084 	bhi.w	80083ec <UART_SetConfig+0xc4c>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <UART_SetConfig+0xb4c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008377 	.word	0x08008377
 80082f0:	0800837f 	.word	0x0800837f
 80082f4:	080083ed 	.word	0x080083ed
 80082f8:	080083ed 	.word	0x080083ed
 80082fc:	08008387 	.word	0x08008387
 8008300:	080083ed 	.word	0x080083ed
 8008304:	080083ed 	.word	0x080083ed
 8008308:	080083ed 	.word	0x080083ed
 800830c:	08008397 	.word	0x08008397
 8008310:	080083ed 	.word	0x080083ed
 8008314:	080083ed 	.word	0x080083ed
 8008318:	080083ed 	.word	0x080083ed
 800831c:	080083ed 	.word	0x080083ed
 8008320:	080083ed 	.word	0x080083ed
 8008324:	080083ed 	.word	0x080083ed
 8008328:	080083ed 	.word	0x080083ed
 800832c:	080083a7 	.word	0x080083a7
 8008330:	080083ed 	.word	0x080083ed
 8008334:	080083ed 	.word	0x080083ed
 8008338:	080083ed 	.word	0x080083ed
 800833c:	080083ed 	.word	0x080083ed
 8008340:	080083ed 	.word	0x080083ed
 8008344:	080083ed 	.word	0x080083ed
 8008348:	080083ed 	.word	0x080083ed
 800834c:	080083ed 	.word	0x080083ed
 8008350:	080083ed 	.word	0x080083ed
 8008354:	080083ed 	.word	0x080083ed
 8008358:	080083ed 	.word	0x080083ed
 800835c:	080083ed 	.word	0x080083ed
 8008360:	080083ed 	.word	0x080083ed
 8008364:	080083ed 	.word	0x080083ed
 8008368:	080083ed 	.word	0x080083ed
 800836c:	080083df 	.word	0x080083df
 8008370:	2b40      	cmp	r3, #64	@ 0x40
 8008372:	d037      	beq.n	80083e4 <UART_SetConfig+0xc44>
 8008374:	e03a      	b.n	80083ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008376:	f7fd fb29 	bl	80059cc <HAL_RCC_GetPCLK1Freq>
 800837a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800837c:	e03c      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800837e:	f7fd fb3b 	bl	80059f8 <HAL_RCC_GetPCLK2Freq>
 8008382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008384:	e038      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fd1e 	bl	8006dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008394:	e030      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fe6a 	bl	8007074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a4:	e028      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a6:	4b09      	ldr	r3, [pc, #36]	@ (80083cc <UART_SetConfig+0xc2c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083b2:	4b06      	ldr	r3, [pc, #24]	@ (80083cc <UART_SetConfig+0xc2c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	4a04      	ldr	r2, [pc, #16]	@ (80083d0 <UART_SetConfig+0xc30>)
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083c4:	e018      	b.n	80083f8 <UART_SetConfig+0xc58>
 80083c6:	bf00      	nop
 80083c8:	08009ca0 	.word	0x08009ca0
 80083cc:	58024400 	.word	0x58024400
 80083d0:	03d09000 	.word	0x03d09000
 80083d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80083d8:	4b24      	ldr	r3, [pc, #144]	@ (800846c <UART_SetConfig+0xccc>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e00c      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083de:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <UART_SetConfig+0xcd0>)
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e2:	e009      	b.n	80083f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ea:	e005      	b.n	80083f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083f6:	bf00      	nop
    }

    if (pclk != 0U)
 80083f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d021      	beq.n	8008442 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008402:	4a1c      	ldr	r2, [pc, #112]	@ (8008474 <UART_SetConfig+0xcd4>)
 8008404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008408:	461a      	mov	r2, r3
 800840a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	085b      	lsrs	r3, r3, #1
 8008416:	441a      	add	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008420:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	2b0f      	cmp	r3, #15
 8008426:	d909      	bls.n	800843c <UART_SetConfig+0xc9c>
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800842e:	d205      	bcs.n	800843c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	b29a      	uxth	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e002      	b.n	8008442 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2201      	movs	r2, #1
 8008446:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2201      	movs	r2, #1
 800844e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2200      	movs	r2, #0
 8008456:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800845e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008462:	4618      	mov	r0, r3
 8008464:	3748      	adds	r7, #72	@ 0x48
 8008466:	46bd      	mov	sp, r7
 8008468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800846c:	03d09000 	.word	0x03d09000
 8008470:	003d0900 	.word	0x003d0900
 8008474:	08009ca0 	.word	0x08009ca0

08008478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01a      	beq.n	800858e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008576:	d10a      	bne.n	800858e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b098      	sub	sp, #96	@ 0x60
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085cc:	f7fb fee0 	bl	8004390 <HAL_GetTick>
 80085d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d12f      	bne.n	8008640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e8:	2200      	movs	r2, #0
 80085ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f88e 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d022      	beq.n	8008640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800860e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008618:	647b      	str	r3, [r7, #68]	@ 0x44
 800861a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800861e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e6      	bne.n	80085fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e063      	b.n	8008708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b04      	cmp	r3, #4
 800864c:	d149      	bne.n	80086e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008656:	2200      	movs	r2, #0
 8008658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f857 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d03c      	beq.n	80086e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	623b      	str	r3, [r7, #32]
   return(result);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800867c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008686:	633b      	str	r3, [r7, #48]	@ 0x30
 8008688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e6      	bne.n	8008668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ba:	61fa      	str	r2, [r7, #28]
 80086bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	69b9      	ldr	r1, [r7, #24]
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	617b      	str	r3, [r7, #20]
   return(result);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e012      	b.n	8008708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3758      	adds	r7, #88	@ 0x58
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008720:	e04f      	b.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d04b      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872a:	f7fb fe31 	bl	8004390 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <UART_WaitOnFlagUntilTimeout+0x30>
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e04e      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d037      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b80      	cmp	r3, #128	@ 0x80
 8008756:	d034      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d031      	beq.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b08      	cmp	r3, #8
 800876a:	d110      	bne.n	800878e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2208      	movs	r2, #8
 8008772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f839 	bl	80087ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2208      	movs	r2, #8
 800877e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e029      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800879c:	d111      	bne.n	80087c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 f81f 	bl	80087ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e00f      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4013      	ands	r3, r2
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	bf0c      	ite	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	2300      	movne	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d0a0      	beq.n	8008722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b095      	sub	sp, #84	@ 0x54
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008812:	643b      	str	r3, [r7, #64]	@ 0x40
 8008814:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	61fb      	str	r3, [r7, #28]
   return(result);
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	4b1e      	ldr	r3, [pc, #120]	@ (80088b4 <UART_EndRxTransfer+0xc8>)
 800883a:	4013      	ands	r3, r2
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008848:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800884c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d118      	bne.n	8008894 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	647b      	str	r3, [r7, #68]	@ 0x44
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	613b      	str	r3, [r7, #16]
   return(result);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e6      	bne.n	8008862 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088a8:	bf00      	nop
 80088aa:	3754      	adds	r7, #84	@ 0x54
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	effffffe 	.word	0xeffffffe

080088b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_UARTEx_DisableFifoMode+0x16>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e027      	b.n	800891e <HAL_UARTEx_DisableFifoMode+0x66>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2224      	movs	r2, #36	@ 0x24
 80088da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0201 	bic.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800893e:	2302      	movs	r3, #2
 8008940:	e02d      	b.n	800899e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2224      	movs	r2, #36	@ 0x24
 800894e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0201 	bic.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f850 	bl	8008a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089ba:	2302      	movs	r3, #2
 80089bc:	e02d      	b.n	8008a1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2224      	movs	r2, #36	@ 0x24
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0201 	bic.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f812 	bl	8008a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d108      	bne.n	8008a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a44:	e031      	b.n	8008aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a46:	2310      	movs	r3, #16
 8008a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	0e5b      	lsrs	r3, r3, #25
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	0f5b      	lsrs	r3, r3, #29
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	7b3a      	ldrb	r2, [r7, #12]
 8008a72:	4911      	ldr	r1, [pc, #68]	@ (8008ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8008a74:	5c8a      	ldrb	r2, [r1, r2]
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a7a:	7b3a      	ldrb	r2, [r7, #12]
 8008a7c:	490f      	ldr	r1, [pc, #60]	@ (8008abc <UARTEx_SetNbDataToProcess+0x98>)
 8008a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	7b7a      	ldrb	r2, [r7, #13]
 8008a90:	4909      	ldr	r1, [pc, #36]	@ (8008ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8008a92:	5c8a      	ldrb	r2, [r1, r2]
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a98:	7b7a      	ldrb	r2, [r7, #13]
 8008a9a:	4908      	ldr	r1, [pc, #32]	@ (8008abc <UARTEx_SetNbDataToProcess+0x98>)
 8008a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	08009cb8 	.word	0x08009cb8
 8008abc:	08009cc0 	.word	0x08009cc0

08008ac0 <std>:
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ace:	6083      	str	r3, [r0, #8]
 8008ad0:	8181      	strh	r1, [r0, #12]
 8008ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ad4:	81c2      	strh	r2, [r0, #14]
 8008ad6:	6183      	str	r3, [r0, #24]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	2208      	movs	r2, #8
 8008adc:	305c      	adds	r0, #92	@ 0x5c
 8008ade:	f000 f906 	bl	8008cee <memset>
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <std+0x58>)
 8008ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <std+0x5c>)
 8008ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aea:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <std+0x60>)
 8008aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aee:	4b0d      	ldr	r3, [pc, #52]	@ (8008b24 <std+0x64>)
 8008af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <std+0x68>)
 8008af4:	6224      	str	r4, [r4, #32]
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d006      	beq.n	8008b08 <std+0x48>
 8008afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008afe:	4294      	cmp	r4, r2
 8008b00:	d002      	beq.n	8008b08 <std+0x48>
 8008b02:	33d0      	adds	r3, #208	@ 0xd0
 8008b04:	429c      	cmp	r4, r3
 8008b06:	d105      	bne.n	8008b14 <std+0x54>
 8008b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f000 b966 	b.w	8008de0 <__retarget_lock_init_recursive>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	08008c69 	.word	0x08008c69
 8008b1c:	08008c8b 	.word	0x08008c8b
 8008b20:	08008cc3 	.word	0x08008cc3
 8008b24:	08008ce7 	.word	0x08008ce7
 8008b28:	24000124 	.word	0x24000124

08008b2c <stdio_exit_handler>:
 8008b2c:	4a02      	ldr	r2, [pc, #8]	@ (8008b38 <stdio_exit_handler+0xc>)
 8008b2e:	4903      	ldr	r1, [pc, #12]	@ (8008b3c <stdio_exit_handler+0x10>)
 8008b30:	4803      	ldr	r0, [pc, #12]	@ (8008b40 <stdio_exit_handler+0x14>)
 8008b32:	f000 b869 	b.w	8008c08 <_fwalk_sglue>
 8008b36:	bf00      	nop
 8008b38:	24000010 	.word	0x24000010
 8008b3c:	0800969d 	.word	0x0800969d
 8008b40:	24000020 	.word	0x24000020

08008b44 <cleanup_stdio>:
 8008b44:	6841      	ldr	r1, [r0, #4]
 8008b46:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <cleanup_stdio+0x34>)
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	d001      	beq.n	8008b54 <cleanup_stdio+0x10>
 8008b50:	f000 fda4 	bl	800969c <_fflush_r>
 8008b54:	68a1      	ldr	r1, [r4, #8]
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <cleanup_stdio+0x38>)
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <cleanup_stdio+0x1e>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 fd9d 	bl	800969c <_fflush_r>
 8008b62:	68e1      	ldr	r1, [r4, #12]
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <cleanup_stdio+0x3c>)
 8008b66:	4299      	cmp	r1, r3
 8008b68:	d004      	beq.n	8008b74 <cleanup_stdio+0x30>
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b70:	f000 bd94 	b.w	800969c <_fflush_r>
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	24000124 	.word	0x24000124
 8008b7c:	2400018c 	.word	0x2400018c
 8008b80:	240001f4 	.word	0x240001f4

08008b84 <global_stdio_init.part.0>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <global_stdio_init.part.0+0x30>)
 8008b88:	4c0b      	ldr	r4, [pc, #44]	@ (8008bb8 <global_stdio_init.part.0+0x34>)
 8008b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <global_stdio_init.part.0+0x38>)
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	2200      	movs	r2, #0
 8008b92:	2104      	movs	r1, #4
 8008b94:	f7ff ff94 	bl	8008ac0 <std>
 8008b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	2109      	movs	r1, #9
 8008ba0:	f7ff ff8e 	bl	8008ac0 <std>
 8008ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ba8:	2202      	movs	r2, #2
 8008baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bae:	2112      	movs	r1, #18
 8008bb0:	f7ff bf86 	b.w	8008ac0 <std>
 8008bb4:	2400025c 	.word	0x2400025c
 8008bb8:	24000124 	.word	0x24000124
 8008bbc:	08008b2d 	.word	0x08008b2d

08008bc0 <__sfp_lock_acquire>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__sfp_lock_acquire+0x8>)
 8008bc2:	f000 b90e 	b.w	8008de2 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	24000265 	.word	0x24000265

08008bcc <__sfp_lock_release>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__sfp_lock_release+0x8>)
 8008bce:	f000 b909 	b.w	8008de4 <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	24000265 	.word	0x24000265

08008bd8 <__sinit>:
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	f7ff fff0 	bl	8008bc0 <__sfp_lock_acquire>
 8008be0:	6a23      	ldr	r3, [r4, #32]
 8008be2:	b11b      	cbz	r3, 8008bec <__sinit+0x14>
 8008be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be8:	f7ff bff0 	b.w	8008bcc <__sfp_lock_release>
 8008bec:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <__sinit+0x28>)
 8008bee:	6223      	str	r3, [r4, #32]
 8008bf0:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <__sinit+0x2c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f5      	bne.n	8008be4 <__sinit+0xc>
 8008bf8:	f7ff ffc4 	bl	8008b84 <global_stdio_init.part.0>
 8008bfc:	e7f2      	b.n	8008be4 <__sinit+0xc>
 8008bfe:	bf00      	nop
 8008c00:	08008b45 	.word	0x08008b45
 8008c04:	2400025c 	.word	0x2400025c

08008c08 <_fwalk_sglue>:
 8008c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	4688      	mov	r8, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	2600      	movs	r6, #0
 8008c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c18:	f1b9 0901 	subs.w	r9, r9, #1
 8008c1c:	d505      	bpl.n	8008c2a <_fwalk_sglue+0x22>
 8008c1e:	6824      	ldr	r4, [r4, #0]
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	d1f7      	bne.n	8008c14 <_fwalk_sglue+0xc>
 8008c24:	4630      	mov	r0, r6
 8008c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d907      	bls.n	8008c40 <_fwalk_sglue+0x38>
 8008c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c34:	3301      	adds	r3, #1
 8008c36:	d003      	beq.n	8008c40 <_fwalk_sglue+0x38>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	4306      	orrs	r6, r0
 8008c40:	3568      	adds	r5, #104	@ 0x68
 8008c42:	e7e9      	b.n	8008c18 <_fwalk_sglue+0x10>

08008c44 <iprintf>:
 8008c44:	b40f      	push	{r0, r1, r2, r3}
 8008c46:	b507      	push	{r0, r1, r2, lr}
 8008c48:	4906      	ldr	r1, [pc, #24]	@ (8008c64 <iprintf+0x20>)
 8008c4a:	ab04      	add	r3, sp, #16
 8008c4c:	6808      	ldr	r0, [r1, #0]
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	6881      	ldr	r1, [r0, #8]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	f000 f9f7 	bl	8009048 <_vfiprintf_r>
 8008c5a:	b003      	add	sp, #12
 8008c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c60:	b004      	add	sp, #16
 8008c62:	4770      	bx	lr
 8008c64:	2400001c 	.word	0x2400001c

08008c68 <__sread>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	f000 f868 	bl	8008d44 <_read_r>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	bfab      	itete	ge
 8008c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c7c:	181b      	addge	r3, r3, r0
 8008c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c82:	bfac      	ite	ge
 8008c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c86:	81a3      	strhlt	r3, [r4, #12]
 8008c88:	bd10      	pop	{r4, pc}

08008c8a <__swrite>:
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	461f      	mov	r7, r3
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	05db      	lsls	r3, r3, #23
 8008c94:	4605      	mov	r5, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	4616      	mov	r6, r2
 8008c9a:	d505      	bpl.n	8008ca8 <__swrite+0x1e>
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f000 f83c 	bl	8008d20 <_lseek_r>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	f000 b853 	b.w	8008d68 <_write_r>

08008cc2 <__sseek>:
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cca:	f000 f829 	bl	8008d20 <_lseek_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	bf15      	itete	ne
 8008cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cde:	81a3      	strheq	r3, [r4, #12]
 8008ce0:	bf18      	it	ne
 8008ce2:	81a3      	strhne	r3, [r4, #12]
 8008ce4:	bd10      	pop	{r4, pc}

08008ce6 <__sclose>:
 8008ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cea:	f000 b809 	b.w	8008d00 <_close_r>

08008cee <memset>:
 8008cee:	4402      	add	r2, r0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d100      	bne.n	8008cf8 <memset+0xa>
 8008cf6:	4770      	bx	lr
 8008cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfc:	e7f9      	b.n	8008cf2 <memset+0x4>
	...

08008d00 <_close_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	@ (8008d1c <_close_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7fb f97c 	bl	8004008 <_close>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_close_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_close_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	24000260 	.word	0x24000260

08008d20 <_lseek_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	@ (8008d40 <_lseek_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7fb f991 	bl	8004056 <_lseek>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_lseek_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_lseek_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	24000260 	.word	0x24000260

08008d44 <_read_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	@ (8008d64 <_read_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7fb f91f 	bl	8003f96 <_read>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_read_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_read_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	24000260 	.word	0x24000260

08008d68 <_write_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	@ (8008d88 <_write_r+0x20>)
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7fb f92a 	bl	8003fd0 <_write>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_write_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_write_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	24000260 	.word	0x24000260

08008d8c <__errno>:
 8008d8c:	4b01      	ldr	r3, [pc, #4]	@ (8008d94 <__errno+0x8>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	2400001c 	.word	0x2400001c

08008d98 <__libc_init_array>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008dd0 <__libc_init_array+0x38>)
 8008d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8008dd4 <__libc_init_array+0x3c>)
 8008d9e:	1b64      	subs	r4, r4, r5
 8008da0:	10a4      	asrs	r4, r4, #2
 8008da2:	2600      	movs	r6, #0
 8008da4:	42a6      	cmp	r6, r4
 8008da6:	d109      	bne.n	8008dbc <__libc_init_array+0x24>
 8008da8:	4d0b      	ldr	r5, [pc, #44]	@ (8008dd8 <__libc_init_array+0x40>)
 8008daa:	4c0c      	ldr	r4, [pc, #48]	@ (8008ddc <__libc_init_array+0x44>)
 8008dac:	f000 fdc6 	bl	800993c <_init>
 8008db0:	1b64      	subs	r4, r4, r5
 8008db2:	10a4      	asrs	r4, r4, #2
 8008db4:	2600      	movs	r6, #0
 8008db6:	42a6      	cmp	r6, r4
 8008db8:	d105      	bne.n	8008dc6 <__libc_init_array+0x2e>
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc0:	4798      	blx	r3
 8008dc2:	3601      	adds	r6, #1
 8008dc4:	e7ee      	b.n	8008da4 <__libc_init_array+0xc>
 8008dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dca:	4798      	blx	r3
 8008dcc:	3601      	adds	r6, #1
 8008dce:	e7f2      	b.n	8008db6 <__libc_init_array+0x1e>
 8008dd0:	08009d04 	.word	0x08009d04
 8008dd4:	08009d04 	.word	0x08009d04
 8008dd8:	08009d04 	.word	0x08009d04
 8008ddc:	08009d08 	.word	0x08009d08

08008de0 <__retarget_lock_init_recursive>:
 8008de0:	4770      	bx	lr

08008de2 <__retarget_lock_acquire_recursive>:
 8008de2:	4770      	bx	lr

08008de4 <__retarget_lock_release_recursive>:
 8008de4:	4770      	bx	lr

08008de6 <memcpy>:
 8008de6:	440a      	add	r2, r1
 8008de8:	4291      	cmp	r1, r2
 8008dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dee:	d100      	bne.n	8008df2 <memcpy+0xc>
 8008df0:	4770      	bx	lr
 8008df2:	b510      	push	{r4, lr}
 8008df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfc:	4291      	cmp	r1, r2
 8008dfe:	d1f9      	bne.n	8008df4 <memcpy+0xe>
 8008e00:	bd10      	pop	{r4, pc}
	...

08008e04 <_free_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4605      	mov	r5, r0
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	d041      	beq.n	8008e90 <_free_r+0x8c>
 8008e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e10:	1f0c      	subs	r4, r1, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bfb8      	it	lt
 8008e16:	18e4      	addlt	r4, r4, r3
 8008e18:	f000 f8e0 	bl	8008fdc <__malloc_lock>
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e94 <_free_r+0x90>)
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	b933      	cbnz	r3, 8008e30 <_free_r+0x2c>
 8008e22:	6063      	str	r3, [r4, #4]
 8008e24:	6014      	str	r4, [r2, #0]
 8008e26:	4628      	mov	r0, r5
 8008e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e2c:	f000 b8dc 	b.w	8008fe8 <__malloc_unlock>
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d908      	bls.n	8008e46 <_free_r+0x42>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	1821      	adds	r1, r4, r0
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf01      	itttt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	1809      	addeq	r1, r1, r0
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	e7ed      	b.n	8008e22 <_free_r+0x1e>
 8008e46:	461a      	mov	r2, r3
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	b10b      	cbz	r3, 8008e50 <_free_r+0x4c>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d9fa      	bls.n	8008e46 <_free_r+0x42>
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	1850      	adds	r0, r2, r1
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d10b      	bne.n	8008e70 <_free_r+0x6c>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	4401      	add	r1, r0
 8008e5c:	1850      	adds	r0, r2, r1
 8008e5e:	4283      	cmp	r3, r0
 8008e60:	6011      	str	r1, [r2, #0]
 8008e62:	d1e0      	bne.n	8008e26 <_free_r+0x22>
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	6053      	str	r3, [r2, #4]
 8008e6a:	4408      	add	r0, r1
 8008e6c:	6010      	str	r0, [r2, #0]
 8008e6e:	e7da      	b.n	8008e26 <_free_r+0x22>
 8008e70:	d902      	bls.n	8008e78 <_free_r+0x74>
 8008e72:	230c      	movs	r3, #12
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	e7d6      	b.n	8008e26 <_free_r+0x22>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	1821      	adds	r1, r4, r0
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	bf04      	itt	eq
 8008e80:	6819      	ldreq	r1, [r3, #0]
 8008e82:	685b      	ldreq	r3, [r3, #4]
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	bf04      	itt	eq
 8008e88:	1809      	addeq	r1, r1, r0
 8008e8a:	6021      	streq	r1, [r4, #0]
 8008e8c:	6054      	str	r4, [r2, #4]
 8008e8e:	e7ca      	b.n	8008e26 <_free_r+0x22>
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	bf00      	nop
 8008e94:	2400026c 	.word	0x2400026c

08008e98 <sbrk_aligned>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008ed8 <sbrk_aligned+0x40>)
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	6831      	ldr	r1, [r6, #0]
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	b911      	cbnz	r1, 8008eaa <sbrk_aligned+0x12>
 8008ea4:	f000 fcb6 	bl	8009814 <_sbrk_r>
 8008ea8:	6030      	str	r0, [r6, #0]
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 fcb1 	bl	8009814 <_sbrk_r>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d103      	bne.n	8008ebe <sbrk_aligned+0x26>
 8008eb6:	f04f 34ff 	mov.w	r4, #4294967295
 8008eba:	4620      	mov	r0, r4
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
 8008ebe:	1cc4      	adds	r4, r0, #3
 8008ec0:	f024 0403 	bic.w	r4, r4, #3
 8008ec4:	42a0      	cmp	r0, r4
 8008ec6:	d0f8      	beq.n	8008eba <sbrk_aligned+0x22>
 8008ec8:	1a21      	subs	r1, r4, r0
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 fca2 	bl	8009814 <_sbrk_r>
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d1f2      	bne.n	8008eba <sbrk_aligned+0x22>
 8008ed4:	e7ef      	b.n	8008eb6 <sbrk_aligned+0x1e>
 8008ed6:	bf00      	nop
 8008ed8:	24000268 	.word	0x24000268

08008edc <_malloc_r>:
 8008edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	1ccd      	adds	r5, r1, #3
 8008ee2:	f025 0503 	bic.w	r5, r5, #3
 8008ee6:	3508      	adds	r5, #8
 8008ee8:	2d0c      	cmp	r5, #12
 8008eea:	bf38      	it	cc
 8008eec:	250c      	movcc	r5, #12
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	db01      	blt.n	8008ef8 <_malloc_r+0x1c>
 8008ef4:	42a9      	cmp	r1, r5
 8008ef6:	d904      	bls.n	8008f02 <_malloc_r+0x26>
 8008ef8:	230c      	movs	r3, #12
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	2000      	movs	r0, #0
 8008efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fd8 <_malloc_r+0xfc>
 8008f06:	f000 f869 	bl	8008fdc <__malloc_lock>
 8008f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f0e:	461c      	mov	r4, r3
 8008f10:	bb44      	cbnz	r4, 8008f64 <_malloc_r+0x88>
 8008f12:	4629      	mov	r1, r5
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7ff ffbf 	bl	8008e98 <sbrk_aligned>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	d158      	bne.n	8008fd2 <_malloc_r+0xf6>
 8008f20:	f8d8 4000 	ldr.w	r4, [r8]
 8008f24:	4627      	mov	r7, r4
 8008f26:	2f00      	cmp	r7, #0
 8008f28:	d143      	bne.n	8008fb2 <_malloc_r+0xd6>
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	d04b      	beq.n	8008fc6 <_malloc_r+0xea>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	4639      	mov	r1, r7
 8008f32:	4630      	mov	r0, r6
 8008f34:	eb04 0903 	add.w	r9, r4, r3
 8008f38:	f000 fc6c 	bl	8009814 <_sbrk_r>
 8008f3c:	4581      	cmp	r9, r0
 8008f3e:	d142      	bne.n	8008fc6 <_malloc_r+0xea>
 8008f40:	6821      	ldr	r1, [r4, #0]
 8008f42:	1a6d      	subs	r5, r5, r1
 8008f44:	4629      	mov	r1, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7ff ffa6 	bl	8008e98 <sbrk_aligned>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d03a      	beq.n	8008fc6 <_malloc_r+0xea>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	442b      	add	r3, r5
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	f8d8 3000 	ldr.w	r3, [r8]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	bb62      	cbnz	r2, 8008fb8 <_malloc_r+0xdc>
 8008f5e:	f8c8 7000 	str.w	r7, [r8]
 8008f62:	e00f      	b.n	8008f84 <_malloc_r+0xa8>
 8008f64:	6822      	ldr	r2, [r4, #0]
 8008f66:	1b52      	subs	r2, r2, r5
 8008f68:	d420      	bmi.n	8008fac <_malloc_r+0xd0>
 8008f6a:	2a0b      	cmp	r2, #11
 8008f6c:	d917      	bls.n	8008f9e <_malloc_r+0xc2>
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	6025      	str	r5, [r4, #0]
 8008f74:	bf18      	it	ne
 8008f76:	6059      	strne	r1, [r3, #4]
 8008f78:	6863      	ldr	r3, [r4, #4]
 8008f7a:	bf08      	it	eq
 8008f7c:	f8c8 1000 	streq.w	r1, [r8]
 8008f80:	5162      	str	r2, [r4, r5]
 8008f82:	604b      	str	r3, [r1, #4]
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 f82f 	bl	8008fe8 <__malloc_unlock>
 8008f8a:	f104 000b 	add.w	r0, r4, #11
 8008f8e:	1d23      	adds	r3, r4, #4
 8008f90:	f020 0007 	bic.w	r0, r0, #7
 8008f94:	1ac2      	subs	r2, r0, r3
 8008f96:	bf1c      	itt	ne
 8008f98:	1a1b      	subne	r3, r3, r0
 8008f9a:	50a3      	strne	r3, [r4, r2]
 8008f9c:	e7af      	b.n	8008efe <_malloc_r+0x22>
 8008f9e:	6862      	ldr	r2, [r4, #4]
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	bf0c      	ite	eq
 8008fa4:	f8c8 2000 	streq.w	r2, [r8]
 8008fa8:	605a      	strne	r2, [r3, #4]
 8008faa:	e7eb      	b.n	8008f84 <_malloc_r+0xa8>
 8008fac:	4623      	mov	r3, r4
 8008fae:	6864      	ldr	r4, [r4, #4]
 8008fb0:	e7ae      	b.n	8008f10 <_malloc_r+0x34>
 8008fb2:	463c      	mov	r4, r7
 8008fb4:	687f      	ldr	r7, [r7, #4]
 8008fb6:	e7b6      	b.n	8008f26 <_malloc_r+0x4a>
 8008fb8:	461a      	mov	r2, r3
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	d1fb      	bne.n	8008fb8 <_malloc_r+0xdc>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6053      	str	r3, [r2, #4]
 8008fc4:	e7de      	b.n	8008f84 <_malloc_r+0xa8>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	6033      	str	r3, [r6, #0]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f80c 	bl	8008fe8 <__malloc_unlock>
 8008fd0:	e794      	b.n	8008efc <_malloc_r+0x20>
 8008fd2:	6005      	str	r5, [r0, #0]
 8008fd4:	e7d6      	b.n	8008f84 <_malloc_r+0xa8>
 8008fd6:	bf00      	nop
 8008fd8:	2400026c 	.word	0x2400026c

08008fdc <__malloc_lock>:
 8008fdc:	4801      	ldr	r0, [pc, #4]	@ (8008fe4 <__malloc_lock+0x8>)
 8008fde:	f7ff bf00 	b.w	8008de2 <__retarget_lock_acquire_recursive>
 8008fe2:	bf00      	nop
 8008fe4:	24000264 	.word	0x24000264

08008fe8 <__malloc_unlock>:
 8008fe8:	4801      	ldr	r0, [pc, #4]	@ (8008ff0 <__malloc_unlock+0x8>)
 8008fea:	f7ff befb 	b.w	8008de4 <__retarget_lock_release_recursive>
 8008fee:	bf00      	nop
 8008ff0:	24000264 	.word	0x24000264

08008ff4 <__sfputc_r>:
 8008ff4:	6893      	ldr	r3, [r2, #8]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	b410      	push	{r4}
 8008ffc:	6093      	str	r3, [r2, #8]
 8008ffe:	da08      	bge.n	8009012 <__sfputc_r+0x1e>
 8009000:	6994      	ldr	r4, [r2, #24]
 8009002:	42a3      	cmp	r3, r4
 8009004:	db01      	blt.n	800900a <__sfputc_r+0x16>
 8009006:	290a      	cmp	r1, #10
 8009008:	d103      	bne.n	8009012 <__sfputc_r+0x1e>
 800900a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800900e:	f000 bb6d 	b.w	80096ec <__swbuf_r>
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	1c58      	adds	r0, r3, #1
 8009016:	6010      	str	r0, [r2, #0]
 8009018:	7019      	strb	r1, [r3, #0]
 800901a:	4608      	mov	r0, r1
 800901c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009020:	4770      	bx	lr

08009022 <__sfputs_r>:
 8009022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009024:	4606      	mov	r6, r0
 8009026:	460f      	mov	r7, r1
 8009028:	4614      	mov	r4, r2
 800902a:	18d5      	adds	r5, r2, r3
 800902c:	42ac      	cmp	r4, r5
 800902e:	d101      	bne.n	8009034 <__sfputs_r+0x12>
 8009030:	2000      	movs	r0, #0
 8009032:	e007      	b.n	8009044 <__sfputs_r+0x22>
 8009034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009038:	463a      	mov	r2, r7
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ffda 	bl	8008ff4 <__sfputc_r>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d1f3      	bne.n	800902c <__sfputs_r+0xa>
 8009044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009048 <_vfiprintf_r>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	460d      	mov	r5, r1
 800904e:	b09d      	sub	sp, #116	@ 0x74
 8009050:	4614      	mov	r4, r2
 8009052:	4698      	mov	r8, r3
 8009054:	4606      	mov	r6, r0
 8009056:	b118      	cbz	r0, 8009060 <_vfiprintf_r+0x18>
 8009058:	6a03      	ldr	r3, [r0, #32]
 800905a:	b90b      	cbnz	r3, 8009060 <_vfiprintf_r+0x18>
 800905c:	f7ff fdbc 	bl	8008bd8 <__sinit>
 8009060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009062:	07d9      	lsls	r1, r3, #31
 8009064:	d405      	bmi.n	8009072 <_vfiprintf_r+0x2a>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	059a      	lsls	r2, r3, #22
 800906a:	d402      	bmi.n	8009072 <_vfiprintf_r+0x2a>
 800906c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800906e:	f7ff feb8 	bl	8008de2 <__retarget_lock_acquire_recursive>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	071b      	lsls	r3, r3, #28
 8009076:	d501      	bpl.n	800907c <_vfiprintf_r+0x34>
 8009078:	692b      	ldr	r3, [r5, #16]
 800907a:	b99b      	cbnz	r3, 80090a4 <_vfiprintf_r+0x5c>
 800907c:	4629      	mov	r1, r5
 800907e:	4630      	mov	r0, r6
 8009080:	f000 fb72 	bl	8009768 <__swsetup_r>
 8009084:	b170      	cbz	r0, 80090a4 <_vfiprintf_r+0x5c>
 8009086:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009088:	07dc      	lsls	r4, r3, #31
 800908a:	d504      	bpl.n	8009096 <_vfiprintf_r+0x4e>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	b01d      	add	sp, #116	@ 0x74
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	0598      	lsls	r0, r3, #22
 800909a:	d4f7      	bmi.n	800908c <_vfiprintf_r+0x44>
 800909c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800909e:	f7ff fea1 	bl	8008de4 <__retarget_lock_release_recursive>
 80090a2:	e7f3      	b.n	800908c <_vfiprintf_r+0x44>
 80090a4:	2300      	movs	r3, #0
 80090a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a8:	2320      	movs	r3, #32
 80090aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b2:	2330      	movs	r3, #48	@ 0x30
 80090b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009264 <_vfiprintf_r+0x21c>
 80090b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090bc:	f04f 0901 	mov.w	r9, #1
 80090c0:	4623      	mov	r3, r4
 80090c2:	469a      	mov	sl, r3
 80090c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c8:	b10a      	cbz	r2, 80090ce <_vfiprintf_r+0x86>
 80090ca:	2a25      	cmp	r2, #37	@ 0x25
 80090cc:	d1f9      	bne.n	80090c2 <_vfiprintf_r+0x7a>
 80090ce:	ebba 0b04 	subs.w	fp, sl, r4
 80090d2:	d00b      	beq.n	80090ec <_vfiprintf_r+0xa4>
 80090d4:	465b      	mov	r3, fp
 80090d6:	4622      	mov	r2, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ffa1 	bl	8009022 <__sfputs_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	f000 80a7 	beq.w	8009234 <_vfiprintf_r+0x1ec>
 80090e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e8:	445a      	add	r2, fp
 80090ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ec:	f89a 3000 	ldrb.w	r3, [sl]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 809f 	beq.w	8009234 <_vfiprintf_r+0x1ec>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295
 80090fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009100:	f10a 0a01 	add.w	sl, sl, #1
 8009104:	9304      	str	r3, [sp, #16]
 8009106:	9307      	str	r3, [sp, #28]
 8009108:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800910c:	931a      	str	r3, [sp, #104]	@ 0x68
 800910e:	4654      	mov	r4, sl
 8009110:	2205      	movs	r2, #5
 8009112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009116:	4853      	ldr	r0, [pc, #332]	@ (8009264 <_vfiprintf_r+0x21c>)
 8009118:	f7f7 f8ea 	bl	80002f0 <memchr>
 800911c:	9a04      	ldr	r2, [sp, #16]
 800911e:	b9d8      	cbnz	r0, 8009158 <_vfiprintf_r+0x110>
 8009120:	06d1      	lsls	r1, r2, #27
 8009122:	bf44      	itt	mi
 8009124:	2320      	movmi	r3, #32
 8009126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800912a:	0713      	lsls	r3, r2, #28
 800912c:	bf44      	itt	mi
 800912e:	232b      	movmi	r3, #43	@ 0x2b
 8009130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009134:	f89a 3000 	ldrb.w	r3, [sl]
 8009138:	2b2a      	cmp	r3, #42	@ 0x2a
 800913a:	d015      	beq.n	8009168 <_vfiprintf_r+0x120>
 800913c:	9a07      	ldr	r2, [sp, #28]
 800913e:	4654      	mov	r4, sl
 8009140:	2000      	movs	r0, #0
 8009142:	f04f 0c0a 	mov.w	ip, #10
 8009146:	4621      	mov	r1, r4
 8009148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914c:	3b30      	subs	r3, #48	@ 0x30
 800914e:	2b09      	cmp	r3, #9
 8009150:	d94b      	bls.n	80091ea <_vfiprintf_r+0x1a2>
 8009152:	b1b0      	cbz	r0, 8009182 <_vfiprintf_r+0x13a>
 8009154:	9207      	str	r2, [sp, #28]
 8009156:	e014      	b.n	8009182 <_vfiprintf_r+0x13a>
 8009158:	eba0 0308 	sub.w	r3, r0, r8
 800915c:	fa09 f303 	lsl.w	r3, r9, r3
 8009160:	4313      	orrs	r3, r2
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	46a2      	mov	sl, r4
 8009166:	e7d2      	b.n	800910e <_vfiprintf_r+0xc6>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	1d19      	adds	r1, r3, #4
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	9103      	str	r1, [sp, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bfbb      	ittet	lt
 8009174:	425b      	neglt	r3, r3
 8009176:	f042 0202 	orrlt.w	r2, r2, #2
 800917a:	9307      	strge	r3, [sp, #28]
 800917c:	9307      	strlt	r3, [sp, #28]
 800917e:	bfb8      	it	lt
 8009180:	9204      	strlt	r2, [sp, #16]
 8009182:	7823      	ldrb	r3, [r4, #0]
 8009184:	2b2e      	cmp	r3, #46	@ 0x2e
 8009186:	d10a      	bne.n	800919e <_vfiprintf_r+0x156>
 8009188:	7863      	ldrb	r3, [r4, #1]
 800918a:	2b2a      	cmp	r3, #42	@ 0x2a
 800918c:	d132      	bne.n	80091f4 <_vfiprintf_r+0x1ac>
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	1d1a      	adds	r2, r3, #4
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	9203      	str	r2, [sp, #12]
 8009196:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800919a:	3402      	adds	r4, #2
 800919c:	9305      	str	r3, [sp, #20]
 800919e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009274 <_vfiprintf_r+0x22c>
 80091a2:	7821      	ldrb	r1, [r4, #0]
 80091a4:	2203      	movs	r2, #3
 80091a6:	4650      	mov	r0, sl
 80091a8:	f7f7 f8a2 	bl	80002f0 <memchr>
 80091ac:	b138      	cbz	r0, 80091be <_vfiprintf_r+0x176>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	eba0 000a 	sub.w	r0, r0, sl
 80091b4:	2240      	movs	r2, #64	@ 0x40
 80091b6:	4082      	lsls	r2, r0
 80091b8:	4313      	orrs	r3, r2
 80091ba:	3401      	adds	r4, #1
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c2:	4829      	ldr	r0, [pc, #164]	@ (8009268 <_vfiprintf_r+0x220>)
 80091c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c8:	2206      	movs	r2, #6
 80091ca:	f7f7 f891 	bl	80002f0 <memchr>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d03f      	beq.n	8009252 <_vfiprintf_r+0x20a>
 80091d2:	4b26      	ldr	r3, [pc, #152]	@ (800926c <_vfiprintf_r+0x224>)
 80091d4:	bb1b      	cbnz	r3, 800921e <_vfiprintf_r+0x1d6>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	3307      	adds	r3, #7
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	3308      	adds	r3, #8
 80091e0:	9303      	str	r3, [sp, #12]
 80091e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e4:	443b      	add	r3, r7
 80091e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e8:	e76a      	b.n	80090c0 <_vfiprintf_r+0x78>
 80091ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ee:	460c      	mov	r4, r1
 80091f0:	2001      	movs	r0, #1
 80091f2:	e7a8      	b.n	8009146 <_vfiprintf_r+0xfe>
 80091f4:	2300      	movs	r3, #0
 80091f6:	3401      	adds	r4, #1
 80091f8:	9305      	str	r3, [sp, #20]
 80091fa:	4619      	mov	r1, r3
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	4620      	mov	r0, r4
 8009202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009206:	3a30      	subs	r2, #48	@ 0x30
 8009208:	2a09      	cmp	r2, #9
 800920a:	d903      	bls.n	8009214 <_vfiprintf_r+0x1cc>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0c6      	beq.n	800919e <_vfiprintf_r+0x156>
 8009210:	9105      	str	r1, [sp, #20]
 8009212:	e7c4      	b.n	800919e <_vfiprintf_r+0x156>
 8009214:	fb0c 2101 	mla	r1, ip, r1, r2
 8009218:	4604      	mov	r4, r0
 800921a:	2301      	movs	r3, #1
 800921c:	e7f0      	b.n	8009200 <_vfiprintf_r+0x1b8>
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	462a      	mov	r2, r5
 8009224:	4b12      	ldr	r3, [pc, #72]	@ (8009270 <_vfiprintf_r+0x228>)
 8009226:	a904      	add	r1, sp, #16
 8009228:	4630      	mov	r0, r6
 800922a:	f3af 8000 	nop.w
 800922e:	4607      	mov	r7, r0
 8009230:	1c78      	adds	r0, r7, #1
 8009232:	d1d6      	bne.n	80091e2 <_vfiprintf_r+0x19a>
 8009234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d405      	bmi.n	8009246 <_vfiprintf_r+0x1fe>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	059a      	lsls	r2, r3, #22
 800923e:	d402      	bmi.n	8009246 <_vfiprintf_r+0x1fe>
 8009240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009242:	f7ff fdcf 	bl	8008de4 <__retarget_lock_release_recursive>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	065b      	lsls	r3, r3, #25
 800924a:	f53f af1f 	bmi.w	800908c <_vfiprintf_r+0x44>
 800924e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009250:	e71e      	b.n	8009090 <_vfiprintf_r+0x48>
 8009252:	ab03      	add	r3, sp, #12
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	462a      	mov	r2, r5
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <_vfiprintf_r+0x228>)
 800925a:	a904      	add	r1, sp, #16
 800925c:	4630      	mov	r0, r6
 800925e:	f000 f879 	bl	8009354 <_printf_i>
 8009262:	e7e4      	b.n	800922e <_vfiprintf_r+0x1e6>
 8009264:	08009cc8 	.word	0x08009cc8
 8009268:	08009cd2 	.word	0x08009cd2
 800926c:	00000000 	.word	0x00000000
 8009270:	08009023 	.word	0x08009023
 8009274:	08009cce 	.word	0x08009cce

08009278 <_printf_common>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	4616      	mov	r6, r2
 800927e:	4698      	mov	r8, r3
 8009280:	688a      	ldr	r2, [r1, #8]
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009288:	4293      	cmp	r3, r2
 800928a:	bfb8      	it	lt
 800928c:	4613      	movlt	r3, r2
 800928e:	6033      	str	r3, [r6, #0]
 8009290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009294:	4607      	mov	r7, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b10a      	cbz	r2, 800929e <_printf_common+0x26>
 800929a:	3301      	adds	r3, #1
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	0699      	lsls	r1, r3, #26
 80092a2:	bf42      	ittt	mi
 80092a4:	6833      	ldrmi	r3, [r6, #0]
 80092a6:	3302      	addmi	r3, #2
 80092a8:	6033      	strmi	r3, [r6, #0]
 80092aa:	6825      	ldr	r5, [r4, #0]
 80092ac:	f015 0506 	ands.w	r5, r5, #6
 80092b0:	d106      	bne.n	80092c0 <_printf_common+0x48>
 80092b2:	f104 0a19 	add.w	sl, r4, #25
 80092b6:	68e3      	ldr	r3, [r4, #12]
 80092b8:	6832      	ldr	r2, [r6, #0]
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	42ab      	cmp	r3, r5
 80092be:	dc26      	bgt.n	800930e <_printf_common+0x96>
 80092c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	3b00      	subs	r3, #0
 80092c8:	bf18      	it	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	0692      	lsls	r2, r2, #26
 80092ce:	d42b      	bmi.n	8009328 <_printf_common+0xb0>
 80092d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092d4:	4641      	mov	r1, r8
 80092d6:	4638      	mov	r0, r7
 80092d8:	47c8      	blx	r9
 80092da:	3001      	adds	r0, #1
 80092dc:	d01e      	beq.n	800931c <_printf_common+0xa4>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	f003 0306 	and.w	r3, r3, #6
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	bf02      	ittt	eq
 80092ea:	68e5      	ldreq	r5, [r4, #12]
 80092ec:	6833      	ldreq	r3, [r6, #0]
 80092ee:	1aed      	subeq	r5, r5, r3
 80092f0:	68a3      	ldr	r3, [r4, #8]
 80092f2:	bf0c      	ite	eq
 80092f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f8:	2500      	movne	r5, #0
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bfc4      	itt	gt
 80092fe:	1a9b      	subgt	r3, r3, r2
 8009300:	18ed      	addgt	r5, r5, r3
 8009302:	2600      	movs	r6, #0
 8009304:	341a      	adds	r4, #26
 8009306:	42b5      	cmp	r5, r6
 8009308:	d11a      	bne.n	8009340 <_printf_common+0xc8>
 800930a:	2000      	movs	r0, #0
 800930c:	e008      	b.n	8009320 <_printf_common+0xa8>
 800930e:	2301      	movs	r3, #1
 8009310:	4652      	mov	r2, sl
 8009312:	4641      	mov	r1, r8
 8009314:	4638      	mov	r0, r7
 8009316:	47c8      	blx	r9
 8009318:	3001      	adds	r0, #1
 800931a:	d103      	bne.n	8009324 <_printf_common+0xac>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	3501      	adds	r5, #1
 8009326:	e7c6      	b.n	80092b6 <_printf_common+0x3e>
 8009328:	18e1      	adds	r1, r4, r3
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	2030      	movs	r0, #48	@ 0x30
 800932e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009332:	4422      	add	r2, r4
 8009334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800933c:	3302      	adds	r3, #2
 800933e:	e7c7      	b.n	80092d0 <_printf_common+0x58>
 8009340:	2301      	movs	r3, #1
 8009342:	4622      	mov	r2, r4
 8009344:	4641      	mov	r1, r8
 8009346:	4638      	mov	r0, r7
 8009348:	47c8      	blx	r9
 800934a:	3001      	adds	r0, #1
 800934c:	d0e6      	beq.n	800931c <_printf_common+0xa4>
 800934e:	3601      	adds	r6, #1
 8009350:	e7d9      	b.n	8009306 <_printf_common+0x8e>
	...

08009354 <_printf_i>:
 8009354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	7e0f      	ldrb	r7, [r1, #24]
 800935a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800935c:	2f78      	cmp	r7, #120	@ 0x78
 800935e:	4691      	mov	r9, r2
 8009360:	4680      	mov	r8, r0
 8009362:	460c      	mov	r4, r1
 8009364:	469a      	mov	sl, r3
 8009366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800936a:	d807      	bhi.n	800937c <_printf_i+0x28>
 800936c:	2f62      	cmp	r7, #98	@ 0x62
 800936e:	d80a      	bhi.n	8009386 <_printf_i+0x32>
 8009370:	2f00      	cmp	r7, #0
 8009372:	f000 80d2 	beq.w	800951a <_printf_i+0x1c6>
 8009376:	2f58      	cmp	r7, #88	@ 0x58
 8009378:	f000 80b9 	beq.w	80094ee <_printf_i+0x19a>
 800937c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009384:	e03a      	b.n	80093fc <_printf_i+0xa8>
 8009386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800938a:	2b15      	cmp	r3, #21
 800938c:	d8f6      	bhi.n	800937c <_printf_i+0x28>
 800938e:	a101      	add	r1, pc, #4	@ (adr r1, 8009394 <_printf_i+0x40>)
 8009390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009394:	080093ed 	.word	0x080093ed
 8009398:	08009401 	.word	0x08009401
 800939c:	0800937d 	.word	0x0800937d
 80093a0:	0800937d 	.word	0x0800937d
 80093a4:	0800937d 	.word	0x0800937d
 80093a8:	0800937d 	.word	0x0800937d
 80093ac:	08009401 	.word	0x08009401
 80093b0:	0800937d 	.word	0x0800937d
 80093b4:	0800937d 	.word	0x0800937d
 80093b8:	0800937d 	.word	0x0800937d
 80093bc:	0800937d 	.word	0x0800937d
 80093c0:	08009501 	.word	0x08009501
 80093c4:	0800942b 	.word	0x0800942b
 80093c8:	080094bb 	.word	0x080094bb
 80093cc:	0800937d 	.word	0x0800937d
 80093d0:	0800937d 	.word	0x0800937d
 80093d4:	08009523 	.word	0x08009523
 80093d8:	0800937d 	.word	0x0800937d
 80093dc:	0800942b 	.word	0x0800942b
 80093e0:	0800937d 	.word	0x0800937d
 80093e4:	0800937d 	.word	0x0800937d
 80093e8:	080094c3 	.word	0x080094c3
 80093ec:	6833      	ldr	r3, [r6, #0]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6032      	str	r2, [r6, #0]
 80093f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093fc:	2301      	movs	r3, #1
 80093fe:	e09d      	b.n	800953c <_printf_i+0x1e8>
 8009400:	6833      	ldr	r3, [r6, #0]
 8009402:	6820      	ldr	r0, [r4, #0]
 8009404:	1d19      	adds	r1, r3, #4
 8009406:	6031      	str	r1, [r6, #0]
 8009408:	0606      	lsls	r6, r0, #24
 800940a:	d501      	bpl.n	8009410 <_printf_i+0xbc>
 800940c:	681d      	ldr	r5, [r3, #0]
 800940e:	e003      	b.n	8009418 <_printf_i+0xc4>
 8009410:	0645      	lsls	r5, r0, #25
 8009412:	d5fb      	bpl.n	800940c <_printf_i+0xb8>
 8009414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009418:	2d00      	cmp	r5, #0
 800941a:	da03      	bge.n	8009424 <_printf_i+0xd0>
 800941c:	232d      	movs	r3, #45	@ 0x2d
 800941e:	426d      	negs	r5, r5
 8009420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009424:	4859      	ldr	r0, [pc, #356]	@ (800958c <_printf_i+0x238>)
 8009426:	230a      	movs	r3, #10
 8009428:	e011      	b.n	800944e <_printf_i+0xfa>
 800942a:	6821      	ldr	r1, [r4, #0]
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	0608      	lsls	r0, r1, #24
 8009430:	f853 5b04 	ldr.w	r5, [r3], #4
 8009434:	d402      	bmi.n	800943c <_printf_i+0xe8>
 8009436:	0649      	lsls	r1, r1, #25
 8009438:	bf48      	it	mi
 800943a:	b2ad      	uxthmi	r5, r5
 800943c:	2f6f      	cmp	r7, #111	@ 0x6f
 800943e:	4853      	ldr	r0, [pc, #332]	@ (800958c <_printf_i+0x238>)
 8009440:	6033      	str	r3, [r6, #0]
 8009442:	bf14      	ite	ne
 8009444:	230a      	movne	r3, #10
 8009446:	2308      	moveq	r3, #8
 8009448:	2100      	movs	r1, #0
 800944a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800944e:	6866      	ldr	r6, [r4, #4]
 8009450:	60a6      	str	r6, [r4, #8]
 8009452:	2e00      	cmp	r6, #0
 8009454:	bfa2      	ittt	ge
 8009456:	6821      	ldrge	r1, [r4, #0]
 8009458:	f021 0104 	bicge.w	r1, r1, #4
 800945c:	6021      	strge	r1, [r4, #0]
 800945e:	b90d      	cbnz	r5, 8009464 <_printf_i+0x110>
 8009460:	2e00      	cmp	r6, #0
 8009462:	d04b      	beq.n	80094fc <_printf_i+0x1a8>
 8009464:	4616      	mov	r6, r2
 8009466:	fbb5 f1f3 	udiv	r1, r5, r3
 800946a:	fb03 5711 	mls	r7, r3, r1, r5
 800946e:	5dc7      	ldrb	r7, [r0, r7]
 8009470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009474:	462f      	mov	r7, r5
 8009476:	42bb      	cmp	r3, r7
 8009478:	460d      	mov	r5, r1
 800947a:	d9f4      	bls.n	8009466 <_printf_i+0x112>
 800947c:	2b08      	cmp	r3, #8
 800947e:	d10b      	bne.n	8009498 <_printf_i+0x144>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	07df      	lsls	r7, r3, #31
 8009484:	d508      	bpl.n	8009498 <_printf_i+0x144>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	6861      	ldr	r1, [r4, #4]
 800948a:	4299      	cmp	r1, r3
 800948c:	bfde      	ittt	le
 800948e:	2330      	movle	r3, #48	@ 0x30
 8009490:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009494:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009498:	1b92      	subs	r2, r2, r6
 800949a:	6122      	str	r2, [r4, #16]
 800949c:	f8cd a000 	str.w	sl, [sp]
 80094a0:	464b      	mov	r3, r9
 80094a2:	aa03      	add	r2, sp, #12
 80094a4:	4621      	mov	r1, r4
 80094a6:	4640      	mov	r0, r8
 80094a8:	f7ff fee6 	bl	8009278 <_printf_common>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d14a      	bne.n	8009546 <_printf_i+0x1f2>
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	b004      	add	sp, #16
 80094b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	f043 0320 	orr.w	r3, r3, #32
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	4833      	ldr	r0, [pc, #204]	@ (8009590 <_printf_i+0x23c>)
 80094c4:	2778      	movs	r7, #120	@ 0x78
 80094c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	6831      	ldr	r1, [r6, #0]
 80094ce:	061f      	lsls	r7, r3, #24
 80094d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094d4:	d402      	bmi.n	80094dc <_printf_i+0x188>
 80094d6:	065f      	lsls	r7, r3, #25
 80094d8:	bf48      	it	mi
 80094da:	b2ad      	uxthmi	r5, r5
 80094dc:	6031      	str	r1, [r6, #0]
 80094de:	07d9      	lsls	r1, r3, #31
 80094e0:	bf44      	itt	mi
 80094e2:	f043 0320 	orrmi.w	r3, r3, #32
 80094e6:	6023      	strmi	r3, [r4, #0]
 80094e8:	b11d      	cbz	r5, 80094f2 <_printf_i+0x19e>
 80094ea:	2310      	movs	r3, #16
 80094ec:	e7ac      	b.n	8009448 <_printf_i+0xf4>
 80094ee:	4827      	ldr	r0, [pc, #156]	@ (800958c <_printf_i+0x238>)
 80094f0:	e7e9      	b.n	80094c6 <_printf_i+0x172>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	f023 0320 	bic.w	r3, r3, #32
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	e7f6      	b.n	80094ea <_printf_i+0x196>
 80094fc:	4616      	mov	r6, r2
 80094fe:	e7bd      	b.n	800947c <_printf_i+0x128>
 8009500:	6833      	ldr	r3, [r6, #0]
 8009502:	6825      	ldr	r5, [r4, #0]
 8009504:	6961      	ldr	r1, [r4, #20]
 8009506:	1d18      	adds	r0, r3, #4
 8009508:	6030      	str	r0, [r6, #0]
 800950a:	062e      	lsls	r6, r5, #24
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	d501      	bpl.n	8009514 <_printf_i+0x1c0>
 8009510:	6019      	str	r1, [r3, #0]
 8009512:	e002      	b.n	800951a <_printf_i+0x1c6>
 8009514:	0668      	lsls	r0, r5, #25
 8009516:	d5fb      	bpl.n	8009510 <_printf_i+0x1bc>
 8009518:	8019      	strh	r1, [r3, #0]
 800951a:	2300      	movs	r3, #0
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	4616      	mov	r6, r2
 8009520:	e7bc      	b.n	800949c <_printf_i+0x148>
 8009522:	6833      	ldr	r3, [r6, #0]
 8009524:	1d1a      	adds	r2, r3, #4
 8009526:	6032      	str	r2, [r6, #0]
 8009528:	681e      	ldr	r6, [r3, #0]
 800952a:	6862      	ldr	r2, [r4, #4]
 800952c:	2100      	movs	r1, #0
 800952e:	4630      	mov	r0, r6
 8009530:	f7f6 fede 	bl	80002f0 <memchr>
 8009534:	b108      	cbz	r0, 800953a <_printf_i+0x1e6>
 8009536:	1b80      	subs	r0, r0, r6
 8009538:	6060      	str	r0, [r4, #4]
 800953a:	6863      	ldr	r3, [r4, #4]
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	2300      	movs	r3, #0
 8009540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009544:	e7aa      	b.n	800949c <_printf_i+0x148>
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	4632      	mov	r2, r6
 800954a:	4649      	mov	r1, r9
 800954c:	4640      	mov	r0, r8
 800954e:	47d0      	blx	sl
 8009550:	3001      	adds	r0, #1
 8009552:	d0ad      	beq.n	80094b0 <_printf_i+0x15c>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	079b      	lsls	r3, r3, #30
 8009558:	d413      	bmi.n	8009582 <_printf_i+0x22e>
 800955a:	68e0      	ldr	r0, [r4, #12]
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	4298      	cmp	r0, r3
 8009560:	bfb8      	it	lt
 8009562:	4618      	movlt	r0, r3
 8009564:	e7a6      	b.n	80094b4 <_printf_i+0x160>
 8009566:	2301      	movs	r3, #1
 8009568:	4632      	mov	r2, r6
 800956a:	4649      	mov	r1, r9
 800956c:	4640      	mov	r0, r8
 800956e:	47d0      	blx	sl
 8009570:	3001      	adds	r0, #1
 8009572:	d09d      	beq.n	80094b0 <_printf_i+0x15c>
 8009574:	3501      	adds	r5, #1
 8009576:	68e3      	ldr	r3, [r4, #12]
 8009578:	9903      	ldr	r1, [sp, #12]
 800957a:	1a5b      	subs	r3, r3, r1
 800957c:	42ab      	cmp	r3, r5
 800957e:	dcf2      	bgt.n	8009566 <_printf_i+0x212>
 8009580:	e7eb      	b.n	800955a <_printf_i+0x206>
 8009582:	2500      	movs	r5, #0
 8009584:	f104 0619 	add.w	r6, r4, #25
 8009588:	e7f5      	b.n	8009576 <_printf_i+0x222>
 800958a:	bf00      	nop
 800958c:	08009cd9 	.word	0x08009cd9
 8009590:	08009cea 	.word	0x08009cea

08009594 <__sflush_r>:
 8009594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	0716      	lsls	r6, r2, #28
 800959e:	4605      	mov	r5, r0
 80095a0:	460c      	mov	r4, r1
 80095a2:	d454      	bmi.n	800964e <__sflush_r+0xba>
 80095a4:	684b      	ldr	r3, [r1, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc02      	bgt.n	80095b0 <__sflush_r+0x1c>
 80095aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd48      	ble.n	8009642 <__sflush_r+0xae>
 80095b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	d045      	beq.n	8009642 <__sflush_r+0xae>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095bc:	682f      	ldr	r7, [r5, #0]
 80095be:	6a21      	ldr	r1, [r4, #32]
 80095c0:	602b      	str	r3, [r5, #0]
 80095c2:	d030      	beq.n	8009626 <__sflush_r+0x92>
 80095c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	0759      	lsls	r1, r3, #29
 80095ca:	d505      	bpl.n	80095d8 <__sflush_r+0x44>
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095d2:	b10b      	cbz	r3, 80095d8 <__sflush_r+0x44>
 80095d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095d6:	1ad2      	subs	r2, r2, r3
 80095d8:	2300      	movs	r3, #0
 80095da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	4628      	mov	r0, r5
 80095e0:	47b0      	blx	r6
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	d106      	bne.n	80095f6 <__sflush_r+0x62>
 80095e8:	6829      	ldr	r1, [r5, #0]
 80095ea:	291d      	cmp	r1, #29
 80095ec:	d82b      	bhi.n	8009646 <__sflush_r+0xb2>
 80095ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009698 <__sflush_r+0x104>)
 80095f0:	410a      	asrs	r2, r1
 80095f2:	07d6      	lsls	r6, r2, #31
 80095f4:	d427      	bmi.n	8009646 <__sflush_r+0xb2>
 80095f6:	2200      	movs	r2, #0
 80095f8:	6062      	str	r2, [r4, #4]
 80095fa:	04d9      	lsls	r1, r3, #19
 80095fc:	6922      	ldr	r2, [r4, #16]
 80095fe:	6022      	str	r2, [r4, #0]
 8009600:	d504      	bpl.n	800960c <__sflush_r+0x78>
 8009602:	1c42      	adds	r2, r0, #1
 8009604:	d101      	bne.n	800960a <__sflush_r+0x76>
 8009606:	682b      	ldr	r3, [r5, #0]
 8009608:	b903      	cbnz	r3, 800960c <__sflush_r+0x78>
 800960a:	6560      	str	r0, [r4, #84]	@ 0x54
 800960c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	b1b9      	cbz	r1, 8009642 <__sflush_r+0xae>
 8009612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009616:	4299      	cmp	r1, r3
 8009618:	d002      	beq.n	8009620 <__sflush_r+0x8c>
 800961a:	4628      	mov	r0, r5
 800961c:	f7ff fbf2 	bl	8008e04 <_free_r>
 8009620:	2300      	movs	r3, #0
 8009622:	6363      	str	r3, [r4, #52]	@ 0x34
 8009624:	e00d      	b.n	8009642 <__sflush_r+0xae>
 8009626:	2301      	movs	r3, #1
 8009628:	4628      	mov	r0, r5
 800962a:	47b0      	blx	r6
 800962c:	4602      	mov	r2, r0
 800962e:	1c50      	adds	r0, r2, #1
 8009630:	d1c9      	bne.n	80095c6 <__sflush_r+0x32>
 8009632:	682b      	ldr	r3, [r5, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0c6      	beq.n	80095c6 <__sflush_r+0x32>
 8009638:	2b1d      	cmp	r3, #29
 800963a:	d001      	beq.n	8009640 <__sflush_r+0xac>
 800963c:	2b16      	cmp	r3, #22
 800963e:	d11e      	bne.n	800967e <__sflush_r+0xea>
 8009640:	602f      	str	r7, [r5, #0]
 8009642:	2000      	movs	r0, #0
 8009644:	e022      	b.n	800968c <__sflush_r+0xf8>
 8009646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800964a:	b21b      	sxth	r3, r3
 800964c:	e01b      	b.n	8009686 <__sflush_r+0xf2>
 800964e:	690f      	ldr	r7, [r1, #16]
 8009650:	2f00      	cmp	r7, #0
 8009652:	d0f6      	beq.n	8009642 <__sflush_r+0xae>
 8009654:	0793      	lsls	r3, r2, #30
 8009656:	680e      	ldr	r6, [r1, #0]
 8009658:	bf08      	it	eq
 800965a:	694b      	ldreq	r3, [r1, #20]
 800965c:	600f      	str	r7, [r1, #0]
 800965e:	bf18      	it	ne
 8009660:	2300      	movne	r3, #0
 8009662:	eba6 0807 	sub.w	r8, r6, r7
 8009666:	608b      	str	r3, [r1, #8]
 8009668:	f1b8 0f00 	cmp.w	r8, #0
 800966c:	dde9      	ble.n	8009642 <__sflush_r+0xae>
 800966e:	6a21      	ldr	r1, [r4, #32]
 8009670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009672:	4643      	mov	r3, r8
 8009674:	463a      	mov	r2, r7
 8009676:	4628      	mov	r0, r5
 8009678:	47b0      	blx	r6
 800967a:	2800      	cmp	r0, #0
 800967c:	dc08      	bgt.n	8009690 <__sflush_r+0xfc>
 800967e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	4407      	add	r7, r0
 8009692:	eba8 0800 	sub.w	r8, r8, r0
 8009696:	e7e7      	b.n	8009668 <__sflush_r+0xd4>
 8009698:	dfbffffe 	.word	0xdfbffffe

0800969c <_fflush_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b913      	cbnz	r3, 80096ac <_fflush_r+0x10>
 80096a6:	2500      	movs	r5, #0
 80096a8:	4628      	mov	r0, r5
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	b118      	cbz	r0, 80096b6 <_fflush_r+0x1a>
 80096ae:	6a03      	ldr	r3, [r0, #32]
 80096b0:	b90b      	cbnz	r3, 80096b6 <_fflush_r+0x1a>
 80096b2:	f7ff fa91 	bl	8008bd8 <__sinit>
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f3      	beq.n	80096a6 <_fflush_r+0xa>
 80096be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096c0:	07d0      	lsls	r0, r2, #31
 80096c2:	d404      	bmi.n	80096ce <_fflush_r+0x32>
 80096c4:	0599      	lsls	r1, r3, #22
 80096c6:	d402      	bmi.n	80096ce <_fflush_r+0x32>
 80096c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ca:	f7ff fb8a 	bl	8008de2 <__retarget_lock_acquire_recursive>
 80096ce:	4628      	mov	r0, r5
 80096d0:	4621      	mov	r1, r4
 80096d2:	f7ff ff5f 	bl	8009594 <__sflush_r>
 80096d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096d8:	07da      	lsls	r2, r3, #31
 80096da:	4605      	mov	r5, r0
 80096dc:	d4e4      	bmi.n	80096a8 <_fflush_r+0xc>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	059b      	lsls	r3, r3, #22
 80096e2:	d4e1      	bmi.n	80096a8 <_fflush_r+0xc>
 80096e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096e6:	f7ff fb7d 	bl	8008de4 <__retarget_lock_release_recursive>
 80096ea:	e7dd      	b.n	80096a8 <_fflush_r+0xc>

080096ec <__swbuf_r>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	460e      	mov	r6, r1
 80096f0:	4614      	mov	r4, r2
 80096f2:	4605      	mov	r5, r0
 80096f4:	b118      	cbz	r0, 80096fe <__swbuf_r+0x12>
 80096f6:	6a03      	ldr	r3, [r0, #32]
 80096f8:	b90b      	cbnz	r3, 80096fe <__swbuf_r+0x12>
 80096fa:	f7ff fa6d 	bl	8008bd8 <__sinit>
 80096fe:	69a3      	ldr	r3, [r4, #24]
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	071a      	lsls	r2, r3, #28
 8009706:	d501      	bpl.n	800970c <__swbuf_r+0x20>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	b943      	cbnz	r3, 800971e <__swbuf_r+0x32>
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 f82a 	bl	8009768 <__swsetup_r>
 8009714:	b118      	cbz	r0, 800971e <__swbuf_r+0x32>
 8009716:	f04f 37ff 	mov.w	r7, #4294967295
 800971a:	4638      	mov	r0, r7
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	6922      	ldr	r2, [r4, #16]
 8009722:	1a98      	subs	r0, r3, r2
 8009724:	6963      	ldr	r3, [r4, #20]
 8009726:	b2f6      	uxtb	r6, r6
 8009728:	4283      	cmp	r3, r0
 800972a:	4637      	mov	r7, r6
 800972c:	dc05      	bgt.n	800973a <__swbuf_r+0x4e>
 800972e:	4621      	mov	r1, r4
 8009730:	4628      	mov	r0, r5
 8009732:	f7ff ffb3 	bl	800969c <_fflush_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	d1ed      	bne.n	8009716 <__swbuf_r+0x2a>
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	3b01      	subs	r3, #1
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	6022      	str	r2, [r4, #0]
 8009746:	701e      	strb	r6, [r3, #0]
 8009748:	6962      	ldr	r2, [r4, #20]
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	429a      	cmp	r2, r3
 800974e:	d004      	beq.n	800975a <__swbuf_r+0x6e>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	07db      	lsls	r3, r3, #31
 8009754:	d5e1      	bpl.n	800971a <__swbuf_r+0x2e>
 8009756:	2e0a      	cmp	r6, #10
 8009758:	d1df      	bne.n	800971a <__swbuf_r+0x2e>
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f7ff ff9d 	bl	800969c <_fflush_r>
 8009762:	2800      	cmp	r0, #0
 8009764:	d0d9      	beq.n	800971a <__swbuf_r+0x2e>
 8009766:	e7d6      	b.n	8009716 <__swbuf_r+0x2a>

08009768 <__swsetup_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4b29      	ldr	r3, [pc, #164]	@ (8009810 <__swsetup_r+0xa8>)
 800976c:	4605      	mov	r5, r0
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	460c      	mov	r4, r1
 8009772:	b118      	cbz	r0, 800977c <__swsetup_r+0x14>
 8009774:	6a03      	ldr	r3, [r0, #32]
 8009776:	b90b      	cbnz	r3, 800977c <__swsetup_r+0x14>
 8009778:	f7ff fa2e 	bl	8008bd8 <__sinit>
 800977c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009780:	0719      	lsls	r1, r3, #28
 8009782:	d422      	bmi.n	80097ca <__swsetup_r+0x62>
 8009784:	06da      	lsls	r2, r3, #27
 8009786:	d407      	bmi.n	8009798 <__swsetup_r+0x30>
 8009788:	2209      	movs	r2, #9
 800978a:	602a      	str	r2, [r5, #0]
 800978c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	f04f 30ff 	mov.w	r0, #4294967295
 8009796:	e033      	b.n	8009800 <__swsetup_r+0x98>
 8009798:	0758      	lsls	r0, r3, #29
 800979a:	d512      	bpl.n	80097c2 <__swsetup_r+0x5a>
 800979c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800979e:	b141      	cbz	r1, 80097b2 <__swsetup_r+0x4a>
 80097a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097a4:	4299      	cmp	r1, r3
 80097a6:	d002      	beq.n	80097ae <__swsetup_r+0x46>
 80097a8:	4628      	mov	r0, r5
 80097aa:	f7ff fb2b 	bl	8008e04 <_free_r>
 80097ae:	2300      	movs	r3, #0
 80097b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	2300      	movs	r3, #0
 80097bc:	6063      	str	r3, [r4, #4]
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f043 0308 	orr.w	r3, r3, #8
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	b94b      	cbnz	r3, 80097e2 <__swsetup_r+0x7a>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d8:	d003      	beq.n	80097e2 <__swsetup_r+0x7a>
 80097da:	4621      	mov	r1, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f84f 	bl	8009880 <__smakebuf_r>
 80097e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e6:	f013 0201 	ands.w	r2, r3, #1
 80097ea:	d00a      	beq.n	8009802 <__swsetup_r+0x9a>
 80097ec:	2200      	movs	r2, #0
 80097ee:	60a2      	str	r2, [r4, #8]
 80097f0:	6962      	ldr	r2, [r4, #20]
 80097f2:	4252      	negs	r2, r2
 80097f4:	61a2      	str	r2, [r4, #24]
 80097f6:	6922      	ldr	r2, [r4, #16]
 80097f8:	b942      	cbnz	r2, 800980c <__swsetup_r+0xa4>
 80097fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097fe:	d1c5      	bne.n	800978c <__swsetup_r+0x24>
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	0799      	lsls	r1, r3, #30
 8009804:	bf58      	it	pl
 8009806:	6962      	ldrpl	r2, [r4, #20]
 8009808:	60a2      	str	r2, [r4, #8]
 800980a:	e7f4      	b.n	80097f6 <__swsetup_r+0x8e>
 800980c:	2000      	movs	r0, #0
 800980e:	e7f7      	b.n	8009800 <__swsetup_r+0x98>
 8009810:	2400001c 	.word	0x2400001c

08009814 <_sbrk_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_sbrk_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7fa fc26 	bl	8004070 <_sbrk>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_sbrk_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_sbrk_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	24000260 	.word	0x24000260

08009834 <__swhatbuf_r>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	460c      	mov	r4, r1
 8009838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983c:	2900      	cmp	r1, #0
 800983e:	b096      	sub	sp, #88	@ 0x58
 8009840:	4615      	mov	r5, r2
 8009842:	461e      	mov	r6, r3
 8009844:	da0d      	bge.n	8009862 <__swhatbuf_r+0x2e>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800984c:	f04f 0100 	mov.w	r1, #0
 8009850:	bf14      	ite	ne
 8009852:	2340      	movne	r3, #64	@ 0x40
 8009854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009858:	2000      	movs	r0, #0
 800985a:	6031      	str	r1, [r6, #0]
 800985c:	602b      	str	r3, [r5, #0]
 800985e:	b016      	add	sp, #88	@ 0x58
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	466a      	mov	r2, sp
 8009864:	f000 f848 	bl	80098f8 <_fstat_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	dbec      	blt.n	8009846 <__swhatbuf_r+0x12>
 800986c:	9901      	ldr	r1, [sp, #4]
 800986e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009876:	4259      	negs	r1, r3
 8009878:	4159      	adcs	r1, r3
 800987a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800987e:	e7eb      	b.n	8009858 <__swhatbuf_r+0x24>

08009880 <__smakebuf_r>:
 8009880:	898b      	ldrh	r3, [r1, #12]
 8009882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009884:	079d      	lsls	r5, r3, #30
 8009886:	4606      	mov	r6, r0
 8009888:	460c      	mov	r4, r1
 800988a:	d507      	bpl.n	800989c <__smakebuf_r+0x1c>
 800988c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	2301      	movs	r3, #1
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	b003      	add	sp, #12
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989c:	ab01      	add	r3, sp, #4
 800989e:	466a      	mov	r2, sp
 80098a0:	f7ff ffc8 	bl	8009834 <__swhatbuf_r>
 80098a4:	9f00      	ldr	r7, [sp, #0]
 80098a6:	4605      	mov	r5, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff fb16 	bl	8008edc <_malloc_r>
 80098b0:	b948      	cbnz	r0, 80098c6 <__smakebuf_r+0x46>
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	059a      	lsls	r2, r3, #22
 80098b8:	d4ee      	bmi.n	8009898 <__smakebuf_r+0x18>
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	f043 0302 	orr.w	r3, r3, #2
 80098c2:	81a3      	strh	r3, [r4, #12]
 80098c4:	e7e2      	b.n	800988c <__smakebuf_r+0xc>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	6020      	str	r0, [r4, #0]
 80098ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098d6:	b15b      	cbz	r3, 80098f0 <__smakebuf_r+0x70>
 80098d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098dc:	4630      	mov	r0, r6
 80098de:	f000 f81d 	bl	800991c <_isatty_r>
 80098e2:	b128      	cbz	r0, 80098f0 <__smakebuf_r+0x70>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	431d      	orrs	r5, r3
 80098f4:	81a5      	strh	r5, [r4, #12]
 80098f6:	e7cf      	b.n	8009898 <__smakebuf_r+0x18>

080098f8 <_fstat_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	@ (8009918 <_fstat_r+0x20>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	4611      	mov	r1, r2
 8009904:	602b      	str	r3, [r5, #0]
 8009906:	f7fa fb8b 	bl	8004020 <_fstat>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d102      	bne.n	8009914 <_fstat_r+0x1c>
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	b103      	cbz	r3, 8009914 <_fstat_r+0x1c>
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	bf00      	nop
 8009918:	24000260 	.word	0x24000260

0800991c <_isatty_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	@ (8009938 <_isatty_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7fa fb8a 	bl	8004040 <_isatty>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_isatty_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_isatty_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	24000260 	.word	0x24000260

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
