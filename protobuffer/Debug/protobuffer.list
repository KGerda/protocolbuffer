
protobuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a848  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800aaf8  0800aaf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad68  0800ad68  0000bd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad70  0800ad70  0000bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800ad78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000620  2400006c  0800ade4  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400068c  0800ade4  0000c68c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d50  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d4c  00000000  00000000  0001fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df8  00000000  00000000  00022b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ad2  00000000  00000000  00023930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031a82  00000000  00000000  00024402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015bc5  00000000  00000000  00055e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c18a  00000000  00000000  0006ba49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7bd3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fe8  00000000  00000000  001a7c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001abc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800aae0 	.word	0x0800aae0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	0800aae0 	.word	0x0800aae0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <getdata_frombuffer>:
extern uint8_t buffer[BUFFER_LEN];
volatile uint32_t writePtr = 0;
volatile uint32_t readPtr = 0;

void getdata_frombuffer(uint8_t ret_data[], uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	if (readPtr < writePtr)
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <getdata_frombuffer+0xb0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <getdata_frombuffer+0xb4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d20f      	bcs.n	80006b8 <getdata_frombuffer+0x38>
	{
		memcpy(ret_data, &buffer[readPtr], len);
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <getdata_frombuffer+0xb0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <getdata_frombuffer+0xb8>)
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f009 fd04 	bl	800a0b2 <memcpy>
		readPtr = readPtr + len;
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006b4:	6013      	str	r3, [r2, #0]
			memcpy(ret_data, &buffer[readPtr], firstPart);
			memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
			readPtr = len - firstPart;
		}
	}
}
 80006b6:	e036      	b.n	8000726 <getdata_frombuffer+0xa6>
	else if (readPtr > writePtr)
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <getdata_frombuffer+0xb4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d930      	bls.n	8000726 <getdata_frombuffer+0xa6>
		uint32_t firstPart = BUFFER_LEN - readPtr;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80006cc:	60fb      	str	r3, [r7, #12]
		if (len <= firstPart)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d30f      	bcc.n	80006f6 <getdata_frombuffer+0x76>
			memcpy(ret_data, &buffer[readPtr], len);
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006dc:	4413      	add	r3, r2
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f009 fce5 	bl	800a0b2 <memcpy>
			readPtr += len;
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	e017      	b.n	8000726 <getdata_frombuffer+0xa6>
			memcpy(ret_data, &buffer[readPtr], firstPart);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006fc:	4413      	add	r3, r2
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f009 fcd5 	bl	800a0b2 <memcpy>
			memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d0      	adds	r0, r2, r3
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <getdata_frombuffer+0xb8>)
 8000718:	f009 fccb 	bl	800a0b2 <memcpy>
			readPtr = len - firstPart;
 800071c:	78fa      	ldrb	r2, [r7, #3]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <getdata_frombuffer+0xb0>)
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2400008c 	.word	0x2400008c
 8000734:	24000088 	.word	0x24000088
 8000738:	24000090 	.word	0x24000090

0800073c <writedata_tobuffer>:

bool writedata_tobuffer(uint8_t data[], uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	if ((writePtr + len) < (BUFFER_LEN))
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000754:	d21a      	bcs.n	800078c <writedata_tobuffer+0x50>
	{
		/*always have one space (2 bytes) empty*/
		if (writePtr + len == readPtr)
 8000756:	78fa      	ldrb	r2, [r7, #3]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	441a      	add	r2, r3
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <writedata_tobuffer+0xac>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d101      	bne.n	800076a <writedata_tobuffer+0x2e>
			/*Not increase datacounter*/
			return 0;
 8000766:	2300      	movs	r3, #0
 8000768:	e037      	b.n	80007da <writedata_tobuffer+0x9e>
		memcpy(&buffer[writePtr], data, len);
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ec <writedata_tobuffer+0xb0>)
 8000770:	4413      	add	r3, r2
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f009 fc9b 	bl	800a0b2 <memcpy>
		writePtr += len;
 800077c:	78fa      	ldrb	r2, [r7, #3]
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <writedata_tobuffer+0xa8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <writedata_tobuffer+0xa8>)
 8000786:	6013      	str	r3, [r2, #0]
		return 1;
 8000788:	2301      	movs	r3, #1
 800078a:	e026      	b.n	80007da <writedata_tobuffer+0x9e>

	}
	else
	{
		/* First part of the data*/
		uint32_t firstPart = BUFFER_LEN - writePtr;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <writedata_tobuffer+0xa8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000794:	60fb      	str	r3, [r7, #12]
		if (readPtr > len - firstPart)
 8000796:	78fa      	ldrb	r2, [r7, #3]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <writedata_tobuffer+0xac>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d219      	bcs.n	80007d8 <writedata_tobuffer+0x9c>
		{
			memcpy(&buffer[writePtr], data, firstPart);
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <writedata_tobuffer+0xa8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a10      	ldr	r2, [pc, #64]	@ (80007ec <writedata_tobuffer+0xb0>)
 80007aa:	4413      	add	r3, r2
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 fc7e 	bl	800a0b2 <memcpy>
			/* Back part of the stream */
			memcpy(&buffer[0], &data[firstPart], len - firstPart);
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	18d1      	adds	r1, r2, r3
 80007bc:	78fa      	ldrb	r2, [r7, #3]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <writedata_tobuffer+0xb0>)
 80007c6:	f009 fc74 	bl	800a0b2 <memcpy>
			writePtr = len - firstPart;
 80007ca:	78fa      	ldrb	r2, [r7, #3]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <writedata_tobuffer+0xa8>)
 80007d2:	6013      	str	r3, [r2, #0]
			return 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e000      	b.n	80007da <writedata_tobuffer+0x9e>
		}
		else
			/*Not increase datacounter*/
			return 0;
 80007d8:	2300      	movs	r3, #0
	}
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	24000088 	.word	0x24000088
 80007e8:	2400008c 	.word	0x2400008c
 80007ec:	24000090 	.word	0x24000090

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080c:	4a27      	ldr	r2, [pc, #156]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000826:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082a:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000836:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000854:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000872:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_GPIO_Init+0xc0>)
 8000884:	f003 fe30 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_GPIO_Init+0xc0>)
 80008a0:	f003 fc72 	bl	8004188 <HAL_GPIO_Init>

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020400 	.word	0x58020400

080008b4 <__io_putchar>:
 * @brief function to use printf with uart
 * @param ch : character to transmit
 * @retval ch
 */
int __io_putchar(int ch)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80008bc:	1d39      	adds	r1, r7, #4
 80008be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c2:	2201      	movs	r2, #1
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <__io_putchar+0x20>)
 80008c6:	f006 fc71 	bl	80071ac <HAL_UART_Transmit>
	return ch;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240004a8 	.word	0x240004a8

080008d8 <decode>:
 * @param None
 * @retval None
 */

LedStatus decode()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
	getdata_frombuffer((uint8_t*) data, MESSAGE_LENGTH);
 80008de:	2102      	movs	r1, #2
 80008e0:	480f      	ldr	r0, [pc, #60]	@ (8000920 <decode+0x48>)
 80008e2:	f7ff fecd 	bl	8000680 <getdata_frombuffer>

	/* Allocate space for the decoded message. */
	LedStatus message = LedStatus_init_default;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]

	/* Create a stream that reads from the buffer. */
	pb_istream_t stream = pb_istream_from_buffer((uint8_t*) data,
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2202      	movs	r2, #2
 80008ee:	490c      	ldr	r1, [pc, #48]	@ (8000920 <decode+0x48>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fd29 	bl	8001348 <pb_istream_from_buffer>
	MESSAGE_LENGTH);

	LedStat = pb_decode(&stream, LedStatus_fields, &message);
 80008f6:	f107 0214 	add.w	r2, r7, #20
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4909      	ldr	r1, [pc, #36]	@ (8000924 <decode+0x4c>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fe5c 	bl	80025bc <pb_decode>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <decode+0x50>)
 800090a:	701a      	strb	r2, [r3, #0]

	/*1 data take out from buffer*/
	DataCounter--;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <decode+0x54>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <decode+0x54>)
 8000914:	6013      	str	r3, [r2, #0]
	return message;
 8000916:	697b      	ldr	r3, [r7, #20]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000478 	.word	0x24000478
 8000924:	0800ace4 	.word	0x0800ace4
 8000928:	24000499 	.word	0x24000499
 800092c:	2400049c 	.word	0x2400049c

08000930 <execute>:
 * @brief function for execute protocolbuffer message, Led on/off
 * @param None
 * @retval None
 */
void execute(LedStatus message)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if (LedStat != true)
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <execute+0x44>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d111      	bne.n	800096a <execute+0x3a>
	{
		return;
	}
	if (message.status == LED_ON)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d105      	bne.n	8000958 <execute+0x28>
	{
		//printf("led=1\r\n"); /*for debug*/
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <execute+0x48>)
 8000952:	f003 fdc9 	bl	80044e8 <HAL_GPIO_WritePin>
 8000956:	e009      	b.n	800096c <execute+0x3c>
	}
	else if (message.status == LED_OFF)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d106      	bne.n	800096c <execute+0x3c>
	{
		//printf("led=0\r\n"); /*for debug*/
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <execute+0x48>)
 8000964:	f003 fdc0 	bl	80044e8 <HAL_GPIO_WritePin>
 8000968:	e000      	b.n	800096c <execute+0x3c>
		return;
 800096a:	bf00      	nop
	}
	/*invalid messages are ignored.*/
	/*invalid messages can not be here*/
}
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	24000499 	.word	0x24000499
 8000978:	58020400 	.word	0x58020400

0800097c <HAL_UART_RxCpltCallback>:
 * After reading the relevant data, it stores the processed information into the circular buffer.
 * @param UartSign: counts the relevant data
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if (huart->Instance != USART3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a36      	ldr	r2, [pc, #216]	@ (8000a64 <HAL_UART_RxCpltCallback+0xe8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d165      	bne.n	8000a5a <HAL_UART_RxCpltCallback+0xde>
	{
		return;
	}

	/*startbyte*/
	if (ch == 0xFF)
 800098e:	4b36      	ldr	r3, [pc, #216]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2bff      	cmp	r3, #255	@ 0xff
 8000996:	d103      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x24>
	{
		UartSign = 1;
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e056      	b.n	8000a4e <HAL_UART_RxCpltCallback+0xd2>
	}
	else if (UartSign == 1 && ch == MESSAGE_ID)
 80009a0:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d111      	bne.n	80009ce <HAL_UART_RxCpltCallback+0x52>
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d10c      	bne.n	80009ce <HAL_UART_RxCpltCallback+0x52>
	{
		data[UartSign - 1] = ch;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	3b01      	subs	r3, #1
 80009bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	b2d1      	uxtb	r1, r2
 80009c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000a70 <HAL_UART_RxCpltCallback+0xf4>)
 80009c4:	54d1      	strb	r1, [r2, r3]
		UartSign = 2;
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e03f      	b.n	8000a4e <HAL_UART_RxCpltCallback+0xd2>
	}
	else if (UartSign > 1)
 80009ce:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d93a      	bls.n	8000a4e <HAL_UART_RxCpltCallback+0xd2>
	{
		if (UartSign != MESSAGE_LENGTH)
 80009d8:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d010      	beq.n	8000a04 <HAL_UART_RxCpltCallback+0x88>
		{
			data[UartSign - 1] = ch;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a70 <HAL_UART_RxCpltCallback+0xf4>)
 80009f2:	54d1      	strb	r1, [r2, r3]
			UartSign++;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e024      	b.n	8000a4e <HAL_UART_RxCpltCallback+0xd2>
		}
		else
		{
			data[UartSign - 1] = ch;
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 8000a0e:	7812      	ldrb	r2, [r2, #0]
 8000a10:	b2d1      	uxtb	r1, r2
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_RxCpltCallback+0xf4>)
 8000a14:	54d1      	strb	r1, [r2, r3]
			UartSign = 0;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_RxCpltCallback+0xf0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
			/*Until space is freed up for data*/
			while (!(writedata_tobuffer((uint8_t*) data, MESSAGE_LENGTH)))
 8000a1c:	e008      	b.n	8000a30 <HAL_UART_RxCpltCallback+0xb4>
			{
				/*if the buffer is full with unprocessed data, process*/
				execute(decode());
 8000a1e:	f7ff ff5b 	bl	80008d8 <decode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff83 	bl	8000930 <execute>
				printf("forcolt decode\r\n");
 8000a2a:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <HAL_UART_RxCpltCallback+0xf8>)
 8000a2c:	f009 f9e6 	bl	8009dfc <puts>
			while (!(writedata_tobuffer((uint8_t*) data, MESSAGE_LENGTH)))
 8000a30:	2102      	movs	r1, #2
 8000a32:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <HAL_UART_RxCpltCallback+0xf4>)
 8000a34:	f7ff fe82 	bl	800073c <writedata_tobuffer>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f083 0301 	eor.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1ec      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0xa2>
			}
			/*1 data arrived*/
			DataCounter++;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_UART_RxCpltCallback+0xfc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <HAL_UART_RxCpltCallback+0xfc>)
 8000a4c:	6013      	str	r3, [r2, #0]
		}
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4905      	ldr	r1, [pc, #20]	@ (8000a68 <HAL_UART_RxCpltCallback+0xec>)
 8000a52:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <HAL_UART_RxCpltCallback+0x100>)
 8000a54:	f006 fc38 	bl	80072c8 <HAL_UART_Receive_IT>
 8000a58:	e000      	b.n	8000a5c <HAL_UART_RxCpltCallback+0xe0>
		return;
 8000a5a:	bf00      	nop

}
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004800 	.word	0x40004800
 8000a68:	24000498 	.word	0x24000498
 8000a6c:	240004a0 	.word	0x240004a0
 8000a70:	24000478 	.word	0x24000478
 8000a74:	0800aaf8 	.word	0x0800aaf8
 8000a78:	2400049c 	.word	0x2400049c
 8000a7c:	240004a8 	.word	0x240004a8

08000a80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000a84:	f000 f8ae 	bl	8000be4 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a88:	f002 fbdc 	bl	8003244 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a8c:	f000 f836 	bl	8000afc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a90:	f7ff feae 	bl	80007f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000a94:	f002 faec 	bl	8003070 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/*test the Led1 peripheral*/
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4812      	ldr	r0, [pc, #72]	@ (8000ae8 <main+0x68>)
 8000a9e:	f003 fd23 	bl	80044e8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa6:	f002 fc5f 	bl	8003368 <HAL_Delay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <main+0x68>)
 8000ab0:	f003 fd1a 	bl	80044e8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab8:	f002 fc56 	bl	8003368 <HAL_Delay>

	HAL_UART_Receive_IT(&huart3, (uint8_t*) &ch, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	490b      	ldr	r1, [pc, #44]	@ (8000aec <main+0x6c>)
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <main+0x70>)
 8000ac2:	f006 fc01 	bl	80072c8 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		printf("DataCounter: %ld\r\n", DataCounter); /*for testing*/
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <main+0x74>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <main+0x78>)
 8000ace:	f009 f92d 	bl	8009d2c <iprintf>
		if (DataCounter > 0)
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <main+0x74>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f5      	beq.n	8000ac6 <main+0x46>
		{
			execute(decode());
 8000ada:	f7ff fefd 	bl	80008d8 <decode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff25 	bl	8000930 <execute>
		printf("DataCounter: %ld\r\n", DataCounter); /*for testing*/
 8000ae6:	e7ee      	b.n	8000ac6 <main+0x46>
 8000ae8:	58020400 	.word	0x58020400
 8000aec:	24000498 	.word	0x24000498
 8000af0:	240004a8 	.word	0x240004a8
 8000af4:	2400049c 	.word	0x2400049c
 8000af8:	0800ab08 	.word	0x0800ab08

08000afc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09c      	sub	sp, #112	@ 0x70
 8000b00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	224c      	movs	r2, #76	@ 0x4c
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f009 fa56 	bl	8009fbc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2220      	movs	r2, #32
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f009 fa50 	bl	8009fbc <memset>
	{ 0 };

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <SystemClock_Config+0xe0>)
 8000b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b26:	2004      	movs	r0, #4
 8000b28:	f003 fcf8 	bl	800451c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <SystemClock_Config+0xe4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a2a      	ldr	r2, [pc, #168]	@ (8000be0 <SystemClock_Config+0xe4>)
 8000b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <SystemClock_Config+0xe4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000b48:	bf00      	nop
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <SystemClock_Config+0xe4>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b56:	d1f8      	bne.n	8000b4a <SystemClock_Config+0x4e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b60:	2340      	movs	r3, #64	@ 0x40
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000b70:	2308      	movs	r3, #8
 8000b72:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b80:	230c      	movs	r3, #12
 8000b82:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fd1d 	bl	80045d0 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000b9c:	f000 f84e 	bl	8000c3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ba0:	233f      	movs	r3, #63	@ 0x3f
 8000ba2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 f935 	bl	8004e34 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xd8>
	{
		Error_Handler();
 8000bd0:	f000 f834 	bl	8000c3c <Error_Handler>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3770      	adds	r7, #112	@ 0x70
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	58024800 	.word	0x58024800

08000be4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000bf6:	f002 fceb 	bl	80035d0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c06:	231f      	movs	r3, #31
 8000c08:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000c0a:	2387      	movs	r3, #135	@ 0x87
 8000c0c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c12:	2300      	movs	r3, #0
 8000c14:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c26:	463b      	mov	r3, r7
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fd09 	bl	8003640 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c2e:	2004      	movs	r0, #4
 8000c30:	f002 fce6 	bl	8003600 <HAL_MPU_Enable>

}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b08f      	sub	sp, #60	@ 0x3c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	891a      	ldrh	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	8a1b      	ldrh	r3, [r3, #16]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d301      	bcc.n	8000c62 <load_descriptor_values+0x1a>
        return false;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e156      	b.n	8000f10 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	895b      	ldrh	r3, [r3, #10]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8000c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8000c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d05a      	beq.n	8000d3e <load_descriptor_values+0xf6>
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	f200 8094 	bhi.w	8000db6 <load_descriptor_values+0x16e>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <load_descriptor_values+0x50>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d01f      	beq.n	8000cd6 <load_descriptor_values+0x8e>
 8000c96:	e08e      	b.n	8000db6 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8000cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb0:	0e1b      	lsrs	r3, r3, #24
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc6:	0f1b      	lsrs	r3, r3, #28
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	825a      	strh	r2, [r3, #18]
            break;
 8000cd4:	e0b4      	b.n	8000e40 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	895b      	ldrh	r3, [r3, #10]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cec:	0c1b      	lsrs	r3, r3, #16
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	0f1b      	lsrs	r3, r3, #28
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d1a:	0f1b      	lsrs	r3, r3, #28
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	825a      	strh	r2, [r3, #18]
            break;
 8000d3c:	e080      	b.n	8000e40 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	895b      	ldrh	r3, [r3, #10]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	895b      	ldrh	r3, [r3, #10]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	895b      	ldrh	r3, [r3, #10]
 8000d70:	3303      	adds	r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8000d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	825a      	strh	r2, [r3, #18]
            break;
 8000db4:	e044      	b.n	8000e40 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	895b      	ldrh	r3, [r3, #10]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	895b      	ldrh	r3, [r3, #10]
 8000de8:	3303      	adds	r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	895b      	ldrh	r3, [r3, #10]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	825a      	strh	r2, [r3, #18]
            break;
 8000e3e:	bf00      	nop
        }
    }

    if (!iter->message)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d106      	bne.n	8000e56 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
 8000e54:	e041      	b.n	8000eda <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5c:	441a      	add	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000e62:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d008      	beq.n	8000e7c <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000e72:	425b      	negs	r3, r3
 8000e74:	441a      	add	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	621a      	str	r2, [r3, #32]
 8000e7a:	e01a      	b.n	8000eb2 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7d9b      	ldrb	r3, [r3, #22]
 8000e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d111      	bne.n	8000eac <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7d9b      	ldrb	r3, [r3, #22]
 8000e8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7d9b      	ldrb	r3, [r3, #22]
 8000e98:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000e9c:	2b80      	cmp	r3, #128	@ 0x80
 8000e9e:	d105      	bne.n	8000eac <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f103 0214 	add.w	r2, r3, #20
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	621a      	str	r2, [r3, #32]
 8000eaa:	e002      	b.n	8000eb2 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7d9b      	ldrb	r3, [r3, #22]
 8000eb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000eba:	2b80      	cmp	r3, #128	@ 0x80
 8000ebc:	d109      	bne.n	8000ed2 <load_descriptor_values+0x28a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	61da      	str	r2, [r3, #28]
 8000ed0:	e003      	b.n	8000eda <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699a      	ldr	r2, [r3, #24]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7d9b      	ldrb	r3, [r3, #22]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d005      	beq.n	8000ef2 <load_descriptor_values+0x2aa>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7d9b      	ldrb	r3, [r3, #22]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	2b09      	cmp	r3, #9
 8000ef0:	d10a      	bne.n	8000f08 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	89db      	ldrh	r3, [r3, #14]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f06:	e002      	b.n	8000f0e <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	373c      	adds	r7, #60	@ 0x3c
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	891b      	ldrh	r3, [r3, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	891a      	ldrh	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	8a1b      	ldrh	r3, [r3, #16]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d30c      	bcc.n	8000f58 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000f56:	e03b      	b.n	8000fd0 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	895b      	ldrh	r3, [r3, #10]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2201      	movs	r2, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	895a      	ldrh	r2, [r3, #10]
 8000f82:	893b      	ldrh	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	899b      	ldrh	r3, [r3, #12]
 8000f90:	7afa      	ldrb	r2, [r7, #11]
 8000f92:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	bf0c      	ite	eq
 8000f9a:	2201      	moveq	r2, #1
 8000f9c:	2200      	movne	r2, #0
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	89da      	ldrh	r2, [r3, #14]
 8000fac:	7afb      	ldrb	r3, [r7, #11]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d004      	beq.n	8000fc0 <advance_iterator+0xa4>
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d101      	bne.n	8000fc4 <advance_iterator+0xa8>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <advance_iterator+0xaa>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	81da      	strh	r2, [r3, #14]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8000fe8:	2228      	movs	r2, #40	@ 0x28
 8000fea:	2100      	movs	r1, #0
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f008 ffe5 	bl	8009fbc <memset>

    iter->descriptor = desc;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f7ff fe22 	bl	8000c48 <load_descriptor_values>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001030:	2b80      	cmp	r3, #128	@ 0x80
 8001032:	d109      	bne.n	8001048 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3304      	adds	r3, #4
 8001038:	461a      	mov	r2, r3
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffcd 	bl	8000fdc <pb_field_iter_begin>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	e008      	b.n	800105a <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffc3 	bl	8000fdc <pb_field_iter_begin>
 8001056:	4603      	mov	r3, r0
 8001058:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f103 020c 	add.w	r2, r3, #12
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	621a      	str	r2, [r3, #32]
    return status;
 8001064:	7dfb      	ldrb	r3, [r7, #23]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff50 	bl	8000f1c <advance_iterator>
    (void)load_descriptor_values(iter);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fde3 	bl	8000c48 <load_descriptor_values>
    return iter->index != 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	891b      	ldrh	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8a1b      	ldrh	r3, [r3, #16]
 80010a6:	461a      	mov	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e044      	b.n	800113c <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	8a9b      	ldrh	r3, [r3, #20]
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <pb_field_iter_find+0x2c>
    {
        return false;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e03b      	b.n	800113c <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	891b      	ldrh	r3, [r3, #8]
 80010c8:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	8a1b      	ldrh	r3, [r3, #16]
 80010ce:	461a      	mov	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d204      	bcs.n	80010e0 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	8a1a      	ldrh	r2, [r3, #16]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff1b 	bl	8000f1c <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	895b      	ldrh	r3, [r3, #10]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	089a      	lsrs	r2, r3, #2
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4053      	eors	r3, r2
 8001100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001104:	2b00      	cmp	r3, #0
 8001106:	d110      	bne.n	800112a <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fd9d 	bl	8000c48 <load_descriptor_values>

                if (iter->tag == tag &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8a1b      	ldrh	r3, [r3, #16]
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	4293      	cmp	r3, r2
 8001118:	d107      	bne.n	800112a <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7d9b      	ldrb	r3, [r3, #22]
 800111e:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d001      	beq.n	800112a <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8001126:	2301      	movs	r3, #1
 8001128:	e008      	b.n	800113c <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	891b      	ldrh	r3, [r3, #8]
 800112e:	89fa      	ldrh	r2, [r7, #14]
 8001130:	429a      	cmp	r2, r3
 8001132:	d1d5      	bne.n	80010e0 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fd87 	bl	8000c48 <load_descriptor_values>
        return false;
 800113a:	2300      	movs	r3, #0
    }
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7d9b      	ldrb	r3, [r3, #22]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d101      	bne.n	800115c <pb_field_iter_find_extension+0x18>
    {
        return true;
 8001158:	2301      	movs	r3, #1
 800115a:	e022      	b.n	80011a2 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	891b      	ldrh	r3, [r3, #8]
 8001160:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff feda 	bl	8000f1c <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	895b      	ldrh	r3, [r3, #10]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d104      	bne.n	8001190 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd5e 	bl	8000c48 <load_descriptor_values>
 800118c:	4603      	mov	r3, r0
 800118e:	e008      	b.n	80011a2 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	891b      	ldrh	r3, [r3, #8]
 8001194:	89fa      	ldrh	r2, [r7, #14]
 8001196:	429a      	cmp	r2, r3
 8001198:	d1e3      	bne.n	8001162 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fd54 	bl	8000c48 <load_descriptor_values>
        return false;
 80011a0:	2300      	movs	r3, #0
    }
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	441a      	add	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	68b8      	ldr	r0, [r7, #8]
 80011d4:	f008 ff6d 	bl	800a0b2 <memcpy>
    }
    
    return true;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
    if (count == 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <pb_read+0x16>
        return true;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e05f      	b.n	80012ba <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d123      	bne.n	8001248 <pb_read+0x64>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <pb_read+0xe0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d01e      	beq.n	8001248 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800120a:	e011      	b.n	8001230 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2210      	movs	r2, #16
 8001212:	4619      	mov	r1, r3
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff ffe5 	bl	80011e4 <pb_read>
 800121a:	4603      	mov	r3, r0
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <pb_read+0x46>
				return false;
 8001226:	2300      	movs	r3, #0
 8001228:	e047      	b.n	80012ba <pb_read+0xd6>
			
			count -= 16;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3b10      	subs	r3, #16
 800122e:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d8ea      	bhi.n	800120c <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4619      	mov	r1, r3
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ffd0 	bl	80011e4 <pb_read>
 8001244:	4603      	mov	r3, r0
 8001246:	e038      	b.n	80012ba <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90b      	bls.n	800126a <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <pb_read+0x7c>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	e000      	b.n	8001262 <pb_read+0x7e>
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <pb_read+0xe4>)
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	60d3      	str	r3, [r2, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	e027      	b.n	80012ba <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	4798      	blx	r3
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <pb_read+0xac>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	e000      	b.n	8001292 <pb_read+0xae>
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <pb_read+0xe8>)
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	60d3      	str	r3, [r2, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	e00f      	b.n	80012ba <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d903      	bls.n	80012ac <pb_read+0xc8>
        stream->bytes_left = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	e005      	b.n	80012b8 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	1ad2      	subs	r2, r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	609a      	str	r2, [r3, #8]

    return true;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	080011ab 	.word	0x080011ab
 80012c8:	0800ab1c 	.word	0x0800ab1c
 80012cc:	0800ab2c 	.word	0x0800ab2c

080012d0 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10b      	bne.n	80012fa <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <pb_readbyte+0x20>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	e000      	b.n	80012f2 <pb_readbyte+0x22>
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <pb_readbyte+0x70>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	60d3      	str	r3, [r2, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	e01d      	b.n	8001336 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
 8001306:	4603      	mov	r3, r0
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <pb_readbyte+0x50>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	e000      	b.n	8001322 <pb_readbyte+0x52>
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <pb_readbyte+0x74>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	60d3      	str	r3, [r2, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	e005      	b.n	8001336 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
    
    return true;    
 8001334:	2301      	movs	r3, #1
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0800ab1c 	.word	0x0800ab1c
 8001344:	0800ab2c 	.word	0x0800ab2c

08001348 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <pb_istream_from_buffer+0x38>)
 8001356:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	461c      	mov	r4, r3
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bc90      	pop	{r4, r7}
 800137e:	4770      	bx	lr
 8001380:	080011ab 	.word	0x080011ab

08001384 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8001390:	f107 0315 	add.w	r3, r7, #21
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff ff9a 	bl	80012d0 <pb_readbyte>
 800139c:	4603      	mov	r3, r0
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80013bc:	2300      	movs	r3, #0
 80013be:	e084      	b.n	80014ca <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 80013c0:	7d7b      	ldrb	r3, [r7, #21]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db02      	blt.n	80013ce <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80013c8:	7d7b      	ldrb	r3, [r7, #21]
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e079      	b.n	80014c2 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80013ce:	2307      	movs	r3, #7
 80013d0:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80013d2:	7d7b      	ldrb	r3, [r7, #21]
 80013d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013d8:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80013da:	f107 0315 	add.w	r3, r7, #21
 80013de:	4619      	mov	r1, r3
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff ff75 	bl	80012d0 <pb_readbyte>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <pb_decode_varint32_eof+0x72>
                return false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e069      	b.n	80014ca <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b1f      	cmp	r3, #31
 80013fa:	d92f      	bls.n	800145c <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8001400:	d801      	bhi.n	8001406 <pb_decode_varint32_eof+0x82>
 8001402:	23ff      	movs	r3, #255	@ 0xff
 8001404:	e000      	b.n	8001408 <pb_decode_varint32_eof+0x84>
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800140a:	7d7b      	ldrb	r3, [r7, #21]
 800140c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001414:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001416:	2b00      	cmp	r3, #0
 8001418:	da05      	bge.n	8001426 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 800141a:	7d7b      	ldrb	r3, [r7, #21]
 800141c:	7dfa      	ldrb	r2, [r7, #23]
 800141e:	429a      	cmp	r2, r3
 8001420:	d101      	bne.n	8001426 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <pb_decode_varint32_eof+0xa4>
 8001426:	2300      	movs	r3, #0
 8001428:	75bb      	strb	r3, [r7, #22]
 800142a:	7dbb      	ldrb	r3, [r7, #22]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b3f      	cmp	r3, #63	@ 0x3f
 8001436:	d805      	bhi.n	8001444 <pb_decode_varint32_eof+0xc0>
 8001438:	7dbb      	ldrb	r3, [r7, #22]
 800143a:	f083 0301 	eor.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d037      	beq.n	80014b4 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <pb_decode_varint32_eof+0xce>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	e000      	b.n	8001454 <pb_decode_varint32_eof+0xd0>
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <pb_decode_varint32_eof+0x150>)
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	60d3      	str	r3, [r2, #12]
 8001458:	2300      	movs	r3, #0
 800145a:	e036      	b.n	80014ca <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b1c      	cmp	r3, #28
 8001460:	d11f      	bne.n	80014a2 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8001462:	7d7b      	ldrb	r3, [r7, #21]
 8001464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001468:	2b00      	cmp	r3, #0
 800146a:	d010      	beq.n	800148e <pb_decode_varint32_eof+0x10a>
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8001472:	2b78      	cmp	r3, #120	@ 0x78
 8001474:	d00b      	beq.n	800148e <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <pb_decode_varint32_eof+0x100>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	e000      	b.n	8001486 <pb_decode_varint32_eof+0x102>
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <pb_decode_varint32_eof+0x150>)
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	60d3      	str	r3, [r2, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	e01d      	b.n	80014ca <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	f003 020f 	and.w	r2, r3, #15
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	4313      	orrs	r3, r2
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	e008      	b.n	80014b4 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80014a2:	7d7b      	ldrb	r3, [r7, #21]
 80014a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3307      	adds	r3, #7
 80014b8:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80014ba:	7d7b      	ldrb	r3, [r7, #21]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db8b      	blt.n	80013da <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	601a      	str	r2, [r3, #0]
   return true;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800ab38 	.word	0x0800ab38

080014d8 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80014e2:	2200      	movs	r2, #0
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff4c 	bl	8001384 <pb_decode_varint32_eof>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 80014f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014fc:	b08a      	sub	sp, #40	@ 0x28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8001514:	f107 0317 	add.w	r3, r7, #23
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fed8 	bl	80012d0 <pb_readbyte>
 8001520:	4603      	mov	r3, r0
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <pb_decode_varint+0x38>
            return false;
 800152c:	2300      	movs	r3, #0
 800152e:	e041      	b.n	80015b4 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	2b3e      	cmp	r3, #62	@ 0x3e
 8001534:	d910      	bls.n	8001558 <pb_decode_varint+0x60>
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <pb_decode_varint+0x56>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	e000      	b.n	8001550 <pb_decode_varint+0x58>
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <pb_decode_varint+0xc8>)
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	60d3      	str	r3, [r2, #12]
 8001554:	2300      	movs	r3, #0
 8001556:	e02d      	b.n	80015b4 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2200      	movs	r2, #0
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8001568:	f04f 0900 	mov.w	r9, #0
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f1a3 0120 	sub.w	r1, r3, #32
 8001572:	f1c3 0220 	rsb	r2, r3, #32
 8001576:	fa09 f503 	lsl.w	r5, r9, r3
 800157a:	fa08 f101 	lsl.w	r1, r8, r1
 800157e:	430d      	orrs	r5, r1
 8001580:	fa28 f202 	lsr.w	r2, r8, r2
 8001584:	4315      	orrs	r5, r2
 8001586:	fa08 f403 	lsl.w	r4, r8, r3
 800158a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158e:	ea42 0a04 	orr.w	sl, r2, r4
 8001592:	ea43 0b05 	orr.w	fp, r3, r5
 8001596:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3307      	adds	r3, #7
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dbb5      	blt.n	8001514 <pb_decode_varint+0x1c>
    
    *dest = result;
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ae:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3728      	adds	r7, #40	@ 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015be:	bf00      	nop
 80015c0:	0800ab38 	.word	0x0800ab38

080015c4 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80015cc:	f107 030f 	add.w	r3, r7, #15
 80015d0:	2201      	movs	r2, #1
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe05 	bl	80011e4 <pb_read>
 80015da:	4603      	mov	r3, r0
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <pb_skip_varint+0x26>
            return false;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e004      	b.n	80015f4 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dbec      	blt.n	80015cc <pb_skip_varint+0x8>
    return true;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff64 	bl	80014d8 <pb_decode_varint32>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <pb_skip_string+0x24>
        return false;
 800161c:	2300      	movs	r3, #0
 800161e:	e006      	b.n	800162e <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fddc 	bl	80011e4 <pb_read>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fe90 	bl	8001384 <pb_decode_varint32_eof>
 8001664:	4603      	mov	r3, r0
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <pb_decode_tag+0x3e>
    {
        return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e00b      	b.n	800168c <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	701a      	strb	r2, [r3, #0]
    return true;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d826      	bhi.n	80016f4 <pb_skip_field+0x60>
 80016a6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <pb_skip_field+0x18>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016c5 	.word	0x080016c5
 80016b0:	080016cf 	.word	0x080016cf
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	080016f5 	.word	0x080016f5
 80016bc:	080016f5 	.word	0x080016f5
 80016c0:	080016e7 	.word	0x080016e7
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff7d 	bl	80015c4 <pb_skip_varint>
 80016ca:	4603      	mov	r3, r0
 80016cc:	e01d      	b.n	800170a <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80016ce:	2208      	movs	r2, #8
 80016d0:	2100      	movs	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fd86 	bl	80011e4 <pb_read>
 80016d8:	4603      	mov	r3, r0
 80016da:	e016      	b.n	800170a <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff8d 	bl	80015fc <pb_skip_string>
 80016e2:	4603      	mov	r3, r0
 80016e4:	e011      	b.n	800170a <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80016e6:	2204      	movs	r2, #4
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fd7a 	bl	80011e4 <pb_read>
 80016f0:	4603      	mov	r3, r0
 80016f2:	e00a      	b.n	800170a <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <pb_skip_field+0x6e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	e000      	b.n	8001704 <pb_skip_field+0x70>
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <pb_skip_field+0x80>)
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	60d3      	str	r3, [r2, #12]
 8001708:	2300      	movs	r3, #0
    }
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800ab48 	.word	0x0800ab48

08001718 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d03f      	beq.n	80017b4 <read_raw_value+0x9c>
 8001734:	2b05      	cmp	r3, #5
 8001736:	dc47      	bgt.n	80017c8 <read_raw_value+0xb0>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <read_raw_value+0x2a>
 800173c:	2b01      	cmp	r3, #1
 800173e:	d02f      	beq.n	80017a0 <read_raw_value+0x88>
 8001740:	e042      	b.n	80017c8 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	d20b      	bcs.n	8001774 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <read_raw_value+0x52>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	e000      	b.n	800176c <read_raw_value+0x54>
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <read_raw_value+0xd0>)
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	60d3      	str	r3, [r2, #12]
 8001770:	2300      	movs	r3, #0
 8001772:	e034      	b.n	80017de <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8001774:	2201      	movs	r2, #1
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7ff fd33 	bl	80011e4 <pb_read>
 800177e:	4603      	mov	r3, r0
 8001780:	f083 0301 	eor.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <read_raw_value+0x76>
                    return false;
 800178a:	2300      	movs	r3, #0
 800178c:	e027      	b.n	80017de <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	dbd5      	blt.n	8001748 <read_raw_value+0x30>
            return true;
 800179c:	2301      	movs	r3, #1
 800179e:	e01e      	b.n	80017de <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2208      	movs	r2, #8
 80017a4:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80017a6:	2208      	movs	r2, #8
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7ff fd1a 	bl	80011e4 <pb_read>
 80017b0:	4603      	mov	r3, r0
 80017b2:	e014      	b.n	80017de <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2204      	movs	r2, #4
 80017b8:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80017ba:	2204      	movs	r2, #4
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fd10 	bl	80011e4 <pb_read>
 80017c4:	4603      	mov	r3, r0
 80017c6:	e00a      	b.n	80017de <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <read_raw_value+0xbe>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	e000      	b.n	80017d8 <read_raw_value+0xc0>
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <read_raw_value+0xd4>)
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	60d3      	str	r3, [r2, #12]
 80017dc:	2300      	movs	r3, #0
    }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800ab38 	.word	0x0800ab38
 80017ec:	0800ab48 	.word	0x0800ab48

080017f0 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fe69 	bl	80014d8 <pb_decode_varint32>
 8001806:	4603      	mov	r3, r0
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <pb_make_string_substream+0x26>
        return false;
 8001812:	2300      	movs	r3, #0
 8001814:	e020      	b.n	8001858 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4614      	mov	r4, r2
 800181c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800181e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d20b      	bcs.n	8001844 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <pb_make_string_substream+0x4a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	e000      	b.n	800183c <pb_make_string_substream+0x4c>
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <pb_make_string_substream+0x70>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	60d3      	str	r3, [r2, #12]
 8001840:	2300      	movs	r3, #0
 8001842:	e009      	b.n	8001858 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad2      	subs	r2, r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
    return true;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	0800ab5c 	.word	0x0800ab5c

08001864 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00e      	beq.n	8001894 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	461a      	mov	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fcb0 	bl	80011e4 <pb_read>
 8001884:	4603      	mov	r3, r0
 8001886:	f083 0301 	eor.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <pb_close_string_substream+0x30>
            return false;
 8001890:	2300      	movs	r3, #0
 8001892:	e008      	b.n	80018a6 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	460b      	mov	r3, r1
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7d9b      	ldrb	r3, [r3, #22]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	2b0b      	cmp	r3, #11
 80018c8:	f200 80d4 	bhi.w	8001a74 <decode_basic_field+0x1c4>
 80018cc:	a201      	add	r2, pc, #4	@ (adr r2, 80018d4 <decode_basic_field+0x24>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	08001905 	.word	0x08001905
 80018d8:	08001935 	.word	0x08001935
 80018dc:	08001935 	.word	0x08001935
 80018e0:	08001935 	.word	0x08001935
 80018e4:	08001965 	.word	0x08001965
 80018e8:	08001999 	.word	0x08001999
 80018ec:	080019cd 	.word	0x080019cd
 80018f0:	080019f7 	.word	0x080019f7
 80018f4:	08001a21 	.word	0x08001a21
 80018f8:	08001a21 	.word	0x08001a21
 80018fc:	08001a75 	.word	0x08001a75
 8001900:	08001a4b 	.word	0x08001a4b
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <decode_basic_field+0x78>
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	2bff      	cmp	r3, #255	@ 0xff
 800190e:	d00b      	beq.n	8001928 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <decode_basic_field+0x6e>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	e000      	b.n	8001920 <decode_basic_field+0x70>
 800191e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	60d3      	str	r3, [r2, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	e0b0      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fef6 	bl	800271c <pb_dec_bool>
 8001930:	4603      	mov	r3, r0
 8001932:	e0aa      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <decode_basic_field+0xa8>
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	2bff      	cmp	r3, #255	@ 0xff
 800193e:	d00b      	beq.n	8001958 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <decode_basic_field+0x9e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	e000      	b.n	8001950 <decode_basic_field+0xa0>
 800194e:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	60d3      	str	r3, [r2, #12]
 8001954:	2300      	movs	r3, #0
 8001956:	e098      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 feee 	bl	800273c <pb_dec_varint>
 8001960:	4603      	mov	r3, r0
 8001962:	e092      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d00e      	beq.n	8001988 <decode_basic_field+0xd8>
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d00b      	beq.n	8001988 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <decode_basic_field+0xce>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	e000      	b.n	8001980 <decode_basic_field+0xd0>
 800197e:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	60d3      	str	r3, [r2, #12]
 8001984:	2300      	movs	r3, #0
 8001986:	e080      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4619      	mov	r1, r3
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fe8a 	bl	80026a8 <pb_decode_fixed32>
 8001994:	4603      	mov	r3, r0
 8001996:	e078      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d00e      	beq.n	80019bc <decode_basic_field+0x10c>
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	2bff      	cmp	r3, #255	@ 0xff
 80019a2:	d00b      	beq.n	80019bc <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <decode_basic_field+0x102>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	e000      	b.n	80019b4 <decode_basic_field+0x104>
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <decode_basic_field+0x1e4>)
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	60d3      	str	r3, [r2, #12]
 80019b8:	2300      	movs	r3, #0
 80019ba:	e066      	b.n	8001a8a <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	4619      	mov	r1, r3
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fe8c 	bl	80026e0 <pb_decode_fixed64>
 80019c8:	4603      	mov	r3, r0
 80019ca:	e05e      	b.n	8001a8a <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d00b      	beq.n	80019ea <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <decode_basic_field+0x130>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	e000      	b.n	80019e2 <decode_basic_field+0x132>
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <decode_basic_field+0x1e4>)
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	60d3      	str	r3, [r2, #12]
 80019e6:	2300      	movs	r3, #0
 80019e8:	e04f      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 ffd1 	bl	8002994 <pb_dec_bytes>
 80019f2:	4603      	mov	r3, r0
 80019f4:	e049      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d00b      	beq.n	8001a14 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <decode_basic_field+0x15a>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	e000      	b.n	8001a0c <decode_basic_field+0x15c>
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	60d3      	str	r3, [r2, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	e03a      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f001 f830 	bl	8002a7c <pb_dec_string>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	e034      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8001a20:	7afb      	ldrb	r3, [r7, #11]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d00b      	beq.n	8001a3e <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <decode_basic_field+0x184>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	e000      	b.n	8001a36 <decode_basic_field+0x186>
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	60d3      	str	r3, [r2, #12]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e025      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f001 f897 	bl	8002b74 <pb_dec_submessage>
 8001a46:	4603      	mov	r3, r0
 8001a48:	e01f      	b.n	8001a8a <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d00b      	beq.n	8001a68 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <decode_basic_field+0x1ae>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	e000      	b.n	8001a60 <decode_basic_field+0x1b0>
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <decode_basic_field+0x1e4>)
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	60d3      	str	r3, [r2, #12]
 8001a64:	2300      	movs	r3, #0
 8001a66:	e010      	b.n	8001a8a <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f001 f90c 	bl	8002c88 <pb_dec_fixed_length_bytes>
 8001a70:	4603      	mov	r3, r0
 8001a72:	e00a      	b.n	8001a8a <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <decode_basic_field+0x1d2>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	e000      	b.n	8001a84 <decode_basic_field+0x1d4>
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <decode_basic_field+0x1e8>)
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	60d3      	str	r3, [r2, #12]
 8001a88:	2300      	movs	r3, #0
    }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0800ab74 	.word	0x0800ab74
 8001a98:	0800ab84 	.word	0x0800ab84

08001a9c <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	@ 0x58
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7d9b      	ldrb	r3, [r3, #22]
 8001aae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ab2:	2b30      	cmp	r3, #48	@ 0x30
 8001ab4:	f000 80c2 	beq.w	8001c3c <decode_static_field+0x1a0>
 8001ab8:	2b30      	cmp	r3, #48	@ 0x30
 8001aba:	f200 811a 	bhi.w	8001cf2 <decode_static_field+0x256>
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d01f      	beq.n	8001b02 <decode_static_field+0x66>
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	f200 8115 	bhi.w	8001cf2 <decode_static_field+0x256>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <decode_static_field+0x36>
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d008      	beq.n	8001ae2 <decode_static_field+0x46>
 8001ad0:	e10f      	b.n	8001cf2 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fee9 	bl	80018b0 <decode_basic_field>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	e112      	b.n	8001d08 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4619      	mov	r1, r3
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fed9 	bl	80018b0 <decode_basic_field>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e102      	b.n	8001d08 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d16c      	bne.n	8001be2 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7d9b      	ldrb	r3, [r3, #22]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d866      	bhi.n	8001be2 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	8a52      	ldrh	r2, [r2, #18]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b2c:	8812      	ldrh	r2, [r2, #0]
 8001b2e:	fb01 f202 	mul.w	r2, r1, r2
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001b38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fe56 	bl	80017f0 <pb_make_string_substream>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01f      	beq.n	8001b90 <decode_static_field+0xf4>
                    return false;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e0d9      	b.n	8001d08 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8001b54:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	21ff      	movs	r1, #255	@ 0xff
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fea7 	bl	80018b0 <decode_basic_field>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <decode_static_field+0xda>
                    {
                        status = false;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8001b74:	e015      	b.n	8001ba2 <decode_static_field+0x106>
                    }
                    (*size)++;
 8001b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b80:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	8a52      	ldrh	r2, [r2, #18]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <decode_static_field+0x106>
 8001b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8a9b      	ldrh	r3, [r3, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3d8      	bcc.n	8001b54 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <decode_static_field+0x11a>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	e000      	b.n	8001bb8 <decode_static_field+0x11c>
 8001bb6:	4b56      	ldr	r3, [pc, #344]	@ (8001d10 <decode_static_field+0x274>)
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	60d3      	str	r3, [r2, #12]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e0a3      	b.n	8001d08 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8001bc0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fe4c 	bl	8001864 <pb_close_string_substream>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <decode_static_field+0x140>
                    return false;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e095      	b.n	8001d08 <decode_static_field+0x26c>

                return status;
 8001bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001be0:	e092      	b.n	8001d08 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	8a52      	ldrh	r2, [r2, #18]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	fb01 f202 	mul.w	r2, r1, r2
 8001bfa:	441a      	add	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8001c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	b291      	uxth	r1, r2
 8001c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c0a:	8011      	strh	r1, [r2, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	8a92      	ldrh	r2, [r2, #20]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d30b      	bcc.n	8001c2c <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <decode_static_field+0x186>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	e000      	b.n	8001c24 <decode_static_field+0x188>
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <decode_static_field+0x274>)
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	60d3      	str	r3, [r2, #12]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e06d      	b.n	8001d08 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fe3c 	bl	80018b0 <decode_basic_field>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	e065      	b.n	8001d08 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7d9b      	ldrb	r3, [r3, #22]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d005      	beq.n	8001c54 <decode_static_field+0x1b8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7d9b      	ldrb	r3, [r3, #22]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	d141      	bne.n	8001cd8 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d03a      	beq.n	8001cd8 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69d8      	ldr	r0, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8a5b      	ldrh	r3, [r3, #18]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	f008 f9a5 	bl	8009fbc <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d022      	beq.n	8001cd8 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f99c 	bl	8000fdc <pb_field_iter_begin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d016      	beq.n	8001cd8 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fa4d 	bl	800214e <pb_message_set_to_defaults>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <decode_static_field+0x232>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	e000      	b.n	8001cd0 <decode_static_field+0x234>
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <decode_static_field+0x278>)
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	60d3      	str	r3, [r2, #12]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e017      	b.n	8001d08 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	8a12      	ldrh	r2, [r2, #16]
 8001ce0:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff fde1 	bl	80018b0 <decode_basic_field>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	e00a      	b.n	8001d08 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <decode_static_field+0x264>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	e000      	b.n	8001d02 <decode_static_field+0x266>
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <decode_static_field+0x27c>)
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	60d3      	str	r3, [r2, #12]
 8001d06:	2300      	movs	r3, #0
    }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3758      	adds	r7, #88	@ 0x58
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	0800ab98 	.word	0x0800ab98
 8001d14:	0800aba8 	.word	0x0800aba8
 8001d18:	0800ab84 	.word	0x0800ab84

08001d1c <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	460b      	mov	r3, r1
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <decode_pointer_field+0x1c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	e000      	b.n	8001d3a <decode_pointer_field+0x1e>
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <decode_pointer_field+0x30>)
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	60d3      	str	r3, [r2, #12]
 8001d3e:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	0800abc0 	.word	0x0800abc0

08001d50 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b097      	sub	sp, #92	@ 0x5c
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	61f8      	str	r0, [r7, #28]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	617a      	str	r2, [r7, #20]
 8001d5c:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001d68:	7efb      	ldrb	r3, [r7, #27]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	69f8      	ldr	r0, [r7, #28]
 8001d6e:	f7ff fc91 	bl	8001694 <pb_skip_field>
 8001d72:	4603      	mov	r3, r0
 8001d74:	e070      	b.n	8001e58 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001d76:	7efb      	ldrb	r3, [r7, #27]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d145      	bne.n	8001e08 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001d7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d80:	4619      	mov	r1, r3
 8001d82:	69f8      	ldr	r0, [r7, #28]
 8001d84:	f7ff fd34 	bl	80017f0 <pb_make_string_substream>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <decode_callback_field+0x48>
            return false;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e05f      	b.n	8001e58 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d9a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	2100      	movs	r1, #0
 8001daa:	4798      	blx	r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <decode_callback_field+0x76>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	e005      	b.n	8001dd2 <decode_callback_field+0x82>
 8001dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <decode_callback_field+0x80>
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dce:	e000      	b.n	8001dd2 <decode_callback_field+0x82>
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <decode_callback_field+0x110>)
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	60d3      	str	r3, [r2, #12]
                return false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e03e      	b.n	8001e58 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <decode_callback_field+0x98>
 8001de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8d7      	bhi.n	8001d98 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001de8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dec:	4619      	mov	r1, r3
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f7ff fd38 	bl	8001864 <pb_close_string_substream>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <decode_callback_field+0xb4>
            return false;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e029      	b.n	8001e58 <decode_callback_field+0x108>

        return true;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e027      	b.n	8001e58 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001e08:	230a      	movs	r3, #10
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e10:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e14:	7ef9      	ldrb	r1, [r7, #27]
 8001e16:	69f8      	ldr	r0, [r7, #28]
 8001e18:	f7ff fc7e 	bl	8001718 <read_raw_value>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <decode_callback_field+0xdc>
            return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e015      	b.n	8001e58 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e2e:	463b      	mov	r3, r7
 8001e30:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fa87 	bl	8001348 <pb_istream_from_buffer>
 8001e3a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001e3e:	463b      	mov	r3, r7
 8001e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	2100      	movs	r1, #0
 8001e54:	4798      	blx	r3
 8001e56:	4603      	mov	r3, r0
    }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	375c      	adds	r7, #92	@ 0x5c
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	0800abd4 	.word	0x0800abd4

08001e64 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7d9b      	ldrb	r3, [r3, #22]
 8001e76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e7a:	2b80      	cmp	r3, #128	@ 0x80
 8001e7c:	d00e      	beq.n	8001e9c <decode_field+0x38>
 8001e7e:	2b80      	cmp	r3, #128	@ 0x80
 8001e80:	d81c      	bhi.n	8001ebc <decode_field+0x58>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <decode_field+0x28>
 8001e86:	2b40      	cmp	r3, #64	@ 0x40
 8001e88:	d010      	beq.n	8001eac <decode_field+0x48>
 8001e8a:	e017      	b.n	8001ebc <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4619      	mov	r1, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fe02 	bl	8001a9c <decode_static_field>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	e01a      	b.n	8001ed2 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff ff3a 	bl	8001d1c <decode_pointer_field>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	e012      	b.n	8001ed2 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ff4c 	bl	8001d50 <decode_callback_field>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	e00a      	b.n	8001ed2 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <decode_field+0x66>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	e000      	b.n	8001ecc <decode_field+0x68>
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <decode_field+0x78>)
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	60d3      	str	r3, [r2, #12]
 8001ed0:	2300      	movs	r3, #0
    }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800ab84 	.word	0x0800ab84

08001ee0 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	@ 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f88a 	bl	800100e <pb_field_iter_begin_extension>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <default_extension_decoder+0x34>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	e000      	b.n	8001f16 <default_extension_decoder+0x36>
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <default_extension_decoder+0x70>)
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	60d3      	str	r3, [r2, #12]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e014      	b.n	8001f48 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001f1e:	8c3b      	ldrh	r3, [r7, #32]
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d102      	bne.n	8001f2e <default_extension_decoder+0x4e>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <default_extension_decoder+0x52>
        return true;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00a      	b.n	8001f48 <default_extension_decoder+0x68>

    extension->found = true;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2201      	movs	r2, #1
 8001f36:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001f38:	f107 0210 	add.w	r2, r7, #16
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff ff8f 	bl	8001e64 <decode_field>
 8001f46:	4603      	mov	r3, r0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3738      	adds	r7, #56	@ 0x38
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	0800abe4 	.word	0x0800abe4

08001f54 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001f6a:	e022      	b.n	8001fb2 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	47a0      	blx	r4
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
 8001f8a:	e007      	b.n	8001f9c <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ffa4 	bl	8001ee0 <default_extension_decoder>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <decode_extension+0x58>
            return false;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e00b      	b.n	8001fc4 <decode_extension+0x70>
        
        extension = extension->next;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <decode_extension+0x6e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d0d4      	beq.n	8001f6c <decode_extension+0x18>
    }
    
    return true;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}

08001fcc <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	@ 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7d9b      	ldrb	r3, [r3, #22]
 8001fd8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8001fdc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	2b0a      	cmp	r3, #10
 8001fe6:	d124      	bne.n	8002032 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8001ff0:	e01b      	b.n	800202a <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f808 	bl	800100e <pb_field_iter_begin_extension>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00f      	beq.n	8002024 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8002004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002006:	2200      	movs	r2, #0
 8002008:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f89d 	bl	800214e <pb_message_set_to_defaults>
 8002014:	4603      	mov	r3, r0
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <pb_field_set_to_default+0x58>
                    return false;
 8002020:	2300      	movs	r3, #0
 8002022:	e090      	b.n	8002146 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8002024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 800202a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e0      	bne.n	8001ff2 <pb_field_set_to_default+0x26>
 8002030:	e088      	b.n	8002144 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8002032:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d166      	bne.n	800210c <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 800203e:	2301      	movs	r3, #1
 8002040:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002044:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800204c:	2b10      	cmp	r3, #16
 800204e:	d108      	bne.n	8002062 <pb_field_set_to_default+0x96>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e012      	b.n	8002088 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002062:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002066:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800206a:	2b20      	cmp	r3, #32
 800206c:	d005      	beq.n	800207a <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800206e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002072:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002076:	2b30      	cmp	r3, #48	@ 0x30
 8002078:	d106      	bne.n	8002088 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2200      	movs	r2, #0
 8002080:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 8002088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800208c:	2b00      	cmp	r3, #0
 800208e:	d059      	beq.n	8002144 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7d9b      	ldrb	r3, [r3, #22]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2b08      	cmp	r3, #8
 800209a:	d005      	beq.n	80020a8 <pb_field_set_to_default+0xdc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7d9b      	ldrb	r3, [r3, #22]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d128      	bne.n	80020fa <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe ff81 	bl	8000fdc <pb_field_iter_begin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d030      	beq.n	8002142 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f832 	bl	800214e <pb_message_set_to_defaults>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d025      	beq.n	8002142 <pb_field_set_to_default+0x176>
                        return false;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e025      	b.n	8002146 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69d8      	ldr	r0, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8a5b      	ldrh	r3, [r3, #18]
 8002102:	461a      	mov	r2, r3
 8002104:	2100      	movs	r1, #0
 8002106:	f007 ff59 	bl	8009fbc <memset>
 800210a:	e01b      	b.n	8002144 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800210c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002110:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d115      	bne.n	8002144 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002120:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002124:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002128:	2b20      	cmp	r3, #32
 800212a:	d005      	beq.n	8002138 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800212c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002130:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002134:	2b30      	cmp	r3, #48	@ 0x30
 8002136:	d105      	bne.n	8002144 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	e000      	b.n	8002144 <pb_field_set_to_default+0x178>
            {
 8002142:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3738      	adds	r7, #56	@ 0x38
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800214e:	b590      	push	{r4, r7, lr}
 8002150:	b08d      	sub	sp, #52	@ 0x34
 8002152:	af00      	add	r7, sp, #0
 8002154:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8002168:	2300      	movs	r3, #0
 800216a:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d020      	beq.n	80021b8 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	463b      	mov	r3, r7
 800217e:	f04f 32ff 	mov.w	r2, #4294967295
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f8e0 	bl	8001348 <pb_istream_from_buffer>
 8002188:	f107 0420 	add.w	r4, r7, #32
 800218c:	463b      	mov	r3, r7
 800218e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8002194:	f107 031a 	add.w	r3, r7, #26
 8002198:	f107 021c 	add.w	r2, r7, #28
 800219c:	f107 011b 	add.w	r1, r7, #27
 80021a0:	f107 0020 	add.w	r0, r7, #32
 80021a4:	f7ff fa47 	bl	8001636 <pb_decode_tag>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <pb_message_set_to_defaults+0x6a>
            return false;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e043      	b.n	8002240 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f7ff ff07 	bl	8001fcc <pb_field_set_to_default>
 80021be:	4603      	mov	r3, r0
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <pb_message_set_to_defaults+0x80>
            return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e038      	b.n	8002240 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02e      	beq.n	8002232 <pb_message_set_to_defaults+0xe4>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	8a1b      	ldrh	r3, [r3, #16]
 80021d8:	461a      	mov	r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d128      	bne.n	8002232 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 80021e0:	7ef9      	ldrb	r1, [r7, #27]
 80021e2:	f107 0320 	add.w	r3, r7, #32
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe3b 	bl	8001e64 <decode_field>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <pb_message_set_to_defaults+0xb0>
                return false;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e020      	b.n	8002240 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80021fe:	f107 031a 	add.w	r3, r7, #26
 8002202:	f107 021c 	add.w	r2, r7, #28
 8002206:	f107 011b 	add.w	r1, r7, #27
 800220a:	f107 0020 	add.w	r0, r7, #32
 800220e:	f7ff fa12 	bl	8001636 <pb_decode_tag>
 8002212:	4603      	mov	r3, r0
 8002214:	f083 0301 	eor.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <pb_message_set_to_defaults+0xd4>
                return false;
 800221e:	2300      	movs	r3, #0
 8002220:	e00e      	b.n	8002240 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7fe ff1b 	bl	800106e <pb_field_iter_next>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1bc      	bne.n	80021b8 <pb_message_set_to_defaults+0x6a>

    return true;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3734      	adds	r7, #52	@ 0x34
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b09a      	sub	sp, #104	@ 0x68
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 800225e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002262:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8002272:	2300      	movs	r3, #0
 8002274:	643b      	str	r3, [r7, #64]	@ 0x40
 8002276:	2300      	movs	r3, #0
 8002278:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8002280:	f107 0318 	add.w	r3, r7, #24
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fea7 	bl	8000fdc <pb_field_iter_begin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8102 	beq.w	800249a <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 80fc 	bne.w	800249a <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 80022a2:	f107 0318 	add.w	r3, r7, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff51 	bl	800214e <pb_message_set_to_defaults>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80f0 	beq.w	800249a <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <pb_decode_inner+0x80>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	e000      	b.n	80022ca <pb_decode_inner+0x82>
 80022c8:	4b99      	ldr	r3, [pc, #612]	@ (8002530 <pb_decode_inner+0x2e8>)
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	60d3      	str	r3, [r2, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	e16d      	b.n	80025ae <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80022d2:	f107 0312 	add.w	r3, r7, #18
 80022d6:	f107 0214 	add.w	r2, r7, #20
 80022da:	f107 0113 	add.w	r1, r7, #19
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff f9a9 	bl	8001636 <pb_decode_tag>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <pb_decode_inner+0xb4>
        {
            if (eof)
 80022f0:	7cbb      	ldrb	r3, [r7, #18]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 80d7 	bne.w	80024a6 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e158      	b.n	80025ae <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d111      	bne.n	8002326 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 80ce 	bne.w	80024aa <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <pb_decode_inner+0xd4>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	e000      	b.n	800231e <pb_decode_inner+0xd6>
 800231c:	4b85      	ldr	r3, [pc, #532]	@ (8002534 <pb_decode_inner+0x2ec>)
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	60d3      	str	r3, [r2, #12]
 8002322:	2300      	movs	r3, #0
 8002324:	e143      	b.n	80025ae <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe feb2 	bl	8001098 <pb_field_iter_find>
 8002334:	4603      	mov	r3, r0
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <pb_decode_inner+0x104>
 8002340:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	2b0a      	cmp	r3, #10
 800234a:	d13c      	bne.n	80023c6 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 800234c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800234e:	2b00      	cmp	r3, #0
 8002350:	d112      	bne.n	8002378 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8002352:	f107 0318 	add.w	r3, r7, #24
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fef4 	bl	8001144 <pb_field_iter_find_extension>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8002368:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800236a:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 800236c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800237c:	429a      	cmp	r2, r3
 800237e:	d815      	bhi.n	80023ac <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	7cfa      	ldrb	r2, [r7, #19]
 800238a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fde1 	bl	8001f54 <decode_extension>
 8002392:	4603      	mov	r3, r0
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <pb_decode_inner+0x15a>
                    return false;
 800239e:	2300      	movs	r3, #0
 80023a0:	e105      	b.n	80025ae <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d173      	bne.n	8002494 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	4619      	mov	r1, r3
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7ff f96f 	bl	8001694 <pb_skip_field>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f083 0301 	eor.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d06a      	beq.n	8002498 <pb_decode_inner+0x250>
                return false;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e0f3      	b.n	80025ae <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80023c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d12e      	bne.n	8002430 <pb_decode_inner+0x1e8>
 80023d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	3314      	adds	r3, #20
 80023da:	429a      	cmp	r2, r3
 80023dc:	d128      	bne.n	8002430 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80023de:	8c3b      	ldrh	r3, [r7, #32]
 80023e0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d020      	beq.n	800242a <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80023e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80023ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d011      	beq.n	8002418 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80023f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 80023f8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d00b      	beq.n	8002418 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <pb_decode_inner+0x1c6>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	e000      	b.n	8002410 <pb_decode_inner+0x1c8>
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <pb_decode_inner+0x2f0>)
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	2300      	movs	r3, #0
 8002416:	e0ca      	b.n	80025ae <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8002418:	8c3b      	ldrh	r3, [r7, #32]
 800241a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8002424:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002426:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 800242a:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 800242e:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8002430:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002434:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11c      	bne.n	8002476 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800243c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800243e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002440:	d819      	bhi.n	8002476 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8002442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8002450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	b29b      	uxth	r3, r3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	3368      	adds	r3, #104	@ 0x68
 800245a:	443b      	add	r3, r7
 800245c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8002460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b29b      	uxth	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246a:	431a      	orrs	r2, r3
 800246c:	008b      	lsls	r3, r1, #2
 800246e:	3368      	adds	r3, #104	@ 0x68
 8002470:	443b      	add	r3, r7
 8002472:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	f107 0218 	add.w	r2, r7, #24
 800247c:	4619      	mov	r1, r3
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff fcf0 	bl	8001e64 <decode_field>
 8002484:	4603      	mov	r3, r0
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <pb_decode_inner+0x252>
            return false;
 8002490:	2300      	movs	r3, #0
 8002492:	e08c      	b.n	80025ae <pb_decode_inner+0x366>
                    continue;
 8002494:	bf00      	nop
 8002496:	e000      	b.n	800249a <pb_decode_inner+0x252>
            continue;
 8002498:	bf00      	nop
    while (stream->bytes_left)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af17 	bne.w	80022d2 <pb_decode_inner+0x8a>
 80024a4:	e002      	b.n	80024ac <pb_decode_inner+0x264>
                break;
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <pb_decode_inner+0x264>
            break;
 80024aa:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80024ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80024b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d011      	beq.n	80024dc <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 80024b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 80024bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d00b      	beq.n	80024dc <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <pb_decode_inner+0x28a>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	e000      	b.n	80024d4 <pb_decode_inner+0x28c>
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <pb_decode_inner+0x2f0>)
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	60d3      	str	r3, [r2, #12]
 80024d8:	2300      	movs	r3, #0
 80024da:	e068      	b.n	80025ae <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	8a5b      	ldrh	r3, [r3, #18]
 80024e0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80024e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05f      	beq.n	80025ac <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80024ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d902      	bls.n	80024fa <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80024f4:	2340      	movs	r3, #64	@ 0x40
 80024f6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002500:	e023      	b.n	800254a <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8002502:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3368      	adds	r3, #104	@ 0x68
 800250a:	443b      	add	r3, r7
 800250c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002512:	429a      	cmp	r2, r3
 8002514:	d014      	beq.n	8002540 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <pb_decode_inner+0x2dc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	e000      	b.n	8002526 <pb_decode_inner+0x2de>
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <pb_decode_inner+0x2f4>)
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	60d3      	str	r3, [r2, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	e03f      	b.n	80025ae <pb_decode_inner+0x366>
 800252e:	bf00      	nop
 8002530:	0800aba8 	.word	0x0800aba8
 8002534:	0800abf8 	.word	0x0800abf8
 8002538:	0800ac04 	.word	0x0800ac04
 800253c:	0800ac28 	.word	0x0800ac28
            for (i = 0; i < (req_field_count >> 5); i++)
 8002540:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002544:	3301      	adds	r3, #1
 8002546:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800254a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	b29b      	uxth	r3, r3
 8002552:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002556:	429a      	cmp	r2, r3
 8002558:	d3d3      	bcc.n	8002502 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800255a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b00      	cmp	r3, #0
 8002564:	d022      	beq.n	80025ac <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8002566:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b29b      	uxth	r3, r3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	3368      	adds	r3, #104	@ 0x68
 8002572:	443b      	add	r3, r7
 8002574:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8002578:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f1c3 0320 	rsb	r3, r3, #32
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8002590:	429a      	cmp	r2, r3
 8002592:	d00b      	beq.n	80025ac <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <pb_decode_inner+0x35a>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	e000      	b.n	80025a4 <pb_decode_inner+0x35c>
 80025a2:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <pb_decode_inner+0x370>)
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	60d3      	str	r3, [r2, #12]
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3768      	adds	r7, #104	@ 0x68
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0800ac28 	.word	0x0800ac28

080025bc <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80025c8:	2300      	movs	r3, #0
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fe3a 	bl	8002248 <pb_decode_inner>
 80025d4:	4603      	mov	r3, r0
 80025d6:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe ff70 	bl	80014d8 <pb_decode_varint32>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <pb_decode_bool+0x26>
        return false;
 8002604:	2300      	movs	r3, #0
 8002606:	e008      	b.n	800261a <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2da      	uxtb	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	701a      	strb	r2, [r3, #0]
    return true;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8002622:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe ff5f 	bl	80014f8 <pb_decode_varint>
 800263a:	4603      	mov	r3, r0
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <pb_decode_svarint+0x28>
        return false;
 8002646:	2300      	movs	r3, #0
 8002648:	e029      	b.n	800269e <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800264a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264e:	f002 0401 	and.w	r4, r2, #1
 8002652:	2500      	movs	r5, #0
 8002654:	ea54 0305 	orrs.w	r3, r4, r5
 8002658:	d013      	beq.n	8002682 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 800265a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	0842      	lsrs	r2, r0, #1
 8002668:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800266c:	084b      	lsrs	r3, r1, #1
 800266e:	ea6f 0802 	mvn.w	r8, r2
 8002672:	ea6f 0903 	mvn.w	r9, r3
 8002676:	4642      	mov	r2, r8
 8002678:	464b      	mov	r3, r9
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	e9c1 2300 	strd	r2, r3, [r1]
 8002680:	e00c      	b.n	800269c <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8002682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	0842      	lsrs	r2, r0, #1
 8002690:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002694:	084b      	lsrs	r3, r1, #1
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080026a8 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2204      	movs	r2, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fd92 	bl	80011e4 <pb_read>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <pb_decode_fixed32+0x28>
        return false;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e003      	b.n	80026d8 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	2208      	movs	r2, #8
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fd76 	bl	80011e4 <pb_read>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <pb_decode_fixed64+0x28>
        return false;
 8002704:	2300      	movs	r3, #0
 8002706:	e005      	b.n	8002714 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff58 	bl	80025e2 <pb_decode_bool>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b094      	sub	sp, #80	@ 0x50
 8002742:	af00      	add	r7, sp, #0
 8002744:	6278      	str	r0, [r7, #36]	@ 0x24
 8002746:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	7d9b      	ldrb	r3, [r3, #22]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2b02      	cmp	r3, #2
 8002752:	d179      	bne.n	8002848 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8002754:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002758:	4619      	mov	r1, r3
 800275a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800275c:	f7fe fecc 	bl	80014f8 <pb_decode_varint>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <pb_dec_varint+0x34>
            return false;
 800276c:	2300      	movs	r3, #0
 800276e:	e107      	b.n	8002980 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	8a5b      	ldrh	r3, [r3, #18]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d10a      	bne.n	800278e <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002780:	e9c1 2300 	strd	r2, r3, [r1]
 8002784:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002788:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800278c:	e046      	b.n	800281c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	8a5b      	ldrh	r3, [r3, #18]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d10e      	bne.n	80027b4 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8002796:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4602      	mov	r2, r0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	617a      	str	r2, [r7, #20]
 80027aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027ae:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80027b2:	e033      	b.n	800281c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	8a5b      	ldrh	r3, [r3, #18]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d10f      	bne.n	80027dc <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80027bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	b282      	uxth	r2, r0
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	60fa      	str	r2, [r7, #12]
 80027d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027d6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80027da:	e01f      	b.n	800281c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	8a5b      	ldrh	r3, [r3, #18]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10f      	bne.n	8002804 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80027e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	b2c2      	uxtb	r2, r0
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80027fe:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8002802:	e00b      	b.n	800281c <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <pb_dec_varint+0xd6>
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	e000      	b.n	8002814 <pb_dec_varint+0xd8>
 8002812:	4b5e      	ldr	r3, [pc, #376]	@ (800298c <pb_dec_varint+0x250>)
 8002814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	2300      	movs	r3, #0
 800281a:	e0b1      	b.n	8002980 <pb_dec_varint+0x244>

        if (clamped != value)
 800281c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002820:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002824:	4299      	cmp	r1, r3
 8002826:	bf08      	it	eq
 8002828:	4290      	cmpeq	r0, r2
 800282a:	d00b      	beq.n	8002844 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <pb_dec_varint+0xfe>
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	e000      	b.n	800283c <pb_dec_varint+0x100>
 800283a:	4b55      	ldr	r3, [pc, #340]	@ (8002990 <pb_dec_varint+0x254>)
 800283c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	2300      	movs	r3, #0
 8002842:	e09d      	b.n	8002980 <pb_dec_varint+0x244>

        return true;
 8002844:	2301      	movs	r3, #1
 8002846:	e09b      	b.n	8002980 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	7d9b      	ldrb	r3, [r3, #22]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b03      	cmp	r3, #3
 8002852:	d10d      	bne.n	8002870 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8002854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002858:	4619      	mov	r1, r3
 800285a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800285c:	f7ff fee1 	bl	8002622 <pb_decode_svarint>
 8002860:	4603      	mov	r3, r0
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d022      	beq.n	80028b2 <pb_dec_varint+0x176>
                return false;
 800286c:	2300      	movs	r3, #0
 800286e:	e087      	b.n	8002980 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8002870:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002874:	4619      	mov	r1, r3
 8002876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002878:	f7fe fe3e 	bl	80014f8 <pb_decode_varint>
 800287c:	4603      	mov	r3, r0
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <pb_dec_varint+0x150>
                return false;
 8002888:	2300      	movs	r3, #0
 800288a:	e079      	b.n	8002980 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	8a5b      	ldrh	r3, [r3, #18]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d104      	bne.n	800289e <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8002894:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002898:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800289c:	e009      	b.n	80028b2 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800289e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028a2:	4613      	mov	r3, r2
 80028a4:	17da      	asrs	r2, r3, #31
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	61fa      	str	r2, [r7, #28]
 80028aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	8a5b      	ldrh	r3, [r3, #18]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d10a      	bne.n	80028d0 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	69d9      	ldr	r1, [r3, #28]
 80028be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028c2:	e9c1 2300 	strd	r2, r3, [r1]
 80028c6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80028ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80028ce:	e042      	b.n	8002956 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	8a5b      	ldrh	r3, [r3, #18]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d10c      	bne.n	80028f2 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80028d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4602      	mov	r2, r0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	17da      	asrs	r2, r3, #31
 80028e8:	469a      	mov	sl, r3
 80028ea:	4693      	mov	fp, r2
 80028ec:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 80028f0:	e031      	b.n	8002956 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	8a5b      	ldrh	r3, [r3, #18]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d10e      	bne.n	8002918 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80028fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	b202      	sxth	r2, r0
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	b21b      	sxth	r3, r3
 800290c:	17da      	asrs	r2, r3, #31
 800290e:	4698      	mov	r8, r3
 8002910:	4691      	mov	r9, r2
 8002912:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8002916:	e01e      	b.n	8002956 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	8a5b      	ldrh	r3, [r3, #18]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10e      	bne.n	800293e <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8002920:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	b242      	sxtb	r2, r0
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	f993 3000 	ldrsb.w	r3, [r3]
 8002930:	b25b      	sxtb	r3, r3
 8002932:	17da      	asrs	r2, r3, #31
 8002934:	461c      	mov	r4, r3
 8002936:	4615      	mov	r5, r2
 8002938:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 800293c:	e00b      	b.n	8002956 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <pb_dec_varint+0x210>
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	e000      	b.n	800294e <pb_dec_varint+0x212>
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <pb_dec_varint+0x250>)
 800294e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002950:	60d3      	str	r3, [r2, #12]
 8002952:	2300      	movs	r3, #0
 8002954:	e014      	b.n	8002980 <pb_dec_varint+0x244>

        if (clamped != svalue)
 8002956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800295a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800295e:	4299      	cmp	r1, r3
 8002960:	bf08      	it	eq
 8002962:	4290      	cmpeq	r0, r2
 8002964:	d00b      	beq.n	800297e <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <pb_dec_varint+0x238>
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	e000      	b.n	8002976 <pb_dec_varint+0x23a>
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <pb_dec_varint+0x254>)
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	60d3      	str	r3, [r2, #12]
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <pb_dec_varint+0x244>

        return true;
 800297e:	2301      	movs	r3, #1
    }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3750      	adds	r7, #80	@ 0x50
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	0800ac40 	.word	0x0800ac40
 8002990:	0800ac54 	.word	0x0800ac54

08002994 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe fd97 	bl	80014d8 <pb_decode_varint32>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <pb_dec_bytes+0x26>
        return false;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e055      	b.n	8002a66 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d30b      	bcc.n	80029da <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <pb_dec_bytes+0x3c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	e000      	b.n	80029d2 <pb_dec_bytes+0x3e>
 80029d0:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <pb_dec_bytes+0xdc>)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	60d3      	str	r3, [r2, #12]
 80029d6:	2300      	movs	r3, #0
 80029d8:	e045      	b.n	8002a66 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3302      	adds	r3, #2
 80029de:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d20b      	bcs.n	8002a00 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <pb_dec_bytes+0x62>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	e000      	b.n	80029f8 <pb_dec_bytes+0x64>
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <pb_dec_bytes+0xe0>)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	60d3      	str	r3, [r2, #12]
 80029fc:	2300      	movs	r3, #0
 80029fe:	e032      	b.n	8002a66 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7d9b      	ldrb	r3, [r3, #22]
 8002a04:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a08:	2b80      	cmp	r3, #128	@ 0x80
 8002a0a:	d10b      	bne.n	8002a24 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <pb_dec_bytes+0x86>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	e000      	b.n	8002a1c <pb_dec_bytes+0x88>
 8002a1a:	4b17      	ldr	r3, [pc, #92]	@ (8002a78 <pb_dec_bytes+0xe4>)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	2300      	movs	r3, #0
 8002a22:	e020      	b.n	8002a66 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	8a5b      	ldrh	r3, [r3, #18]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d90b      	bls.n	8002a48 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <pb_dec_bytes+0xaa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	e000      	b.n	8002a40 <pb_dec_bytes+0xac>
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <pb_dec_bytes+0xdc>)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	60d3      	str	r3, [r2, #12]
 8002a44:	2300      	movs	r3, #0
 8002a46:	e00e      	b.n	8002a66 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fbc0 	bl	80011e4 <pb_read>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800ac68 	.word	0x0800ac68
 8002a74:	0800ac78 	.word	0x0800ac78
 8002a78:	0800abc0 	.word	0x0800abc0

08002a7c <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fd20 	bl	80014d8 <pb_decode_varint32>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f083 0301 	eor.w	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <pb_dec_string+0x2c>
        return false;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e05a      	b.n	8002b5e <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d10b      	bne.n	8002ac8 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <pb_dec_string+0x42>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	e000      	b.n	8002ac0 <pb_dec_string+0x44>
 8002abe:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <pb_dec_string+0xec>)
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	60d3      	str	r3, [r2, #12]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e04a      	b.n	8002b5e <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20b      	bcs.n	8002aee <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <pb_dec_string+0x68>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	e000      	b.n	8002ae6 <pb_dec_string+0x6a>
 8002ae4:	4b20      	ldr	r3, [pc, #128]	@ (8002b68 <pb_dec_string+0xec>)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	2300      	movs	r3, #0
 8002aec:	e037      	b.n	8002b5e <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7d9b      	ldrb	r3, [r3, #22]
 8002af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002af6:	2b80      	cmp	r3, #128	@ 0x80
 8002af8:	d10b      	bne.n	8002b12 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <pb_dec_string+0x8c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	e000      	b.n	8002b0a <pb_dec_string+0x8e>
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <pb_dec_string+0xf0>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	60d3      	str	r3, [r2, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e025      	b.n	8002b5e <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	8a5b      	ldrh	r3, [r3, #18]
 8002b16:	461a      	mov	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d90b      	bls.n	8002b36 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <pb_dec_string+0xb0>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	e000      	b.n	8002b2e <pb_dec_string+0xb2>
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <pb_dec_string+0xf4>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	60d3      	str	r3, [r2, #12]
 8002b32:	2300      	movs	r3, #0
 8002b34:	e013      	b.n	8002b5e <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	6979      	ldr	r1, [r7, #20]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb4c 	bl	80011e4 <pb_read>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <pb_dec_string+0xe0>
        return false;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002b5c:	2301      	movs	r3, #1
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800ac78 	.word	0x0800ac78
 8002b6c:	0800abc0 	.word	0x0800abc0
 8002b70:	0800ac88 	.word	0x0800ac88

08002b74 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	@ 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    bool status = true;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fe fe2d 	bl	80017f0 <pb_make_string_substream>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <pb_dec_submessage+0x32>
        return false;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e069      	b.n	8002c7a <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <pb_dec_submessage+0x48>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	e000      	b.n	8002bbe <pb_dec_submessage+0x4a>
 8002bbc:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <pb_dec_submessage+0x110>)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	60d3      	str	r3, [r2, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e059      	b.n	8002c7a <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7d9b      	ldrb	r3, [r3, #22]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	2b09      	cmp	r3, #9
 8002bd0:	d11c      	bne.n	8002c0c <pb_dec_submessage+0x98>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d018      	beq.n	8002c0c <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	3b08      	subs	r3, #8
 8002be0:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d010      	beq.n	8002c0c <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	3204      	adds	r2, #4
 8002bf2:	f107 000c 	add.w	r0, r7, #12
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	4798      	blx	r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d022      	beq.n	8002c5a <pb_dec_submessage+0xe6>
 8002c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01b      	beq.n	8002c5a <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7d9b      	ldrb	r3, [r3, #22]
 8002c2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7d9b      	ldrb	r3, [r3, #22]
 8002c36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d001      	beq.n	8002c42 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	f107 000c 	add.w	r0, r7, #12
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f7ff fafa 	bl	8002248 <pb_decode_inner>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7fe fdff 	bl	8001864 <pb_close_string_substream>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <pb_dec_submessage+0x102>
        return false;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e001      	b.n	8002c7a <pb_dec_submessage+0x106>

    return status;
 8002c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3728      	adds	r7, #40	@ 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	0800ac98 	.word	0x0800ac98

08002c88 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fe fc1d 	bl	80014d8 <pb_decode_varint32>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f083 0301 	eor.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <pb_dec_fixed_length_bytes+0x26>
        return false;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e037      	b.n	8002d1e <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d30b      	bcc.n	8002cce <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <pb_dec_fixed_length_bytes+0x3c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	e000      	b.n	8002cc6 <pb_dec_fixed_length_bytes+0x3e>
 8002cc4:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <pb_dec_fixed_length_bytes+0xa0>)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	60d3      	str	r3, [r2, #12]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e027      	b.n	8002d1e <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	69d8      	ldr	r0, [r3, #28]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	8a5b      	ldrh	r3, [r3, #18]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f007 f96c 	bl	8009fbc <memset>
        return true;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e01a      	b.n	8002d1e <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	8a5b      	ldrh	r3, [r3, #18]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d00b      	beq.n	8002d0c <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <pb_dec_fixed_length_bytes+0x7a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	e000      	b.n	8002d04 <pb_dec_fixed_length_bytes+0x7c>
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <pb_dec_fixed_length_bytes+0xa4>)
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	60d3      	str	r3, [r2, #12]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e008      	b.n	8002d1e <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	8a5b      	ldrh	r3, [r3, #18]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fa64 	bl	80011e4 <pb_read>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	0800ac68 	.word	0x0800ac68
 8002d2c:	0800acb4 	.word	0x0800acb4

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_MspInit+0x30>)
 8002d38:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d3c:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <HAL_MspInit+0x30>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_MspInit+0x30>)
 8002d48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	58024400 	.word	0x58024400

08002d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <NMI_Handler+0x4>

08002d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <BusFault_Handler+0x4>

08002d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <UsageFault_Handler+0x4>

08002d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dba:	f000 fab5 	bl	8003328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <USART3_IRQHandler+0x10>)
 8002dca:	f004 fac9 	bl	8007360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	240004a8 	.word	0x240004a8

08002dd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e00a      	b.n	8002e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dea:	f3af 8000 	nop.w
 8002dee:	4601      	mov	r1, r0
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	60ba      	str	r2, [r7, #8]
 8002df6:	b2ca      	uxtb	r2, r1
 8002df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dbf0      	blt.n	8002dea <_read+0x12>
  }

  return len;
 8002e08:	687b      	ldr	r3, [r7, #4]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e009      	b.n	8002e38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60ba      	str	r2, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fd41 	bl	80008b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dbf1      	blt.n	8002e24 <_write+0x12>
  }
  return len;
 8002e40:	687b      	ldr	r3, [r7, #4]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_close>:

int _close(int file)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e72:	605a      	str	r2, [r3, #4]
  return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_isatty>:

int _isatty(int file)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f007 f8b8 	bl	800a058 <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	24100000 	.word	0x24100000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	240004a4 	.word	0x240004a4
 8002f1c:	24000690 	.word	0x24000690

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f24:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <SystemInit+0x100>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003020 <SystemInit+0x100>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f34:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <SystemInit+0x104>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d807      	bhi.n	8002f50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f40:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <SystemInit+0x104>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 030f 	bic.w	r3, r3, #15
 8002f48:	4a36      	ldr	r2, [pc, #216]	@ (8003024 <SystemInit+0x104>)
 8002f4a:	f043 0303 	orr.w	r3, r3, #3
 8002f4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <SystemInit+0x108>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a34      	ldr	r2, [pc, #208]	@ (8003028 <SystemInit+0x108>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <SystemInit+0x108>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <SystemInit+0x108>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4930      	ldr	r1, [pc, #192]	@ (8003028 <SystemInit+0x108>)
 8002f68:	4b30      	ldr	r3, [pc, #192]	@ (800302c <SystemInit+0x10c>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <SystemInit+0x104>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <SystemInit+0x104>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <SystemInit+0x104>)
 8002f84:	f043 0303 	orr.w	r3, r3, #3
 8002f88:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002f8a:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <SystemInit+0x108>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <SystemInit+0x108>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <SystemInit+0x108>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <SystemInit+0x108>)
 8002f9e:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <SystemInit+0x110>)
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <SystemInit+0x108>)
 8002fa4:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <SystemInit+0x114>)
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <SystemInit+0x108>)
 8002faa:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <SystemInit+0x118>)
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <SystemInit+0x108>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <SystemInit+0x108>)
 8002fb6:	4a20      	ldr	r2, [pc, #128]	@ (8003038 <SystemInit+0x118>)
 8002fb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fba:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <SystemInit+0x108>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <SystemInit+0x108>)
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003038 <SystemInit+0x118>)
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <SystemInit+0x108>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <SystemInit+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	@ (8003028 <SystemInit+0x108>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <SystemInit+0x108>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <SystemInit+0x108>)
 8002fe0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d113      	bne.n	8003014 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002fec:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <SystemInit+0x108>)
 8002fee:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <SystemInit+0x108>)
 8002ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ff8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <SystemInit+0x11c>)
 8002ffe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003002:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003004:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <SystemInit+0x108>)
 8003006:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800300a:	4a07      	ldr	r2, [pc, #28]	@ (8003028 <SystemInit+0x108>)
 800300c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003010:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00
 8003024:	52002000 	.word	0x52002000
 8003028:	58024400 	.word	0x58024400
 800302c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003030:	02020200 	.word	0x02020200
 8003034:	01ff0000 	.word	0x01ff0000
 8003038:	01010280 	.word	0x01010280
 800303c:	52004000 	.word	0x52004000

08003040 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <ExitRun0Mode+0x2c>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <ExitRun0Mode+0x2c>)
 800304a:	f023 0302 	bic.w	r3, r3, #2
 800304e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003050:	bf00      	nop
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <ExitRun0Mode+0x2c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f9      	beq.n	8003052 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	58024800 	.word	0x58024800

08003070 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003074:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 8003076:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <MX_USART3_UART_Init+0x94>)
 8003078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800307a:	4b21      	ldr	r3, [pc, #132]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 800307c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800308e:	4b1c      	ldr	r3, [pc, #112]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a6:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030ac:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b2:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030b8:	4811      	ldr	r0, [pc, #68]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030ba:	f004 f827 	bl	800710c <HAL_UART_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030c4:	f7fd fdba 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c8:	2100      	movs	r1, #0
 80030ca:	480d      	ldr	r0, [pc, #52]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030cc:	f006 fca1 	bl	8009a12 <HAL_UARTEx_SetTxFifoThreshold>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030d6:	f7fd fdb1 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030da:	2100      	movs	r1, #0
 80030dc:	4808      	ldr	r0, [pc, #32]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030de:	f006 fcd6 	bl	8009a8e <HAL_UARTEx_SetRxFifoThreshold>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030e8:	f7fd fda8 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	@ (8003100 <MX_USART3_UART_Init+0x90>)
 80030ee:	f006 fc57 	bl	80099a0 <HAL_UARTEx_DisableFifoMode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80030f8:	f7fd fda0 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	240004a8 	.word	0x240004a8
 8003104:	40004800 	.word	0x40004800

08003108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b0ba      	sub	sp, #232	@ 0xe8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	22c0      	movs	r2, #192	@ 0xc0
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f006 ff47 	bl	8009fbc <memset>
  if(uartHandle->Instance==USART3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2b      	ldr	r2, [pc, #172]	@ (80031e0 <HAL_UART_MspInit+0xd8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d14e      	bne.n	80031d6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003138:	f04f 0202 	mov.w	r2, #2
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314a:	f107 0310 	add.w	r3, r7, #16
 800314e:	4618      	mov	r0, r3
 8003150:	f002 f9fc 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800315a:	f7fd fd6f 	bl	8000c3c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 8003160:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003164:	4a1f      	ldr	r2, [pc, #124]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 8003166:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 8003170:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800317c:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 800317e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003182:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800318c:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_UART_MspInit+0xdc>)
 800318e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800319a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800319e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031b4:	2307      	movs	r3, #7
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031be:	4619      	mov	r1, r3
 80031c0:	4809      	ldr	r0, [pc, #36]	@ (80031e8 <HAL_UART_MspInit+0xe0>)
 80031c2:	f000 ffe1 	bl	8004188 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2027      	movs	r0, #39	@ 0x27
 80031cc:	f000 f9cb 	bl	8003566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031d0:	2027      	movs	r0, #39	@ 0x27
 80031d2:	f000 f9e2 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031d6:	bf00      	nop
 80031d8:	37e8      	adds	r7, #232	@ 0xe8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40004800 	.word	0x40004800
 80031e4:	58024400 	.word	0x58024400
 80031e8:	58020c00 	.word	0x58020c00

080031ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003228 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80031f0:	f7ff ff26 	bl	8003040 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031f4:	f7ff fe94 	bl	8002f20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f8:	480c      	ldr	r0, [pc, #48]	@ (800322c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031fa:	490d      	ldr	r1, [pc, #52]	@ (8003230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003200:	e002      	b.n	8003208 <LoopCopyDataInit>

08003202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003206:	3304      	adds	r3, #4

08003208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800320c:	d3f9      	bcc.n	8003202 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003210:	4c0a      	ldr	r4, [pc, #40]	@ (800323c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003214:	e001      	b.n	800321a <LoopFillZerobss>

08003216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003218:	3204      	adds	r2, #4

0800321a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800321c:	d3fb      	bcc.n	8003216 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800321e:	f006 ff21 	bl	800a064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003222:	f7fd fc2d 	bl	8000a80 <main>
  bx  lr
 8003226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003228:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800322c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003230:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003234:	0800ad78 	.word	0x0800ad78
  ldr r2, =_sbss
 8003238:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800323c:	2400068c 	.word	0x2400068c

08003240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003240:	e7fe      	b.n	8003240 <ADC_IRQHandler>
	...

08003244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800324a:	2003      	movs	r0, #3
 800324c:	f000 f980 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003250:	f001 ffa6 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <HAL_Init+0x68>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4913      	ldr	r1, [pc, #76]	@ (80032b0 <HAL_Init+0x6c>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800326e:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <HAL_Init+0x68>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <HAL_Init+0x6c>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	4a0b      	ldr	r2, [pc, #44]	@ (80032b4 <HAL_Init+0x70>)
 8003286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003288:	4a0b      	ldr	r2, [pc, #44]	@ (80032b8 <HAL_Init+0x74>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f814 	bl	80032bc <HAL_InitTick>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e002      	b.n	80032a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800329e:	f7ff fd47 	bl	8002d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	0800acfc 	.word	0x0800acfc
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000

080032bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_InitTick+0x60>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e021      	b.n	8003314 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032d0:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <HAL_InitTick+0x64>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_InitTick+0x60>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032de:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f965 	bl	80035b6 <HAL_SYSTICK_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00e      	b.n	8003314 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d80a      	bhi.n	8003312 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f000 f92f 	bl	8003566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003308:	4a06      	ldr	r2, [pc, #24]	@ (8003324 <HAL_InitTick+0x68>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	2400000c 	.word	0x2400000c
 8003320:	24000000 	.word	0x24000000
 8003324:	24000008 	.word	0x24000008

08003328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_IncTick+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_IncTick+0x24>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_IncTick+0x24>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2400000c 	.word	0x2400000c
 800334c:	2400053c 	.word	0x2400053c

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	2400053c 	.word	0x2400053c

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffde 	bl	8003350 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2400000c 	.word	0x2400000c

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	05fa0000 	.word	0x05fa0000

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	@ (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	@ (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	@ (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800351c:	d301      	bcc.n	8003522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <SysTick_Config+0x40>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352a:	210f      	movs	r1, #15
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f7ff ff8e 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <SysTick_Config+0x40>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	@ (800354c <SysTick_Config+0x40>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff29 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff40 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff90 	bl	80034a4 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5f 	bl	8003450 <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff33 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa4 	bl	800350c <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035d4:	f3bf 8f5f 	dmb	sy
}
 80035d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_MPU_Disable+0x28>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <HAL_MPU_Disable+0x28>)
 80035e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_MPU_Disable+0x2c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00
 80035fc:	e000ed90 	.word	0xe000ed90

08003600 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003608:	4a0b      	ldr	r2, [pc, #44]	@ (8003638 <HAL_MPU_Enable+0x38>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <HAL_MPU_Enable+0x3c>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <HAL_MPU_Enable+0x3c>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800361e:	f3bf 8f4f 	dsb	sy
}
 8003622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003624:	f3bf 8f6f 	isb	sy
}
 8003628:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed90 	.word	0xe000ed90
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	785a      	ldrb	r2, [r3, #1]
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_MPU_ConfigRegion+0x7c>)
 800364e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HAL_MPU_ConfigRegion+0x7c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <HAL_MPU_ConfigRegion+0x7c>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800365c:	4a17      	ldr	r2, [pc, #92]	@ (80036bc <HAL_MPU_ConfigRegion+0x7c>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7b1b      	ldrb	r3, [r3, #12]
 8003668:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7adb      	ldrb	r3, [r3, #11]
 800366e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7a9b      	ldrb	r3, [r3, #10]
 8003676:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7b5b      	ldrb	r3, [r3, #13]
 800367e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7b9b      	ldrb	r3, [r3, #14]
 8003686:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7bdb      	ldrb	r3, [r3, #15]
 800368e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7a5b      	ldrb	r3, [r3, #9]
 8003696:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003698:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7a1b      	ldrb	r3, [r3, #8]
 800369e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80036a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a8:	4a04      	ldr	r2, [pc, #16]	@ (80036bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036ac:	6113      	str	r3, [r2, #16]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000ed90 	.word	0xe000ed90

080036c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff fe42 	bl	8003350 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e2dc      	b.n	8003c92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e2cd      	b.n	8003c92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a76      	ldr	r2, [pc, #472]	@ (80038d4 <HAL_DMA_Abort+0x214>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d04a      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a74      	ldr	r2, [pc, #464]	@ (80038d8 <HAL_DMA_Abort+0x218>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d045      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	@ (80038dc <HAL_DMA_Abort+0x21c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d040      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a71      	ldr	r2, [pc, #452]	@ (80038e0 <HAL_DMA_Abort+0x220>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d03b      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a70      	ldr	r2, [pc, #448]	@ (80038e4 <HAL_DMA_Abort+0x224>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d036      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6e      	ldr	r2, [pc, #440]	@ (80038e8 <HAL_DMA_Abort+0x228>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d031      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6d      	ldr	r2, [pc, #436]	@ (80038ec <HAL_DMA_Abort+0x22c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d02c      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6b      	ldr	r2, [pc, #428]	@ (80038f0 <HAL_DMA_Abort+0x230>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d027      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6a      	ldr	r2, [pc, #424]	@ (80038f4 <HAL_DMA_Abort+0x234>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d022      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a68      	ldr	r2, [pc, #416]	@ (80038f8 <HAL_DMA_Abort+0x238>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01d      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_DMA_Abort+0x23c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d018      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_DMA_Abort+0x240>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a64      	ldr	r2, [pc, #400]	@ (8003904 <HAL_DMA_Abort+0x244>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a62      	ldr	r2, [pc, #392]	@ (8003908 <HAL_DMA_Abort+0x248>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_DMA_Abort+0x24c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_DMA_Abort+0xd6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5f      	ldr	r2, [pc, #380]	@ (8003910 <HAL_DMA_Abort+0x250>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_DMA_Abort+0xda>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_DMA_Abort+0xdc>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 021e 	bic.w	r2, r2, #30
 80037ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e00a      	b.n	80037de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 020e 	bic.w	r2, r2, #14
 80037d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3c      	ldr	r2, [pc, #240]	@ (80038d4 <HAL_DMA_Abort+0x214>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d072      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3a      	ldr	r2, [pc, #232]	@ (80038d8 <HAL_DMA_Abort+0x218>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d06d      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a39      	ldr	r2, [pc, #228]	@ (80038dc <HAL_DMA_Abort+0x21c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d068      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a37      	ldr	r2, [pc, #220]	@ (80038e0 <HAL_DMA_Abort+0x220>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d063      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a36      	ldr	r2, [pc, #216]	@ (80038e4 <HAL_DMA_Abort+0x224>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d05e      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a34      	ldr	r2, [pc, #208]	@ (80038e8 <HAL_DMA_Abort+0x228>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d059      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a33      	ldr	r2, [pc, #204]	@ (80038ec <HAL_DMA_Abort+0x22c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d054      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <HAL_DMA_Abort+0x230>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d04f      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a30      	ldr	r2, [pc, #192]	@ (80038f4 <HAL_DMA_Abort+0x234>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <HAL_DMA_Abort+0x238>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_DMA_Abort+0x23c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2b      	ldr	r2, [pc, #172]	@ (8003900 <HAL_DMA_Abort+0x240>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2a      	ldr	r2, [pc, #168]	@ (8003904 <HAL_DMA_Abort+0x244>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <HAL_DMA_Abort+0x248>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a27      	ldr	r2, [pc, #156]	@ (800390c <HAL_DMA_Abort+0x24c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_DMA_Abort+0x250>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a24      	ldr	r2, [pc, #144]	@ (8003914 <HAL_DMA_Abort+0x254>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <HAL_DMA_Abort+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a21      	ldr	r2, [pc, #132]	@ (800391c <HAL_DMA_Abort+0x25c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <HAL_DMA_Abort+0x260>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_DMA_Abort+0x264>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <HAL_DMA_Abort+0x268>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_DMA_Abort+0x26c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_Abort+0x20e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a19      	ldr	r2, [pc, #100]	@ (8003930 <HAL_DMA_Abort+0x270>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d132      	bne.n	8003934 <HAL_DMA_Abort+0x274>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e031      	b.n	8003936 <HAL_DMA_Abort+0x276>
 80038d2:	bf00      	nop
 80038d4:	40020010 	.word	0x40020010
 80038d8:	40020028 	.word	0x40020028
 80038dc:	40020040 	.word	0x40020040
 80038e0:	40020058 	.word	0x40020058
 80038e4:	40020070 	.word	0x40020070
 80038e8:	40020088 	.word	0x40020088
 80038ec:	400200a0 	.word	0x400200a0
 80038f0:	400200b8 	.word	0x400200b8
 80038f4:	40020410 	.word	0x40020410
 80038f8:	40020428 	.word	0x40020428
 80038fc:	40020440 	.word	0x40020440
 8003900:	40020458 	.word	0x40020458
 8003904:	40020470 	.word	0x40020470
 8003908:	40020488 	.word	0x40020488
 800390c:	400204a0 	.word	0x400204a0
 8003910:	400204b8 	.word	0x400204b8
 8003914:	58025408 	.word	0x58025408
 8003918:	5802541c 	.word	0x5802541c
 800391c:	58025430 	.word	0x58025430
 8003920:	58025444 	.word	0x58025444
 8003924:	58025458 	.word	0x58025458
 8003928:	5802546c 	.word	0x5802546c
 800392c:	58025480 	.word	0x58025480
 8003930:	58025494 	.word	0x58025494
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003948:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6d      	ldr	r2, [pc, #436]	@ (8003b04 <HAL_DMA_Abort+0x444>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d04a      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6b      	ldr	r2, [pc, #428]	@ (8003b08 <HAL_DMA_Abort+0x448>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d045      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6a      	ldr	r2, [pc, #424]	@ (8003b0c <HAL_DMA_Abort+0x44c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d040      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a68      	ldr	r2, [pc, #416]	@ (8003b10 <HAL_DMA_Abort+0x450>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d03b      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a67      	ldr	r2, [pc, #412]	@ (8003b14 <HAL_DMA_Abort+0x454>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d036      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a65      	ldr	r2, [pc, #404]	@ (8003b18 <HAL_DMA_Abort+0x458>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d031      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a64      	ldr	r2, [pc, #400]	@ (8003b1c <HAL_DMA_Abort+0x45c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d02c      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a62      	ldr	r2, [pc, #392]	@ (8003b20 <HAL_DMA_Abort+0x460>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d027      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a61      	ldr	r2, [pc, #388]	@ (8003b24 <HAL_DMA_Abort+0x464>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b28 <HAL_DMA_Abort+0x468>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01d      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_DMA_Abort+0x46c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003b30 <HAL_DMA_Abort+0x470>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b34 <HAL_DMA_Abort+0x474>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a59      	ldr	r2, [pc, #356]	@ (8003b38 <HAL_DMA_Abort+0x478>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a58      	ldr	r2, [pc, #352]	@ (8003b3c <HAL_DMA_Abort+0x47c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_DMA_Abort+0x32a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a56      	ldr	r2, [pc, #344]	@ (8003b40 <HAL_DMA_Abort+0x480>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <HAL_DMA_Abort+0x33c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e007      	b.n	8003a0c <HAL_DMA_Abort+0x34c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a0c:	e013      	b.n	8003a36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a0e:	f7ff fc9f 	bl	8003350 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d90c      	bls.n	8003a36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12d      	b.n	8003c92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2f      	ldr	r2, [pc, #188]	@ (8003b04 <HAL_DMA_Abort+0x444>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2d      	ldr	r2, [pc, #180]	@ (8003b08 <HAL_DMA_Abort+0x448>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b0c <HAL_DMA_Abort+0x44c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2a      	ldr	r2, [pc, #168]	@ (8003b10 <HAL_DMA_Abort+0x450>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_DMA_Abort+0x454>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <HAL_DMA_Abort+0x458>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a26      	ldr	r2, [pc, #152]	@ (8003b1c <HAL_DMA_Abort+0x45c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a24      	ldr	r2, [pc, #144]	@ (8003b20 <HAL_DMA_Abort+0x460>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a23      	ldr	r2, [pc, #140]	@ (8003b24 <HAL_DMA_Abort+0x464>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	@ (8003b28 <HAL_DMA_Abort+0x468>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <HAL_DMA_Abort+0x46c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b30 <HAL_DMA_Abort+0x470>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1d      	ldr	r2, [pc, #116]	@ (8003b34 <HAL_DMA_Abort+0x474>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <HAL_DMA_Abort+0x478>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b3c <HAL_DMA_Abort+0x47c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_Abort+0x422>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <HAL_DMA_Abort+0x480>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_Abort+0x426>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_Abort+0x428>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02b      	beq.n	8003b44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	223f      	movs	r2, #63	@ 0x3f
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	e02a      	b.n	8003b5a <HAL_DMA_Abort+0x49a>
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2201      	movs	r2, #1
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8003c9c <HAL_DMA_Abort+0x5dc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d072      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca0 <HAL_DMA_Abort+0x5e0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d06d      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4c      	ldr	r2, [pc, #304]	@ (8003ca4 <HAL_DMA_Abort+0x5e4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d068      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca8 <HAL_DMA_Abort+0x5e8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d063      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a49      	ldr	r2, [pc, #292]	@ (8003cac <HAL_DMA_Abort+0x5ec>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d05e      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a47      	ldr	r2, [pc, #284]	@ (8003cb0 <HAL_DMA_Abort+0x5f0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d059      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a46      	ldr	r2, [pc, #280]	@ (8003cb4 <HAL_DMA_Abort+0x5f4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d054      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a44      	ldr	r2, [pc, #272]	@ (8003cb8 <HAL_DMA_Abort+0x5f8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04f      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a43      	ldr	r2, [pc, #268]	@ (8003cbc <HAL_DMA_Abort+0x5fc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04a      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a41      	ldr	r2, [pc, #260]	@ (8003cc0 <HAL_DMA_Abort+0x600>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d045      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	@ (8003cc4 <HAL_DMA_Abort+0x604>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d040      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc8 <HAL_DMA_Abort+0x608>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d03b      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8003ccc <HAL_DMA_Abort+0x60c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d036      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd0 <HAL_DMA_Abort+0x610>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d031      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd4 <HAL_DMA_Abort+0x614>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d02c      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <HAL_DMA_Abort+0x618>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d027      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a37      	ldr	r2, [pc, #220]	@ (8003cdc <HAL_DMA_Abort+0x61c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <HAL_DMA_Abort+0x620>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a34      	ldr	r2, [pc, #208]	@ (8003ce4 <HAL_DMA_Abort+0x624>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ce8 <HAL_DMA_Abort+0x628>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a31      	ldr	r2, [pc, #196]	@ (8003cec <HAL_DMA_Abort+0x62c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <HAL_DMA_Abort+0x630>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf4 <HAL_DMA_Abort+0x634>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_Abort+0x58a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <HAL_DMA_Abort+0x638>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_DMA_Abort+0x58e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_DMA_Abort+0x590>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40020010 	.word	0x40020010
 8003ca0:	40020028 	.word	0x40020028
 8003ca4:	40020040 	.word	0x40020040
 8003ca8:	40020058 	.word	0x40020058
 8003cac:	40020070 	.word	0x40020070
 8003cb0:	40020088 	.word	0x40020088
 8003cb4:	400200a0 	.word	0x400200a0
 8003cb8:	400200b8 	.word	0x400200b8
 8003cbc:	40020410 	.word	0x40020410
 8003cc0:	40020428 	.word	0x40020428
 8003cc4:	40020440 	.word	0x40020440
 8003cc8:	40020458 	.word	0x40020458
 8003ccc:	40020470 	.word	0x40020470
 8003cd0:	40020488 	.word	0x40020488
 8003cd4:	400204a0 	.word	0x400204a0
 8003cd8:	400204b8 	.word	0x400204b8
 8003cdc:	58025408 	.word	0x58025408
 8003ce0:	5802541c 	.word	0x5802541c
 8003ce4:	58025430 	.word	0x58025430
 8003ce8:	58025444 	.word	0x58025444
 8003cec:	58025458 	.word	0x58025458
 8003cf0:	5802546c 	.word	0x5802546c
 8003cf4:	58025480 	.word	0x58025480
 8003cf8:	58025494 	.word	0x58025494

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e237      	b.n	800417e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e22c      	b.n	800417e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5c      	ldr	r2, [pc, #368]	@ (8003e9c <HAL_DMA_Abort_IT+0x1a0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1a4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a59      	ldr	r2, [pc, #356]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a58      	ldr	r2, [pc, #352]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1ac>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a56      	ldr	r2, [pc, #344]	@ (8003eac <HAL_DMA_Abort_IT+0x1b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a55      	ldr	r2, [pc, #340]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1b4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a53      	ldr	r2, [pc, #332]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1b8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a52      	ldr	r2, [pc, #328]	@ (8003eb8 <HAL_DMA_Abort_IT+0x1bc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a50      	ldr	r2, [pc, #320]	@ (8003ebc <HAL_DMA_Abort_IT+0x1c0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec0 <HAL_DMA_Abort_IT+0x1c4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_DMA_Abort_IT+0x1c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec8 <HAL_DMA_Abort_IT+0x1cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_DMA_Abort_IT+0x1d0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a49      	ldr	r2, [pc, #292]	@ (8003ed0 <HAL_DMA_Abort_IT+0x1d4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a47      	ldr	r2, [pc, #284]	@ (8003ed4 <HAL_DMA_Abort_IT+0x1d8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	@ (8003ed8 <HAL_DMA_Abort_IT+0x1dc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Abort_IT+0xcc>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_Abort_IT+0xce>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8003e9c <HAL_DMA_Abort_IT+0x1a0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04a      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1a4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d045      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1a8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d040      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1ac>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d03b      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <HAL_DMA_Abort_IT+0x1b0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1b4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1b8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02c      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <HAL_DMA_Abort_IT+0x1bc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d027      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a23      	ldr	r2, [pc, #140]	@ (8003ebc <HAL_DMA_Abort_IT+0x1c0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d022      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <HAL_DMA_Abort_IT+0x1c4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_DMA_Abort_IT+0x1c8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <HAL_DMA_Abort_IT+0x1cc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_DMA_Abort_IT+0x1d0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_DMA_Abort_IT+0x1d4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_DMA_Abort_IT+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a19      	ldr	r2, [pc, #100]	@ (8003ed8 <HAL_DMA_Abort_IT+0x1dc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <HAL_DMA_Abort_IT+0x18e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e178      	b.n	800417c <HAL_DMA_Abort_IT+0x480>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e16f      	b.n	800417c <HAL_DMA_Abort_IT+0x480>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 020e 	bic.w	r2, r2, #14
 8003eea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6c      	ldr	r2, [pc, #432]	@ (80040a4 <HAL_DMA_Abort_IT+0x3a8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d04a      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6b      	ldr	r2, [pc, #428]	@ (80040a8 <HAL_DMA_Abort_IT+0x3ac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d045      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_DMA_Abort_IT+0x3b0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d040      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a68      	ldr	r2, [pc, #416]	@ (80040b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d03b      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a66      	ldr	r2, [pc, #408]	@ (80040b4 <HAL_DMA_Abort_IT+0x3b8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d036      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a65      	ldr	r2, [pc, #404]	@ (80040b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d031      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <HAL_DMA_Abort_IT+0x3c0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02c      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a62      	ldr	r2, [pc, #392]	@ (80040c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d027      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80040c8 <HAL_DMA_Abort_IT+0x3cc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d01d      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <HAL_DMA_Abort_IT+0x3d0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80040d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5a      	ldr	r2, [pc, #360]	@ (80040d4 <HAL_DMA_Abort_IT+0x3d8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a59      	ldr	r2, [pc, #356]	@ (80040d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_DMA_Abort_IT+0x3e0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a56      	ldr	r2, [pc, #344]	@ (80040e0 <HAL_DMA_Abort_IT+0x3e4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <HAL_DMA_Abort_IT+0x2a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e007      	b.n	8003fae <HAL_DMA_Abort_IT+0x2b2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80040a4 <HAL_DMA_Abort_IT+0x3a8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d072      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80040a8 <HAL_DMA_Abort_IT+0x3ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d06d      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <HAL_DMA_Abort_IT+0x3b0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d068      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a37      	ldr	r2, [pc, #220]	@ (80040b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d063      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <HAL_DMA_Abort_IT+0x3b8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d05e      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a34      	ldr	r2, [pc, #208]	@ (80040b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d059      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <HAL_DMA_Abort_IT+0x3c0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d054      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	@ (80040c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04f      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <HAL_DMA_Abort_IT+0x3c8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <HAL_DMA_Abort_IT+0x3cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_DMA_Abort_IT+0x3d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_DMA_Abort_IT+0x3d4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <HAL_DMA_Abort_IT+0x3d8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	@ (80040d8 <HAL_DMA_Abort_IT+0x3dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a27      	ldr	r2, [pc, #156]	@ (80040dc <HAL_DMA_Abort_IT+0x3e0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <HAL_DMA_Abort_IT+0x3e4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a24      	ldr	r2, [pc, #144]	@ (80040e4 <HAL_DMA_Abort_IT+0x3e8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_DMA_Abort_IT+0x3ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a21      	ldr	r2, [pc, #132]	@ (80040ec <HAL_DMA_Abort_IT+0x3f0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_DMA_Abort_IT+0x3f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <HAL_DMA_Abort_IT+0x3f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_DMA_Abort_IT+0x3fc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	@ (80040fc <HAL_DMA_Abort_IT+0x400>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <HAL_DMA_Abort_IT+0x404>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d132      	bne.n	8004104 <HAL_DMA_Abort_IT+0x408>
 800409e:	2301      	movs	r3, #1
 80040a0:	e031      	b.n	8004106 <HAL_DMA_Abort_IT+0x40a>
 80040a2:	bf00      	nop
 80040a4:	40020010 	.word	0x40020010
 80040a8:	40020028 	.word	0x40020028
 80040ac:	40020040 	.word	0x40020040
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40020070 	.word	0x40020070
 80040b8:	40020088 	.word	0x40020088
 80040bc:	400200a0 	.word	0x400200a0
 80040c0:	400200b8 	.word	0x400200b8
 80040c4:	40020410 	.word	0x40020410
 80040c8:	40020428 	.word	0x40020428
 80040cc:	40020440 	.word	0x40020440
 80040d0:	40020458 	.word	0x40020458
 80040d4:	40020470 	.word	0x40020470
 80040d8:	40020488 	.word	0x40020488
 80040dc:	400204a0 	.word	0x400204a0
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	58025408 	.word	0x58025408
 80040e8:	5802541c 	.word	0x5802541c
 80040ec:	58025430 	.word	0x58025430
 80040f0:	58025444 	.word	0x58025444
 80040f4:	58025458 	.word	0x58025458
 80040f8:	5802546c 	.word	0x5802546c
 80040fc:	58025480 	.word	0x58025480
 8004100:	58025494 	.word	0x58025494
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d028      	beq.n	800415c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004118:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004138:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004150:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800415a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	@ 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004196:	4b89      	ldr	r3, [pc, #548]	@ (80043bc <HAL_GPIO_Init+0x234>)
 8004198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419a:	e194      	b.n	80044c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8186 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_GPIO_Init+0x44>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d017      	beq.n	800426a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d123      	bne.n	80042be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0203 	and.w	r2, r3, #3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e0 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b2f      	ldr	r3, [pc, #188]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004302:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004306:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_GPIO_Init+0x238>)
 8004312:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431e:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_GPIO_Init+0x23c>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <HAL_GPIO_Init+0x240>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d052      	beq.n	80043f0 <HAL_GPIO_Init+0x268>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	@ (80043cc <HAL_GPIO_Init+0x244>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_GPIO_Init+0x22e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1e      	ldr	r2, [pc, #120]	@ (80043d0 <HAL_GPIO_Init+0x248>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x22a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_GPIO_Init+0x24c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x226>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_GPIO_Init+0x250>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x222>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <HAL_GPIO_Init+0x254>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x21e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_GPIO_Init+0x258>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x21a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_GPIO_Init+0x25c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x216>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_GPIO_Init+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x212>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <HAL_GPIO_Init+0x264>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x20e>
 8004392:	2309      	movs	r3, #9
 8004394:	e02d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 8004396:	230a      	movs	r3, #10
 8004398:	e02b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439a:	2308      	movs	r3, #8
 800439c:	e029      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439e:	2307      	movs	r3, #7
 80043a0:	e027      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e025      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e023      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e021      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e01f      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e01d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ba:	bf00      	nop
 80043bc:	58000080 	.word	0x58000080
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58000400 	.word	0x58000400
 80043c8:	58020000 	.word	0x58020000
 80043cc:	58020400 	.word	0x58020400
 80043d0:	58020800 	.word	0x58020800
 80043d4:	58020c00 	.word	0x58020c00
 80043d8:	58021000 	.word	0x58021000
 80043dc:	58021400 	.word	0x58021400
 80043e0:	58021800 	.word	0x58021800
 80043e4:	58021c00 	.word	0x58021c00
 80043e8:	58022000 	.word	0x58022000
 80043ec:	58022400 	.word	0x58022400
 80043f0:	2300      	movs	r3, #0
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004402:	4938      	ldr	r1, [pc, #224]	@ (80044e4 <HAL_GPIO_Init+0x35c>)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f ae63 	bne.w	800419c <HAL_GPIO_Init+0x14>
  }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3724      	adds	r7, #36	@ 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	58000400 	.word	0x58000400

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004504:	e003      	b.n	800450e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	619a      	str	r2, [r3, #24]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004524:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	2b06      	cmp	r3, #6
 800452e:	d00a      	beq.n	8004546 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004530:	4b26      	ldr	r3, [pc, #152]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e040      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e03e      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004546:	4b21      	ldr	r3, [pc, #132]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800454e:	491f      	ldr	r1, [pc, #124]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4313      	orrs	r3, r2
 8004554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004556:	f7fe fefb 	bl	8003350 <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800455c:	e009      	b.n	8004572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800455e:	f7fe fef7 	bl	8003350 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800456c:	d901      	bls.n	8004572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e028      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004572:	4b16      	ldr	r3, [pc, #88]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457e:	d1ee      	bne.n	800455e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b1e      	cmp	r3, #30
 8004584:	d008      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b2e      	cmp	r3, #46	@ 0x2e
 800458a:	d005      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b1d      	cmp	r3, #29
 8004590:	d002      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b2d      	cmp	r3, #45	@ 0x2d
 8004596:	d114      	bne.n	80045c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004598:	f7fe feda 	bl	8003350 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800459e:	e009      	b.n	80045b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045a0:	f7fe fed6 	bl	8003350 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045ae:	d901      	bls.n	80045b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d1ee      	bne.n	80045a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024800 	.word	0x58024800

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f000 bc1f 	b.w	8004e22 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80b3 	beq.w	8004758 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f2:	4b95      	ldr	r3, [pc, #596]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045fc:	4b92      	ldr	r3, [pc, #584]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	2b10      	cmp	r3, #16
 8004606:	d007      	beq.n	8004618 <HAL_RCC_OscConfig+0x48>
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	2b18      	cmp	r3, #24
 800460c:	d112      	bne.n	8004634 <HAL_RCC_OscConfig+0x64>
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d10d      	bne.n	8004634 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b8b      	ldr	r3, [pc, #556]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8098 	beq.w	8004756 <HAL_RCC_OscConfig+0x186>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8093 	bne.w	8004756 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e3f6      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d106      	bne.n	800464c <HAL_RCC_OscConfig+0x7c>
 800463e:	4b82      	ldr	r3, [pc, #520]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a81      	ldr	r2, [pc, #516]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e058      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d112      	bne.n	800467a <HAL_RCC_OscConfig+0xaa>
 8004654:	4b7c      	ldr	r3, [pc, #496]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7b      	ldr	r2, [pc, #492]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800465a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4b79      	ldr	r3, [pc, #484]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a78      	ldr	r2, [pc, #480]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004666:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a75      	ldr	r2, [pc, #468]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e041      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004682:	d112      	bne.n	80046aa <HAL_RCC_OscConfig+0xda>
 8004684:	4b70      	ldr	r3, [pc, #448]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a6f      	ldr	r2, [pc, #444]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800468a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b6d      	ldr	r3, [pc, #436]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6c      	ldr	r2, [pc, #432]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004696:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b6a      	ldr	r3, [pc, #424]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a69      	ldr	r2, [pc, #420]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e029      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80046b2:	d112      	bne.n	80046da <HAL_RCC_OscConfig+0x10a>
 80046b4:	4b64      	ldr	r3, [pc, #400]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a63      	ldr	r2, [pc, #396]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a60      	ldr	r2, [pc, #384]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	e011      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 80046da:	4b5b      	ldr	r3, [pc, #364]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5a      	ldr	r2, [pc, #360]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b58      	ldr	r3, [pc, #352]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a57      	ldr	r2, [pc, #348]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b55      	ldr	r3, [pc, #340]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a54      	ldr	r2, [pc, #336]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80046f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fe fe23 	bl	8003350 <HAL_GetTick>
 800470a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470e:	f7fe fe1f 	bl	8003350 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	@ 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e380      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004720:	4b49      	ldr	r3, [pc, #292]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x13e>
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fe fe0f 	bl	8003350 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004736:	f7fe fe0b 	bl	8003350 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b64      	cmp	r3, #100	@ 0x64
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e36c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004748:	4b3f      	ldr	r3, [pc, #252]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x166>
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 808c 	beq.w	800487e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004766:	4b38      	ldr	r3, [pc, #224]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800476e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004770:	4b35      	ldr	r3, [pc, #212]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_RCC_OscConfig+0x1bc>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b18      	cmp	r3, #24
 8004780:	d137      	bne.n	80047f2 <HAL_RCC_OscConfig+0x222>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d132      	bne.n	80047f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	4b2e      	ldr	r3, [pc, #184]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x1d4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e33e      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047a4:	4b28      	ldr	r3, [pc, #160]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 0219 	bic.w	r2, r3, #25
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4925      	ldr	r1, [pc, #148]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe fdcb 	bl	8003350 <HAL_GetTick>
 80047ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe fdc7 	bl	8003350 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e328      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4917      	ldr	r1, [pc, #92]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	e045      	b.n	800487e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d028      	beq.n	800484c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0219 	bic.w	r2, r3, #25
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4910      	ldr	r1, [pc, #64]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fe fda0 	bl	8003350 <HAL_GetTick>
 8004810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fe fd9c 	bl	8003350 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e2fd      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004826:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	4901      	ldr	r1, [pc, #4]	@ (8004848 <HAL_RCC_OscConfig+0x278>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
 8004846:	e01a      	b.n	800487e <HAL_RCC_OscConfig+0x2ae>
 8004848:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484c:	4b97      	ldr	r3, [pc, #604]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a96      	ldr	r2, [pc, #600]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe fd7a 	bl	8003350 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fe fd76 	bl	8003350 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e2d7      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004872:	4b8e      	ldr	r3, [pc, #568]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06a      	beq.n	8004960 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488a:	4b88      	ldr	r3, [pc, #544]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004892:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004894:	4b85      	ldr	r3, [pc, #532]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d007      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2e0>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d11b      	bne.n	80048de <HAL_RCC_OscConfig+0x30e>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d116      	bne.n	80048de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048b0:	4b7e      	ldr	r3, [pc, #504]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b80      	cmp	r3, #128	@ 0x80
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e2ac      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048c8:	4b78      	ldr	r3, [pc, #480]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	4975      	ldr	r1, [pc, #468]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048dc:	e040      	b.n	8004960 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048e6:	4b71      	ldr	r3, [pc, #452]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a70      	ldr	r2, [pc, #448]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fe fd2d 	bl	8003350 <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048fa:	f7fe fd29 	bl	8003350 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e28a      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490c:	4b67      	ldr	r3, [pc, #412]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004918:	4b64      	ldr	r3, [pc, #400]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	4961      	ldr	r1, [pc, #388]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e018      	b.n	8004960 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800492e:	4b5f      	ldr	r3, [pc, #380]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5e      	ldr	r2, [pc, #376]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fe fd09 	bl	8003350 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004942:	f7fe fd05 	bl	8003350 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e266      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004954:	4b55      	ldr	r3, [pc, #340]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d036      	beq.n	80049da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004974:	4b4d      	ldr	r3, [pc, #308]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004978:	4a4c      	ldr	r2, [pc, #304]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fe fce6 	bl	8003350 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fe fce2 	bl	8003350 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e243      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800499a:	4b44      	ldr	r3, [pc, #272]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x3b8>
 80049a6:	e018      	b.n	80049da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b40      	ldr	r3, [pc, #256]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ac:	4a3f      	ldr	r2, [pc, #252]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fe fccc 	bl	8003350 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fe fcc8 	bl	8003350 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e229      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ce:	4b37      	ldr	r3, [pc, #220]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d036      	beq.n	8004a54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d019      	beq.n	8004a22 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ee:	4b2f      	ldr	r3, [pc, #188]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2e      	ldr	r2, [pc, #184]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049fa:	f7fe fca9 	bl	8003350 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a02:	f7fe fca5 	bl	8003350 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e206      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x432>
 8004a20:	e018      	b.n	8004a54 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe fc8f 	bl	8003350 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a36:	f7fe fc8b 	bl	8003350 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e1ec      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a48:	4b18      	ldr	r3, [pc, #96]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80af 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a62:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a12      	ldr	r2, [pc, #72]	@ (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a6e:	f7fe fc6f 	bl	8003350 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fe fc6b 	bl	8003350 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b64      	cmp	r3, #100	@ 0x64
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e1cc      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4e4>
 8004a9c:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	4a02      	ldr	r2, [pc, #8]	@ (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa8:	e05b      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	58024800 	.word	0x58024800
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d112      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x512>
 8004abc:	4b9d      	ldr	r3, [pc, #628]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4a99      	ldr	r2, [pc, #612]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad4:	4b97      	ldr	r3, [pc, #604]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a96      	ldr	r2, [pc, #600]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae0:	e03f      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x540>
 8004aea:	4b92      	ldr	r3, [pc, #584]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	4a91      	ldr	r2, [pc, #580]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004af6:	4b8f      	ldr	r3, [pc, #572]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a8e      	ldr	r2, [pc, #568]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b02:	4b8c      	ldr	r3, [pc, #560]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	4a8b      	ldr	r2, [pc, #556]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0e:	e028      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b85      	cmp	r3, #133	@ 0x85
 8004b16:	d112      	bne.n	8004b3e <HAL_RCC_OscConfig+0x56e>
 8004b18:	4b86      	ldr	r3, [pc, #536]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	4a85      	ldr	r2, [pc, #532]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b24:	4b83      	ldr	r3, [pc, #524]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	4a82      	ldr	r2, [pc, #520]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b30:	4b80      	ldr	r3, [pc, #512]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b34:	4a7f      	ldr	r2, [pc, #508]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3c:	e011      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	4a7c      	ldr	r2, [pc, #496]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	4a79      	ldr	r2, [pc, #484]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b56:	4b77      	ldr	r3, [pc, #476]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	4a76      	ldr	r2, [pc, #472]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d015      	beq.n	8004b96 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fe fbf1 	bl	8003350 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fe fbed 	bl	8003350 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e14c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b88:	4b6a      	ldr	r3, [pc, #424]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCC_OscConfig+0x5a2>
 8004b94:	e014      	b.n	8004bc0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fe fbdb 	bl	8003350 <HAL_GetTick>
 8004b9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fe fbd7 	bl	8003350 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e136      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 812b 	beq.w	8004e20 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bca:	4b5a      	ldr	r3, [pc, #360]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd2:	2b18      	cmp	r3, #24
 8004bd4:	f000 80bb 	beq.w	8004d4e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f040 8095 	bne.w	8004d0c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b54      	ldr	r3, [pc, #336]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a53      	ldr	r2, [pc, #332]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fe fbaf 	bl	8003350 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fe fbab 	bl	8003350 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e10c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c08:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c14:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c18:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <HAL_RCC_OscConfig+0x768>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	430a      	orrs	r2, r1
 8004c28:	4942      	ldr	r1, [pc, #264]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	3b01      	subs	r3, #1
 8004c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	025b      	lsls	r3, r3, #9
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	3b01      	subs	r3, #1
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c5e:	4935      	ldr	r1, [pc, #212]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c64:	4b33      	ldr	r3, [pc, #204]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a32      	ldr	r2, [pc, #200]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c70:	4b30      	ldr	r3, [pc, #192]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c74:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <HAL_RCC_OscConfig+0x76c>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c7c:	00d2      	lsls	r2, r2, #3
 8004c7e:	492d      	ldr	r1, [pc, #180]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c84:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	f023 020c 	bic.w	r2, r3, #12
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	4928      	ldr	r1, [pc, #160]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c96:	4b27      	ldr	r3, [pc, #156]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	f023 0202 	bic.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	4924      	ldr	r1, [pc, #144]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ca8:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fb34 	bl	8003350 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fe fb30 	bl	8003350 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e091      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x71c>
 8004d0a:	e089      	b.n	8004e20 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a08      	ldr	r2, [pc, #32]	@ (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fb1a 	bl	8003350 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1e:	e00f      	b.n	8004d40 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fe fb16 	bl	8003350 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d908      	bls.n	8004d40 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e077      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	fffffc0c 	.word	0xfffffc0c
 8004d3c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d40:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e9      	bne.n	8004d20 <HAL_RCC_OscConfig+0x750>
 8004d4c:	e068      	b.n	8004e20 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d4e:	4b37      	ldr	r3, [pc, #220]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d54:	4b35      	ldr	r3, [pc, #212]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d031      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d12a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d122      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d11a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0a5b      	lsrs	r3, r3, #9
 8004d94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d111      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e02b      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d01f      	beq.n	8004e20 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004de0:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	4a11      	ldr	r2, [pc, #68]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dec:	f7fe fab0 	bl	8003350 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004df2:	bf00      	nop
 8004df4:	f7fe faac 	bl	8003350 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d0f9      	beq.n	8004df4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e00:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <HAL_RCC_OscConfig+0x860>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e0c:	00d2      	lsls	r2, r2, #3
 8004e0e:	4907      	ldr	r1, [pc, #28]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e14:	4b05      	ldr	r3, [pc, #20]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	4a04      	ldr	r2, [pc, #16]	@ (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	@ 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	ffff0007 	.word	0xffff0007

08004e34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e19c      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b8a      	ldr	r3, [pc, #552]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d910      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b87      	ldr	r3, [pc, #540]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 020f 	bic.w	r2, r3, #15
 8004e5e:	4985      	ldr	r1, [pc, #532]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b83      	ldr	r3, [pc, #524]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e184      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	4b7b      	ldr	r3, [pc, #492]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d908      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e94:	4b78      	ldr	r3, [pc, #480]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4975      	ldr	r1, [pc, #468]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d010      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	4b70      	ldr	r3, [pc, #448]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d908      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	496a      	ldr	r1, [pc, #424]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	4b64      	ldr	r3, [pc, #400]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d908      	bls.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ef0:	4b61      	ldr	r3, [pc, #388]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	495e      	ldr	r1, [pc, #376]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	4b59      	ldr	r3, [pc, #356]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f1e:	4b56      	ldr	r3, [pc, #344]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4953      	ldr	r1, [pc, #332]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b4d      	ldr	r3, [pc, #308]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d908      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f023 020f 	bic.w	r2, r3, #15
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4947      	ldr	r1, [pc, #284]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d055      	beq.n	8005016 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f6a:	4b43      	ldr	r3, [pc, #268]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4940      	ldr	r1, [pc, #256]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f84:	4b3c      	ldr	r3, [pc, #240]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0f6      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f9c:	4b36      	ldr	r3, [pc, #216]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d115      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0ea      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fb4:	4b30      	ldr	r3, [pc, #192]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0de      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0d6      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd4:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f023 0207 	bic.w	r2, r3, #7
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4925      	ldr	r1, [pc, #148]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fe f9b3 	bl	8003350 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fee:	f7fe f9af 	bl	8003350 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0be      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005004:	4b1c      	ldr	r3, [pc, #112]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	429a      	cmp	r2, r3
 8005014:	d1eb      	bne.n	8004fee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	429a      	cmp	r2, r3
 8005030:	d208      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005032:	4b11      	ldr	r3, [pc, #68]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f023 020f 	bic.w	r2, r3, #15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	490e      	ldr	r1, [pc, #56]	@ (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005040:	4313      	orrs	r3, r2
 8005042:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d214      	bcs.n	800507c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 020f 	bic.w	r2, r3, #15
 800505a:	4906      	ldr	r1, [pc, #24]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b04      	ldr	r3, [pc, #16]	@ (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e086      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
 8005074:	52002000 	.word	0x52002000
 8005078:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	4b3f      	ldr	r3, [pc, #252]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005094:	429a      	cmp	r2, r3
 8005096:	d208      	bcs.n	80050aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005098:	4b3c      	ldr	r3, [pc, #240]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	4939      	ldr	r1, [pc, #228]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d208      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050c6:	4b31      	ldr	r3, [pc, #196]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	492e      	ldr	r1, [pc, #184]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d010      	beq.n	8005106 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	4b28      	ldr	r3, [pc, #160]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d208      	bcs.n	8005106 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050f4:	4b25      	ldr	r3, [pc, #148]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	4922      	ldr	r1, [pc, #136]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 8005102:	4313      	orrs	r3, r2
 8005104:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511e:	429a      	cmp	r2, r3
 8005120:	d208      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005122:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4917      	ldr	r1, [pc, #92]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 8005130:	4313      	orrs	r3, r2
 8005132:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005134:	f000 f834 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4912      	ldr	r1, [pc, #72]	@ (8005190 <HAL_RCC_ClockConfig+0x35c>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005152:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <HAL_RCC_ClockConfig+0x358>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	4a0d      	ldr	r2, [pc, #52]	@ (8005190 <HAL_RCC_ClockConfig+0x35c>)
 800515c:	5cd3      	ldrb	r3, [r2, r3]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	4a0a      	ldr	r2, [pc, #40]	@ (8005194 <HAL_RCC_ClockConfig+0x360>)
 800516a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800516c:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_RCC_ClockConfig+0x364>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <HAL_RCC_ClockConfig+0x368>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe f8a0 	bl	80032bc <HAL_InitTick>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
 8005190:	0800acfc 	.word	0x0800acfc
 8005194:	24000004 	.word	0x24000004
 8005198:	24000000 	.word	0x24000000
 800519c:	24000008 	.word	0x24000008

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	@ 0x24
 80051a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a6:	4bb3      	ldr	r3, [pc, #716]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ae:	2b18      	cmp	r3, #24
 80051b0:	f200 8155 	bhi.w	800545e <HAL_RCC_GetSysClockFreq+0x2be>
 80051b4:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005221 	.word	0x08005221
 80051c0:	0800545f 	.word	0x0800545f
 80051c4:	0800545f 	.word	0x0800545f
 80051c8:	0800545f 	.word	0x0800545f
 80051cc:	0800545f 	.word	0x0800545f
 80051d0:	0800545f 	.word	0x0800545f
 80051d4:	0800545f 	.word	0x0800545f
 80051d8:	0800545f 	.word	0x0800545f
 80051dc:	08005247 	.word	0x08005247
 80051e0:	0800545f 	.word	0x0800545f
 80051e4:	0800545f 	.word	0x0800545f
 80051e8:	0800545f 	.word	0x0800545f
 80051ec:	0800545f 	.word	0x0800545f
 80051f0:	0800545f 	.word	0x0800545f
 80051f4:	0800545f 	.word	0x0800545f
 80051f8:	0800545f 	.word	0x0800545f
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800545f 	.word	0x0800545f
 8005204:	0800545f 	.word	0x0800545f
 8005208:	0800545f 	.word	0x0800545f
 800520c:	0800545f 	.word	0x0800545f
 8005210:	0800545f 	.word	0x0800545f
 8005214:	0800545f 	.word	0x0800545f
 8005218:	0800545f 	.word	0x0800545f
 800521c:	08005253 	.word	0x08005253
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005220:	4b94      	ldr	r3, [pc, #592]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800522c:	4b91      	ldr	r3, [pc, #580]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	4a90      	ldr	r2, [pc, #576]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800523e:	e111      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005240:	4b8d      	ldr	r3, [pc, #564]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005242:	61bb      	str	r3, [r7, #24]
      break;
 8005244:	e10e      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005246:	4b8d      	ldr	r3, [pc, #564]	@ (800547c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005248:	61bb      	str	r3, [r7, #24]
      break;
 800524a:	e10b      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800524c:	4b8c      	ldr	r3, [pc, #560]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800524e:	61bb      	str	r3, [r7, #24]
      break;
 8005250:	e108      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005252:	4b88      	ldr	r3, [pc, #544]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800525c:	4b85      	ldr	r3, [pc, #532]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005266:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005268:	4b82      	ldr	r3, [pc, #520]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005272:	4b80      	ldr	r3, [pc, #512]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	08db      	lsrs	r3, r3, #3
 8005278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80e1 	beq.w	8005458 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b02      	cmp	r3, #2
 800529a:	f000 8083 	beq.w	80053a4 <HAL_RCC_GetSysClockFreq+0x204>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	f200 80a1 	bhi.w	80053e8 <HAL_RCC_GetSysClockFreq+0x248>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x114>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d056      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052b2:	e099      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02d      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b62      	ldr	r3, [pc, #392]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800531a:	e087      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005488 <HAL_RCC_GetSysClockFreq+0x2e8>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b51      	ldr	r3, [pc, #324]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005342:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800535e:	e065      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800548c <HAL_RCC_GetSysClockFreq+0x2ec>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b40      	ldr	r3, [pc, #256]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a02 	vldr	s12, [r7, #8]
 8005386:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053a2:	e043      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005490 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e6:	e021      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800548c <HAL_RCC_GetSysClockFreq+0x2ec>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a02 	vldr	s12, [r7, #8]
 800540e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800542c:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	0a5b      	lsrs	r3, r3, #9
 8005432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005436:	3301      	adds	r3, #1
 8005438:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005444:	edd7 6a07 	vldr	s13, [r7, #28]
 8005448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005450:	ee17 3a90 	vmov	r3, s15
 8005454:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005456:	e005      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
      break;
 800545c:	e002      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800545e:	4b07      	ldr	r3, [pc, #28]	@ (800547c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005460:	61bb      	str	r3, [r7, #24]
      break;
 8005462:	bf00      	nop
  }

  return sysclockfreq;
 8005464:	69bb      	ldr	r3, [r7, #24]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3724      	adds	r7, #36	@ 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	03d09000 	.word	0x03d09000
 800547c:	003d0900 	.word	0x003d0900
 8005480:	007a1200 	.word	0x007a1200
 8005484:	46000000 	.word	0x46000000
 8005488:	4c742400 	.word	0x4c742400
 800548c:	4a742400 	.word	0x4a742400
 8005490:	4af42400 	.word	0x4af42400

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800549a:	f7ff fe81 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b10      	ldr	r3, [pc, #64]	@ (80054e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490f      	ldr	r1, [pc, #60]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	4a09      	ldr	r2, [pc, #36]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a07      	ldr	r2, [pc, #28]	@ (80054ec <HAL_RCC_GetHCLKFreq+0x58>)
 80054d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054d2:	4a07      	ldr	r2, [pc, #28]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054d8:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <HAL_RCC_GetHCLKFreq+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	0800acfc 	.word	0x0800acfc
 80054ec:	24000004 	.word	0x24000004
 80054f0:	24000000 	.word	0x24000000

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80054f8:	f7ff ffcc 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4904      	ldr	r1, [pc, #16]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x28>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	58024400 	.word	0x58024400
 800551c:	0800acfc 	.word	0x0800acfc

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005524:	f7ff ffb6 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	58024400 	.word	0x58024400
 8005548:	0800acfc 	.word	0x0800acfc

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b0c8      	sub	sp, #288	@ 0x120
 8005552:	af00      	add	r7, sp, #0
 8005554:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005558:	2300      	movs	r3, #0
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800555e:	2300      	movs	r3, #0
 8005560:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005570:	2500      	movs	r5, #0
 8005572:	ea54 0305 	orrs.w	r3, r4, r5
 8005576:	d049      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005582:	d02f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005584:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005588:	d828      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800558a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800558e:	d01a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005594:	d822      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559e:	d007      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055a0:	e01c      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	4aa6      	ldr	r2, [pc, #664]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055ae:	e01a      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b4:	3308      	adds	r3, #8
 80055b6:	2102      	movs	r1, #2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 fc43 	bl	8006e44 <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055c4:	e00f      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ca:	3328      	adds	r3, #40	@ 0x28
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fcea 	bl	8006fa8 <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055da:	e004      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055ee:	4b94      	ldr	r3, [pc, #592]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055fc:	4a90      	ldr	r2, [pc, #576]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6513      	str	r3, [r2, #80]	@ 0x50
 8005602:	e003      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005608:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800560c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	ea58 0309 	orrs.w	r3, r8, r9
 8005620:	d047      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005628:	2b04      	cmp	r3, #4
 800562a:	d82a      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005649 	.word	0x08005649
 8005638:	08005657 	.word	0x08005657
 800563c:	0800566d 	.word	0x0800566d
 8005640:	0800568b 	.word	0x0800568b
 8005644:	0800568b 	.word	0x0800568b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b7d      	ldr	r3, [pc, #500]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a7c      	ldr	r2, [pc, #496]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005654:	e01a      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fbf0 	bl	8006e44 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800566a:	e00f      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fc97 	bl	8006fa8 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005680:	e004      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005688:	e000      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800568a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005694:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005698:	f023 0107 	bic.w	r1, r3, #7
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a2:	4a67      	ldr	r2, [pc, #412]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80056be:	f04f 0b00 	mov.w	fp, #0
 80056c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80056c6:	d054      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056d2:	d036      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80056d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056d8:	d82f      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056de:	d032      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e4:	d829      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056e8:	d02f      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80056ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80056ec:	d825      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056ee:	2b80      	cmp	r3, #128	@ 0x80
 80056f0:	d018      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80056f2:	2b80      	cmp	r3, #128	@ 0x80
 80056f4:	d821      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80056fa:	2b40      	cmp	r3, #64	@ 0x40
 80056fc:	d007      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80056fe:	e01c      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4b4f      	ldr	r3, [pc, #316]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800570c:	e01e      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005712:	3308      	adds	r3, #8
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fb94 	bl	8006e44 <RCCEx_PLL2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005722:	e013      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005728:	3328      	adds	r3, #40	@ 0x28
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fc3b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005738:	e008      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005740:	e004      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800574a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005754:	4b3a      	ldr	r3, [pc, #232]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005758:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005762:	4a37      	ldr	r2, [pc, #220]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6513      	str	r3, [r2, #80]	@ 0x50
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800576e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800577e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005788:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d05c      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800579c:	d03b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800579e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057a2:	d834      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a8:	d037      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ae:	d82e      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057b4:	d033      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057ba:	d828      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c0:	d01a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c6:	d822      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d0:	d007      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80057d2:	e01c      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057e0:	e01e      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e6:	3308      	adds	r3, #8
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fb2a 	bl	8006e44 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057f6:	e013      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057fc:	3328      	adds	r3, #40	@ 0x28
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fbd1 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005836:	4a02      	ldr	r2, [pc, #8]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6513      	str	r3, [r2, #80]	@ 0x50
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005848:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d03a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	2b30      	cmp	r3, #48	@ 0x30
 8005874:	d01f      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005876:	2b30      	cmp	r3, #48	@ 0x30
 8005878:	d819      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d00c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d815      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005886:	2b10      	cmp	r3, #16
 8005888:	d111      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4bae      	ldr	r3, [pc, #696]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4aad      	ldr	r2, [pc, #692]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589c:	3308      	adds	r3, #8
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 facf 	bl	8006e44 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058c4:	4b9f      	ldr	r3, [pc, #636]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	4a9c      	ldr	r2, [pc, #624]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d051      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800590c:	d035      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005912:	d82e      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005914:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005918:	d031      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800591a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800591e:	d828      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005924:	d01a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592a:	d822      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005936:	e01c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4b82      	ldr	r3, [pc, #520]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	4a81      	ldr	r2, [pc, #516]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005944:	e01c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594a:	3308      	adds	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fa78 	bl	8006e44 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800595a:	e011      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fb1f 	bl	8006fa8 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005988:	4b6e      	ldr	r3, [pc, #440]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005996:	4a6b      	ldr	r2, [pc, #428]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6513      	str	r3, [r2, #80]	@ 0x50
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d053      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d0:	d033      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80059d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d6:	d82c      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059dc:	d02f      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80059de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e2:	d826      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059e8:	d02b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ee:	d820      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f4:	d012      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fa:	d81a      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a04:	d115      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fa18 	bl	8006e44 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e015      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a20:	3328      	adds	r3, #40	@ 0x28
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fabf 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a50:	4b3c      	ldr	r3, [pc, #240]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5e:	4a39      	ldr	r2, [pc, #228]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	d060      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a96:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a9a:	d039      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005a9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005aa0:	d832      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa6:	d035      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aac:	d82c      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab2:	d031      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d826      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abe:	d02d      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ac4:	d820      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aca:	d012      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad0:	d81a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d024      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ada:	d115      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f9ad 	bl	8006e44 <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005af0:	e017      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af6:	3328      	adds	r3, #40	@ 0x28
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fa54 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b06:	e00c      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b0e:	e008      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b10:	bf00      	nop
 8005b12:	e006      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b14:	bf00      	nop
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b3a:	4a02      	ldr	r2, [pc, #8]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	d037      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b7a:	d00e      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b80:	d816      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d018      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8c:	4bc4      	ldr	r3, [pc, #784]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	4ac3      	ldr	r2, [pc, #780]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b98:	e00f      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 f94e 	bl	8006e44 <RCCEx_PLL2_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bae:	e004      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bc2:	4bb7      	ldr	r3, [pc, #732]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bd0:	4ab3      	ldr	r2, [pc, #716]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	d039      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d81c      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c21 	.word	0x08005c21
 8005c18:	08005c2f 	.word	0x08005c2f
 8005c1c:	08005c4d 	.word	0x08005c4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c20:	4b9f      	ldr	r3, [pc, #636]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	4a9e      	ldr	r2, [pc, #632]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c2c:	e00f      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c32:	3308      	adds	r3, #8
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f904 	bl	8006e44 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c42:	e004      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c4a:	e000      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c56:	4b92      	ldr	r3, [pc, #584]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5a:	f023 0103 	bic.w	r1, r3, #3
 8005c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c64:	4a8e      	ldr	r2, [pc, #568]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f000 8099 	beq.w	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c96:	4b83      	ldr	r3, [pc, #524]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a82      	ldr	r2, [pc, #520]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca2:	f7fd fb55 	bl	8003350 <HAL_GetTick>
 8005ca6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005caa:	e00b      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fd fb50 	bl	8003350 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b64      	cmp	r3, #100	@ 0x64
 8005cba:	d903      	bls.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc4:	4b77      	ldr	r3, [pc, #476]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ed      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d173      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cd8:	4b71      	ldr	r3, [pc, #452]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ce4:	4053      	eors	r3, r2
 8005ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d015      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cee:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cfa:	4b69      	ldr	r3, [pc, #420]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfe:	4a68      	ldr	r2, [pc, #416]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d06:	4b66      	ldr	r3, [pc, #408]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	4a65      	ldr	r2, [pc, #404]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d12:	4a63      	ldr	r2, [pc, #396]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d26:	d118      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fd fb12 	bl	8003350 <HAL_GetTick>
 8005d2c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d30:	e00d      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d32:	f7fd fb0d 	bl	8003350 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d903      	bls.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4e:	4b54      	ldr	r3, [pc, #336]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0eb      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d129      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d72:	d10e      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d74:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d84:	091a      	lsrs	r2, r3, #4
 8005d86:	4b48      	ldr	r3, [pc, #288]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	4a45      	ldr	r2, [pc, #276]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6113      	str	r3, [r2, #16]
 8005d90:	e005      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d92:	4b43      	ldr	r3, [pc, #268]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	4a42      	ldr	r2, [pc, #264]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d9c:	6113      	str	r3, [r2, #16]
 8005d9e:	4b40      	ldr	r3, [pc, #256]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005da0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db4:	e008      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005dbe:	e003      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f002 0301 	and.w	r3, r2, #1
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f000 8090 	beq.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df2:	2b28      	cmp	r3, #40	@ 0x28
 8005df4:	d870      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005df6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005ee1 	.word	0x08005ee1
 8005e00:	08005ed9 	.word	0x08005ed9
 8005e04:	08005ed9 	.word	0x08005ed9
 8005e08:	08005ed9 	.word	0x08005ed9
 8005e0c:	08005ed9 	.word	0x08005ed9
 8005e10:	08005ed9 	.word	0x08005ed9
 8005e14:	08005ed9 	.word	0x08005ed9
 8005e18:	08005ed9 	.word	0x08005ed9
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ed9 	.word	0x08005ed9
 8005e24:	08005ed9 	.word	0x08005ed9
 8005e28:	08005ed9 	.word	0x08005ed9
 8005e2c:	08005ed9 	.word	0x08005ed9
 8005e30:	08005ed9 	.word	0x08005ed9
 8005e34:	08005ed9 	.word	0x08005ed9
 8005e38:	08005ed9 	.word	0x08005ed9
 8005e3c:	08005ec3 	.word	0x08005ec3
 8005e40:	08005ed9 	.word	0x08005ed9
 8005e44:	08005ed9 	.word	0x08005ed9
 8005e48:	08005ed9 	.word	0x08005ed9
 8005e4c:	08005ed9 	.word	0x08005ed9
 8005e50:	08005ed9 	.word	0x08005ed9
 8005e54:	08005ed9 	.word	0x08005ed9
 8005e58:	08005ed9 	.word	0x08005ed9
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08005ed9 	.word	0x08005ed9
 8005e64:	08005ed9 	.word	0x08005ed9
 8005e68:	08005ed9 	.word	0x08005ed9
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08005ed9 	.word	0x08005ed9
 8005e7c:	08005ee1 	.word	0x08005ee1
 8005e80:	08005ed9 	.word	0x08005ed9
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	08005ed9 	.word	0x08005ed9
 8005e90:	08005ed9 	.word	0x08005ed9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58024800 	.word	0x58024800
 8005ea8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 ffc5 	bl	8006e44 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e00f      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec6:	3328      	adds	r3, #40	@ 0x28
 8005ec8:	2101      	movs	r1, #1
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f86c 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e004      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ede:	e000      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005eea:	4bc0      	ldr	r3, [pc, #768]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005efa:	4abc      	ldr	r2, [pc, #752]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f002 0302 	and.w	r3, r2, #2
 8005f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f20:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d043      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d824      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f36:	a201      	add	r2, pc, #4	@ (adr r2, 8005f3c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f6b 	.word	0x08005f6b
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ff71 	bl	8006e44 <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f68:	e00f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6e:	3328      	adds	r3, #40	@ 0x28
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f818 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f92:	4b96      	ldr	r3, [pc, #600]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	f023 0107 	bic.w	r1, r3, #7
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa2:	4a92      	ldr	r2, [pc, #584]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f002 0304 	and.w	r3, r2, #4
 8005fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fc8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d043      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d824      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005fde:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08005ffd 	.word	0x08005ffd
 8005fec:	08006013 	.word	0x08006013
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006031 	.word	0x08006031
 8005ff8:	08006031 	.word	0x08006031
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006000:	3308      	adds	r3, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f000 ff1d 	bl	8006e44 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006010:	e00f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006016:	3328      	adds	r3, #40	@ 0x28
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f000 ffc4 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800603a:	4b6c      	ldr	r3, [pc, #432]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603e:	f023 0107 	bic.w	r1, r3, #7
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800604a:	4a68      	ldr	r2, [pc, #416]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006056:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0320 	and.w	r3, r2, #32
 8006066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d055      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800607e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006086:	d033      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800608c:	d82c      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006098:	d826      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800609a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800609e:	d02b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80060a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060a4:	d820      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060aa:	d012      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b0:	d81a      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d022      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ba:	d115      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c0:	3308      	adds	r3, #8
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 febd 	bl	8006e44 <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060d0:	e015      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060d6:	3328      	adds	r3, #40	@ 0x28
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 ff64 	bl	8006fa8 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006106:	4b39      	ldr	r3, [pc, #228]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006116:	4a35      	ldr	r2, [pc, #212]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6553      	str	r3, [r2, #84]	@ 0x54
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006122:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800613c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d058      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800614a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800614e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006152:	d033      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006154:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006158:	d82c      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	d02f      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006164:	d826      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800616a:	d02b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800616c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006170:	d820      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006176:	d012      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617c:	d81a      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d022      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006186:	d115      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800618c:	3308      	adds	r3, #8
 800618e:	2100      	movs	r1, #0
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fe57 	bl	8006e44 <RCCEx_PLL2_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800619c:	e015      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800619e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061a2:	3328      	adds	r3, #40	@ 0x28
 80061a4:	2102      	movs	r1, #2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fefe 	bl	8006fa8 <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061b2:	e00a      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061ba:	e006      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061bc:	bf00      	nop
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c0:	bf00      	nop
 80061c2:	e002      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c4:	bf00      	nop
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061d2:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061e2:	4a02      	ldr	r2, [pc, #8]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e8:	e006      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80061ea:	bf00      	nop
 80061ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800620e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d055      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800621c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006220:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006224:	d033      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006226:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800622a:	d82c      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006230:	d02f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006236:	d826      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006238:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800623c:	d02b      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800623e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006242:	d820      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006248:	d012      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800624e:	d81a      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d022      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006258:	d115      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800625e:	3308      	adds	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fdee 	bl	8006e44 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800626e:	e015      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006274:	3328      	adds	r3, #40	@ 0x28
 8006276:	2102      	movs	r1, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fe95 	bl	8006fa8 <RCCEx_PLL3_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006284:	e00a      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800628e:	bf00      	nop
 8006290:	e004      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006292:	bf00      	nop
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062a4:	4ba1      	ldr	r3, [pc, #644]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062b4:	4a9d      	ldr	r2, [pc, #628]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f002 0308 	and.w	r3, r2, #8
 80062d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d01e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f6:	3328      	adds	r3, #40	@ 0x28
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fe54 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800630c:	4b87      	ldr	r3, [pc, #540]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800630e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006310:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800631c:	4a83      	ldr	r2, [pc, #524]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f002 0310 	and.w	r3, r2, #16
 800632e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006338:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d01e      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800634a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634e:	d10c      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006354:	3328      	adds	r3, #40	@ 0x28
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fe25 	bl	8006fa8 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800636a:	4b70      	ldr	r3, [pc, #448]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800637a:	4a6c      	ldr	r2, [pc, #432]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800637c:	430b      	orrs	r3, r1
 800637e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006396:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d03e      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ac:	d022      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80063ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063b2:	d81b      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d00b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80063be:	e015      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c4:	3308      	adds	r3, #8
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fd3b 	bl	8006e44 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063d4:	e00f      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063da:	3328      	adds	r3, #40	@ 0x28
 80063dc:	2102      	movs	r1, #2
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fde2 	bl	8006fa8 <RCCEx_PLL3_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063ea:	e004      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80063f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063fe:	4b4b      	ldr	r3, [pc, #300]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006402:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800640a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800640e:	4a47      	ldr	r2, [pc, #284]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006410:	430b      	orrs	r3, r1
 8006412:	6593      	str	r3, [r2, #88]	@ 0x58
 8006414:	e003      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800641a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800642a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800642c:	2300      	movs	r3, #0
 800642e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006430:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006434:	460b      	mov	r3, r1
 8006436:	4313      	orrs	r3, r2
 8006438:	d03b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006446:	d01f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006448:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800644c:	d818      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006458:	d007      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b33      	ldr	r3, [pc, #204]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	4a32      	ldr	r2, [pc, #200]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006468:	e00f      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646e:	3328      	adds	r3, #40	@ 0x28
 8006470:	2101      	movs	r1, #1
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fd98 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800647e:	e004      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006492:	4b26      	ldr	r3, [pc, #152]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006496:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	4a22      	ldr	r2, [pc, #136]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80064a8:	e003      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064be:	673b      	str	r3, [r7, #112]	@ 0x70
 80064c0:	2300      	movs	r3, #0
 80064c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80064c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d034      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064dc:	d007      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80064de:	e011      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e0:	4b12      	ldr	r3, [pc, #72]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e4:	4a11      	ldr	r2, [pc, #68]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ec:	e00e      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f2:	3308      	adds	r3, #8
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fca4 	bl	8006e44 <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006514:	4b05      	ldr	r3, [pc, #20]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006518:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006522:	4a02      	ldr	r2, [pc, #8]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006524:	430b      	orrs	r3, r1
 8006526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006528:	e006      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006534:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006546:	2300      	movs	r3, #0
 8006548:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800654a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d00c      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006558:	3328      	adds	r3, #40	@ 0x28
 800655a:	2102      	movs	r1, #2
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd23 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800657a:	663b      	str	r3, [r7, #96]	@ 0x60
 800657c:	2300      	movs	r3, #0
 800657e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006580:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d038      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800658a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006596:	d018      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800659c:	d811      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	d014      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a8:	d80b      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b4:	4bc3      	ldr	r3, [pc, #780]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	4ac2      	ldr	r2, [pc, #776]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065c0:	e008      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065dc:	4bb9      	ldr	r3, [pc, #740]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	4ab5      	ldr	r2, [pc, #724]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80065f2:	e003      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006608:	65bb      	str	r3, [r7, #88]	@ 0x58
 800660a:	2300      	movs	r3, #0
 800660c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800660e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006618:	4baa      	ldr	r3, [pc, #680]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800661a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006626:	4aa7      	ldr	r2, [pc, #668]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006628:	430b      	orrs	r3, r1
 800662a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006638:	653b      	str	r3, [r7, #80]	@ 0x50
 800663a:	2300      	movs	r3, #0
 800663c:	657b      	str	r3, [r7, #84]	@ 0x54
 800663e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d009      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006648:	4b9e      	ldr	r3, [pc, #632]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006656:	4a9b      	ldr	r2, [pc, #620]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666a:	2300      	movs	r3, #0
 800666c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800666e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006678:	4b92      	ldr	r3, [pc, #584]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006686:	4a8f      	ldr	r2, [pc, #572]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006698:	643b      	str	r3, [r7, #64]	@ 0x40
 800669a:	2300      	movs	r3, #0
 800669c:	647b      	str	r3, [r7, #68]	@ 0x44
 800669e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066a8:	4b86      	ldr	r3, [pc, #536]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	4a85      	ldr	r2, [pc, #532]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066b2:	6113      	str	r3, [r2, #16]
 80066b4:	4b83      	ldr	r3, [pc, #524]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066b6:	6919      	ldr	r1, [r3, #16]
 80066b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066c0:	4a80      	ldr	r2, [pc, #512]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066e2:	4b78      	ldr	r3, [pc, #480]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f0:	4a74      	ldr	r2, [pc, #464]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006702:	633b      	str	r3, [r7, #48]	@ 0x30
 8006704:	2300      	movs	r3, #0
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
 8006708:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006712:	4b6c      	ldr	r3, [pc, #432]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006716:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800671a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800671e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006722:	4a68      	ldr	r2, [pc, #416]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	2100      	movs	r1, #0
 8006732:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d011      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006748:	3308      	adds	r3, #8
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fb79 	bl	8006e44 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006764:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	2100      	movs	r1, #0
 8006772:	6239      	str	r1, [r7, #32]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
 800677a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d011      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006788:	3308      	adds	r3, #8
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fb59 	bl	8006e44 <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	2100      	movs	r1, #0
 80067b2:	61b9      	str	r1, [r7, #24]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d011      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	3308      	adds	r3, #8
 80067ca:	2102      	movs	r1, #2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb39 	bl	8006e44 <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	2100      	movs	r1, #0
 80067f2:	6139      	str	r1, [r7, #16]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d011      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006808:	3328      	adds	r3, #40	@ 0x28
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fbcb 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	2100      	movs	r1, #0
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800683e:	460b      	mov	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	d011      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006848:	3328      	adds	r3, #40	@ 0x28
 800684a:	2101      	movs	r1, #1
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fbab 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	2100      	movs	r1, #0
 8006872:	6039      	str	r1, [r7, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d011      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006888:	3328      	adds	r3, #40	@ 0x28
 800688a:	2102      	movs	r1, #2
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fb8b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80068a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	e000      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80068bc:	46bd      	mov	sp, r7
 80068be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400

080068c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80068cc:	f7fe fde2 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4904      	ldr	r1, [pc, #16]	@ (80068f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	58024400 	.word	0x58024400
 80068f0:	0800acfc 	.word	0x0800acfc

080068f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	@ 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006906:	4b9f      	ldr	r3, [pc, #636]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690a:	0b1b      	lsrs	r3, r3, #12
 800690c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006910:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006912:	4b9c      	ldr	r3, [pc, #624]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800691e:	4b99      	ldr	r3, [pc, #612]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006922:	08db      	lsrs	r3, r3, #3
 8006924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8111 	beq.w	8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f000 8083 	beq.w	8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b02      	cmp	r3, #2
 800694e:	f200 80a1 	bhi.w	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d056      	beq.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800695e:	e099      	b.n	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006960:	4b88      	ldr	r3, [pc, #544]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02d      	beq.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800696c:	4b85      	ldr	r3, [pc, #532]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	08db      	lsrs	r3, r3, #3
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	4a84      	ldr	r2, [pc, #528]	@ (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b7b      	ldr	r3, [pc, #492]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069c6:	e087      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b6a      	ldr	r3, [pc, #424]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0a:	e065      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1e:	4b59      	ldr	r3, [pc, #356]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a4e:	e043      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b48      	ldr	r3, [pc, #288]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a92:	e021      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b37      	ldr	r3, [pc, #220]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ad6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	0a5b      	lsrs	r3, r3, #9
 8006ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b06:	4b1f      	ldr	r3, [pc, #124]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2c:	ee17 2a90 	vmov	r2, s15
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b34:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5a:	ee17 2a90 	vmov	r2, s15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	bf00      	nop
 8006b78:	3724      	adds	r7, #36	@ 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	58024400 	.word	0x58024400
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	46000000 	.word	0x46000000
 8006b90:	4c742400 	.word	0x4c742400
 8006b94:	4a742400 	.word	0x4a742400
 8006b98:	4af42400 	.word	0x4af42400

08006b9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	@ 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bae:	4b9f      	ldr	r3, [pc, #636]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	0d1b      	lsrs	r3, r3, #20
 8006bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bba:	4b9c      	ldr	r3, [pc, #624]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bc6:	4b99      	ldr	r3, [pc, #612]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8111 	beq.w	8006e0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c06:	e099      	b.n	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b88      	ldr	r3, [pc, #544]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c14:	4b85      	ldr	r3, [pc, #532]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a84      	ldr	r2, [pc, #528]	@ (8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b6a      	ldr	r3, [pc, #424]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b59      	ldr	r3, [pc, #356]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b48      	ldr	r3, [pc, #288]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b37      	ldr	r3, [pc, #220]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006dae:	4b1f      	ldr	r3, [pc, #124]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	@ (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	3724      	adds	r7, #36	@ 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4c742400 	.word	0x4c742400
 8006e3c:	4a742400 	.word	0x4a742400
 8006e40:	4af42400 	.word	0x4af42400

08006e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e52:	4b53      	ldr	r3, [pc, #332]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d101      	bne.n	8006e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e099      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e62:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4e      	ldr	r2, [pc, #312]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6e:	f7fc fa6f 	bl	8003350 <HAL_GetTick>
 8006e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e76:	f7fc fa6b 	bl	8003350 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e086      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e88:	4b45      	ldr	r3, [pc, #276]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e94:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	493f      	ldr	r1, [pc, #252]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	025b      	lsls	r3, r3, #9
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ed8:	4931      	ldr	r1, [pc, #196]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ede:	4b30      	ldr	r3, [pc, #192]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492d      	ldr	r1, [pc, #180]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	f023 0220 	bic.w	r2, r3, #32
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4928      	ldr	r1, [pc, #160]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f02:	4b27      	ldr	r3, [pc, #156]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	4a26      	ldr	r2, [pc, #152]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f0e:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f12:	4b24      	ldr	r3, [pc, #144]	@ (8006fa4 <RCCEx_PLL2_Config+0x160>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	69d2      	ldr	r2, [r2, #28]
 8006f1a:	00d2      	lsls	r2, r2, #3
 8006f1c:	4920      	ldr	r1, [pc, #128]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f22:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f26:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	f043 0310 	orr.w	r3, r3, #16
 8006f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f40:	e00f      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f48:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	4a14      	ldr	r2, [pc, #80]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f54:	e005      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f56:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	4a11      	ldr	r2, [pc, #68]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6e:	f7fc f9ef 	bl	8003350 <HAL_GetTick>
 8006f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f76:	f7fc f9eb 	bl	8003350 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e006      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f88:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	ffff0007 	.word	0xffff0007

08006fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fb6:	4b53      	ldr	r3, [pc, #332]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d101      	bne.n	8006fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e099      	b.n	80070fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4e      	ldr	r2, [pc, #312]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fc f9bd 	bl	8003350 <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fda:	f7fc f9b9 	bl	8003350 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e086      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fec:	4b45      	ldr	r3, [pc, #276]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ff8:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	051b      	lsls	r3, r3, #20
 8007006:	493f      	ldr	r1, [pc, #252]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	628b      	str	r3, [r1, #40]	@ 0x28
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	025b      	lsls	r3, r3, #9
 800701e:	b29b      	uxth	r3, r3
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	3b01      	subs	r3, #1
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800703c:	4931      	ldr	r1, [pc, #196]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007042:	4b30      	ldr	r3, [pc, #192]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	492d      	ldr	r1, [pc, #180]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007054:	4b2b      	ldr	r3, [pc, #172]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4928      	ldr	r1, [pc, #160]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007066:	4b27      	ldr	r3, [pc, #156]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	4a26      	ldr	r2, [pc, #152]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 800706c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007070:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007072:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <RCCEx_PLL3_Config+0x160>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	69d2      	ldr	r2, [r2, #28]
 800707e:	00d2      	lsls	r2, r2, #3
 8007080:	4920      	ldr	r1, [pc, #128]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 800708c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007098:	4b1a      	ldr	r3, [pc, #104]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070a4:	e00f      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d106      	bne.n	80070ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070ac:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a14      	ldr	r2, [pc, #80]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070be:	4a11      	ldr	r2, [pc, #68]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d2:	f7fc f93d 	bl	8003350 <HAL_GetTick>
 80070d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070da:	f7fc f939 	bl	8003350 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	ffff0007 	.word	0xffff0007

0800710c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e042      	b.n	80071a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fb ffe9 	bl	8003108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	@ 0x24
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fb64 	bl	8008824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fcf5 	bl	8007b4c <UART_SetConfig>
 8007162:	4603      	mov	r3, r0
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e01b      	b.n	80071a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800717a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800718a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fbe3 	bl	8008968 <UART_CheckIdleState>
 80071a2:	4603      	mov	r3, r0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	@ 0x28
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d17b      	bne.n	80072be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_UART_Transmit+0x26>
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e074      	b.n	80072c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2221      	movs	r2, #33	@ 0x21
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071e6:	f7fc f8b3 	bl	8003350 <HAL_GetTick>
 80071ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007204:	d108      	bne.n	8007218 <HAL_UART_Transmit+0x6c>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	e003      	b.n	8007220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007220:	e030      	b.n	8007284 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2200      	movs	r2, #0
 800722a:	2180      	movs	r1, #128	@ 0x80
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f001 fc45 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e03d      	b.n	80072c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10b      	bne.n	8007262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	3302      	adds	r3, #2
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e007      	b.n	8007272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	3301      	adds	r3, #1
 8007270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800728a:	b29b      	uxth	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1c8      	bne.n	8007222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	2140      	movs	r1, #64	@ 0x40
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f001 fc0e 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e006      	b.n	80072c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e000      	b.n	80072c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072be:	2302      	movs	r3, #2
  }
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	@ 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d137      	bne.n	8007350 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_UART_Receive_IT+0x24>
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e030      	b.n	8007352 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a18      	ldr	r2, [pc, #96]	@ (800735c <HAL_UART_Receive_IT+0x94>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01f      	beq.n	8007340 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d018      	beq.n	8007340 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	613b      	str	r3, [r7, #16]
   return(result);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	61bb      	str	r3, [r7, #24]
   return(result);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e6      	bne.n	800730e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	461a      	mov	r2, r3
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f001 fc26 	bl	8008b98 <UART_Start_Receive_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	e000      	b.n	8007352 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3728      	adds	r7, #40	@ 0x28
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58000c00 	.word	0x58000c00

08007360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b0ba      	sub	sp, #232	@ 0xe8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800738a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800738e:	4013      	ands	r3, r2
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11b      	bne.n	80073d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8393 	beq.w	8007af0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
      }
      return;
 80073d2:	e38d      	b.n	8007af0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8123 	beq.w	8007624 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007618 <HAL_UART_IRQHandler+0x2b8>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073ee:	4b8b      	ldr	r3, [pc, #556]	@ (800761c <HAL_UART_IRQHandler+0x2bc>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8116 	beq.w	8007624 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d011      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2201      	movs	r2, #1
 8007416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
 8007434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2202      	movs	r2, #2
 8007446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744e:	f043 0204 	orr.w	r2, r3, #4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
 8007464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2204      	movs	r2, #4
 8007476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007618 <HAL_UART_IRQHandler+0x2b8>)
 80074a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	f043 0208 	orr.w	r2, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d012      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 82f9 	beq.w	8007af4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800750e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800751a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800751e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754a:	2b40      	cmp	r3, #64	@ 0x40
 800754c:	d005      	beq.n	800755a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800754e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d054      	beq.n	8007604 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fc3e 	bl	8008ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d146      	bne.n	80075fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800759a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800759e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1d9      	bne.n	800756e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ca:	4a15      	ldr	r2, [pc, #84]	@ (8007620 <HAL_UART_IRQHandler+0x2c0>)
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fc fb91 	bl	8003cfc <HAL_DMA_Abort_IT>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d019      	beq.n	8007614 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075ee:	4610      	mov	r0, r2
 80075f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f2:	e00f      	b.n	8007614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa93 	bl	8007b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fa:	e00b      	b.n	8007614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fa8f 	bl	8007b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	e007      	b.n	8007614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa8b 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007612:	e26f      	b.n	8007af4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	bf00      	nop
    return;
 8007616:	e26d      	b.n	8007af4 <HAL_UART_IRQHandler+0x794>
 8007618:	10000001 	.word	0x10000001
 800761c:	04000120 	.word	0x04000120
 8007620:	08008ea9 	.word	0x08008ea9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007628:	2b01      	cmp	r3, #1
 800762a:	f040 8203 	bne.w	8007a34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800762e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 81fc 	beq.w	8007a34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 81f5 	beq.w	8007a34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2210      	movs	r2, #16
 8007650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765c:	2b40      	cmp	r3, #64	@ 0x40
 800765e:	f040 816d 	bne.w	800793c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4aa4      	ldr	r2, [pc, #656]	@ (80078fc <HAL_UART_IRQHandler+0x59c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d068      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4aa1      	ldr	r2, [pc, #644]	@ (8007900 <HAL_UART_IRQHandler+0x5a0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d061      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a9f      	ldr	r2, [pc, #636]	@ (8007904 <HAL_UART_IRQHandler+0x5a4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d05a      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a9c      	ldr	r2, [pc, #624]	@ (8007908 <HAL_UART_IRQHandler+0x5a8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d053      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a9a      	ldr	r2, [pc, #616]	@ (800790c <HAL_UART_IRQHandler+0x5ac>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d04c      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a97      	ldr	r2, [pc, #604]	@ (8007910 <HAL_UART_IRQHandler+0x5b0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d045      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a95      	ldr	r2, [pc, #596]	@ (8007914 <HAL_UART_IRQHandler+0x5b4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d03e      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a92      	ldr	r2, [pc, #584]	@ (8007918 <HAL_UART_IRQHandler+0x5b8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d037      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a90      	ldr	r2, [pc, #576]	@ (800791c <HAL_UART_IRQHandler+0x5bc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d030      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a8d      	ldr	r2, [pc, #564]	@ (8007920 <HAL_UART_IRQHandler+0x5c0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d029      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a8b      	ldr	r2, [pc, #556]	@ (8007924 <HAL_UART_IRQHandler+0x5c4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a88      	ldr	r2, [pc, #544]	@ (8007928 <HAL_UART_IRQHandler+0x5c8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01b      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a86      	ldr	r2, [pc, #536]	@ (800792c <HAL_UART_IRQHandler+0x5cc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d014      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a83      	ldr	r2, [pc, #524]	@ (8007930 <HAL_UART_IRQHandler+0x5d0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00d      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a81      	ldr	r2, [pc, #516]	@ (8007934 <HAL_UART_IRQHandler+0x5d4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d006      	beq.n	8007742 <HAL_UART_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a7e      	ldr	r2, [pc, #504]	@ (8007938 <HAL_UART_IRQHandler+0x5d8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d106      	bne.n	8007750 <HAL_UART_IRQHandler+0x3f0>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b29b      	uxth	r3, r3
 800774e:	e005      	b.n	800775c <HAL_UART_IRQHandler+0x3fc>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80ad 	beq.w	80078c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007774:	429a      	cmp	r2, r3
 8007776:	f080 80a5 	bcs.w	80078c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007790:	f000 8087 	beq.w	80078a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1da      	bne.n	8007794 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800780a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e1      	bne.n	80077de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800782a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800782c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800783e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800784c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e3      	bne.n	800781a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800786e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e4      	bne.n	8007860 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789c:	4618      	mov	r0, r3
 800789e:	f7fb ff0f 	bl	80036c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f939 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80078c2:	e119      	b.n	8007af8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f040 8112 	bne.w	8007af8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e0:	f040 810a 	bne.w	8007af8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f91e 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
      return;
 80078f8:	e0fe      	b.n	8007af8 <HAL_UART_IRQHandler+0x798>
 80078fa:	bf00      	nop
 80078fc:	40020010 	.word	0x40020010
 8007900:	40020028 	.word	0x40020028
 8007904:	40020040 	.word	0x40020040
 8007908:	40020058 	.word	0x40020058
 800790c:	40020070 	.word	0x40020070
 8007910:	40020088 	.word	0x40020088
 8007914:	400200a0 	.word	0x400200a0
 8007918:	400200b8 	.word	0x400200b8
 800791c:	40020410 	.word	0x40020410
 8007920:	40020428 	.word	0x40020428
 8007924:	40020440 	.word	0x40020440
 8007928:	40020458 	.word	0x40020458
 800792c:	40020470 	.word	0x40020470
 8007930:	40020488 	.word	0x40020488
 8007934:	400204a0 	.word	0x400204a0
 8007938:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80cf 	beq.w	8007afc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800795e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80ca 	beq.w	8007afc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800797c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800798a:	647b      	str	r3, [r7, #68]	@ 0x44
 800798c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e4      	bne.n	8007968 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	623b      	str	r3, [r7, #32]
   return(result);
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	4b55      	ldr	r3, [pc, #340]	@ (8007b08 <HAL_UART_IRQHandler+0x7a8>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80079c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e3      	bne.n	800799e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0310 	bic.w	r3, r3, #16
 80079fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e4      	bne.n	80079ea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f881 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a32:	e063      	b.n	8007afc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00e      	beq.n	8007a5e <HAL_UART_IRQHandler+0x6fe>
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 ff84 	bl	8009964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a5c:	e051      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d014      	beq.n	8007a94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d03a      	beq.n	8007b00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
    }
    return;
 8007a92:	e035      	b.n	8007b00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x754>
 8007aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fa0d 	bl	8008ecc <UART_EndTransmit_IT>
    return;
 8007ab2:	e026      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x774>
 8007ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ff5d 	bl	800998c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ad2:	e016      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da0c      	bge.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ff45 	bl	8009978 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aee:	e008      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007af0:	bf00      	nop
 8007af2:	e006      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007af4:	bf00      	nop
 8007af6:	e004      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007af8:	bf00      	nop
 8007afa:	e002      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007b00:	bf00      	nop
  }
}
 8007b02:	37e8      	adds	r7, #232	@ 0xe8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	effffffe 	.word	0xeffffffe

08007b0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b50:	b092      	sub	sp, #72	@ 0x48
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4bbe      	ldr	r3, [pc, #760]	@ (8007e74 <UART_SetConfig+0x328>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b84:	430b      	orrs	r3, r1
 8007b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4ab3      	ldr	r2, [pc, #716]	@ (8007e78 <UART_SetConfig+0x32c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	4baf      	ldr	r3, [pc, #700]	@ (8007e7c <UART_SetConfig+0x330>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	f023 010f 	bic.w	r1, r3, #15
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4aa6      	ldr	r2, [pc, #664]	@ (8007e80 <UART_SetConfig+0x334>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d177      	bne.n	8007cdc <UART_SetConfig+0x190>
 8007bec:	4ba5      	ldr	r3, [pc, #660]	@ (8007e84 <UART_SetConfig+0x338>)
 8007bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bf4:	2b28      	cmp	r3, #40	@ 0x28
 8007bf6:	d86d      	bhi.n	8007cd4 <UART_SetConfig+0x188>
 8007bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <UART_SetConfig+0xb4>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007ca5 	.word	0x08007ca5
 8007c04:	08007cd5 	.word	0x08007cd5
 8007c08:	08007cd5 	.word	0x08007cd5
 8007c0c:	08007cd5 	.word	0x08007cd5
 8007c10:	08007cd5 	.word	0x08007cd5
 8007c14:	08007cd5 	.word	0x08007cd5
 8007c18:	08007cd5 	.word	0x08007cd5
 8007c1c:	08007cd5 	.word	0x08007cd5
 8007c20:	08007cad 	.word	0x08007cad
 8007c24:	08007cd5 	.word	0x08007cd5
 8007c28:	08007cd5 	.word	0x08007cd5
 8007c2c:	08007cd5 	.word	0x08007cd5
 8007c30:	08007cd5 	.word	0x08007cd5
 8007c34:	08007cd5 	.word	0x08007cd5
 8007c38:	08007cd5 	.word	0x08007cd5
 8007c3c:	08007cd5 	.word	0x08007cd5
 8007c40:	08007cb5 	.word	0x08007cb5
 8007c44:	08007cd5 	.word	0x08007cd5
 8007c48:	08007cd5 	.word	0x08007cd5
 8007c4c:	08007cd5 	.word	0x08007cd5
 8007c50:	08007cd5 	.word	0x08007cd5
 8007c54:	08007cd5 	.word	0x08007cd5
 8007c58:	08007cd5 	.word	0x08007cd5
 8007c5c:	08007cd5 	.word	0x08007cd5
 8007c60:	08007cbd 	.word	0x08007cbd
 8007c64:	08007cd5 	.word	0x08007cd5
 8007c68:	08007cd5 	.word	0x08007cd5
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007cd5 	.word	0x08007cd5
 8007c78:	08007cd5 	.word	0x08007cd5
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007cc5 	.word	0x08007cc5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cd5 	.word	0x08007cd5
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007cd5 	.word	0x08007cd5
 8007c94:	08007cd5 	.word	0x08007cd5
 8007c98:	08007cd5 	.word	0x08007cd5
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e326      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cac:	2304      	movs	r3, #4
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e322      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e31e      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e31a      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cc4:	2320      	movs	r3, #32
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e316      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007ccc:	2340      	movs	r3, #64	@ 0x40
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e312      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cd4:	2380      	movs	r3, #128	@ 0x80
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e30e      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a69      	ldr	r2, [pc, #420]	@ (8007e88 <UART_SetConfig+0x33c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d130      	bne.n	8007d48 <UART_SetConfig+0x1fc>
 8007ce6:	4b67      	ldr	r3, [pc, #412]	@ (8007e84 <UART_SetConfig+0x338>)
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d826      	bhi.n	8007d40 <UART_SetConfig+0x1f4>
 8007cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <UART_SetConfig+0x1ac>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d11 	.word	0x08007d11
 8007cfc:	08007d19 	.word	0x08007d19
 8007d00:	08007d21 	.word	0x08007d21
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d16:	e2f0      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1e:	e2ec      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e2e8      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e2e4      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d30:	2320      	movs	r3, #32
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e2e0      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d38:	2340      	movs	r3, #64	@ 0x40
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e2dc      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d40:	2380      	movs	r3, #128	@ 0x80
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e2d8      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8007e8c <UART_SetConfig+0x340>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d130      	bne.n	8007db4 <UART_SetConfig+0x268>
 8007d52:	4b4c      	ldr	r3, [pc, #304]	@ (8007e84 <UART_SetConfig+0x338>)
 8007d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d826      	bhi.n	8007dac <UART_SetConfig+0x260>
 8007d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d64 <UART_SetConfig+0x218>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d7d 	.word	0x08007d7d
 8007d68:	08007d85 	.word	0x08007d85
 8007d6c:	08007d8d 	.word	0x08007d8d
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d82:	e2ba      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d84:	2304      	movs	r3, #4
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8a:	e2b6      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e2b2      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d94:	2310      	movs	r3, #16
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e2ae      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e2aa      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007da4:	2340      	movs	r3, #64	@ 0x40
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e2a6      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007dac:	2380      	movs	r3, #128	@ 0x80
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e2a2      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a35      	ldr	r2, [pc, #212]	@ (8007e90 <UART_SetConfig+0x344>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d130      	bne.n	8007e20 <UART_SetConfig+0x2d4>
 8007dbe:	4b31      	ldr	r3, [pc, #196]	@ (8007e84 <UART_SetConfig+0x338>)
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d826      	bhi.n	8007e18 <UART_SetConfig+0x2cc>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <UART_SetConfig+0x284>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007de9 	.word	0x08007de9
 8007dd4:	08007df1 	.word	0x08007df1
 8007dd8:	08007df9 	.word	0x08007df9
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e09 	.word	0x08007e09
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e284      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007df0:	2304      	movs	r3, #4
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e280      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007df8:	2308      	movs	r3, #8
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e27c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e00:	2310      	movs	r3, #16
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e278      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e08:	2320      	movs	r3, #32
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e274      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e10:	2340      	movs	r3, #64	@ 0x40
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e270      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e18:	2380      	movs	r3, #128	@ 0x80
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e26c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1b      	ldr	r2, [pc, #108]	@ (8007e94 <UART_SetConfig+0x348>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d142      	bne.n	8007eb0 <UART_SetConfig+0x364>
 8007e2a:	4b16      	ldr	r3, [pc, #88]	@ (8007e84 <UART_SetConfig+0x338>)
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d838      	bhi.n	8007ea8 <UART_SetConfig+0x35c>
 8007e36:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <UART_SetConfig+0x2f0>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e55 	.word	0x08007e55
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	08007e65 	.word	0x08007e65
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e99 	.word	0x08007e99
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e24e      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e24a      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e64:	2308      	movs	r3, #8
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e246      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e242      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007e74:	cfff69f3 	.word	0xcfff69f3
 8007e78:	58000c00 	.word	0x58000c00
 8007e7c:	11fff4ff 	.word	0x11fff4ff
 8007e80:	40011000 	.word	0x40011000
 8007e84:	58024400 	.word	0x58024400
 8007e88:	40004400 	.word	0x40004400
 8007e8c:	40004800 	.word	0x40004800
 8007e90:	40004c00 	.word	0x40004c00
 8007e94:	40005000 	.word	0x40005000
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e22c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007ea0:	2340      	movs	r3, #64	@ 0x40
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e228      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007ea8:	2380      	movs	r3, #128	@ 0x80
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e224      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4ab1      	ldr	r2, [pc, #708]	@ (800817c <UART_SetConfig+0x630>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d176      	bne.n	8007fa8 <UART_SetConfig+0x45c>
 8007eba:	4bb1      	ldr	r3, [pc, #708]	@ (8008180 <UART_SetConfig+0x634>)
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ec2:	2b28      	cmp	r3, #40	@ 0x28
 8007ec4:	d86c      	bhi.n	8007fa0 <UART_SetConfig+0x454>
 8007ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <UART_SetConfig+0x380>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007f71 	.word	0x08007f71
 8007ed0:	08007fa1 	.word	0x08007fa1
 8007ed4:	08007fa1 	.word	0x08007fa1
 8007ed8:	08007fa1 	.word	0x08007fa1
 8007edc:	08007fa1 	.word	0x08007fa1
 8007ee0:	08007fa1 	.word	0x08007fa1
 8007ee4:	08007fa1 	.word	0x08007fa1
 8007ee8:	08007fa1 	.word	0x08007fa1
 8007eec:	08007f79 	.word	0x08007f79
 8007ef0:	08007fa1 	.word	0x08007fa1
 8007ef4:	08007fa1 	.word	0x08007fa1
 8007ef8:	08007fa1 	.word	0x08007fa1
 8007efc:	08007fa1 	.word	0x08007fa1
 8007f00:	08007fa1 	.word	0x08007fa1
 8007f04:	08007fa1 	.word	0x08007fa1
 8007f08:	08007fa1 	.word	0x08007fa1
 8007f0c:	08007f81 	.word	0x08007f81
 8007f10:	08007fa1 	.word	0x08007fa1
 8007f14:	08007fa1 	.word	0x08007fa1
 8007f18:	08007fa1 	.word	0x08007fa1
 8007f1c:	08007fa1 	.word	0x08007fa1
 8007f20:	08007fa1 	.word	0x08007fa1
 8007f24:	08007fa1 	.word	0x08007fa1
 8007f28:	08007fa1 	.word	0x08007fa1
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007fa1 	.word	0x08007fa1
 8007f34:	08007fa1 	.word	0x08007fa1
 8007f38:	08007fa1 	.word	0x08007fa1
 8007f3c:	08007fa1 	.word	0x08007fa1
 8007f40:	08007fa1 	.word	0x08007fa1
 8007f44:	08007fa1 	.word	0x08007fa1
 8007f48:	08007fa1 	.word	0x08007fa1
 8007f4c:	08007f91 	.word	0x08007f91
 8007f50:	08007fa1 	.word	0x08007fa1
 8007f54:	08007fa1 	.word	0x08007fa1
 8007f58:	08007fa1 	.word	0x08007fa1
 8007f5c:	08007fa1 	.word	0x08007fa1
 8007f60:	08007fa1 	.word	0x08007fa1
 8007f64:	08007fa1 	.word	0x08007fa1
 8007f68:	08007fa1 	.word	0x08007fa1
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e1c0      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e1bc      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007f80:	2308      	movs	r3, #8
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e1b8      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e1b4      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007f90:	2320      	movs	r3, #32
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e1b0      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007f98:	2340      	movs	r3, #64	@ 0x40
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e1ac      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007fa0:	2380      	movs	r3, #128	@ 0x80
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e1a8      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a75      	ldr	r2, [pc, #468]	@ (8008184 <UART_SetConfig+0x638>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d130      	bne.n	8008014 <UART_SetConfig+0x4c8>
 8007fb2:	4b73      	ldr	r3, [pc, #460]	@ (8008180 <UART_SetConfig+0x634>)
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	d826      	bhi.n	800800c <UART_SetConfig+0x4c0>
 8007fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <UART_SetConfig+0x478>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fdd 	.word	0x08007fdd
 8007fc8:	08007fe5 	.word	0x08007fe5
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e18a      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e186      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e182      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e17e      	b.n	80082fa <UART_SetConfig+0x7ae>
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e17a      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008004:	2340      	movs	r3, #64	@ 0x40
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e176      	b.n	80082fa <UART_SetConfig+0x7ae>
 800800c:	2380      	movs	r3, #128	@ 0x80
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e172      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5b      	ldr	r2, [pc, #364]	@ (8008188 <UART_SetConfig+0x63c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d130      	bne.n	8008080 <UART_SetConfig+0x534>
 800801e:	4b58      	ldr	r3, [pc, #352]	@ (8008180 <UART_SetConfig+0x634>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b05      	cmp	r3, #5
 8008028:	d826      	bhi.n	8008078 <UART_SetConfig+0x52c>
 800802a:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0x4e4>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008049 	.word	0x08008049
 8008034:	08008051 	.word	0x08008051
 8008038:	08008059 	.word	0x08008059
 800803c:	08008061 	.word	0x08008061
 8008040:	08008069 	.word	0x08008069
 8008044:	08008071 	.word	0x08008071
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e154      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e150      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e14c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e148      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008068:	2320      	movs	r3, #32
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e144      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008070:	2340      	movs	r3, #64	@ 0x40
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e140      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008078:	2380      	movs	r3, #128	@ 0x80
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e13c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a41      	ldr	r2, [pc, #260]	@ (800818c <UART_SetConfig+0x640>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f040 8082 	bne.w	8008190 <UART_SetConfig+0x644>
 800808c:	4b3c      	ldr	r3, [pc, #240]	@ (8008180 <UART_SetConfig+0x634>)
 800808e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008094:	2b28      	cmp	r3, #40	@ 0x28
 8008096:	d86d      	bhi.n	8008174 <UART_SetConfig+0x628>
 8008098:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <UART_SetConfig+0x554>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	08008145 	.word	0x08008145
 80080a4:	08008175 	.word	0x08008175
 80080a8:	08008175 	.word	0x08008175
 80080ac:	08008175 	.word	0x08008175
 80080b0:	08008175 	.word	0x08008175
 80080b4:	08008175 	.word	0x08008175
 80080b8:	08008175 	.word	0x08008175
 80080bc:	08008175 	.word	0x08008175
 80080c0:	0800814d 	.word	0x0800814d
 80080c4:	08008175 	.word	0x08008175
 80080c8:	08008175 	.word	0x08008175
 80080cc:	08008175 	.word	0x08008175
 80080d0:	08008175 	.word	0x08008175
 80080d4:	08008175 	.word	0x08008175
 80080d8:	08008175 	.word	0x08008175
 80080dc:	08008175 	.word	0x08008175
 80080e0:	08008155 	.word	0x08008155
 80080e4:	08008175 	.word	0x08008175
 80080e8:	08008175 	.word	0x08008175
 80080ec:	08008175 	.word	0x08008175
 80080f0:	08008175 	.word	0x08008175
 80080f4:	08008175 	.word	0x08008175
 80080f8:	08008175 	.word	0x08008175
 80080fc:	08008175 	.word	0x08008175
 8008100:	0800815d 	.word	0x0800815d
 8008104:	08008175 	.word	0x08008175
 8008108:	08008175 	.word	0x08008175
 800810c:	08008175 	.word	0x08008175
 8008110:	08008175 	.word	0x08008175
 8008114:	08008175 	.word	0x08008175
 8008118:	08008175 	.word	0x08008175
 800811c:	08008175 	.word	0x08008175
 8008120:	08008165 	.word	0x08008165
 8008124:	08008175 	.word	0x08008175
 8008128:	08008175 	.word	0x08008175
 800812c:	08008175 	.word	0x08008175
 8008130:	08008175 	.word	0x08008175
 8008134:	08008175 	.word	0x08008175
 8008138:	08008175 	.word	0x08008175
 800813c:	08008175 	.word	0x08008175
 8008140:	0800816d 	.word	0x0800816d
 8008144:	2301      	movs	r3, #1
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814a:	e0d6      	b.n	80082fa <UART_SetConfig+0x7ae>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008152:	e0d2      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815a:	e0ce      	b.n	80082fa <UART_SetConfig+0x7ae>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e0ca      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e0c6      	b.n	80082fa <UART_SetConfig+0x7ae>
 800816c:	2340      	movs	r3, #64	@ 0x40
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e0c2      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008174:	2380      	movs	r3, #128	@ 0x80
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e0be      	b.n	80082fa <UART_SetConfig+0x7ae>
 800817c:	40011400 	.word	0x40011400
 8008180:	58024400 	.word	0x58024400
 8008184:	40007800 	.word	0x40007800
 8008188:	40007c00 	.word	0x40007c00
 800818c:	40011800 	.word	0x40011800
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4aad      	ldr	r2, [pc, #692]	@ (800844c <UART_SetConfig+0x900>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d176      	bne.n	8008288 <UART_SetConfig+0x73c>
 800819a:	4bad      	ldr	r3, [pc, #692]	@ (8008450 <UART_SetConfig+0x904>)
 800819c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081a2:	2b28      	cmp	r3, #40	@ 0x28
 80081a4:	d86c      	bhi.n	8008280 <UART_SetConfig+0x734>
 80081a6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <UART_SetConfig+0x660>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	08008251 	.word	0x08008251
 80081b0:	08008281 	.word	0x08008281
 80081b4:	08008281 	.word	0x08008281
 80081b8:	08008281 	.word	0x08008281
 80081bc:	08008281 	.word	0x08008281
 80081c0:	08008281 	.word	0x08008281
 80081c4:	08008281 	.word	0x08008281
 80081c8:	08008281 	.word	0x08008281
 80081cc:	08008259 	.word	0x08008259
 80081d0:	08008281 	.word	0x08008281
 80081d4:	08008281 	.word	0x08008281
 80081d8:	08008281 	.word	0x08008281
 80081dc:	08008281 	.word	0x08008281
 80081e0:	08008281 	.word	0x08008281
 80081e4:	08008281 	.word	0x08008281
 80081e8:	08008281 	.word	0x08008281
 80081ec:	08008261 	.word	0x08008261
 80081f0:	08008281 	.word	0x08008281
 80081f4:	08008281 	.word	0x08008281
 80081f8:	08008281 	.word	0x08008281
 80081fc:	08008281 	.word	0x08008281
 8008200:	08008281 	.word	0x08008281
 8008204:	08008281 	.word	0x08008281
 8008208:	08008281 	.word	0x08008281
 800820c:	08008269 	.word	0x08008269
 8008210:	08008281 	.word	0x08008281
 8008214:	08008281 	.word	0x08008281
 8008218:	08008281 	.word	0x08008281
 800821c:	08008281 	.word	0x08008281
 8008220:	08008281 	.word	0x08008281
 8008224:	08008281 	.word	0x08008281
 8008228:	08008281 	.word	0x08008281
 800822c:	08008271 	.word	0x08008271
 8008230:	08008281 	.word	0x08008281
 8008234:	08008281 	.word	0x08008281
 8008238:	08008281 	.word	0x08008281
 800823c:	08008281 	.word	0x08008281
 8008240:	08008281 	.word	0x08008281
 8008244:	08008281 	.word	0x08008281
 8008248:	08008281 	.word	0x08008281
 800824c:	08008279 	.word	0x08008279
 8008250:	2301      	movs	r3, #1
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e050      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e04c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e048      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e044      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008270:	2320      	movs	r3, #32
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e040      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008278:	2340      	movs	r3, #64	@ 0x40
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e03c      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e038      	b.n	80082fa <UART_SetConfig+0x7ae>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a71      	ldr	r2, [pc, #452]	@ (8008454 <UART_SetConfig+0x908>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d130      	bne.n	80082f4 <UART_SetConfig+0x7a8>
 8008292:	4b6f      	ldr	r3, [pc, #444]	@ (8008450 <UART_SetConfig+0x904>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b05      	cmp	r3, #5
 800829c:	d826      	bhi.n	80082ec <UART_SetConfig+0x7a0>
 800829e:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <UART_SetConfig+0x758>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082bd 	.word	0x080082bd
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e01a      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e016      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e012      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e00e      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082dc:	2320      	movs	r3, #32
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e00a      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082e4:	2340      	movs	r3, #64	@ 0x40
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e006      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e002      	b.n	80082fa <UART_SetConfig+0x7ae>
 80082f4:	2380      	movs	r3, #128	@ 0x80
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a55      	ldr	r2, [pc, #340]	@ (8008454 <UART_SetConfig+0x908>)
 8008300:	4293      	cmp	r3, r2
 8008302:	f040 80f8 	bne.w	80084f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800830a:	2b20      	cmp	r3, #32
 800830c:	dc46      	bgt.n	800839c <UART_SetConfig+0x850>
 800830e:	2b02      	cmp	r3, #2
 8008310:	db75      	blt.n	80083fe <UART_SetConfig+0x8b2>
 8008312:	3b02      	subs	r3, #2
 8008314:	2b1e      	cmp	r3, #30
 8008316:	d872      	bhi.n	80083fe <UART_SetConfig+0x8b2>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x7d4>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	080083a3 	.word	0x080083a3
 8008324:	080083ff 	.word	0x080083ff
 8008328:	080083ab 	.word	0x080083ab
 800832c:	080083ff 	.word	0x080083ff
 8008330:	080083ff 	.word	0x080083ff
 8008334:	080083ff 	.word	0x080083ff
 8008338:	080083bb 	.word	0x080083bb
 800833c:	080083ff 	.word	0x080083ff
 8008340:	080083ff 	.word	0x080083ff
 8008344:	080083ff 	.word	0x080083ff
 8008348:	080083ff 	.word	0x080083ff
 800834c:	080083ff 	.word	0x080083ff
 8008350:	080083ff 	.word	0x080083ff
 8008354:	080083ff 	.word	0x080083ff
 8008358:	080083cb 	.word	0x080083cb
 800835c:	080083ff 	.word	0x080083ff
 8008360:	080083ff 	.word	0x080083ff
 8008364:	080083ff 	.word	0x080083ff
 8008368:	080083ff 	.word	0x080083ff
 800836c:	080083ff 	.word	0x080083ff
 8008370:	080083ff 	.word	0x080083ff
 8008374:	080083ff 	.word	0x080083ff
 8008378:	080083ff 	.word	0x080083ff
 800837c:	080083ff 	.word	0x080083ff
 8008380:	080083ff 	.word	0x080083ff
 8008384:	080083ff 	.word	0x080083ff
 8008388:	080083ff 	.word	0x080083ff
 800838c:	080083ff 	.word	0x080083ff
 8008390:	080083ff 	.word	0x080083ff
 8008394:	080083ff 	.word	0x080083ff
 8008398:	080083f1 	.word	0x080083f1
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d02a      	beq.n	80083f6 <UART_SetConfig+0x8aa>
 80083a0:	e02d      	b.n	80083fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083a2:	f7fe fa91 	bl	80068c8 <HAL_RCCEx_GetD3PCLK1Freq>
 80083a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083a8:	e02f      	b.n	800840a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe faa0 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b8:	e027      	b.n	800840a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ba:	f107 0318 	add.w	r3, r7, #24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fbec 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e01f      	b.n	800840a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ca:	4b21      	ldr	r3, [pc, #132]	@ (8008450 <UART_SetConfig+0x904>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008450 <UART_SetConfig+0x904>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008458 <UART_SetConfig+0x90c>)
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083e8:	e00f      	b.n	800840a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008458 <UART_SetConfig+0x90c>)
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ee:	e00c      	b.n	800840a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083f0:	4b1a      	ldr	r3, [pc, #104]	@ (800845c <UART_SetConfig+0x910>)
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f4:	e009      	b.n	800840a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fc:	e005      	b.n	800840a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800840a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 81ee 	beq.w	80087ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008416:	4a12      	ldr	r2, [pc, #72]	@ (8008460 <UART_SetConfig+0x914>)
 8008418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841c:	461a      	mov	r2, r3
 800841e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008420:	fbb3 f3f2 	udiv	r3, r3, r2
 8008424:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4413      	add	r3, r2
 8008430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008432:	429a      	cmp	r2, r3
 8008434:	d305      	bcc.n	8008442 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843e:	429a      	cmp	r2, r3
 8008440:	d910      	bls.n	8008464 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008448:	e1d1      	b.n	80087ee <UART_SetConfig+0xca2>
 800844a:	bf00      	nop
 800844c:	40011c00 	.word	0x40011c00
 8008450:	58024400 	.word	0x58024400
 8008454:	58000c00 	.word	0x58000c00
 8008458:	03d09000 	.word	0x03d09000
 800845c:	003d0900 	.word	0x003d0900
 8008460:	0800ad0c 	.word	0x0800ad0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008466:	2200      	movs	r2, #0
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	60fa      	str	r2, [r7, #12]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	4ac0      	ldr	r2, [pc, #768]	@ (8008774 <UART_SetConfig+0xc28>)
 8008472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008476:	b29b      	uxth	r3, r3
 8008478:	2200      	movs	r2, #0
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008486:	f7f7 ff83 	bl	8000390 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4610      	mov	r0, r2
 8008490:	4619      	mov	r1, r3
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	020b      	lsls	r3, r1, #8
 800849c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084a0:	0202      	lsls	r2, r0, #8
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	6849      	ldr	r1, [r1, #4]
 80084a6:	0849      	lsrs	r1, r1, #1
 80084a8:	2000      	movs	r0, #0
 80084aa:	460c      	mov	r4, r1
 80084ac:	4605      	mov	r5, r0
 80084ae:	eb12 0804 	adds.w	r8, r2, r4
 80084b2:	eb43 0905 	adc.w	r9, r3, r5
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	469a      	mov	sl, r3
 80084be:	4693      	mov	fp, r2
 80084c0:	4652      	mov	r2, sl
 80084c2:	465b      	mov	r3, fp
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	f7f7 ff62 	bl	8000390 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4613      	mov	r3, r2
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084da:	d308      	bcc.n	80084ee <UART_SetConfig+0x9a2>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e2:	d204      	bcs.n	80084ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ea:	60da      	str	r2, [r3, #12]
 80084ec:	e17f      	b.n	80087ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084f4:	e17b      	b.n	80087ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fe:	f040 80bd 	bne.w	800867c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008502:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008506:	2b20      	cmp	r3, #32
 8008508:	dc48      	bgt.n	800859c <UART_SetConfig+0xa50>
 800850a:	2b00      	cmp	r3, #0
 800850c:	db7b      	blt.n	8008606 <UART_SetConfig+0xaba>
 800850e:	2b20      	cmp	r3, #32
 8008510:	d879      	bhi.n	8008606 <UART_SetConfig+0xaba>
 8008512:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <UART_SetConfig+0x9cc>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	080085a3 	.word	0x080085a3
 800851c:	080085ab 	.word	0x080085ab
 8008520:	08008607 	.word	0x08008607
 8008524:	08008607 	.word	0x08008607
 8008528:	080085b3 	.word	0x080085b3
 800852c:	08008607 	.word	0x08008607
 8008530:	08008607 	.word	0x08008607
 8008534:	08008607 	.word	0x08008607
 8008538:	080085c3 	.word	0x080085c3
 800853c:	08008607 	.word	0x08008607
 8008540:	08008607 	.word	0x08008607
 8008544:	08008607 	.word	0x08008607
 8008548:	08008607 	.word	0x08008607
 800854c:	08008607 	.word	0x08008607
 8008550:	08008607 	.word	0x08008607
 8008554:	08008607 	.word	0x08008607
 8008558:	080085d3 	.word	0x080085d3
 800855c:	08008607 	.word	0x08008607
 8008560:	08008607 	.word	0x08008607
 8008564:	08008607 	.word	0x08008607
 8008568:	08008607 	.word	0x08008607
 800856c:	08008607 	.word	0x08008607
 8008570:	08008607 	.word	0x08008607
 8008574:	08008607 	.word	0x08008607
 8008578:	08008607 	.word	0x08008607
 800857c:	08008607 	.word	0x08008607
 8008580:	08008607 	.word	0x08008607
 8008584:	08008607 	.word	0x08008607
 8008588:	08008607 	.word	0x08008607
 800858c:	08008607 	.word	0x08008607
 8008590:	08008607 	.word	0x08008607
 8008594:	08008607 	.word	0x08008607
 8008598:	080085f9 	.word	0x080085f9
 800859c:	2b40      	cmp	r3, #64	@ 0x40
 800859e:	d02e      	beq.n	80085fe <UART_SetConfig+0xab2>
 80085a0:	e031      	b.n	8008606 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a2:	f7fc ffa7 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80085a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085a8:	e033      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085aa:	f7fc ffb9 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80085ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085b0:	e02f      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe f99c 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c0:	e027      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c2:	f107 0318 	add.w	r3, r7, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fae8 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d0:	e01f      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d2:	4b69      	ldr	r3, [pc, #420]	@ (8008778 <UART_SetConfig+0xc2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085de:	4b66      	ldr	r3, [pc, #408]	@ (8008778 <UART_SetConfig+0xc2c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	4a64      	ldr	r2, [pc, #400]	@ (800877c <UART_SetConfig+0xc30>)
 80085ea:	fa22 f303 	lsr.w	r3, r2, r3
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085f0:	e00f      	b.n	8008612 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80085f2:	4b62      	ldr	r3, [pc, #392]	@ (800877c <UART_SetConfig+0xc30>)
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e00c      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f8:	4b61      	ldr	r3, [pc, #388]	@ (8008780 <UART_SetConfig+0xc34>)
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fc:	e009      	b.n	8008612 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e005      	b.n	8008612 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80ea 	beq.w	80087ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861e:	4a55      	ldr	r2, [pc, #340]	@ (8008774 <UART_SetConfig+0xc28>)
 8008620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008624:	461a      	mov	r2, r3
 8008626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008628:	fbb3 f3f2 	udiv	r3, r3, r2
 800862c:	005a      	lsls	r2, r3, #1
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	441a      	add	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	2b0f      	cmp	r3, #15
 8008644:	d916      	bls.n	8008674 <UART_SetConfig+0xb28>
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800864c:	d212      	bcs.n	8008674 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	b29b      	uxth	r3, r3
 8008652:	f023 030f 	bic.w	r3, r3, #15
 8008656:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	b29a      	uxth	r2, r3
 8008664:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008666:	4313      	orrs	r3, r2
 8008668:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e0bc      	b.n	80087ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800867a:	e0b8      	b.n	80087ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800867c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008680:	2b20      	cmp	r3, #32
 8008682:	dc4b      	bgt.n	800871c <UART_SetConfig+0xbd0>
 8008684:	2b00      	cmp	r3, #0
 8008686:	f2c0 8087 	blt.w	8008798 <UART_SetConfig+0xc4c>
 800868a:	2b20      	cmp	r3, #32
 800868c:	f200 8084 	bhi.w	8008798 <UART_SetConfig+0xc4c>
 8008690:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <UART_SetConfig+0xb4c>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	08008723 	.word	0x08008723
 800869c:	0800872b 	.word	0x0800872b
 80086a0:	08008799 	.word	0x08008799
 80086a4:	08008799 	.word	0x08008799
 80086a8:	08008733 	.word	0x08008733
 80086ac:	08008799 	.word	0x08008799
 80086b0:	08008799 	.word	0x08008799
 80086b4:	08008799 	.word	0x08008799
 80086b8:	08008743 	.word	0x08008743
 80086bc:	08008799 	.word	0x08008799
 80086c0:	08008799 	.word	0x08008799
 80086c4:	08008799 	.word	0x08008799
 80086c8:	08008799 	.word	0x08008799
 80086cc:	08008799 	.word	0x08008799
 80086d0:	08008799 	.word	0x08008799
 80086d4:	08008799 	.word	0x08008799
 80086d8:	08008753 	.word	0x08008753
 80086dc:	08008799 	.word	0x08008799
 80086e0:	08008799 	.word	0x08008799
 80086e4:	08008799 	.word	0x08008799
 80086e8:	08008799 	.word	0x08008799
 80086ec:	08008799 	.word	0x08008799
 80086f0:	08008799 	.word	0x08008799
 80086f4:	08008799 	.word	0x08008799
 80086f8:	08008799 	.word	0x08008799
 80086fc:	08008799 	.word	0x08008799
 8008700:	08008799 	.word	0x08008799
 8008704:	08008799 	.word	0x08008799
 8008708:	08008799 	.word	0x08008799
 800870c:	08008799 	.word	0x08008799
 8008710:	08008799 	.word	0x08008799
 8008714:	08008799 	.word	0x08008799
 8008718:	0800878b 	.word	0x0800878b
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	d037      	beq.n	8008790 <UART_SetConfig+0xc44>
 8008720:	e03a      	b.n	8008798 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008722:	f7fc fee7 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8008726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008728:	e03c      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800872a:	f7fc fef9 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 800872e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008730:	e038      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe f8dc 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	e030      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008742:	f107 0318 	add.w	r3, r7, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fa28 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008750:	e028      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008752:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <UART_SetConfig+0xc2c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d012      	beq.n	8008784 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800875e:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <UART_SetConfig+0xc2c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	4a04      	ldr	r2, [pc, #16]	@ (800877c <UART_SetConfig+0xc30>)
 800876a:	fa22 f303 	lsr.w	r3, r2, r3
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008770:	e018      	b.n	80087a4 <UART_SetConfig+0xc58>
 8008772:	bf00      	nop
 8008774:	0800ad0c 	.word	0x0800ad0c
 8008778:	58024400 	.word	0x58024400
 800877c:	03d09000 	.word	0x03d09000
 8008780:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008784:	4b24      	ldr	r3, [pc, #144]	@ (8008818 <UART_SetConfig+0xccc>)
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e00c      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800878a:	4b24      	ldr	r3, [pc, #144]	@ (800881c <UART_SetConfig+0xcd0>)
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878e:	e009      	b.n	80087a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008796:	e005      	b.n	80087a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087a2:	bf00      	nop
    }

    if (pclk != 0U)
 80087a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d021      	beq.n	80087ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008820 <UART_SetConfig+0xcd4>)
 80087b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	441a      	add	r2, r3
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d909      	bls.n	80087e8 <UART_SetConfig+0xc9c>
 80087d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087da:	d205      	bcs.n	80087e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	b29a      	uxth	r2, r3
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e002      	b.n	80087ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2200      	movs	r2, #0
 8008802:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2200      	movs	r2, #0
 8008808:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800880a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800880e:	4618      	mov	r0, r3
 8008810:	3748      	adds	r7, #72	@ 0x48
 8008812:	46bd      	mov	sp, r7
 8008814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008818:	03d09000 	.word	0x03d09000
 800881c:	003d0900 	.word	0x003d0900
 8008820:	0800ad0c 	.word	0x0800ad0c

08008824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00a      	beq.n	8008892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01a      	beq.n	800893a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008922:	d10a      	bne.n	800893a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]
  }
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b098      	sub	sp, #96	@ 0x60
 800896c:	af02      	add	r7, sp, #8
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008978:	f7fa fcea 	bl	8003350 <HAL_GetTick>
 800897c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b08      	cmp	r3, #8
 800898a:	d12f      	bne.n	80089ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800898c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008994:	2200      	movs	r2, #0
 8008996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f88e 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d022      	beq.n	80089ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e6      	bne.n	80089a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e063      	b.n	8008ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d149      	bne.n	8008a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a02:	2200      	movs	r2, #0
 8008a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f857 	bl	8008abc <UART_WaitOnFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d03c      	beq.n	8008a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	623b      	str	r3, [r7, #32]
   return(result);
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a66:	61fa      	str	r2, [r7, #28]
 8008a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	69b9      	ldr	r1, [r7, #24]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	617b      	str	r3, [r7, #20]
   return(result);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e012      	b.n	8008ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3758      	adds	r7, #88	@ 0x58
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008acc:	e04f      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	d04b      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad6:	f7fa fc3b 	bl	8003350 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <UART_WaitOnFlagUntilTimeout+0x30>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e04e      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d037      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b80      	cmp	r3, #128	@ 0x80
 8008b02:	d034      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b40      	cmp	r3, #64	@ 0x40
 8008b08:	d031      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d110      	bne.n	8008b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f95b 	bl	8008ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e029      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b48:	d111      	bne.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f941 	bl	8008ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e00f      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4013      	ands	r3, r2
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2301      	moveq	r3, #1
 8008b80:	2300      	movne	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d0a0      	beq.n	8008ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b0a3      	sub	sp, #140	@ 0x8c
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bca:	d10e      	bne.n	8008bea <UART_Start_Receive_IT+0x52>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <UART_Start_Receive_IT+0x48>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008bda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bde:	e02d      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	22ff      	movs	r2, #255	@ 0xff
 8008be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008be8:	e028      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <UART_Start_Receive_IT+0x76>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <UART_Start_Receive_IT+0x6c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	22ff      	movs	r2, #255	@ 0xff
 8008bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c02:	e01b      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	227f      	movs	r2, #127	@ 0x7f
 8008c08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c0c:	e016      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c16:	d10d      	bne.n	8008c34 <UART_Start_Receive_IT+0x9c>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <UART_Start_Receive_IT+0x92>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	227f      	movs	r2, #127	@ 0x7f
 8008c24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c28:	e008      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	223f      	movs	r2, #63	@ 0x3f
 8008c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c32:	e003      	b.n	8008c3c <UART_Start_Receive_IT+0xa4>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2222      	movs	r2, #34	@ 0x22
 8008c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c70:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e3      	bne.n	8008c4c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c8c:	d14f      	bne.n	8008d2e <UART_Start_Receive_IT+0x196>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c94:	88fa      	ldrh	r2, [r7, #6]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d349      	bcc.n	8008d2e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca2:	d107      	bne.n	8008cb4 <UART_Start_Receive_IT+0x11c>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a47      	ldr	r2, [pc, #284]	@ (8008dcc <UART_Start_Receive_IT+0x234>)
 8008cb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cb2:	e002      	b.n	8008cba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a46      	ldr	r2, [pc, #280]	@ (8008dd0 <UART_Start_Receive_IT+0x238>)
 8008cb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01a      	beq.n	8008cf8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ce6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e4      	bne.n	8008cc2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d18:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e5      	bne.n	8008cf8 <UART_Start_Receive_IT+0x160>
 8008d2c:	e046      	b.n	8008dbc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d36:	d107      	bne.n	8008d48 <UART_Start_Receive_IT+0x1b0>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a24      	ldr	r2, [pc, #144]	@ (8008dd4 <UART_Start_Receive_IT+0x23c>)
 8008d44:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d46:	e002      	b.n	8008d4e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4a23      	ldr	r2, [pc, #140]	@ (8008dd8 <UART_Start_Receive_IT+0x240>)
 8008d4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d019      	beq.n	8008d8a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d76:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e6      	bne.n	8008d56 <UART_Start_Receive_IT+0x1be>
 8008d88:	e018      	b.n	8008dbc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f043 0320 	orr.w	r3, r3, #32
 8008d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	378c      	adds	r7, #140	@ 0x8c
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	080095f9 	.word	0x080095f9
 8008dd0:	08009295 	.word	0x08009295
 8008dd4:	080090dd 	.word	0x080090dd
 8008dd8:	08008f25 	.word	0x08008f25

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b095      	sub	sp, #84	@ 0x54
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e6      	bne.n	8008de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea4 <UART_EndRxTransfer+0xc8>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d118      	bne.n	8008e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0310 	bic.w	r3, r3, #16
 8008e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6979      	ldr	r1, [r7, #20]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e98:	bf00      	nop
 8008e9a:	3754      	adds	r7, #84	@ 0x54
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	effffffe 	.word	0xeffffffe

08008ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7fe fe2e 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	613b      	str	r3, [r7, #16]
   return(result);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fe fdf9 	bl	8007b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f1a:	bf00      	nop
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b09c      	sub	sp, #112	@ 0x70
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f3c:	2b22      	cmp	r3, #34	@ 0x22
 8008f3e:	f040 80be 	bne.w	80090be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f50:	b2d9      	uxtb	r1, r3
 8008f52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5c:	400a      	ands	r2, r1
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f040 80a1 	bne.w	80090ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e6      	bne.n	8008f8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a33      	ldr	r2, [pc, #204]	@ (80090d8 <UART_RxISR_8BIT+0x1b4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d01f      	beq.n	8009050 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d018      	beq.n	8009050 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	623b      	str	r3, [r7, #32]
   return(result);
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009032:	663b      	str	r3, [r7, #96]	@ 0x60
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800903c:	633b      	str	r3, [r7, #48]	@ 0x30
 800903e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800904a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009054:	2b01      	cmp	r3, #1
 8009056:	d12e      	bne.n	80090b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	60fb      	str	r3, [r7, #12]
   return(result);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0310 	bic.w	r3, r3, #16
 8009072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	69b9      	ldr	r1, [r7, #24]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	617b      	str	r3, [r7, #20]
   return(result);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b10      	cmp	r3, #16
 800909c:	d103      	bne.n	80090a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2210      	movs	r2, #16
 80090a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe fd40 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090b4:	e00b      	b.n	80090ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7f7 fc60 	bl	800097c <HAL_UART_RxCpltCallback>
}
 80090bc:	e007      	b.n	80090ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0208 	orr.w	r2, r2, #8
 80090cc:	619a      	str	r2, [r3, #24]
}
 80090ce:	bf00      	nop
 80090d0:	3770      	adds	r7, #112	@ 0x70
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	58000c00 	.word	0x58000c00

080090dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b09c      	sub	sp, #112	@ 0x70
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f4:	2b22      	cmp	r3, #34	@ 0x22
 80090f6:	f040 80be 	bne.w	8009276 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009108:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800910a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800910e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009112:	4013      	ands	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009118:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911e:	1c9a      	adds	r2, r3, #2
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	f040 80a1 	bne.w	8009286 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009158:	667b      	str	r3, [r7, #100]	@ 0x64
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009162:	657b      	str	r3, [r7, #84]	@ 0x54
 8009164:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009168:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	663b      	str	r3, [r7, #96]	@ 0x60
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009196:	643a      	str	r2, [r7, #64]	@ 0x40
 8009198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800919c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a33      	ldr	r2, [pc, #204]	@ (8009290 <UART_RxISR_16BIT+0x1b4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d01f      	beq.n	8009208 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d018      	beq.n	8009208 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d12e      	bne.n	800926e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60bb      	str	r3, [r7, #8]
   return(result);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f023 0310 	bic.w	r3, r3, #16
 800922a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	613b      	str	r3, [r7, #16]
   return(result);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 0310 	and.w	r3, r3, #16
 8009252:	2b10      	cmp	r3, #16
 8009254:	d103      	bne.n	800925e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2210      	movs	r2, #16
 800925c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7fe fc64 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800926c:	e00b      	b.n	8009286 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7f7 fb84 	bl	800097c <HAL_UART_RxCpltCallback>
}
 8009274:	e007      	b.n	8009286 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	699a      	ldr	r2, [r3, #24]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 0208 	orr.w	r2, r2, #8
 8009284:	619a      	str	r2, [r3, #24]
}
 8009286:	bf00      	nop
 8009288:	3770      	adds	r7, #112	@ 0x70
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	58000c00 	.word	0x58000c00

08009294 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b0ac      	sub	sp, #176	@ 0xb0
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092ca:	2b22      	cmp	r3, #34	@ 0x22
 80092cc:	f040 8181 	bne.w	80095d2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092d6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092da:	e124      	b.n	8009526 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80092ea:	b2d9      	uxtb	r1, r3
 80092ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f6:	400a      	ands	r2, r1
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d053      	beq.n	80093d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800932e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d011      	beq.n	800935e <UART_RxISR_8BIT_FIFOEN+0xca>
 800933a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800933e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2201      	movs	r2, #1
 800934c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009354:	f043 0201 	orr.w	r2, r3, #1
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800935e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d011      	beq.n	800938e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800936a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2202      	movs	r2, #2
 800937c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009384:	f043 0204 	orr.w	r2, r3, #4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800938e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d011      	beq.n	80093be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800939a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2204      	movs	r2, #4
 80093ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b4:	f043 0202 	orr.w	r2, r3, #2
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d006      	beq.n	80093d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7fe fba9 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f040 80a1 	bne.w	8009526 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80093f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009406:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009408:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800940c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e4      	bne.n	80093e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800942a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800942c:	4b6f      	ldr	r3, [pc, #444]	@ (80095ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800942e:	4013      	ands	r3, r2
 8009430:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3308      	adds	r3, #8
 800943a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800943e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009440:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009444:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800944c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e3      	bne.n	800941a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a61      	ldr	r2, [pc, #388]	@ (80095f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d021      	beq.n	80094b4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d01a      	beq.n	80094b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800948c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800948e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80094a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80094ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e4      	bne.n	800947e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d130      	bne.n	800951e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80094e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e4      	bne.n	80094c2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2b10      	cmp	r3, #16
 8009504:	d103      	bne.n	800950e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2210      	movs	r2, #16
 800950c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fe fb0c 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800951c:	e00e      	b.n	800953c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7f7 fa2c 	bl	800097c <HAL_UART_RxCpltCallback>
        break;
 8009524:	e00a      	b.n	800953c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009526:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800952a:	2b00      	cmp	r3, #0
 800952c:	d006      	beq.n	800953c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800952e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	f47f aed0 	bne.w	80092dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009542:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009546:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800954a:	2b00      	cmp	r3, #0
 800954c:	d049      	beq.n	80095e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009554:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009558:	429a      	cmp	r2, r3
 800955a:	d242      	bcs.n	80095e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3308      	adds	r3, #8
 8009562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	61fb      	str	r3, [r7, #28]
   return(result);
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e3      	bne.n	800955c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a17      	ldr	r2, [pc, #92]	@ (80095f4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009598:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e4      	bne.n	800959a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095d0:	e007      	b.n	80095e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f042 0208 	orr.w	r2, r2, #8
 80095e0:	619a      	str	r2, [r3, #24]
}
 80095e2:	bf00      	nop
 80095e4:	37b0      	adds	r7, #176	@ 0xb0
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	effffffe 	.word	0xeffffffe
 80095f0:	58000c00 	.word	0x58000c00
 80095f4:	08008f25 	.word	0x08008f25

080095f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b0ae      	sub	sp, #184	@ 0xb8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009606:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800962e:	2b22      	cmp	r3, #34	@ 0x22
 8009630:	f040 8185 	bne.w	800993e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800963a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800963e:	e128      	b.n	8009892 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800964e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009652:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009656:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800965a:	4013      	ands	r3, r2
 800965c:	b29a      	uxth	r2, r3
 800965e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009662:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009668:	1c9a      	adds	r2, r3, #2
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009674:	b29b      	uxth	r3, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	b29a      	uxth	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800968a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	2b00      	cmp	r3, #0
 8009694:	d053      	beq.n	800973e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d011      	beq.n	80096c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80096a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2201      	movs	r2, #1
 80096b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096bc:	f043 0201 	orr.w	r2, r3, #1
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d011      	beq.n	80096f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2202      	movs	r2, #2
 80096e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ec:	f043 0204 	orr.w	r2, r3, #4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096fa:	f003 0304 	and.w	r3, r3, #4
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d011      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00b      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2204      	movs	r2, #4
 8009714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971c:	f043 0202 	orr.w	r2, r3, #2
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972c:	2b00      	cmp	r3, #0
 800972e:	d006      	beq.n	800973e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7fe f9f5 	bl	8007b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009744:	b29b      	uxth	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 80a3 	bne.w	8009892 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800975a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800975c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800976e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009772:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e2      	bne.n	800974c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3308      	adds	r3, #8
 800978c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009796:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009798:	4b6f      	ldr	r3, [pc, #444]	@ (8009958 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800979a:	4013      	ands	r3, r2
 800979c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3308      	adds	r3, #8
 80097a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80097aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e3      	bne.n	8009786 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a61      	ldr	r2, [pc, #388]	@ (800995c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d021      	beq.n	8009820 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01a      	beq.n	8009820 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800980c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800980e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800981a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e4      	bne.n	80097ea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009824:	2b01      	cmp	r3, #1
 8009826:	d130      	bne.n	800988a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800983c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800983e:	f023 0310 	bic.w	r3, r3, #16
 8009842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009850:	647b      	str	r3, [r7, #68]	@ 0x44
 8009852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800985e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	2b10      	cmp	r3, #16
 8009870:	d103      	bne.n	800987a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2210      	movs	r2, #16
 8009878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fe f956 	bl	8007b34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009888:	e00e      	b.n	80098a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7f7 f876 	bl	800097c <HAL_UART_RxCpltCallback>
        break;
 8009890:	e00a      	b.n	80098a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009892:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009896:	2b00      	cmp	r3, #0
 8009898:	d006      	beq.n	80098a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800989a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800989e:	f003 0320 	and.w	r3, r3, #32
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f47f aecc 	bne.w	8009640 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d049      	beq.n	800994e <UART_RxISR_16BIT_FIFOEN+0x356>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d242      	bcs.n	800994e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	623b      	str	r3, [r7, #32]
   return(result);
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80098ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80098ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e3      	bne.n	80098c8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a17      	ldr	r2, [pc, #92]	@ (8009960 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009904:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	60fb      	str	r3, [r7, #12]
   return(result);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	69b9      	ldr	r1, [r7, #24]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	617b      	str	r3, [r7, #20]
   return(result);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e4      	bne.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800993c:	e007      	b.n	800994e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f042 0208 	orr.w	r2, r2, #8
 800994c:	619a      	str	r2, [r3, #24]
}
 800994e:	bf00      	nop
 8009950:	37b8      	adds	r7, #184	@ 0xb8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	effffffe 	.word	0xeffffffe
 800995c:	58000c00 	.word	0x58000c00
 8009960:	080090dd 	.word	0x080090dd

08009964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e027      	b.n	8009a06 <HAL_UARTEx_DisableFifoMode+0x66>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2224      	movs	r2, #36	@ 0x24
 80099c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0201 	bic.w	r2, r2, #1
 80099dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a26:	2302      	movs	r3, #2
 8009a28:	e02d      	b.n	8009a86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	@ 0x24
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f850 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e02d      	b.n	8009b02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2224      	movs	r2, #36	@ 0x24
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0201 	bic.w	r2, r2, #1
 8009acc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f812 	bl	8009b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2220      	movs	r2, #32
 8009af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d108      	bne.n	8009b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b2c:	e031      	b.n	8009b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b2e:	2310      	movs	r3, #16
 8009b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b32:	2310      	movs	r3, #16
 8009b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	0e5b      	lsrs	r3, r3, #25
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	0f5b      	lsrs	r3, r3, #29
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	7b3a      	ldrb	r2, [r7, #12]
 8009b5a:	4911      	ldr	r1, [pc, #68]	@ (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b5c:	5c8a      	ldrb	r2, [r1, r2]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b62:	7b3a      	ldrb	r2, [r7, #12]
 8009b64:	490f      	ldr	r1, [pc, #60]	@ (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	7b7a      	ldrb	r2, [r7, #13]
 8009b78:	4909      	ldr	r1, [pc, #36]	@ (8009ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8009b7a:	5c8a      	ldrb	r2, [r1, r2]
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b80:	7b7a      	ldrb	r2, [r7, #13]
 8009b82:	4908      	ldr	r1, [pc, #32]	@ (8009ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8009b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	0800ad24 	.word	0x0800ad24
 8009ba4:	0800ad2c 	.word	0x0800ad2c

08009ba8 <std>:
 8009ba8:	2300      	movs	r3, #0
 8009baa:	b510      	push	{r4, lr}
 8009bac:	4604      	mov	r4, r0
 8009bae:	e9c0 3300 	strd	r3, r3, [r0]
 8009bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bb6:	6083      	str	r3, [r0, #8]
 8009bb8:	8181      	strh	r1, [r0, #12]
 8009bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bbc:	81c2      	strh	r2, [r0, #14]
 8009bbe:	6183      	str	r3, [r0, #24]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	305c      	adds	r0, #92	@ 0x5c
 8009bc6:	f000 f9f9 	bl	8009fbc <memset>
 8009bca:	4b0d      	ldr	r3, [pc, #52]	@ (8009c00 <std+0x58>)
 8009bcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bce:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <std+0x5c>)
 8009bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c08 <std+0x60>)
 8009bd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c0c <std+0x64>)
 8009bd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bda:	4b0d      	ldr	r3, [pc, #52]	@ (8009c10 <std+0x68>)
 8009bdc:	6224      	str	r4, [r4, #32]
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d006      	beq.n	8009bf0 <std+0x48>
 8009be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009be6:	4294      	cmp	r4, r2
 8009be8:	d002      	beq.n	8009bf0 <std+0x48>
 8009bea:	33d0      	adds	r3, #208	@ 0xd0
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d105      	bne.n	8009bfc <std+0x54>
 8009bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf8:	f000 ba58 	b.w	800a0ac <__retarget_lock_init_recursive>
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	bf00      	nop
 8009c00:	08009e0d 	.word	0x08009e0d
 8009c04:	08009e2f 	.word	0x08009e2f
 8009c08:	08009e67 	.word	0x08009e67
 8009c0c:	08009e8b 	.word	0x08009e8b
 8009c10:	24000540 	.word	0x24000540

08009c14 <stdio_exit_handler>:
 8009c14:	4a02      	ldr	r2, [pc, #8]	@ (8009c20 <stdio_exit_handler+0xc>)
 8009c16:	4903      	ldr	r1, [pc, #12]	@ (8009c24 <stdio_exit_handler+0x10>)
 8009c18:	4803      	ldr	r0, [pc, #12]	@ (8009c28 <stdio_exit_handler+0x14>)
 8009c1a:	f000 b869 	b.w	8009cf0 <_fwalk_sglue>
 8009c1e:	bf00      	nop
 8009c20:	24000010 	.word	0x24000010
 8009c24:	0800a969 	.word	0x0800a969
 8009c28:	24000020 	.word	0x24000020

08009c2c <cleanup_stdio>:
 8009c2c:	6841      	ldr	r1, [r0, #4]
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c60 <cleanup_stdio+0x34>)
 8009c30:	4299      	cmp	r1, r3
 8009c32:	b510      	push	{r4, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	d001      	beq.n	8009c3c <cleanup_stdio+0x10>
 8009c38:	f000 fe96 	bl	800a968 <_fflush_r>
 8009c3c:	68a1      	ldr	r1, [r4, #8]
 8009c3e:	4b09      	ldr	r3, [pc, #36]	@ (8009c64 <cleanup_stdio+0x38>)
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d002      	beq.n	8009c4a <cleanup_stdio+0x1e>
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fe8f 	bl	800a968 <_fflush_r>
 8009c4a:	68e1      	ldr	r1, [r4, #12]
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <cleanup_stdio+0x3c>)
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	d004      	beq.n	8009c5c <cleanup_stdio+0x30>
 8009c52:	4620      	mov	r0, r4
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f000 be86 	b.w	800a968 <_fflush_r>
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	24000540 	.word	0x24000540
 8009c64:	240005a8 	.word	0x240005a8
 8009c68:	24000610 	.word	0x24000610

08009c6c <global_stdio_init.part.0>:
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c9c <global_stdio_init.part.0+0x30>)
 8009c70:	4c0b      	ldr	r4, [pc, #44]	@ (8009ca0 <global_stdio_init.part.0+0x34>)
 8009c72:	4a0c      	ldr	r2, [pc, #48]	@ (8009ca4 <global_stdio_init.part.0+0x38>)
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	4620      	mov	r0, r4
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2104      	movs	r1, #4
 8009c7c:	f7ff ff94 	bl	8009ba8 <std>
 8009c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c84:	2201      	movs	r2, #1
 8009c86:	2109      	movs	r1, #9
 8009c88:	f7ff ff8e 	bl	8009ba8 <std>
 8009c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c90:	2202      	movs	r2, #2
 8009c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c96:	2112      	movs	r1, #18
 8009c98:	f7ff bf86 	b.w	8009ba8 <std>
 8009c9c:	24000678 	.word	0x24000678
 8009ca0:	24000540 	.word	0x24000540
 8009ca4:	08009c15 	.word	0x08009c15

08009ca8 <__sfp_lock_acquire>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	@ (8009cb0 <__sfp_lock_acquire+0x8>)
 8009caa:	f000 ba00 	b.w	800a0ae <__retarget_lock_acquire_recursive>
 8009cae:	bf00      	nop
 8009cb0:	24000681 	.word	0x24000681

08009cb4 <__sfp_lock_release>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	@ (8009cbc <__sfp_lock_release+0x8>)
 8009cb6:	f000 b9fb 	b.w	800a0b0 <__retarget_lock_release_recursive>
 8009cba:	bf00      	nop
 8009cbc:	24000681 	.word	0x24000681

08009cc0 <__sinit>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	f7ff fff0 	bl	8009ca8 <__sfp_lock_acquire>
 8009cc8:	6a23      	ldr	r3, [r4, #32]
 8009cca:	b11b      	cbz	r3, 8009cd4 <__sinit+0x14>
 8009ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd0:	f7ff bff0 	b.w	8009cb4 <__sfp_lock_release>
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <__sinit+0x28>)
 8009cd6:	6223      	str	r3, [r4, #32]
 8009cd8:	4b04      	ldr	r3, [pc, #16]	@ (8009cec <__sinit+0x2c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1f5      	bne.n	8009ccc <__sinit+0xc>
 8009ce0:	f7ff ffc4 	bl	8009c6c <global_stdio_init.part.0>
 8009ce4:	e7f2      	b.n	8009ccc <__sinit+0xc>
 8009ce6:	bf00      	nop
 8009ce8:	08009c2d 	.word	0x08009c2d
 8009cec:	24000678 	.word	0x24000678

08009cf0 <_fwalk_sglue>:
 8009cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	4688      	mov	r8, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	2600      	movs	r6, #0
 8009cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d00:	f1b9 0901 	subs.w	r9, r9, #1
 8009d04:	d505      	bpl.n	8009d12 <_fwalk_sglue+0x22>
 8009d06:	6824      	ldr	r4, [r4, #0]
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	d1f7      	bne.n	8009cfc <_fwalk_sglue+0xc>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d12:	89ab      	ldrh	r3, [r5, #12]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d907      	bls.n	8009d28 <_fwalk_sglue+0x38>
 8009d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	d003      	beq.n	8009d28 <_fwalk_sglue+0x38>
 8009d20:	4629      	mov	r1, r5
 8009d22:	4638      	mov	r0, r7
 8009d24:	47c0      	blx	r8
 8009d26:	4306      	orrs	r6, r0
 8009d28:	3568      	adds	r5, #104	@ 0x68
 8009d2a:	e7e9      	b.n	8009d00 <_fwalk_sglue+0x10>

08009d2c <iprintf>:
 8009d2c:	b40f      	push	{r0, r1, r2, r3}
 8009d2e:	b507      	push	{r0, r1, r2, lr}
 8009d30:	4906      	ldr	r1, [pc, #24]	@ (8009d4c <iprintf+0x20>)
 8009d32:	ab04      	add	r3, sp, #16
 8009d34:	6808      	ldr	r0, [r1, #0]
 8009d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3a:	6881      	ldr	r1, [r0, #8]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	f000 fae9 	bl	800a314 <_vfiprintf_r>
 8009d42:	b003      	add	sp, #12
 8009d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d48:	b004      	add	sp, #16
 8009d4a:	4770      	bx	lr
 8009d4c:	2400001c 	.word	0x2400001c

08009d50 <_puts_r>:
 8009d50:	6a03      	ldr	r3, [r0, #32]
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	6884      	ldr	r4, [r0, #8]
 8009d56:	4605      	mov	r5, r0
 8009d58:	460e      	mov	r6, r1
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_puts_r+0x10>
 8009d5c:	f7ff ffb0 	bl	8009cc0 <__sinit>
 8009d60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_puts_r+0x22>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	0598      	lsls	r0, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_puts_r+0x22>
 8009d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d6e:	f000 f99e 	bl	800a0ae <__retarget_lock_acquire_recursive>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	0719      	lsls	r1, r3, #28
 8009d76:	d502      	bpl.n	8009d7e <_puts_r+0x2e>
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d135      	bne.n	8009dea <_puts_r+0x9a>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 f8c5 	bl	8009f10 <__swsetup_r>
 8009d86:	b380      	cbz	r0, 8009dea <_puts_r+0x9a>
 8009d88:	f04f 35ff 	mov.w	r5, #4294967295
 8009d8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d8e:	07da      	lsls	r2, r3, #31
 8009d90:	d405      	bmi.n	8009d9e <_puts_r+0x4e>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	059b      	lsls	r3, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_puts_r+0x4e>
 8009d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d9a:	f000 f989 	bl	800a0b0 <__retarget_lock_release_recursive>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da04      	bge.n	8009db0 <_puts_r+0x60>
 8009da6:	69a2      	ldr	r2, [r4, #24]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	dc17      	bgt.n	8009ddc <_puts_r+0x8c>
 8009dac:	290a      	cmp	r1, #10
 8009dae:	d015      	beq.n	8009ddc <_puts_r+0x8c>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	6022      	str	r2, [r4, #0]
 8009db6:	7019      	strb	r1, [r3, #0]
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	60a3      	str	r3, [r4, #8]
 8009dc2:	2900      	cmp	r1, #0
 8009dc4:	d1ed      	bne.n	8009da2 <_puts_r+0x52>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da11      	bge.n	8009dee <_puts_r+0x9e>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	210a      	movs	r1, #10
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f85f 	bl	8009e92 <__swbuf_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d0d7      	beq.n	8009d88 <_puts_r+0x38>
 8009dd8:	250a      	movs	r5, #10
 8009dda:	e7d7      	b.n	8009d8c <_puts_r+0x3c>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f857 	bl	8009e92 <__swbuf_r>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d1e7      	bne.n	8009db8 <_puts_r+0x68>
 8009de8:	e7ce      	b.n	8009d88 <_puts_r+0x38>
 8009dea:	3e01      	subs	r6, #1
 8009dec:	e7e4      	b.n	8009db8 <_puts_r+0x68>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	220a      	movs	r2, #10
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	e7ee      	b.n	8009dd8 <_puts_r+0x88>
	...

08009dfc <puts>:
 8009dfc:	4b02      	ldr	r3, [pc, #8]	@ (8009e08 <puts+0xc>)
 8009dfe:	4601      	mov	r1, r0
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	f7ff bfa5 	b.w	8009d50 <_puts_r>
 8009e06:	bf00      	nop
 8009e08:	2400001c 	.word	0x2400001c

08009e0c <__sread>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e14:	f000 f8fc 	bl	800a010 <_read_r>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	bfab      	itete	ge
 8009e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e20:	181b      	addge	r3, r3, r0
 8009e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e26:	bfac      	ite	ge
 8009e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e2a:	81a3      	strhlt	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__swrite>:
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	461f      	mov	r7, r3
 8009e34:	898b      	ldrh	r3, [r1, #12]
 8009e36:	05db      	lsls	r3, r3, #23
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	d505      	bpl.n	8009e4c <__swrite+0x1e>
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f000 f8d0 	bl	8009fec <_lseek_r>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	f000 b8e7 	b.w	800a034 <_write_r>

08009e66 <__sseek>:
 8009e66:	b510      	push	{r4, lr}
 8009e68:	460c      	mov	r4, r1
 8009e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6e:	f000 f8bd 	bl	8009fec <_lseek_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	bf15      	itete	ne
 8009e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e82:	81a3      	strheq	r3, [r4, #12]
 8009e84:	bf18      	it	ne
 8009e86:	81a3      	strhne	r3, [r4, #12]
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <__sclose>:
 8009e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8e:	f000 b89d 	b.w	8009fcc <_close_r>

08009e92 <__swbuf_r>:
 8009e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e94:	460e      	mov	r6, r1
 8009e96:	4614      	mov	r4, r2
 8009e98:	4605      	mov	r5, r0
 8009e9a:	b118      	cbz	r0, 8009ea4 <__swbuf_r+0x12>
 8009e9c:	6a03      	ldr	r3, [r0, #32]
 8009e9e:	b90b      	cbnz	r3, 8009ea4 <__swbuf_r+0x12>
 8009ea0:	f7ff ff0e 	bl	8009cc0 <__sinit>
 8009ea4:	69a3      	ldr	r3, [r4, #24]
 8009ea6:	60a3      	str	r3, [r4, #8]
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	071a      	lsls	r2, r3, #28
 8009eac:	d501      	bpl.n	8009eb2 <__swbuf_r+0x20>
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	b943      	cbnz	r3, 8009ec4 <__swbuf_r+0x32>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f000 f82b 	bl	8009f10 <__swsetup_r>
 8009eba:	b118      	cbz	r0, 8009ec4 <__swbuf_r+0x32>
 8009ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	6922      	ldr	r2, [r4, #16]
 8009ec8:	1a98      	subs	r0, r3, r2
 8009eca:	6963      	ldr	r3, [r4, #20]
 8009ecc:	b2f6      	uxtb	r6, r6
 8009ece:	4283      	cmp	r3, r0
 8009ed0:	4637      	mov	r7, r6
 8009ed2:	dc05      	bgt.n	8009ee0 <__swbuf_r+0x4e>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 fd46 	bl	800a968 <_fflush_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d1ed      	bne.n	8009ebc <__swbuf_r+0x2a>
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	6022      	str	r2, [r4, #0]
 8009eec:	701e      	strb	r6, [r3, #0]
 8009eee:	6962      	ldr	r2, [r4, #20]
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d004      	beq.n	8009f00 <__swbuf_r+0x6e>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	07db      	lsls	r3, r3, #31
 8009efa:	d5e1      	bpl.n	8009ec0 <__swbuf_r+0x2e>
 8009efc:	2e0a      	cmp	r6, #10
 8009efe:	d1df      	bne.n	8009ec0 <__swbuf_r+0x2e>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 fd30 	bl	800a968 <_fflush_r>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0d9      	beq.n	8009ec0 <__swbuf_r+0x2e>
 8009f0c:	e7d6      	b.n	8009ebc <__swbuf_r+0x2a>
	...

08009f10 <__swsetup_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4b29      	ldr	r3, [pc, #164]	@ (8009fb8 <__swsetup_r+0xa8>)
 8009f14:	4605      	mov	r5, r0
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	460c      	mov	r4, r1
 8009f1a:	b118      	cbz	r0, 8009f24 <__swsetup_r+0x14>
 8009f1c:	6a03      	ldr	r3, [r0, #32]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <__swsetup_r+0x14>
 8009f20:	f7ff fece 	bl	8009cc0 <__sinit>
 8009f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f28:	0719      	lsls	r1, r3, #28
 8009f2a:	d422      	bmi.n	8009f72 <__swsetup_r+0x62>
 8009f2c:	06da      	lsls	r2, r3, #27
 8009f2e:	d407      	bmi.n	8009f40 <__swsetup_r+0x30>
 8009f30:	2209      	movs	r2, #9
 8009f32:	602a      	str	r2, [r5, #0]
 8009f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3e:	e033      	b.n	8009fa8 <__swsetup_r+0x98>
 8009f40:	0758      	lsls	r0, r3, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x5a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x4a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x46>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 f8bd 	bl	800a0d0 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x7a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x7a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 fd3d 	bl	800aa04 <__smakebuf_r>
 8009f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8e:	f013 0201 	ands.w	r2, r3, #1
 8009f92:	d00a      	beq.n	8009faa <__swsetup_r+0x9a>
 8009f94:	2200      	movs	r2, #0
 8009f96:	60a2      	str	r2, [r4, #8]
 8009f98:	6962      	ldr	r2, [r4, #20]
 8009f9a:	4252      	negs	r2, r2
 8009f9c:	61a2      	str	r2, [r4, #24]
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	b942      	cbnz	r2, 8009fb4 <__swsetup_r+0xa4>
 8009fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fa6:	d1c5      	bne.n	8009f34 <__swsetup_r+0x24>
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	0799      	lsls	r1, r3, #30
 8009fac:	bf58      	it	pl
 8009fae:	6962      	ldrpl	r2, [r4, #20]
 8009fb0:	60a2      	str	r2, [r4, #8]
 8009fb2:	e7f4      	b.n	8009f9e <__swsetup_r+0x8e>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7f7      	b.n	8009fa8 <__swsetup_r+0x98>
 8009fb8:	2400001c 	.word	0x2400001c

08009fbc <memset>:
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <_close_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d06      	ldr	r5, [pc, #24]	@ (8009fe8 <_close_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	f7f8 ff37 	bl	8002e4a <_close>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_close_r+0x1a>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_close_r+0x1a>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	2400067c 	.word	0x2400067c

08009fec <_lseek_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	@ (800a00c <_lseek_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f8 ff4c 	bl	8002e98 <_lseek>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_lseek_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_lseek_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	2400067c 	.word	0x2400067c

0800a010 <_read_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_read_r+0x20>)
 800a014:	4604      	mov	r4, r0
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7f8 feda 	bl	8002dd8 <_read>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_read_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_read_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	2400067c 	.word	0x2400067c

0800a034 <_write_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	@ (800a054 <_write_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f8 fee5 	bl	8002e12 <_write>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_write_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_write_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	2400067c 	.word	0x2400067c

0800a058 <__errno>:
 800a058:	4b01      	ldr	r3, [pc, #4]	@ (800a060 <__errno+0x8>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	2400001c 	.word	0x2400001c

0800a064 <__libc_init_array>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4d0d      	ldr	r5, [pc, #52]	@ (800a09c <__libc_init_array+0x38>)
 800a068:	4c0d      	ldr	r4, [pc, #52]	@ (800a0a0 <__libc_init_array+0x3c>)
 800a06a:	1b64      	subs	r4, r4, r5
 800a06c:	10a4      	asrs	r4, r4, #2
 800a06e:	2600      	movs	r6, #0
 800a070:	42a6      	cmp	r6, r4
 800a072:	d109      	bne.n	800a088 <__libc_init_array+0x24>
 800a074:	4d0b      	ldr	r5, [pc, #44]	@ (800a0a4 <__libc_init_array+0x40>)
 800a076:	4c0c      	ldr	r4, [pc, #48]	@ (800a0a8 <__libc_init_array+0x44>)
 800a078:	f000 fd32 	bl	800aae0 <_init>
 800a07c:	1b64      	subs	r4, r4, r5
 800a07e:	10a4      	asrs	r4, r4, #2
 800a080:	2600      	movs	r6, #0
 800a082:	42a6      	cmp	r6, r4
 800a084:	d105      	bne.n	800a092 <__libc_init_array+0x2e>
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08c:	4798      	blx	r3
 800a08e:	3601      	adds	r6, #1
 800a090:	e7ee      	b.n	800a070 <__libc_init_array+0xc>
 800a092:	f855 3b04 	ldr.w	r3, [r5], #4
 800a096:	4798      	blx	r3
 800a098:	3601      	adds	r6, #1
 800a09a:	e7f2      	b.n	800a082 <__libc_init_array+0x1e>
 800a09c:	0800ad70 	.word	0x0800ad70
 800a0a0:	0800ad70 	.word	0x0800ad70
 800a0a4:	0800ad70 	.word	0x0800ad70
 800a0a8:	0800ad74 	.word	0x0800ad74

0800a0ac <__retarget_lock_init_recursive>:
 800a0ac:	4770      	bx	lr

0800a0ae <__retarget_lock_acquire_recursive>:
 800a0ae:	4770      	bx	lr

0800a0b0 <__retarget_lock_release_recursive>:
 800a0b0:	4770      	bx	lr

0800a0b2 <memcpy>:
 800a0b2:	440a      	add	r2, r1
 800a0b4:	4291      	cmp	r1, r2
 800a0b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0ba:	d100      	bne.n	800a0be <memcpy+0xc>
 800a0bc:	4770      	bx	lr
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0c8:	4291      	cmp	r1, r2
 800a0ca:	d1f9      	bne.n	800a0c0 <memcpy+0xe>
 800a0cc:	bd10      	pop	{r4, pc}
	...

0800a0d0 <_free_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d041      	beq.n	800a15c <_free_r+0x8c>
 800a0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0dc:	1f0c      	subs	r4, r1, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bfb8      	it	lt
 800a0e2:	18e4      	addlt	r4, r4, r3
 800a0e4:	f000 f8e0 	bl	800a2a8 <__malloc_lock>
 800a0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a160 <_free_r+0x90>)
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	b933      	cbnz	r3, 800a0fc <_free_r+0x2c>
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	6014      	str	r4, [r2, #0]
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f8:	f000 b8dc 	b.w	800a2b4 <__malloc_unlock>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d908      	bls.n	800a112 <_free_r+0x42>
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	1821      	adds	r1, r4, r0
 800a104:	428b      	cmp	r3, r1
 800a106:	bf01      	itttt	eq
 800a108:	6819      	ldreq	r1, [r3, #0]
 800a10a:	685b      	ldreq	r3, [r3, #4]
 800a10c:	1809      	addeq	r1, r1, r0
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	e7ed      	b.n	800a0ee <_free_r+0x1e>
 800a112:	461a      	mov	r2, r3
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b10b      	cbz	r3, 800a11c <_free_r+0x4c>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d9fa      	bls.n	800a112 <_free_r+0x42>
 800a11c:	6811      	ldr	r1, [r2, #0]
 800a11e:	1850      	adds	r0, r2, r1
 800a120:	42a0      	cmp	r0, r4
 800a122:	d10b      	bne.n	800a13c <_free_r+0x6c>
 800a124:	6820      	ldr	r0, [r4, #0]
 800a126:	4401      	add	r1, r0
 800a128:	1850      	adds	r0, r2, r1
 800a12a:	4283      	cmp	r3, r0
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	d1e0      	bne.n	800a0f2 <_free_r+0x22>
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	4408      	add	r0, r1
 800a138:	6010      	str	r0, [r2, #0]
 800a13a:	e7da      	b.n	800a0f2 <_free_r+0x22>
 800a13c:	d902      	bls.n	800a144 <_free_r+0x74>
 800a13e:	230c      	movs	r3, #12
 800a140:	602b      	str	r3, [r5, #0]
 800a142:	e7d6      	b.n	800a0f2 <_free_r+0x22>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	1821      	adds	r1, r4, r0
 800a148:	428b      	cmp	r3, r1
 800a14a:	bf04      	itt	eq
 800a14c:	6819      	ldreq	r1, [r3, #0]
 800a14e:	685b      	ldreq	r3, [r3, #4]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	bf04      	itt	eq
 800a154:	1809      	addeq	r1, r1, r0
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	6054      	str	r4, [r2, #4]
 800a15a:	e7ca      	b.n	800a0f2 <_free_r+0x22>
 800a15c:	bd38      	pop	{r3, r4, r5, pc}
 800a15e:	bf00      	nop
 800a160:	24000688 	.word	0x24000688

0800a164 <sbrk_aligned>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4e0f      	ldr	r6, [pc, #60]	@ (800a1a4 <sbrk_aligned+0x40>)
 800a168:	460c      	mov	r4, r1
 800a16a:	6831      	ldr	r1, [r6, #0]
 800a16c:	4605      	mov	r5, r0
 800a16e:	b911      	cbnz	r1, 800a176 <sbrk_aligned+0x12>
 800a170:	f000 fca6 	bl	800aac0 <_sbrk_r>
 800a174:	6030      	str	r0, [r6, #0]
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f000 fca1 	bl	800aac0 <_sbrk_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d103      	bne.n	800a18a <sbrk_aligned+0x26>
 800a182:	f04f 34ff 	mov.w	r4, #4294967295
 800a186:	4620      	mov	r0, r4
 800a188:	bd70      	pop	{r4, r5, r6, pc}
 800a18a:	1cc4      	adds	r4, r0, #3
 800a18c:	f024 0403 	bic.w	r4, r4, #3
 800a190:	42a0      	cmp	r0, r4
 800a192:	d0f8      	beq.n	800a186 <sbrk_aligned+0x22>
 800a194:	1a21      	subs	r1, r4, r0
 800a196:	4628      	mov	r0, r5
 800a198:	f000 fc92 	bl	800aac0 <_sbrk_r>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d1f2      	bne.n	800a186 <sbrk_aligned+0x22>
 800a1a0:	e7ef      	b.n	800a182 <sbrk_aligned+0x1e>
 800a1a2:	bf00      	nop
 800a1a4:	24000684 	.word	0x24000684

0800a1a8 <_malloc_r>:
 800a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	1ccd      	adds	r5, r1, #3
 800a1ae:	f025 0503 	bic.w	r5, r5, #3
 800a1b2:	3508      	adds	r5, #8
 800a1b4:	2d0c      	cmp	r5, #12
 800a1b6:	bf38      	it	cc
 800a1b8:	250c      	movcc	r5, #12
 800a1ba:	2d00      	cmp	r5, #0
 800a1bc:	4606      	mov	r6, r0
 800a1be:	db01      	blt.n	800a1c4 <_malloc_r+0x1c>
 800a1c0:	42a9      	cmp	r1, r5
 800a1c2:	d904      	bls.n	800a1ce <_malloc_r+0x26>
 800a1c4:	230c      	movs	r3, #12
 800a1c6:	6033      	str	r3, [r6, #0]
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2a4 <_malloc_r+0xfc>
 800a1d2:	f000 f869 	bl	800a2a8 <__malloc_lock>
 800a1d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1da:	461c      	mov	r4, r3
 800a1dc:	bb44      	cbnz	r4, 800a230 <_malloc_r+0x88>
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff ffbf 	bl	800a164 <sbrk_aligned>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	d158      	bne.n	800a29e <_malloc_r+0xf6>
 800a1ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a1f0:	4627      	mov	r7, r4
 800a1f2:	2f00      	cmp	r7, #0
 800a1f4:	d143      	bne.n	800a27e <_malloc_r+0xd6>
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	d04b      	beq.n	800a292 <_malloc_r+0xea>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	4630      	mov	r0, r6
 800a200:	eb04 0903 	add.w	r9, r4, r3
 800a204:	f000 fc5c 	bl	800aac0 <_sbrk_r>
 800a208:	4581      	cmp	r9, r0
 800a20a:	d142      	bne.n	800a292 <_malloc_r+0xea>
 800a20c:	6821      	ldr	r1, [r4, #0]
 800a20e:	1a6d      	subs	r5, r5, r1
 800a210:	4629      	mov	r1, r5
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ffa6 	bl	800a164 <sbrk_aligned>
 800a218:	3001      	adds	r0, #1
 800a21a:	d03a      	beq.n	800a292 <_malloc_r+0xea>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	442b      	add	r3, r5
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	f8d8 3000 	ldr.w	r3, [r8]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	bb62      	cbnz	r2, 800a284 <_malloc_r+0xdc>
 800a22a:	f8c8 7000 	str.w	r7, [r8]
 800a22e:	e00f      	b.n	800a250 <_malloc_r+0xa8>
 800a230:	6822      	ldr	r2, [r4, #0]
 800a232:	1b52      	subs	r2, r2, r5
 800a234:	d420      	bmi.n	800a278 <_malloc_r+0xd0>
 800a236:	2a0b      	cmp	r2, #11
 800a238:	d917      	bls.n	800a26a <_malloc_r+0xc2>
 800a23a:	1961      	adds	r1, r4, r5
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	6025      	str	r5, [r4, #0]
 800a240:	bf18      	it	ne
 800a242:	6059      	strne	r1, [r3, #4]
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	bf08      	it	eq
 800a248:	f8c8 1000 	streq.w	r1, [r8]
 800a24c:	5162      	str	r2, [r4, r5]
 800a24e:	604b      	str	r3, [r1, #4]
 800a250:	4630      	mov	r0, r6
 800a252:	f000 f82f 	bl	800a2b4 <__malloc_unlock>
 800a256:	f104 000b 	add.w	r0, r4, #11
 800a25a:	1d23      	adds	r3, r4, #4
 800a25c:	f020 0007 	bic.w	r0, r0, #7
 800a260:	1ac2      	subs	r2, r0, r3
 800a262:	bf1c      	itt	ne
 800a264:	1a1b      	subne	r3, r3, r0
 800a266:	50a3      	strne	r3, [r4, r2]
 800a268:	e7af      	b.n	800a1ca <_malloc_r+0x22>
 800a26a:	6862      	ldr	r2, [r4, #4]
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	bf0c      	ite	eq
 800a270:	f8c8 2000 	streq.w	r2, [r8]
 800a274:	605a      	strne	r2, [r3, #4]
 800a276:	e7eb      	b.n	800a250 <_malloc_r+0xa8>
 800a278:	4623      	mov	r3, r4
 800a27a:	6864      	ldr	r4, [r4, #4]
 800a27c:	e7ae      	b.n	800a1dc <_malloc_r+0x34>
 800a27e:	463c      	mov	r4, r7
 800a280:	687f      	ldr	r7, [r7, #4]
 800a282:	e7b6      	b.n	800a1f2 <_malloc_r+0x4a>
 800a284:	461a      	mov	r2, r3
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d1fb      	bne.n	800a284 <_malloc_r+0xdc>
 800a28c:	2300      	movs	r3, #0
 800a28e:	6053      	str	r3, [r2, #4]
 800a290:	e7de      	b.n	800a250 <_malloc_r+0xa8>
 800a292:	230c      	movs	r3, #12
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	4630      	mov	r0, r6
 800a298:	f000 f80c 	bl	800a2b4 <__malloc_unlock>
 800a29c:	e794      	b.n	800a1c8 <_malloc_r+0x20>
 800a29e:	6005      	str	r5, [r0, #0]
 800a2a0:	e7d6      	b.n	800a250 <_malloc_r+0xa8>
 800a2a2:	bf00      	nop
 800a2a4:	24000688 	.word	0x24000688

0800a2a8 <__malloc_lock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	@ (800a2b0 <__malloc_lock+0x8>)
 800a2aa:	f7ff bf00 	b.w	800a0ae <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	24000680 	.word	0x24000680

0800a2b4 <__malloc_unlock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	@ (800a2bc <__malloc_unlock+0x8>)
 800a2b6:	f7ff befb 	b.w	800a0b0 <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	24000680 	.word	0x24000680

0800a2c0 <__sfputc_r>:
 800a2c0:	6893      	ldr	r3, [r2, #8]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	b410      	push	{r4}
 800a2c8:	6093      	str	r3, [r2, #8]
 800a2ca:	da08      	bge.n	800a2de <__sfputc_r+0x1e>
 800a2cc:	6994      	ldr	r4, [r2, #24]
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	db01      	blt.n	800a2d6 <__sfputc_r+0x16>
 800a2d2:	290a      	cmp	r1, #10
 800a2d4:	d103      	bne.n	800a2de <__sfputc_r+0x1e>
 800a2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2da:	f7ff bdda 	b.w	8009e92 <__swbuf_r>
 800a2de:	6813      	ldr	r3, [r2, #0]
 800a2e0:	1c58      	adds	r0, r3, #1
 800a2e2:	6010      	str	r0, [r2, #0]
 800a2e4:	7019      	strb	r1, [r3, #0]
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <__sfputs_r>:
 800a2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	18d5      	adds	r5, r2, r3
 800a2f8:	42ac      	cmp	r4, r5
 800a2fa:	d101      	bne.n	800a300 <__sfputs_r+0x12>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	e007      	b.n	800a310 <__sfputs_r+0x22>
 800a300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a304:	463a      	mov	r2, r7
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ffda 	bl	800a2c0 <__sfputc_r>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d1f3      	bne.n	800a2f8 <__sfputs_r+0xa>
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a314 <_vfiprintf_r>:
 800a314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	460d      	mov	r5, r1
 800a31a:	b09d      	sub	sp, #116	@ 0x74
 800a31c:	4614      	mov	r4, r2
 800a31e:	4698      	mov	r8, r3
 800a320:	4606      	mov	r6, r0
 800a322:	b118      	cbz	r0, 800a32c <_vfiprintf_r+0x18>
 800a324:	6a03      	ldr	r3, [r0, #32]
 800a326:	b90b      	cbnz	r3, 800a32c <_vfiprintf_r+0x18>
 800a328:	f7ff fcca 	bl	8009cc0 <__sinit>
 800a32c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a32e:	07d9      	lsls	r1, r3, #31
 800a330:	d405      	bmi.n	800a33e <_vfiprintf_r+0x2a>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	059a      	lsls	r2, r3, #22
 800a336:	d402      	bmi.n	800a33e <_vfiprintf_r+0x2a>
 800a338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a33a:	f7ff feb8 	bl	800a0ae <__retarget_lock_acquire_recursive>
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	071b      	lsls	r3, r3, #28
 800a342:	d501      	bpl.n	800a348 <_vfiprintf_r+0x34>
 800a344:	692b      	ldr	r3, [r5, #16]
 800a346:	b99b      	cbnz	r3, 800a370 <_vfiprintf_r+0x5c>
 800a348:	4629      	mov	r1, r5
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff fde0 	bl	8009f10 <__swsetup_r>
 800a350:	b170      	cbz	r0, 800a370 <_vfiprintf_r+0x5c>
 800a352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a354:	07dc      	lsls	r4, r3, #31
 800a356:	d504      	bpl.n	800a362 <_vfiprintf_r+0x4e>
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	b01d      	add	sp, #116	@ 0x74
 800a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	0598      	lsls	r0, r3, #22
 800a366:	d4f7      	bmi.n	800a358 <_vfiprintf_r+0x44>
 800a368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36a:	f7ff fea1 	bl	800a0b0 <__retarget_lock_release_recursive>
 800a36e:	e7f3      	b.n	800a358 <_vfiprintf_r+0x44>
 800a370:	2300      	movs	r3, #0
 800a372:	9309      	str	r3, [sp, #36]	@ 0x24
 800a374:	2320      	movs	r3, #32
 800a376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a37e:	2330      	movs	r3, #48	@ 0x30
 800a380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a530 <_vfiprintf_r+0x21c>
 800a384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a388:	f04f 0901 	mov.w	r9, #1
 800a38c:	4623      	mov	r3, r4
 800a38e:	469a      	mov	sl, r3
 800a390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a394:	b10a      	cbz	r2, 800a39a <_vfiprintf_r+0x86>
 800a396:	2a25      	cmp	r2, #37	@ 0x25
 800a398:	d1f9      	bne.n	800a38e <_vfiprintf_r+0x7a>
 800a39a:	ebba 0b04 	subs.w	fp, sl, r4
 800a39e:	d00b      	beq.n	800a3b8 <_vfiprintf_r+0xa4>
 800a3a0:	465b      	mov	r3, fp
 800a3a2:	4622      	mov	r2, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7ff ffa1 	bl	800a2ee <__sfputs_r>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f000 80a7 	beq.w	800a500 <_vfiprintf_r+0x1ec>
 800a3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3b4:	445a      	add	r2, fp
 800a3b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 809f 	beq.w	800a500 <_vfiprintf_r+0x1ec>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3cc:	f10a 0a01 	add.w	sl, sl, #1
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	9307      	str	r3, [sp, #28]
 800a3d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3da:	4654      	mov	r4, sl
 800a3dc:	2205      	movs	r2, #5
 800a3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e2:	4853      	ldr	r0, [pc, #332]	@ (800a530 <_vfiprintf_r+0x21c>)
 800a3e4:	f7f5 ff84 	bl	80002f0 <memchr>
 800a3e8:	9a04      	ldr	r2, [sp, #16]
 800a3ea:	b9d8      	cbnz	r0, 800a424 <_vfiprintf_r+0x110>
 800a3ec:	06d1      	lsls	r1, r2, #27
 800a3ee:	bf44      	itt	mi
 800a3f0:	2320      	movmi	r3, #32
 800a3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3f6:	0713      	lsls	r3, r2, #28
 800a3f8:	bf44      	itt	mi
 800a3fa:	232b      	movmi	r3, #43	@ 0x2b
 800a3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a400:	f89a 3000 	ldrb.w	r3, [sl]
 800a404:	2b2a      	cmp	r3, #42	@ 0x2a
 800a406:	d015      	beq.n	800a434 <_vfiprintf_r+0x120>
 800a408:	9a07      	ldr	r2, [sp, #28]
 800a40a:	4654      	mov	r4, sl
 800a40c:	2000      	movs	r0, #0
 800a40e:	f04f 0c0a 	mov.w	ip, #10
 800a412:	4621      	mov	r1, r4
 800a414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a418:	3b30      	subs	r3, #48	@ 0x30
 800a41a:	2b09      	cmp	r3, #9
 800a41c:	d94b      	bls.n	800a4b6 <_vfiprintf_r+0x1a2>
 800a41e:	b1b0      	cbz	r0, 800a44e <_vfiprintf_r+0x13a>
 800a420:	9207      	str	r2, [sp, #28]
 800a422:	e014      	b.n	800a44e <_vfiprintf_r+0x13a>
 800a424:	eba0 0308 	sub.w	r3, r0, r8
 800a428:	fa09 f303 	lsl.w	r3, r9, r3
 800a42c:	4313      	orrs	r3, r2
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	46a2      	mov	sl, r4
 800a432:	e7d2      	b.n	800a3da <_vfiprintf_r+0xc6>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	1d19      	adds	r1, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	9103      	str	r1, [sp, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bfbb      	ittet	lt
 800a440:	425b      	neglt	r3, r3
 800a442:	f042 0202 	orrlt.w	r2, r2, #2
 800a446:	9307      	strge	r3, [sp, #28]
 800a448:	9307      	strlt	r3, [sp, #28]
 800a44a:	bfb8      	it	lt
 800a44c:	9204      	strlt	r2, [sp, #16]
 800a44e:	7823      	ldrb	r3, [r4, #0]
 800a450:	2b2e      	cmp	r3, #46	@ 0x2e
 800a452:	d10a      	bne.n	800a46a <_vfiprintf_r+0x156>
 800a454:	7863      	ldrb	r3, [r4, #1]
 800a456:	2b2a      	cmp	r3, #42	@ 0x2a
 800a458:	d132      	bne.n	800a4c0 <_vfiprintf_r+0x1ac>
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	1d1a      	adds	r2, r3, #4
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	9203      	str	r2, [sp, #12]
 800a462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a466:	3402      	adds	r4, #2
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a540 <_vfiprintf_r+0x22c>
 800a46e:	7821      	ldrb	r1, [r4, #0]
 800a470:	2203      	movs	r2, #3
 800a472:	4650      	mov	r0, sl
 800a474:	f7f5 ff3c 	bl	80002f0 <memchr>
 800a478:	b138      	cbz	r0, 800a48a <_vfiprintf_r+0x176>
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	eba0 000a 	sub.w	r0, r0, sl
 800a480:	2240      	movs	r2, #64	@ 0x40
 800a482:	4082      	lsls	r2, r0
 800a484:	4313      	orrs	r3, r2
 800a486:	3401      	adds	r4, #1
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4829      	ldr	r0, [pc, #164]	@ (800a534 <_vfiprintf_r+0x220>)
 800a490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a494:	2206      	movs	r2, #6
 800a496:	f7f5 ff2b 	bl	80002f0 <memchr>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d03f      	beq.n	800a51e <_vfiprintf_r+0x20a>
 800a49e:	4b26      	ldr	r3, [pc, #152]	@ (800a538 <_vfiprintf_r+0x224>)
 800a4a0:	bb1b      	cbnz	r3, 800a4ea <_vfiprintf_r+0x1d6>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	3307      	adds	r3, #7
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b0:	443b      	add	r3, r7
 800a4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4b4:	e76a      	b.n	800a38c <_vfiprintf_r+0x78>
 800a4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2001      	movs	r0, #1
 800a4be:	e7a8      	b.n	800a412 <_vfiprintf_r+0xfe>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f04f 0c0a 	mov.w	ip, #10
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d2:	3a30      	subs	r2, #48	@ 0x30
 800a4d4:	2a09      	cmp	r2, #9
 800a4d6:	d903      	bls.n	800a4e0 <_vfiprintf_r+0x1cc>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0c6      	beq.n	800a46a <_vfiprintf_r+0x156>
 800a4dc:	9105      	str	r1, [sp, #20]
 800a4de:	e7c4      	b.n	800a46a <_vfiprintf_r+0x156>
 800a4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7f0      	b.n	800a4cc <_vfiprintf_r+0x1b8>
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4b12      	ldr	r3, [pc, #72]	@ (800a53c <_vfiprintf_r+0x228>)
 800a4f2:	a904      	add	r1, sp, #16
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f3af 8000 	nop.w
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	1c78      	adds	r0, r7, #1
 800a4fe:	d1d6      	bne.n	800a4ae <_vfiprintf_r+0x19a>
 800a500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a502:	07d9      	lsls	r1, r3, #31
 800a504:	d405      	bmi.n	800a512 <_vfiprintf_r+0x1fe>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	059a      	lsls	r2, r3, #22
 800a50a:	d402      	bmi.n	800a512 <_vfiprintf_r+0x1fe>
 800a50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a50e:	f7ff fdcf 	bl	800a0b0 <__retarget_lock_release_recursive>
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	065b      	lsls	r3, r3, #25
 800a516:	f53f af1f 	bmi.w	800a358 <_vfiprintf_r+0x44>
 800a51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a51c:	e71e      	b.n	800a35c <_vfiprintf_r+0x48>
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	462a      	mov	r2, r5
 800a524:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <_vfiprintf_r+0x228>)
 800a526:	a904      	add	r1, sp, #16
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 f879 	bl	800a620 <_printf_i>
 800a52e:	e7e4      	b.n	800a4fa <_vfiprintf_r+0x1e6>
 800a530:	0800ad34 	.word	0x0800ad34
 800a534:	0800ad3e 	.word	0x0800ad3e
 800a538:	00000000 	.word	0x00000000
 800a53c:	0800a2ef 	.word	0x0800a2ef
 800a540:	0800ad3a 	.word	0x0800ad3a

0800a544 <_printf_common>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	4616      	mov	r6, r2
 800a54a:	4698      	mov	r8, r3
 800a54c:	688a      	ldr	r2, [r1, #8]
 800a54e:	690b      	ldr	r3, [r1, #16]
 800a550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a554:	4293      	cmp	r3, r2
 800a556:	bfb8      	it	lt
 800a558:	4613      	movlt	r3, r2
 800a55a:	6033      	str	r3, [r6, #0]
 800a55c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a560:	4607      	mov	r7, r0
 800a562:	460c      	mov	r4, r1
 800a564:	b10a      	cbz	r2, 800a56a <_printf_common+0x26>
 800a566:	3301      	adds	r3, #1
 800a568:	6033      	str	r3, [r6, #0]
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	0699      	lsls	r1, r3, #26
 800a56e:	bf42      	ittt	mi
 800a570:	6833      	ldrmi	r3, [r6, #0]
 800a572:	3302      	addmi	r3, #2
 800a574:	6033      	strmi	r3, [r6, #0]
 800a576:	6825      	ldr	r5, [r4, #0]
 800a578:	f015 0506 	ands.w	r5, r5, #6
 800a57c:	d106      	bne.n	800a58c <_printf_common+0x48>
 800a57e:	f104 0a19 	add.w	sl, r4, #25
 800a582:	68e3      	ldr	r3, [r4, #12]
 800a584:	6832      	ldr	r2, [r6, #0]
 800a586:	1a9b      	subs	r3, r3, r2
 800a588:	42ab      	cmp	r3, r5
 800a58a:	dc26      	bgt.n	800a5da <_printf_common+0x96>
 800a58c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	3b00      	subs	r3, #0
 800a594:	bf18      	it	ne
 800a596:	2301      	movne	r3, #1
 800a598:	0692      	lsls	r2, r2, #26
 800a59a:	d42b      	bmi.n	800a5f4 <_printf_common+0xb0>
 800a59c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	47c8      	blx	r9
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d01e      	beq.n	800a5e8 <_printf_common+0xa4>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	6922      	ldr	r2, [r4, #16]
 800a5ae:	f003 0306 	and.w	r3, r3, #6
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	bf02      	ittt	eq
 800a5b6:	68e5      	ldreq	r5, [r4, #12]
 800a5b8:	6833      	ldreq	r3, [r6, #0]
 800a5ba:	1aed      	subeq	r5, r5, r3
 800a5bc:	68a3      	ldr	r3, [r4, #8]
 800a5be:	bf0c      	ite	eq
 800a5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5c4:	2500      	movne	r5, #0
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	bfc4      	itt	gt
 800a5ca:	1a9b      	subgt	r3, r3, r2
 800a5cc:	18ed      	addgt	r5, r5, r3
 800a5ce:	2600      	movs	r6, #0
 800a5d0:	341a      	adds	r4, #26
 800a5d2:	42b5      	cmp	r5, r6
 800a5d4:	d11a      	bne.n	800a60c <_printf_common+0xc8>
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	e008      	b.n	800a5ec <_printf_common+0xa8>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4652      	mov	r2, sl
 800a5de:	4641      	mov	r1, r8
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	47c8      	blx	r9
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d103      	bne.n	800a5f0 <_printf_common+0xac>
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f0:	3501      	adds	r5, #1
 800a5f2:	e7c6      	b.n	800a582 <_printf_common+0x3e>
 800a5f4:	18e1      	adds	r1, r4, r3
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	2030      	movs	r0, #48	@ 0x30
 800a5fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5fe:	4422      	add	r2, r4
 800a600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a608:	3302      	adds	r3, #2
 800a60a:	e7c7      	b.n	800a59c <_printf_common+0x58>
 800a60c:	2301      	movs	r3, #1
 800a60e:	4622      	mov	r2, r4
 800a610:	4641      	mov	r1, r8
 800a612:	4638      	mov	r0, r7
 800a614:	47c8      	blx	r9
 800a616:	3001      	adds	r0, #1
 800a618:	d0e6      	beq.n	800a5e8 <_printf_common+0xa4>
 800a61a:	3601      	adds	r6, #1
 800a61c:	e7d9      	b.n	800a5d2 <_printf_common+0x8e>
	...

0800a620 <_printf_i>:
 800a620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a624:	7e0f      	ldrb	r7, [r1, #24]
 800a626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a628:	2f78      	cmp	r7, #120	@ 0x78
 800a62a:	4691      	mov	r9, r2
 800a62c:	4680      	mov	r8, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	469a      	mov	sl, r3
 800a632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a636:	d807      	bhi.n	800a648 <_printf_i+0x28>
 800a638:	2f62      	cmp	r7, #98	@ 0x62
 800a63a:	d80a      	bhi.n	800a652 <_printf_i+0x32>
 800a63c:	2f00      	cmp	r7, #0
 800a63e:	f000 80d2 	beq.w	800a7e6 <_printf_i+0x1c6>
 800a642:	2f58      	cmp	r7, #88	@ 0x58
 800a644:	f000 80b9 	beq.w	800a7ba <_printf_i+0x19a>
 800a648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a64c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a650:	e03a      	b.n	800a6c8 <_printf_i+0xa8>
 800a652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a656:	2b15      	cmp	r3, #21
 800a658:	d8f6      	bhi.n	800a648 <_printf_i+0x28>
 800a65a:	a101      	add	r1, pc, #4	@ (adr r1, 800a660 <_printf_i+0x40>)
 800a65c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a660:	0800a6b9 	.word	0x0800a6b9
 800a664:	0800a6cd 	.word	0x0800a6cd
 800a668:	0800a649 	.word	0x0800a649
 800a66c:	0800a649 	.word	0x0800a649
 800a670:	0800a649 	.word	0x0800a649
 800a674:	0800a649 	.word	0x0800a649
 800a678:	0800a6cd 	.word	0x0800a6cd
 800a67c:	0800a649 	.word	0x0800a649
 800a680:	0800a649 	.word	0x0800a649
 800a684:	0800a649 	.word	0x0800a649
 800a688:	0800a649 	.word	0x0800a649
 800a68c:	0800a7cd 	.word	0x0800a7cd
 800a690:	0800a6f7 	.word	0x0800a6f7
 800a694:	0800a787 	.word	0x0800a787
 800a698:	0800a649 	.word	0x0800a649
 800a69c:	0800a649 	.word	0x0800a649
 800a6a0:	0800a7ef 	.word	0x0800a7ef
 800a6a4:	0800a649 	.word	0x0800a649
 800a6a8:	0800a6f7 	.word	0x0800a6f7
 800a6ac:	0800a649 	.word	0x0800a649
 800a6b0:	0800a649 	.word	0x0800a649
 800a6b4:	0800a78f 	.word	0x0800a78f
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	1d1a      	adds	r2, r3, #4
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6032      	str	r2, [r6, #0]
 800a6c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e09d      	b.n	800a808 <_printf_i+0x1e8>
 800a6cc:	6833      	ldr	r3, [r6, #0]
 800a6ce:	6820      	ldr	r0, [r4, #0]
 800a6d0:	1d19      	adds	r1, r3, #4
 800a6d2:	6031      	str	r1, [r6, #0]
 800a6d4:	0606      	lsls	r6, r0, #24
 800a6d6:	d501      	bpl.n	800a6dc <_printf_i+0xbc>
 800a6d8:	681d      	ldr	r5, [r3, #0]
 800a6da:	e003      	b.n	800a6e4 <_printf_i+0xc4>
 800a6dc:	0645      	lsls	r5, r0, #25
 800a6de:	d5fb      	bpl.n	800a6d8 <_printf_i+0xb8>
 800a6e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	da03      	bge.n	800a6f0 <_printf_i+0xd0>
 800a6e8:	232d      	movs	r3, #45	@ 0x2d
 800a6ea:	426d      	negs	r5, r5
 800a6ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6f0:	4859      	ldr	r0, [pc, #356]	@ (800a858 <_printf_i+0x238>)
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	e011      	b.n	800a71a <_printf_i+0xfa>
 800a6f6:	6821      	ldr	r1, [r4, #0]
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	0608      	lsls	r0, r1, #24
 800a6fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a700:	d402      	bmi.n	800a708 <_printf_i+0xe8>
 800a702:	0649      	lsls	r1, r1, #25
 800a704:	bf48      	it	mi
 800a706:	b2ad      	uxthmi	r5, r5
 800a708:	2f6f      	cmp	r7, #111	@ 0x6f
 800a70a:	4853      	ldr	r0, [pc, #332]	@ (800a858 <_printf_i+0x238>)
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	bf14      	ite	ne
 800a710:	230a      	movne	r3, #10
 800a712:	2308      	moveq	r3, #8
 800a714:	2100      	movs	r1, #0
 800a716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a71a:	6866      	ldr	r6, [r4, #4]
 800a71c:	60a6      	str	r6, [r4, #8]
 800a71e:	2e00      	cmp	r6, #0
 800a720:	bfa2      	ittt	ge
 800a722:	6821      	ldrge	r1, [r4, #0]
 800a724:	f021 0104 	bicge.w	r1, r1, #4
 800a728:	6021      	strge	r1, [r4, #0]
 800a72a:	b90d      	cbnz	r5, 800a730 <_printf_i+0x110>
 800a72c:	2e00      	cmp	r6, #0
 800a72e:	d04b      	beq.n	800a7c8 <_printf_i+0x1a8>
 800a730:	4616      	mov	r6, r2
 800a732:	fbb5 f1f3 	udiv	r1, r5, r3
 800a736:	fb03 5711 	mls	r7, r3, r1, r5
 800a73a:	5dc7      	ldrb	r7, [r0, r7]
 800a73c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a740:	462f      	mov	r7, r5
 800a742:	42bb      	cmp	r3, r7
 800a744:	460d      	mov	r5, r1
 800a746:	d9f4      	bls.n	800a732 <_printf_i+0x112>
 800a748:	2b08      	cmp	r3, #8
 800a74a:	d10b      	bne.n	800a764 <_printf_i+0x144>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	07df      	lsls	r7, r3, #31
 800a750:	d508      	bpl.n	800a764 <_printf_i+0x144>
 800a752:	6923      	ldr	r3, [r4, #16]
 800a754:	6861      	ldr	r1, [r4, #4]
 800a756:	4299      	cmp	r1, r3
 800a758:	bfde      	ittt	le
 800a75a:	2330      	movle	r3, #48	@ 0x30
 800a75c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a760:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a764:	1b92      	subs	r2, r2, r6
 800a766:	6122      	str	r2, [r4, #16]
 800a768:	f8cd a000 	str.w	sl, [sp]
 800a76c:	464b      	mov	r3, r9
 800a76e:	aa03      	add	r2, sp, #12
 800a770:	4621      	mov	r1, r4
 800a772:	4640      	mov	r0, r8
 800a774:	f7ff fee6 	bl	800a544 <_printf_common>
 800a778:	3001      	adds	r0, #1
 800a77a:	d14a      	bne.n	800a812 <_printf_i+0x1f2>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	b004      	add	sp, #16
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f043 0320 	orr.w	r3, r3, #32
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	4833      	ldr	r0, [pc, #204]	@ (800a85c <_printf_i+0x23c>)
 800a790:	2778      	movs	r7, #120	@ 0x78
 800a792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	6831      	ldr	r1, [r6, #0]
 800a79a:	061f      	lsls	r7, r3, #24
 800a79c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7a0:	d402      	bmi.n	800a7a8 <_printf_i+0x188>
 800a7a2:	065f      	lsls	r7, r3, #25
 800a7a4:	bf48      	it	mi
 800a7a6:	b2ad      	uxthmi	r5, r5
 800a7a8:	6031      	str	r1, [r6, #0]
 800a7aa:	07d9      	lsls	r1, r3, #31
 800a7ac:	bf44      	itt	mi
 800a7ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a7b2:	6023      	strmi	r3, [r4, #0]
 800a7b4:	b11d      	cbz	r5, 800a7be <_printf_i+0x19e>
 800a7b6:	2310      	movs	r3, #16
 800a7b8:	e7ac      	b.n	800a714 <_printf_i+0xf4>
 800a7ba:	4827      	ldr	r0, [pc, #156]	@ (800a858 <_printf_i+0x238>)
 800a7bc:	e7e9      	b.n	800a792 <_printf_i+0x172>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	f023 0320 	bic.w	r3, r3, #32
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	e7f6      	b.n	800a7b6 <_printf_i+0x196>
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	e7bd      	b.n	800a748 <_printf_i+0x128>
 800a7cc:	6833      	ldr	r3, [r6, #0]
 800a7ce:	6825      	ldr	r5, [r4, #0]
 800a7d0:	6961      	ldr	r1, [r4, #20]
 800a7d2:	1d18      	adds	r0, r3, #4
 800a7d4:	6030      	str	r0, [r6, #0]
 800a7d6:	062e      	lsls	r6, r5, #24
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	d501      	bpl.n	800a7e0 <_printf_i+0x1c0>
 800a7dc:	6019      	str	r1, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <_printf_i+0x1c6>
 800a7e0:	0668      	lsls	r0, r5, #25
 800a7e2:	d5fb      	bpl.n	800a7dc <_printf_i+0x1bc>
 800a7e4:	8019      	strh	r1, [r3, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	4616      	mov	r6, r2
 800a7ec:	e7bc      	b.n	800a768 <_printf_i+0x148>
 800a7ee:	6833      	ldr	r3, [r6, #0]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	6032      	str	r2, [r6, #0]
 800a7f4:	681e      	ldr	r6, [r3, #0]
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7f5 fd78 	bl	80002f0 <memchr>
 800a800:	b108      	cbz	r0, 800a806 <_printf_i+0x1e6>
 800a802:	1b80      	subs	r0, r0, r6
 800a804:	6060      	str	r0, [r4, #4]
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	2300      	movs	r3, #0
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a810:	e7aa      	b.n	800a768 <_printf_i+0x148>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	4632      	mov	r2, r6
 800a816:	4649      	mov	r1, r9
 800a818:	4640      	mov	r0, r8
 800a81a:	47d0      	blx	sl
 800a81c:	3001      	adds	r0, #1
 800a81e:	d0ad      	beq.n	800a77c <_printf_i+0x15c>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	d413      	bmi.n	800a84e <_printf_i+0x22e>
 800a826:	68e0      	ldr	r0, [r4, #12]
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	4298      	cmp	r0, r3
 800a82c:	bfb8      	it	lt
 800a82e:	4618      	movlt	r0, r3
 800a830:	e7a6      	b.n	800a780 <_printf_i+0x160>
 800a832:	2301      	movs	r3, #1
 800a834:	4632      	mov	r2, r6
 800a836:	4649      	mov	r1, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	47d0      	blx	sl
 800a83c:	3001      	adds	r0, #1
 800a83e:	d09d      	beq.n	800a77c <_printf_i+0x15c>
 800a840:	3501      	adds	r5, #1
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	9903      	ldr	r1, [sp, #12]
 800a846:	1a5b      	subs	r3, r3, r1
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dcf2      	bgt.n	800a832 <_printf_i+0x212>
 800a84c:	e7eb      	b.n	800a826 <_printf_i+0x206>
 800a84e:	2500      	movs	r5, #0
 800a850:	f104 0619 	add.w	r6, r4, #25
 800a854:	e7f5      	b.n	800a842 <_printf_i+0x222>
 800a856:	bf00      	nop
 800a858:	0800ad45 	.word	0x0800ad45
 800a85c:	0800ad56 	.word	0x0800ad56

0800a860 <__sflush_r>:
 800a860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	0716      	lsls	r6, r2, #28
 800a86a:	4605      	mov	r5, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	d454      	bmi.n	800a91a <__sflush_r+0xba>
 800a870:	684b      	ldr	r3, [r1, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	dc02      	bgt.n	800a87c <__sflush_r+0x1c>
 800a876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dd48      	ble.n	800a90e <__sflush_r+0xae>
 800a87c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a87e:	2e00      	cmp	r6, #0
 800a880:	d045      	beq.n	800a90e <__sflush_r+0xae>
 800a882:	2300      	movs	r3, #0
 800a884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a888:	682f      	ldr	r7, [r5, #0]
 800a88a:	6a21      	ldr	r1, [r4, #32]
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	d030      	beq.n	800a8f2 <__sflush_r+0x92>
 800a890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	0759      	lsls	r1, r3, #29
 800a896:	d505      	bpl.n	800a8a4 <__sflush_r+0x44>
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a89e:	b10b      	cbz	r3, 800a8a4 <__sflush_r+0x44>
 800a8a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8a2:	1ad2      	subs	r2, r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a8:	6a21      	ldr	r1, [r4, #32]
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b0      	blx	r6
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	d106      	bne.n	800a8c2 <__sflush_r+0x62>
 800a8b4:	6829      	ldr	r1, [r5, #0]
 800a8b6:	291d      	cmp	r1, #29
 800a8b8:	d82b      	bhi.n	800a912 <__sflush_r+0xb2>
 800a8ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a964 <__sflush_r+0x104>)
 800a8bc:	410a      	asrs	r2, r1
 800a8be:	07d6      	lsls	r6, r2, #31
 800a8c0:	d427      	bmi.n	800a912 <__sflush_r+0xb2>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	6062      	str	r2, [r4, #4]
 800a8c6:	04d9      	lsls	r1, r3, #19
 800a8c8:	6922      	ldr	r2, [r4, #16]
 800a8ca:	6022      	str	r2, [r4, #0]
 800a8cc:	d504      	bpl.n	800a8d8 <__sflush_r+0x78>
 800a8ce:	1c42      	adds	r2, r0, #1
 800a8d0:	d101      	bne.n	800a8d6 <__sflush_r+0x76>
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	b903      	cbnz	r3, 800a8d8 <__sflush_r+0x78>
 800a8d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8da:	602f      	str	r7, [r5, #0]
 800a8dc:	b1b9      	cbz	r1, 800a90e <__sflush_r+0xae>
 800a8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8e2:	4299      	cmp	r1, r3
 800a8e4:	d002      	beq.n	800a8ec <__sflush_r+0x8c>
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7ff fbf2 	bl	800a0d0 <_free_r>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8f0:	e00d      	b.n	800a90e <__sflush_r+0xae>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	1c50      	adds	r0, r2, #1
 800a8fc:	d1c9      	bne.n	800a892 <__sflush_r+0x32>
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0c6      	beq.n	800a892 <__sflush_r+0x32>
 800a904:	2b1d      	cmp	r3, #29
 800a906:	d001      	beq.n	800a90c <__sflush_r+0xac>
 800a908:	2b16      	cmp	r3, #22
 800a90a:	d11e      	bne.n	800a94a <__sflush_r+0xea>
 800a90c:	602f      	str	r7, [r5, #0]
 800a90e:	2000      	movs	r0, #0
 800a910:	e022      	b.n	800a958 <__sflush_r+0xf8>
 800a912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a916:	b21b      	sxth	r3, r3
 800a918:	e01b      	b.n	800a952 <__sflush_r+0xf2>
 800a91a:	690f      	ldr	r7, [r1, #16]
 800a91c:	2f00      	cmp	r7, #0
 800a91e:	d0f6      	beq.n	800a90e <__sflush_r+0xae>
 800a920:	0793      	lsls	r3, r2, #30
 800a922:	680e      	ldr	r6, [r1, #0]
 800a924:	bf08      	it	eq
 800a926:	694b      	ldreq	r3, [r1, #20]
 800a928:	600f      	str	r7, [r1, #0]
 800a92a:	bf18      	it	ne
 800a92c:	2300      	movne	r3, #0
 800a92e:	eba6 0807 	sub.w	r8, r6, r7
 800a932:	608b      	str	r3, [r1, #8]
 800a934:	f1b8 0f00 	cmp.w	r8, #0
 800a938:	dde9      	ble.n	800a90e <__sflush_r+0xae>
 800a93a:	6a21      	ldr	r1, [r4, #32]
 800a93c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a93e:	4643      	mov	r3, r8
 800a940:	463a      	mov	r2, r7
 800a942:	4628      	mov	r0, r5
 800a944:	47b0      	blx	r6
 800a946:	2800      	cmp	r0, #0
 800a948:	dc08      	bgt.n	800a95c <__sflush_r+0xfc>
 800a94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95c:	4407      	add	r7, r0
 800a95e:	eba8 0800 	sub.w	r8, r8, r0
 800a962:	e7e7      	b.n	800a934 <__sflush_r+0xd4>
 800a964:	dfbffffe 	.word	0xdfbffffe

0800a968 <_fflush_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	690b      	ldr	r3, [r1, #16]
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b913      	cbnz	r3, 800a978 <_fflush_r+0x10>
 800a972:	2500      	movs	r5, #0
 800a974:	4628      	mov	r0, r5
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	b118      	cbz	r0, 800a982 <_fflush_r+0x1a>
 800a97a:	6a03      	ldr	r3, [r0, #32]
 800a97c:	b90b      	cbnz	r3, 800a982 <_fflush_r+0x1a>
 800a97e:	f7ff f99f 	bl	8009cc0 <__sinit>
 800a982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0f3      	beq.n	800a972 <_fflush_r+0xa>
 800a98a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a98c:	07d0      	lsls	r0, r2, #31
 800a98e:	d404      	bmi.n	800a99a <_fflush_r+0x32>
 800a990:	0599      	lsls	r1, r3, #22
 800a992:	d402      	bmi.n	800a99a <_fflush_r+0x32>
 800a994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a996:	f7ff fb8a 	bl	800a0ae <__retarget_lock_acquire_recursive>
 800a99a:	4628      	mov	r0, r5
 800a99c:	4621      	mov	r1, r4
 800a99e:	f7ff ff5f 	bl	800a860 <__sflush_r>
 800a9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9a4:	07da      	lsls	r2, r3, #31
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	d4e4      	bmi.n	800a974 <_fflush_r+0xc>
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	059b      	lsls	r3, r3, #22
 800a9ae:	d4e1      	bmi.n	800a974 <_fflush_r+0xc>
 800a9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9b2:	f7ff fb7d 	bl	800a0b0 <__retarget_lock_release_recursive>
 800a9b6:	e7dd      	b.n	800a974 <_fflush_r+0xc>

0800a9b8 <__swhatbuf_r>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	b096      	sub	sp, #88	@ 0x58
 800a9c4:	4615      	mov	r5, r2
 800a9c6:	461e      	mov	r6, r3
 800a9c8:	da0d      	bge.n	800a9e6 <__swhatbuf_r+0x2e>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9d0:	f04f 0100 	mov.w	r1, #0
 800a9d4:	bf14      	ite	ne
 800a9d6:	2340      	movne	r3, #64	@ 0x40
 800a9d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9dc:	2000      	movs	r0, #0
 800a9de:	6031      	str	r1, [r6, #0]
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	b016      	add	sp, #88	@ 0x58
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
 800a9e6:	466a      	mov	r2, sp
 800a9e8:	f000 f848 	bl	800aa7c <_fstat_r>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	dbec      	blt.n	800a9ca <__swhatbuf_r+0x12>
 800a9f0:	9901      	ldr	r1, [sp, #4]
 800a9f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9fa:	4259      	negs	r1, r3
 800a9fc:	4159      	adcs	r1, r3
 800a9fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa02:	e7eb      	b.n	800a9dc <__swhatbuf_r+0x24>

0800aa04 <__smakebuf_r>:
 800aa04:	898b      	ldrh	r3, [r1, #12]
 800aa06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa08:	079d      	lsls	r5, r3, #30
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	d507      	bpl.n	800aa20 <__smakebuf_r+0x1c>
 800aa10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	2301      	movs	r3, #1
 800aa1a:	6163      	str	r3, [r4, #20]
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa20:	ab01      	add	r3, sp, #4
 800aa22:	466a      	mov	r2, sp
 800aa24:	f7ff ffc8 	bl	800a9b8 <__swhatbuf_r>
 800aa28:	9f00      	ldr	r7, [sp, #0]
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7ff fbba 	bl	800a1a8 <_malloc_r>
 800aa34:	b948      	cbnz	r0, 800aa4a <__smakebuf_r+0x46>
 800aa36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa3a:	059a      	lsls	r2, r3, #22
 800aa3c:	d4ee      	bmi.n	800aa1c <__smakebuf_r+0x18>
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	f043 0302 	orr.w	r3, r3, #2
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	e7e2      	b.n	800aa10 <__smakebuf_r+0xc>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	6020      	str	r0, [r4, #0]
 800aa4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa5a:	b15b      	cbz	r3, 800aa74 <__smakebuf_r+0x70>
 800aa5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa60:	4630      	mov	r0, r6
 800aa62:	f000 f81d 	bl	800aaa0 <_isatty_r>
 800aa66:	b128      	cbz	r0, 800aa74 <__smakebuf_r+0x70>
 800aa68:	89a3      	ldrh	r3, [r4, #12]
 800aa6a:	f023 0303 	bic.w	r3, r3, #3
 800aa6e:	f043 0301 	orr.w	r3, r3, #1
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	431d      	orrs	r5, r3
 800aa78:	81a5      	strh	r5, [r4, #12]
 800aa7a:	e7cf      	b.n	800aa1c <__smakebuf_r+0x18>

0800aa7c <_fstat_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d07      	ldr	r5, [pc, #28]	@ (800aa9c <_fstat_r+0x20>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	602b      	str	r3, [r5, #0]
 800aa8a:	f7f8 f9ea 	bl	8002e62 <_fstat>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d102      	bne.n	800aa98 <_fstat_r+0x1c>
 800aa92:	682b      	ldr	r3, [r5, #0]
 800aa94:	b103      	cbz	r3, 800aa98 <_fstat_r+0x1c>
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	bd38      	pop	{r3, r4, r5, pc}
 800aa9a:	bf00      	nop
 800aa9c:	2400067c 	.word	0x2400067c

0800aaa0 <_isatty_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d06      	ldr	r5, [pc, #24]	@ (800aabc <_isatty_r+0x1c>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	602b      	str	r3, [r5, #0]
 800aaac:	f7f8 f9e9 	bl	8002e82 <_isatty>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_isatty_r+0x1a>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_isatty_r+0x1a>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	2400067c 	.word	0x2400067c

0800aac0 <_sbrk_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	@ (800aadc <_sbrk_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f8 f9f2 	bl	8002eb4 <_sbrk>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_sbrk_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_sbrk_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	2400067c 	.word	0x2400067c

0800aae0 <_init>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr

0800aaec <_fini>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	bf00      	nop
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr
