
protobuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a744  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800a9f4  0800a9f4  0000b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac54  0800ac54  0000bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac5c  0800ac5c  0000bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ac60  0800ac60  0000bc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800ac64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000618  2400006c  0800acd0  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000684  0800acd0  0000c684  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013375  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a98  00000000  00000000  0001f40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc0  00000000  00000000  00021ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab3  00000000  00000000  00022c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031518  00000000  00000000  0002371b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014a41  00000000  00000000  00054c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c186  00000000  00000000  00069674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a57fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f68  00000000  00000000  001a5840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001a97a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400006c 	.word	0x2400006c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a9dc 	.word	0x0800a9dc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000070 	.word	0x24000070
 80002ec:	0800a9dc 	.word	0x0800a9dc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <getdata_frombuffer>:
volatile uint32_t writePtr = 0;
volatile uint32_t readPtr = 0;


void getdata_frombuffer(uint8_t ret_data[],uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
		if(readPtr < writePtr)
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <getdata_frombuffer+0xb0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <getdata_frombuffer+0xb4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d20f      	bcs.n	80006b8 <getdata_frombuffer+0x38>
		  {
            memcpy(ret_data,&buffer[readPtr],len);
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <getdata_frombuffer+0xb0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <getdata_frombuffer+0xb8>)
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f009 fbee 	bl	8009e86 <memcpy>
			readPtr = readPtr+len;
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006b4:	6013      	str	r3, [r2, #0]
	            memcpy(ret_data, &buffer[readPtr], firstPart);
	            memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
	            readPtr = len - firstPart;
	        }
		  }
}
 80006b6:	e036      	b.n	8000726 <getdata_frombuffer+0xa6>
		else if (readPtr > writePtr)
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <getdata_frombuffer+0xb4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d930      	bls.n	8000726 <getdata_frombuffer+0xa6>
			uint32_t firstPart = BUFFER_LEN - readPtr;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80006cc:	60fb      	str	r3, [r7, #12]
	        if (len <= firstPart) // Ha elfér az egész adat a puffer végén
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d30f      	bcc.n	80006f6 <getdata_frombuffer+0x76>
	            memcpy(ret_data, &buffer[readPtr], len);
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006dc:	4413      	add	r3, r2
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f009 fbcf 	bl	8009e86 <memcpy>
	            readPtr += len;
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	e017      	b.n	8000726 <getdata_frombuffer+0xa6>
	            memcpy(ret_data, &buffer[readPtr], firstPart);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <getdata_frombuffer+0xb0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <getdata_frombuffer+0xb8>)
 80006fc:	4413      	add	r3, r2
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f009 fbbf 	bl	8009e86 <memcpy>
	            memcpy(&ret_data[firstPart], &buffer[0], len - firstPart);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d0      	adds	r0, r2, r3
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <getdata_frombuffer+0xb8>)
 8000718:	f009 fbb5 	bl	8009e86 <memcpy>
	            readPtr = len - firstPart;
 800071c:	78fa      	ldrb	r2, [r7, #3]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <getdata_frombuffer+0xb0>)
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2400008c 	.word	0x2400008c
 8000734:	24000088 	.word	0x24000088
 8000738:	24000090 	.word	0x24000090

0800073c <writedata_tobuffer>:
	  

bool writedata_tobuffer(uint8_t data[],uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
     // iras   *data
	if( (writePtr+len) < (BUFFER_LEN))
 8000748:	78fa      	ldrb	r2, [r7, #3]
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <writedata_tobuffer+0x94>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000754:	d210      	bcs.n	8000778 <writedata_tobuffer+0x3c>
	{
		memcpy(&buffer[writePtr],data,len);
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <writedata_tobuffer+0x94>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1e      	ldr	r2, [pc, #120]	@ (80007d4 <writedata_tobuffer+0x98>)
 800075c:	4413      	add	r3, r2
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f009 fb8f 	bl	8009e86 <memcpy>
		writePtr+= len;
 8000768:	78fa      	ldrb	r2, [r7, #3]
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <writedata_tobuffer+0x94>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <writedata_tobuffer+0x94>)
 8000772:	6013      	str	r3, [r2, #0]
		return 1;
 8000774:	2301      	movs	r3, #1
 8000776:	e026      	b.n	80007c6 <writedata_tobuffer+0x8a>

	}
	else
	{
		/* buffer első fele */
		uint32_t firstPart = BUFFER_LEN-writePtr;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <writedata_tobuffer+0x94>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000780:	60fb      	str	r3, [r7, #12]
		if(readPtr>len-firstPart)
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <writedata_tobuffer+0x9c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d219      	bcs.n	80007c4 <writedata_tobuffer+0x88>
		{
		memcpy(&buffer[writePtr],data,firstPart);
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <writedata_tobuffer+0x94>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <writedata_tobuffer+0x98>)
 8000796:	4413      	add	r3, r2
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f009 fb72 	bl	8009e86 <memcpy>
		/* Atcsordulas utani resz */
		memcpy(&buffer[0],&data[firstPart],len-firstPart);
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	18d1      	adds	r1, r2, r3
 80007a8:	78fa      	ldrb	r2, [r7, #3]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <writedata_tobuffer+0x98>)
 80007b2:	f009 fb68 	bl	8009e86 <memcpy>
		writePtr = len-firstPart;
 80007b6:	78fa      	ldrb	r2, [r7, #3]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	4a04      	ldr	r2, [pc, #16]	@ (80007d0 <writedata_tobuffer+0x94>)
 80007be:	6013      	str	r3, [r2, #0]
		return 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <writedata_tobuffer+0x8a>
		}
		else
			return 0;  //ekkor nem noveli datacountert
 80007c4:	2300      	movs	r3, #0
    }
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000088 	.word	0x24000088
 80007d4:	24000090 	.word	0x24000090
 80007d8:	2400008c 	.word	0x2400008c

080007dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80007e4:	1d39      	adds	r1, r7, #4
 80007e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ea:	2201      	movs	r2, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <__io_putchar+0x20>)
 80007ee:	f006 fcb9 	bl	8007164 <HAL_UART_Transmit>
	return ch;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400049c 	.word	0x2400049c

08000800 <decode_and_execute>:

LedStatus decode_and_execute()   //bool *stat,uint8_t *buffer,uint8_t length
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
	getdata_frombuffer(data, message_length);
 8000806:	2102      	movs	r1, #2
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <decode_and_execute+0x74>)
 800080a:	f7ff ff39 	bl	8000680 <getdata_frombuffer>
	 /* Allocate space for the decoded message. */
	 LedStatus message = LedStatus_init_default;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

	 /* Create a stream that reads from the buffer. */
	 pb_istream_t stream = pb_istream_from_buffer(data, message_length);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2202      	movs	r2, #2
 8000816:	4917      	ldr	r1, [pc, #92]	@ (8000874 <decode_and_execute+0x74>)
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fdbd 	bl	8001398 <pb_istream_from_buffer>

	 stat = pb_decode(&stream, LedStatus_fields, &message);
 800081e:	f107 0214 	add.w	r2, r7, #20
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4914      	ldr	r1, [pc, #80]	@ (8000878 <decode_and_execute+0x78>)
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fef0 	bl	800260c <pb_decode>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <decode_and_execute+0x7c>)
 8000832:	701a      	strb	r2, [r3, #0]

	 if(stat==1)
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <decode_and_execute+0x7c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d010      	beq.n	800085e <decode_and_execute+0x5e>
	 {
		 //printf("stat=1\r\n");
			  if(message.status==1)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d105      	bne.n	800084e <decode_and_execute+0x4e>
			  {
			   // printf("led=1\r\n");
			    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2101      	movs	r1, #1
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <decode_and_execute+0x80>)
 8000848:	f003 fe2a 	bl	80044a0 <HAL_GPIO_WritePin>
 800084c:	e007      	b.n	800085e <decode_and_execute+0x5e>
			  }
			  else if(message.status==0)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <decode_and_execute+0x5e>
			  {
				//printf("led=0\r\n");
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <decode_and_execute+0x80>)
 800085a:	f003 fe21 	bl	80044a0 <HAL_GPIO_WritePin>
	 }
	 else
	 {
		 //printf("stat=0\r\n");
	 }
	 datacounter--;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <decode_and_execute+0x84>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <decode_and_execute+0x84>)
 8000868:	701a      	strb	r2, [r3, #0]
	// printf("datacounter\r\n");
	 return message;
 800086a:	697b      	ldr	r3, [r7, #20]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	24000478 	.word	0x24000478
 8000878:	0800abd0 	.word	0x0800abd0
 800087c:	24000499 	.word	0x24000499
 8000880:	58020400 	.word	0x58020400
 8000884:	2400049a 	.word	0x2400049a

08000888 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback  ( UART_HandleTypeDef *  huart )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
		if(uartcounter==message_length-1)
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d121      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x54>
		{
			data[uartcounter]=ch;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <HAL_UART_RxCpltCallback+0x84>)
 80008a0:	7819      	ldrb	r1, [r3, #0]
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <HAL_UART_RxCpltCallback+0x88>)
 80008a4:	5499      	strb	r1, [r3, r2]
			uartcounter=0;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
			while( !( writedata_tobuffer(data, message_length) ) ); //lehet ga ha 1 hosszu jon es az veletel az azonosito , addig mig a read ad neki helyetTODO
 80008ac:	bf00      	nop
 80008ae:	2102      	movs	r1, #2
 80008b0:	4817      	ldr	r0, [pc, #92]	@ (8000910 <HAL_UART_RxCpltCallback+0x88>)
 80008b2:	f7ff ff43 	bl	800073c <writedata_tobuffer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f083 0301 	eor.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f5      	bne.n	80008ae <HAL_UART_RxCpltCallback+0x26>
			datacounter++;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_UART_RxCpltCallback+0x8c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_UART_RxCpltCallback+0x8c>)
 80008cc:	701a      	strb	r2, [r3, #0]
			printf("datacounter: %d\r\n", datacounter);
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <HAL_UART_RxCpltCallback+0x8c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <HAL_UART_RxCpltCallback+0x90>)
 80008d6:	f009 fa05 	bl	8009ce4 <iprintf>
 80008da:	e00c      	b.n	80008f6 <HAL_UART_RxCpltCallback+0x6e>
			//ha hosszabbb jon abbol is csak az elso 2-t masolja
		}
		else
		{
			data[uartcounter]=ch;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_UART_RxCpltCallback+0x84>)
 80008e4:	7819      	ldrb	r1, [r3, #0]
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <HAL_UART_RxCpltCallback+0x88>)
 80008e8:	5499      	strb	r1, [r3, r2]
			uartcounter++;
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_UART_RxCpltCallback+0x80>)
 80008f4:	701a      	strb	r2, [r3, #0]
			//HAL_Delay(500);
		}
		HAL_UART_Receive_IT(&huart3, &ch, 1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	4904      	ldr	r1, [pc, #16]	@ (800090c <HAL_UART_RxCpltCallback+0x84>)
 80008fa:	4808      	ldr	r0, [pc, #32]	@ (800091c <HAL_UART_RxCpltCallback+0x94>)
 80008fc:	f006 fcc0 	bl	8007280 <HAL_UART_Receive_IT>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2400049b 	.word	0x2400049b
 800090c:	24000498 	.word	0x24000498
 8000910:	24000478 	.word	0x24000478
 8000914:	2400049a 	.word	0x2400049a
 8000918:	0800a9f4 	.word	0x0800a9f4
 800091c:	2400049c 	.word	0x2400049c

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000924:	f000 f986 	bl	8000c34 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f002 fc68 	bl	80031fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f82a 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 f8e8 	bl	8000b04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000934:	f000 f89a 	bl	8000a6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <main+0x54>)
 800093e:	f003 fdaf 	bl	80044a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000942:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000946:	f002 fceb 	bl	8003320 <HAL_Delay>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2101      	movs	r1, #1
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <main+0x54>)
 8000950:	f003 fda6 	bl	80044a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000958:	f002 fce2 	bl	8003320 <HAL_Delay>

  /* USER CODE END 2 */
  //HAL_UART_Receive(&huart3, buffer, message_length, HAL_MAX_DELAY);
  HAL_UART_Receive_IT(&huart3, &ch, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	4906      	ldr	r1, [pc, #24]	@ (8000978 <main+0x58>)
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <main+0x5c>)
 8000962:	f006 fc8d 	bl	8007280 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(datacounter > 0)
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <main+0x60>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0fb      	beq.n	8000966 <main+0x46>
			  decode_and_execute();
 800096e:	f7ff ff47 	bl	8000800 <decode_and_execute>
	  if(datacounter > 0)
 8000972:	e7f8      	b.n	8000966 <main+0x46>
 8000974:	58020400 	.word	0x58020400
 8000978:	24000498 	.word	0x24000498
 800097c:	2400049c 	.word	0x2400049c
 8000980:	2400049a 	.word	0x2400049a

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f009 f9fb 	bl	8009d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2220      	movs	r2, #32
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f009 f9f5 	bl	8009d8e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <SystemClock_Config+0xe0>)
 80009a6:	f04f 32ff 	mov.w	r2, #4294967295
 80009aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ae:	2004      	movs	r0, #4
 80009b0:	f003 fd90 	bl	80044d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <SystemClock_Config+0xe4>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000a68 <SystemClock_Config+0xe4>)
 80009be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SystemClock_Config+0xe4>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d0:	bf00      	nop
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0xe4>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009de:	d1f8      	bne.n	80009d2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009f8:	2308      	movs	r3, #8
 80009fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fdb5 	bl	8004588 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a24:	f000 f932 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	233f      	movs	r3, #63	@ 0x3f
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 f9cd 	bl	8004dec <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a58:	f000 f918 	bl	8000c8c <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3770      	adds	r7, #112	@ 0x70
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024400 	.word	0x58024400
 8000a68:	58024800 	.word	0x58024800

08000a6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <MX_USART3_UART_Init+0x94>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab4:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000ab6:	f006 fb05 	bl	80070c4 <HAL_UART_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ac0:	f000 f8e4 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000ac8:	f008 ff7f 	bl	80099ca <HAL_UARTEx_SetTxFifoThreshold>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 f8db 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000ada:	f008 ffb4 	bl	8009a46 <HAL_UARTEx_SetRxFifoThreshold>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae4:	f000 f8d2 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_USART3_UART_Init+0x90>)
 8000aea:	f008 ff35 	bl	8009958 <HAL_UARTEx_DisableFifoMode>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 f8ca 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400049c 	.word	0x2400049c
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b42      	ldr	r3, [pc, #264]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b20:	4a40      	ldr	r2, [pc, #256]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b38:	4b3a      	ldr	r3, [pc, #232]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b3e:	4a39      	ldr	r2, [pc, #228]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b48:	4b36      	ldr	r3, [pc, #216]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b33      	ldr	r3, [pc, #204]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b5c:	4a31      	ldr	r2, [pc, #196]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b66:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b84:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <MX_GPIO_Init+0x120>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bb6:	481c      	ldr	r0, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bb8:	f003 fc72 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	481a      	ldr	r0, [pc, #104]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000bc2:	f003 fc6d 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4815      	ldr	r0, [pc, #84]	@ (8000c30 <MX_GPIO_Init+0x12c>)
 8000bdc:	f003 fab0 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000be0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <MX_GPIO_Init+0x124>)
 8000bfa:	f003 faa1 	bl	8004140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_GPIO_Init+0x128>)
 8000c16:	f003 fa93 	bl	8004140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	@ 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58021000 	.word	0x58021000
 8000c30:	58020800 	.word	0x58020800

08000c34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c46:	f002 fc9f 	bl	8003588 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c56:	231f      	movs	r3, #31
 8000c58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c5a:	2387      	movs	r3, #135	@ 0x87
 8000c5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c62:	2300      	movs	r3, #0
 8000c64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fcbd 	bl	80035f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f002 fc9a 	bl	80035b8 <HAL_MPU_Enable>

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b08f      	sub	sp, #60	@ 0x3c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	891a      	ldrh	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	8a1b      	ldrh	r3, [r3, #16]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d301      	bcc.n	8000cb2 <load_descriptor_values+0x1a>
        return false;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e156      	b.n	8000f60 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	895b      	ldrh	r3, [r3, #10]
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8000cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8000cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d05a      	beq.n	8000d8e <load_descriptor_values+0xf6>
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	f200 8094 	bhi.w	8000e06 <load_descriptor_values+0x16e>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <load_descriptor_values+0x50>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d01f      	beq.n	8000d26 <load_descriptor_values+0x8e>
 8000ce6:	e08e      	b.n	8000e06 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8000cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8000cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d00:	0e1b      	lsrs	r3, r3, #24
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8000d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8000d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d16:	0f1b      	lsrs	r3, r3, #28
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	825a      	strh	r2, [r3, #18]
            break;
 8000d24:	e0b4      	b.n	8000e90 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	895b      	ldrh	r3, [r3, #10]
 8000d30:	3301      	adds	r3, #1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8000d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8000d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	0f1b      	lsrs	r3, r3, #28
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8000d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d6a:	0f1b      	lsrs	r3, r3, #28
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	825a      	strh	r2, [r3, #18]
            break;
 8000d8c:	e080      	b.n	8000e90 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	895b      	ldrh	r3, [r3, #10]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	3302      	adds	r3, #2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	895b      	ldrh	r3, [r3, #10]
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	825a      	strh	r2, [r3, #18]
            break;
 8000e04:	e044      	b.n	8000e90 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	3301      	adds	r3, #1
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	895b      	ldrh	r3, [r3, #10]
 8000e24:	3302      	adds	r3, #2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	895b      	ldrh	r3, [r3, #10]
 8000e38:	3303      	adds	r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	895b      	ldrh	r3, [r3, #10]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	825a      	strh	r2, [r3, #18]
            break;
 8000e8e:	bf00      	nop
        }
    }

    if (!iter->message)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d106      	bne.n	8000ea6 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
 8000ea4:	e041      	b.n	8000f2a <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eac:	441a      	add	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8000eb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d008      	beq.n	8000ecc <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	441a      	add	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	e01a      	b.n	8000f02 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7d9b      	ldrb	r3, [r3, #22]
 8000ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d111      	bne.n	8000efc <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7d9b      	ldrb	r3, [r3, #22]
 8000edc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7d9b      	ldrb	r3, [r3, #22]
 8000ee8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8000eec:	2b80      	cmp	r3, #128	@ 0x80
 8000eee:	d105      	bne.n	8000efc <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f103 0214 	add.w	r2, r3, #20
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	621a      	str	r2, [r3, #32]
 8000efa:	e002      	b.n	8000f02 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7d9b      	ldrb	r3, [r3, #22]
 8000f06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f0a:	2b80      	cmp	r3, #128	@ 0x80
 8000f0c:	d109      	bne.n	8000f22 <load_descriptor_values+0x28a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	61da      	str	r2, [r3, #28]
 8000f20:	e003      	b.n	8000f2a <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699a      	ldr	r2, [r3, #24]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7d9b      	ldrb	r3, [r3, #22]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d005      	beq.n	8000f42 <load_descriptor_values+0x2aa>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7d9b      	ldrb	r3, [r3, #22]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d10a      	bne.n	8000f58 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	89db      	ldrh	r3, [r3, #14]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f56:	e002      	b.n	8000f5e <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	373c      	adds	r7, #60	@ 0x3c
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    iter->index++;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	891a      	ldrh	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	8a1b      	ldrh	r3, [r3, #16]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d30c      	bcc.n	8000fa8 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8000fa6:	e03b      	b.n	8001020 <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	895b      	ldrh	r3, [r3, #10]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	895a      	ldrh	r2, [r3, #10]
 8000fd2:	893b      	ldrh	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	7afa      	ldrb	r2, [r7, #11]
 8000fe2:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	bf0c      	ite	eq
 8000fea:	2201      	moveq	r2, #1
 8000fec:	2200      	movne	r2, #0
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	89da      	ldrh	r2, [r3, #14]
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	2b08      	cmp	r3, #8
 8001004:	d004      	beq.n	8001010 <advance_iterator+0xa4>
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	2b09      	cmp	r3, #9
 800100e:	d101      	bne.n	8001014 <advance_iterator+0xa8>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <advance_iterator+0xaa>
 8001014:	2300      	movs	r3, #0
 8001016:	b29b      	uxth	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	81da      	strh	r2, [r3, #14]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8001038:	2228      	movs	r2, #40	@ 0x28
 800103a:	2100      	movs	r1, #0
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f008 fea6 	bl	8009d8e <memset>

    iter->descriptor = desc;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fe22 	bl	8000c98 <load_descriptor_values>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001080:	2b80      	cmp	r3, #128	@ 0x80
 8001082:	d109      	bne.n	8001098 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3304      	adds	r3, #4
 8001088:	461a      	mov	r2, r3
 800108a:	6939      	ldr	r1, [r7, #16]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffcd 	bl	800102c <pb_field_iter_begin>
 8001092:	4603      	mov	r3, r0
 8001094:	75fb      	strb	r3, [r7, #23]
 8001096:	e008      	b.n	80010aa <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	6939      	ldr	r1, [r7, #16]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffc3 	bl	800102c <pb_field_iter_begin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f103 020c 	add.w	r2, r3, #12
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	621a      	str	r2, [r3, #32]
    return status;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff50 	bl	8000f6c <advance_iterator>
    (void)load_descriptor_values(iter);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fde3 	bl	8000c98 <load_descriptor_values>
    return iter->index != 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	891b      	ldrh	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8a1b      	ldrh	r3, [r3, #16]
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80010fe:	2301      	movs	r3, #1
 8001100:	e044      	b.n	800118c <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	8a9b      	ldrh	r3, [r3, #20]
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <pb_field_iter_find+0x2c>
    {
        return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e03b      	b.n	800118c <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	8a1b      	ldrh	r3, [r3, #16]
 800111e:	461a      	mov	r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4293      	cmp	r3, r2
 8001124:	d204      	bcs.n	8001130 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	8a1a      	ldrh	r2, [r3, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff1b 	bl	8000f6c <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	895b      	ldrh	r3, [r3, #10]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	089a      	lsrs	r2, r3, #2
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	4053      	eors	r3, r2
 8001150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001154:	2b00      	cmp	r3, #0
 8001156:	d110      	bne.n	800117a <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fd9d 	bl	8000c98 <load_descriptor_values>

                if (iter->tag == tag &&
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	8a1b      	ldrh	r3, [r3, #16]
 8001162:	461a      	mov	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4293      	cmp	r3, r2
 8001168:	d107      	bne.n	800117a <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7d9b      	ldrb	r3, [r3, #22]
 800116e:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8001172:	2b0a      	cmp	r3, #10
 8001174:	d001      	beq.n	800117a <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8001176:	2301      	movs	r3, #1
 8001178:	e008      	b.n	800118c <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	89fa      	ldrh	r2, [r7, #14]
 8001180:	429a      	cmp	r2, r3
 8001182:	d1d5      	bne.n	8001130 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fd87 	bl	8000c98 <load_descriptor_values>
        return false;
 800118a:	2300      	movs	r3, #0
    }
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7d9b      	ldrb	r3, [r3, #22]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	d101      	bne.n	80011ac <pb_field_iter_find_extension+0x18>
    {
        return true;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e022      	b.n	80011f2 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	891b      	ldrh	r3, [r3, #8]
 80011b0:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff feda 	bl	8000f6c <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	895b      	ldrh	r3, [r3, #10]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d104      	bne.n	80011e0 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fd5e 	bl	8000c98 <load_descriptor_values>
 80011dc:	4603      	mov	r3, r0
 80011de:	e008      	b.n	80011f2 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	891b      	ldrh	r3, [r3, #8]
 80011e4:	89fa      	ldrh	r2, [r7, #14]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d1e3      	bne.n	80011b2 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd54 	bl	8000c98 <load_descriptor_values>
        return false;
 80011f0:	2300      	movs	r3, #0
    }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	441a      	add	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6979      	ldr	r1, [r7, #20]
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f008 fe2f 	bl	8009e86 <memcpy>
    }
    
    return true;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <pb_read+0x16>
        return true;
 8001246:	2301      	movs	r3, #1
 8001248:	e05f      	b.n	800130a <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d123      	bne.n	8001298 <pb_read+0x64>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2f      	ldr	r2, [pc, #188]	@ (8001314 <pb_read+0xe0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01e      	beq.n	8001298 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 800125a:	e011      	b.n	8001280 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2210      	movs	r2, #16
 8001262:	4619      	mov	r1, r3
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff ffe5 	bl	8001234 <pb_read>
 800126a:	4603      	mov	r3, r0
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <pb_read+0x46>
				return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e047      	b.n	800130a <pb_read+0xd6>
			
			count -= 16;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3b10      	subs	r3, #16
 800127e:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d8ea      	bhi.n	800125c <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4619      	mov	r1, r3
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff ffd0 	bl	8001234 <pb_read>
 8001294:	4603      	mov	r3, r0
 8001296:	e038      	b.n	800130a <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d90b      	bls.n	80012ba <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <pb_read+0x7c>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	e000      	b.n	80012b2 <pb_read+0x7e>
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <pb_read+0xe4>)
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	60d3      	str	r3, [r2, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	e027      	b.n	800130a <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <pb_read+0xac>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	e000      	b.n	80012e2 <pb_read+0xae>
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <pb_read+0xe8>)
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	60d3      	str	r3, [r2, #12]
 80012e6:	2300      	movs	r3, #0
 80012e8:	e00f      	b.n	800130a <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d903      	bls.n	80012fc <pb_read+0xc8>
        stream->bytes_left = 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e005      	b.n	8001308 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad2      	subs	r2, r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]

    return true;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	080011fb 	.word	0x080011fb
 8001318:	0800aa08 	.word	0x0800aa08
 800131c:	0800aa18 	.word	0x0800aa18

08001320 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10b      	bne.n	800134a <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <pb_readbyte+0x20>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	e000      	b.n	8001342 <pb_readbyte+0x22>
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <pb_readbyte+0x70>)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	60d3      	str	r3, [r2, #12]
 8001346:	2300      	movs	r3, #0
 8001348:	e01d      	b.n	8001386 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	f083 0301 	eor.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <pb_readbyte+0x50>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	e000      	b.n	8001372 <pb_readbyte+0x52>
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <pb_readbyte+0x74>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	e005      	b.n	8001386 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
    
    return true;    
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0800aa08 	.word	0x0800aa08
 8001394:	0800aa18 	.word	0x0800aa18

08001398 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <pb_istream_from_buffer+0x38>)
 80013a6:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	461c      	mov	r4, r3
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc90      	pop	{r4, r7}
 80013ce:	4770      	bx	lr
 80013d0:	080011fb 	.word	0x080011fb

080013d4 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80013e0:	f107 0315 	add.w	r3, r7, #21
 80013e4:	4619      	mov	r1, r3
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff ff9a 	bl	8001320 <pb_readbyte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 800140c:	2300      	movs	r3, #0
 800140e:	e084      	b.n	800151a <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	db02      	blt.n	800141e <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8001418:	7d7b      	ldrb	r3, [r7, #21]
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	e079      	b.n	8001512 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 800141e:	2307      	movs	r3, #7
 8001420:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8001422:	7d7b      	ldrb	r3, [r7, #21]
 8001424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001428:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800142a:	f107 0315 	add.w	r3, r7, #21
 800142e:	4619      	mov	r1, r3
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff ff75 	bl	8001320 <pb_readbyte>
 8001436:	4603      	mov	r3, r0
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <pb_decode_varint32_eof+0x72>
                return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e069      	b.n	800151a <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b1f      	cmp	r3, #31
 800144a:	d92f      	bls.n	80014ac <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001450:	d801      	bhi.n	8001456 <pb_decode_varint32_eof+0x82>
 8001452:	23ff      	movs	r3, #255	@ 0xff
 8001454:	e000      	b.n	8001458 <pb_decode_varint32_eof+0x84>
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8001464:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001466:	2b00      	cmp	r3, #0
 8001468:	da05      	bge.n	8001476 <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 800146a:	7d7b      	ldrb	r3, [r7, #21]
 800146c:	7dfa      	ldrb	r2, [r7, #23]
 800146e:	429a      	cmp	r2, r3
 8001470:	d101      	bne.n	8001476 <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <pb_decode_varint32_eof+0xa4>
 8001476:	2300      	movs	r3, #0
 8001478:	75bb      	strb	r3, [r7, #22]
 800147a:	7dbb      	ldrb	r3, [r7, #22]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b3f      	cmp	r3, #63	@ 0x3f
 8001486:	d805      	bhi.n	8001494 <pb_decode_varint32_eof+0xc0>
 8001488:	7dbb      	ldrb	r3, [r7, #22]
 800148a:	f083 0301 	eor.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d037      	beq.n	8001504 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <pb_decode_varint32_eof+0xce>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	e000      	b.n	80014a4 <pb_decode_varint32_eof+0xd0>
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <pb_decode_varint32_eof+0x150>)
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	60d3      	str	r3, [r2, #12]
 80014a8:	2300      	movs	r3, #0
 80014aa:	e036      	b.n	800151a <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b1c      	cmp	r3, #28
 80014b0:	d11f      	bne.n	80014f2 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 80014b2:	7d7b      	ldrb	r3, [r7, #21]
 80014b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d010      	beq.n	80014de <pb_decode_varint32_eof+0x10a>
 80014bc:	7d7b      	ldrb	r3, [r7, #21]
 80014be:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80014c2:	2b78      	cmp	r3, #120	@ 0x78
 80014c4:	d00b      	beq.n	80014de <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <pb_decode_varint32_eof+0x100>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	e000      	b.n	80014d6 <pb_decode_varint32_eof+0x102>
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <pb_decode_varint32_eof+0x150>)
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	60d3      	str	r3, [r2, #12]
 80014da:	2300      	movs	r3, #0
 80014dc:	e01d      	b.n	800151a <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 80014de:	7d7b      	ldrb	r3, [r7, #21]
 80014e0:	f003 020f 	and.w	r2, r3, #15
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e008      	b.n	8001504 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80014f2:	7d7b      	ldrb	r3, [r7, #21]
 80014f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4313      	orrs	r3, r2
 8001502:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	3307      	adds	r3, #7
 8001508:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	db8b      	blt.n	800142a <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	601a      	str	r2, [r3, #0]
   return true;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	0800aa24 	.word	0x0800aa24

08001528 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8001532:	2200      	movs	r2, #0
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff4c 	bl	80013d4 <pb_decode_varint32_eof>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8001548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800154c:	b08a      	sub	sp, #40	@ 0x28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8001564:	f107 0317 	add.w	r3, r7, #23
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fed8 	bl	8001320 <pb_readbyte>
 8001570:	4603      	mov	r3, r0
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <pb_decode_varint+0x38>
            return false;
 800157c:	2300      	movs	r3, #0
 800157e:	e041      	b.n	8001604 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	2b3e      	cmp	r3, #62	@ 0x3e
 8001584:	d910      	bls.n	80015a8 <pb_decode_varint+0x60>
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <pb_decode_varint+0x56>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	e000      	b.n	80015a0 <pb_decode_varint+0x58>
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <pb_decode_varint+0xc8>)
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	60d3      	str	r3, [r2, #12]
 80015a4:	2300      	movs	r3, #0
 80015a6:	e02d      	b.n	8001604 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 80015b8:	f04f 0900 	mov.w	r9, #0
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f1a3 0120 	sub.w	r1, r3, #32
 80015c2:	f1c3 0220 	rsb	r2, r3, #32
 80015c6:	fa09 f503 	lsl.w	r5, r9, r3
 80015ca:	fa08 f101 	lsl.w	r1, r8, r1
 80015ce:	430d      	orrs	r5, r1
 80015d0:	fa28 f202 	lsr.w	r2, r8, r2
 80015d4:	4315      	orrs	r5, r2
 80015d6:	fa08 f403 	lsl.w	r4, r8, r3
 80015da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015de:	ea42 0a04 	orr.w	sl, r2, r4
 80015e2:	ea43 0b05 	orr.w	fp, r3, r5
 80015e6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	3307      	adds	r3, #7
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dbb5      	blt.n	8001564 <pb_decode_varint+0x1c>
    
    *dest = result;
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015fe:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800160e:	bf00      	nop
 8001610:	0800aa24 	.word	0x0800aa24

08001614 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 800161c:	f107 030f 	add.w	r3, r7, #15
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fe05 	bl	8001234 <pb_read>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <pb_skip_varint+0x26>
            return false;
 8001636:	2300      	movs	r3, #0
 8001638:	e004      	b.n	8001644 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	dbec      	blt.n	800161c <pb_skip_varint+0x8>
    return true;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff64 	bl	8001528 <pb_decode_varint32>
 8001660:	4603      	mov	r3, r0
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <pb_skip_string+0x24>
        return false;
 800166c:	2300      	movs	r3, #0
 800166e:	e006      	b.n	800167e <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fddc 	bl	8001234 <pb_read>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fe90 	bl	80013d4 <pb_decode_varint32_eof>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f083 0301 	eor.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <pb_decode_tag+0x3e>
    {
        return false;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e00b      	b.n	80016dc <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	701a      	strb	r2, [r3, #0]
    return true;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d826      	bhi.n	8001744 <pb_skip_field+0x60>
 80016f6:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <pb_skip_field+0x18>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001715 	.word	0x08001715
 8001700:	0800171f 	.word	0x0800171f
 8001704:	0800172d 	.word	0x0800172d
 8001708:	08001745 	.word	0x08001745
 800170c:	08001745 	.word	0x08001745
 8001710:	08001737 	.word	0x08001737
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff7d 	bl	8001614 <pb_skip_varint>
 800171a:	4603      	mov	r3, r0
 800171c:	e01d      	b.n	800175a <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800171e:	2208      	movs	r2, #8
 8001720:	2100      	movs	r1, #0
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fd86 	bl	8001234 <pb_read>
 8001728:	4603      	mov	r3, r0
 800172a:	e016      	b.n	800175a <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff8d 	bl	800164c <pb_skip_string>
 8001732:	4603      	mov	r3, r0
 8001734:	e011      	b.n	800175a <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8001736:	2204      	movs	r2, #4
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fd7a 	bl	8001234 <pb_read>
 8001740:	4603      	mov	r3, r0
 8001742:	e00a      	b.n	800175a <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <pb_skip_field+0x6e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	e000      	b.n	8001754 <pb_skip_field+0x70>
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <pb_skip_field+0x80>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	60d3      	str	r3, [r2, #12]
 8001758:	2300      	movs	r3, #0
    }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800aa34 	.word	0x0800aa34

08001768 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	460b      	mov	r3, r1
 8001776:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d03f      	beq.n	8001804 <read_raw_value+0x9c>
 8001784:	2b05      	cmp	r3, #5
 8001786:	dc47      	bgt.n	8001818 <read_raw_value+0xb0>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <read_raw_value+0x2a>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d02f      	beq.n	80017f0 <read_raw_value+0x88>
 8001790:	e042      	b.n	8001818 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d20b      	bcs.n	80017c4 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <read_raw_value+0x52>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	e000      	b.n	80017bc <read_raw_value+0x54>
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <read_raw_value+0xd0>)
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	60d3      	str	r3, [r2, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	e034      	b.n	800182e <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 80017c4:	2201      	movs	r2, #1
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fd33 	bl	8001234 <pb_read>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <read_raw_value+0x76>
                    return false;
 80017da:	2300      	movs	r3, #0
 80017dc:	e027      	b.n	800182e <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dbd5      	blt.n	8001798 <read_raw_value+0x30>
            return true;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e01e      	b.n	800182e <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2208      	movs	r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80017f6:	2208      	movs	r2, #8
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fd1a 	bl	8001234 <pb_read>
 8001800:	4603      	mov	r3, r0
 8001802:	e014      	b.n	800182e <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800180a:	2204      	movs	r2, #4
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff fd10 	bl	8001234 <pb_read>
 8001814:	4603      	mov	r3, r0
 8001816:	e00a      	b.n	800182e <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <read_raw_value+0xbe>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	e000      	b.n	8001828 <read_raw_value+0xc0>
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <read_raw_value+0xd4>)
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	60d3      	str	r3, [r2, #12]
 800182c:	2300      	movs	r3, #0
    }
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800aa24 	.word	0x0800aa24
 800183c:	0800aa34 	.word	0x0800aa34

08001840 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe69 	bl	8001528 <pb_decode_varint32>
 8001856:	4603      	mov	r3, r0
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <pb_make_string_substream+0x26>
        return false;
 8001862:	2300      	movs	r3, #0
 8001864:	e020      	b.n	80018a8 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4614      	mov	r4, r2
 800186c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d20b      	bcs.n	8001894 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <pb_make_string_substream+0x4a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	e000      	b.n	800188c <pb_make_string_substream+0x4c>
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <pb_make_string_substream+0x70>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	60d3      	str	r3, [r2, #12]
 8001890:	2300      	movs	r3, #0
 8001892:	e009      	b.n	80018a8 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad2      	subs	r2, r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
    return true;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	0800aa48 	.word	0x0800aa48

080018b4 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00e      	beq.n	80018e4 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	461a      	mov	r2, r3
 80018cc:	2100      	movs	r1, #0
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f7ff fcb0 	bl	8001234 <pb_read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <pb_close_string_substream+0x30>
            return false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e008      	b.n	80018f6 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7d9b      	ldrb	r3, [r3, #22]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	2b0b      	cmp	r3, #11
 8001918:	f200 80d4 	bhi.w	8001ac4 <decode_basic_field+0x1c4>
 800191c:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <decode_basic_field+0x24>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001955 	.word	0x08001955
 8001928:	08001985 	.word	0x08001985
 800192c:	08001985 	.word	0x08001985
 8001930:	08001985 	.word	0x08001985
 8001934:	080019b5 	.word	0x080019b5
 8001938:	080019e9 	.word	0x080019e9
 800193c:	08001a1d 	.word	0x08001a1d
 8001940:	08001a47 	.word	0x08001a47
 8001944:	08001a71 	.word	0x08001a71
 8001948:	08001a71 	.word	0x08001a71
 800194c:	08001ac5 	.word	0x08001ac5
 8001950:	08001a9b 	.word	0x08001a9b
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00e      	beq.n	8001978 <decode_basic_field+0x78>
 800195a:	7afb      	ldrb	r3, [r7, #11]
 800195c:	2bff      	cmp	r3, #255	@ 0xff
 800195e:	d00b      	beq.n	8001978 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <decode_basic_field+0x6e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	e000      	b.n	8001970 <decode_basic_field+0x70>
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	60d3      	str	r3, [r2, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	e0b0      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fef6 	bl	800276c <pb_dec_bool>
 8001980:	4603      	mov	r3, r0
 8001982:	e0aa      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <decode_basic_field+0xa8>
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	2bff      	cmp	r3, #255	@ 0xff
 800198e:	d00b      	beq.n	80019a8 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <decode_basic_field+0x9e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	e000      	b.n	80019a0 <decode_basic_field+0xa0>
 800199e:	4b51      	ldr	r3, [pc, #324]	@ (8001ae4 <decode_basic_field+0x1e4>)
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	60d3      	str	r3, [r2, #12]
 80019a4:	2300      	movs	r3, #0
 80019a6:	e098      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 feee 	bl	800278c <pb_dec_varint>
 80019b0:	4603      	mov	r3, r0
 80019b2:	e092      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d00e      	beq.n	80019d8 <decode_basic_field+0xd8>
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	2bff      	cmp	r3, #255	@ 0xff
 80019be:	d00b      	beq.n	80019d8 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <decode_basic_field+0xce>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	e000      	b.n	80019d0 <decode_basic_field+0xd0>
 80019ce:	4b45      	ldr	r3, [pc, #276]	@ (8001ae4 <decode_basic_field+0x1e4>)
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	60d3      	str	r3, [r2, #12]
 80019d4:	2300      	movs	r3, #0
 80019d6:	e080      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	4619      	mov	r1, r3
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fe8a 	bl	80026f8 <pb_decode_fixed32>
 80019e4:	4603      	mov	r3, r0
 80019e6:	e078      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00e      	beq.n	8001a0c <decode_basic_field+0x10c>
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	2bff      	cmp	r3, #255	@ 0xff
 80019f2:	d00b      	beq.n	8001a0c <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <decode_basic_field+0x102>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	e000      	b.n	8001a04 <decode_basic_field+0x104>
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	60d3      	str	r3, [r2, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e066      	b.n	8001ada <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fe8c 	bl	8002730 <pb_decode_fixed64>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	e05e      	b.n	8001ada <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d00b      	beq.n	8001a3a <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <decode_basic_field+0x130>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	e000      	b.n	8001a32 <decode_basic_field+0x132>
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	60d3      	str	r3, [r2, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	e04f      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 ffd1 	bl	80029e4 <pb_dec_bytes>
 8001a42:	4603      	mov	r3, r0
 8001a44:	e049      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d00b      	beq.n	8001a64 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <decode_basic_field+0x15a>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	e000      	b.n	8001a5c <decode_basic_field+0x15c>
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	60d3      	str	r3, [r2, #12]
 8001a60:	2300      	movs	r3, #0
 8001a62:	e03a      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f001 f830 	bl	8002acc <pb_dec_string>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e034      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d00b      	beq.n	8001a8e <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <decode_basic_field+0x184>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	e000      	b.n	8001a86 <decode_basic_field+0x186>
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	60d3      	str	r3, [r2, #12]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e025      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f001 f897 	bl	8002bc4 <pb_dec_submessage>
 8001a96:	4603      	mov	r3, r0
 8001a98:	e01f      	b.n	8001ada <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d00b      	beq.n	8001ab8 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <decode_basic_field+0x1ae>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	e000      	b.n	8001ab0 <decode_basic_field+0x1b0>
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <decode_basic_field+0x1e4>)
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	60d3      	str	r3, [r2, #12]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e010      	b.n	8001ada <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f001 f90c 	bl	8002cd8 <pb_dec_fixed_length_bytes>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	e00a      	b.n	8001ada <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <decode_basic_field+0x1d2>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	e000      	b.n	8001ad4 <decode_basic_field+0x1d4>
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <decode_basic_field+0x1e8>)
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	60d3      	str	r3, [r2, #12]
 8001ad8:	2300      	movs	r3, #0
    }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800aa60 	.word	0x0800aa60
 8001ae8:	0800aa70 	.word	0x0800aa70

08001aec <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b096      	sub	sp, #88	@ 0x58
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	460b      	mov	r3, r1
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7d9b      	ldrb	r3, [r3, #22]
 8001afe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001b02:	2b30      	cmp	r3, #48	@ 0x30
 8001b04:	f000 80c2 	beq.w	8001c8c <decode_static_field+0x1a0>
 8001b08:	2b30      	cmp	r3, #48	@ 0x30
 8001b0a:	f200 811a 	bhi.w	8001d42 <decode_static_field+0x256>
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d01f      	beq.n	8001b52 <decode_static_field+0x66>
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	f200 8115 	bhi.w	8001d42 <decode_static_field+0x256>
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <decode_static_field+0x36>
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d008      	beq.n	8001b32 <decode_static_field+0x46>
 8001b20:	e10f      	b.n	8001d42 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4619      	mov	r1, r3
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fee9 	bl	8001900 <decode_basic_field>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	e112      	b.n	8001d58 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4619      	mov	r1, r3
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fed9 	bl	8001900 <decode_basic_field>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	e102      	b.n	8001d58 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d16c      	bne.n	8001c32 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7d9b      	ldrb	r3, [r3, #22]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d866      	bhi.n	8001c32 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	8a52      	ldrh	r2, [r2, #18]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b7c:	8812      	ldrh	r2, [r2, #0]
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	441a      	add	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8001b88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fe56 	bl	8001840 <pb_make_string_substream>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01f      	beq.n	8001be0 <decode_static_field+0xf4>
                    return false;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e0d9      	b.n	8001d58 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8001ba4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	21ff      	movs	r1, #255	@ 0xff
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fea7 	bl	8001900 <decode_basic_field>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <decode_static_field+0xda>
                    {
                        status = false;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8001bc4:	e015      	b.n	8001bf2 <decode_static_field+0x106>
                    }
                    (*size)++;
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd0:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	8a52      	ldrh	r2, [r2, #18]
 8001bda:	441a      	add	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8001be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <decode_static_field+0x106>
 8001be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8a9b      	ldrh	r3, [r3, #20]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3d8      	bcc.n	8001ba4 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8001bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <decode_static_field+0x11a>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	e000      	b.n	8001c08 <decode_static_field+0x11c>
 8001c06:	4b56      	ldr	r3, [pc, #344]	@ (8001d60 <decode_static_field+0x274>)
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	60d3      	str	r3, [r2, #12]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e0a3      	b.n	8001d58 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8001c10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c14:	4619      	mov	r1, r3
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff fe4c 	bl	80018b4 <pb_close_string_substream>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <decode_static_field+0x140>
                    return false;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e095      	b.n	8001d58 <decode_static_field+0x26c>

                return status;
 8001c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c30:	e092      	b.n	8001d58 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	8a52      	ldrh	r2, [r2, #18]
 8001c40:	4611      	mov	r1, r2
 8001c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	fb01 f202 	mul.w	r2, r1, r2
 8001c4a:	441a      	add	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8001c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	b291      	uxth	r1, r2
 8001c58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c5a:	8011      	strh	r1, [r2, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	8a92      	ldrh	r2, [r2, #20]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d30b      	bcc.n	8001c7c <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <decode_static_field+0x186>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	e000      	b.n	8001c74 <decode_static_field+0x188>
 8001c72:	4b3b      	ldr	r3, [pc, #236]	@ (8001d60 <decode_static_field+0x274>)
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	60d3      	str	r3, [r2, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e06d      	b.n	8001d58 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4619      	mov	r1, r3
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fe3c 	bl	8001900 <decode_basic_field>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	e065      	b.n	8001d58 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d9b      	ldrb	r3, [r3, #22]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d005      	beq.n	8001ca4 <decode_static_field+0x1b8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7d9b      	ldrb	r3, [r3, #22]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d141      	bne.n	8001d28 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d03a      	beq.n	8001d28 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69d8      	ldr	r0, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8a5b      	ldrh	r3, [r3, #18]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f008 f866 	bl	8009d8e <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d022      	beq.n	8001d28 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f99c 	bl	800102c <pb_field_iter_begin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fa4d 	bl	800219e <pb_message_set_to_defaults>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <decode_static_field+0x232>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	e000      	b.n	8001d20 <decode_static_field+0x234>
 8001d1e:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <decode_static_field+0x278>)
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	60d3      	str	r3, [r2, #12]
 8001d24:	2300      	movs	r3, #0
 8001d26:	e017      	b.n	8001d58 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	8a12      	ldrh	r2, [r2, #16]
 8001d30:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4619      	mov	r1, r3
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fde1 	bl	8001900 <decode_basic_field>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	e00a      	b.n	8001d58 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <decode_static_field+0x264>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	e000      	b.n	8001d52 <decode_static_field+0x266>
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <decode_static_field+0x27c>)
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	60d3      	str	r3, [r2, #12]
 8001d56:	2300      	movs	r3, #0
    }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3758      	adds	r7, #88	@ 0x58
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800aa84 	.word	0x0800aa84
 8001d64:	0800aa94 	.word	0x0800aa94
 8001d68:	0800aa70 	.word	0x0800aa70

08001d6c <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	460b      	mov	r3, r1
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <decode_pointer_field+0x1c>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	e000      	b.n	8001d8a <decode_pointer_field+0x1e>
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <decode_pointer_field+0x30>)
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	60d3      	str	r3, [r2, #12]
 8001d8e:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	0800aaac 	.word	0x0800aaac

08001da0 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b097      	sub	sp, #92	@ 0x5c
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	61f8      	str	r0, [r7, #28]
 8001da8:	460b      	mov	r3, r1
 8001daa:	617a      	str	r2, [r7, #20]
 8001dac:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8001db8:	7efb      	ldrb	r3, [r7, #27]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	69f8      	ldr	r0, [r7, #28]
 8001dbe:	f7ff fc91 	bl	80016e4 <pb_skip_field>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	e070      	b.n	8001ea8 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8001dc6:	7efb      	ldrb	r3, [r7, #27]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d145      	bne.n	8001e58 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8001dcc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	69f8      	ldr	r0, [r7, #28]
 8001dd4:	f7ff fd34 	bl	8001840 <pb_make_string_substream>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <decode_callback_field+0x48>
            return false;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e05f      	b.n	8001ea8 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8001de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dea:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4798      	blx	r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f083 0301 	eor.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d010      	beq.n	8001e2a <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <decode_callback_field+0x76>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	e005      	b.n	8001e22 <decode_callback_field+0x82>
 8001e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <decode_callback_field+0x80>
 8001e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e1e:	e000      	b.n	8001e22 <decode_callback_field+0x82>
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <decode_callback_field+0x110>)
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	60d3      	str	r3, [r2, #12]
                return false;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e03e      	b.n	8001ea8 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <decode_callback_field+0x98>
 8001e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8d7      	bhi.n	8001de8 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8001e38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	69f8      	ldr	r0, [r7, #28]
 8001e40:	f7ff fd38 	bl	80018b4 <pb_close_string_substream>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <decode_callback_field+0xb4>
            return false;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e029      	b.n	8001ea8 <decode_callback_field+0x108>

        return true;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e027      	b.n	8001ea8 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8001e58:	230a      	movs	r3, #10
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e64:	7ef9      	ldrb	r1, [r7, #27]
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f7ff fc7e 	bl	8001768 <read_raw_value>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f083 0301 	eor.w	r3, r3, #1
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <decode_callback_field+0xdc>
            return false;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e015      	b.n	8001ea8 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e7e:	463b      	mov	r3, r7
 8001e80:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fa87 	bl	8001398 <pb_istream_from_buffer>
 8001e8a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001e8e:	463b      	mov	r3, r7
 8001e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4798      	blx	r3
 8001ea6:	4603      	mov	r3, r0
    }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	375c      	adds	r7, #92	@ 0x5c
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	0800aac0 	.word	0x0800aac0

08001eb4 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7d9b      	ldrb	r3, [r3, #22]
 8001ec6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001eca:	2b80      	cmp	r3, #128	@ 0x80
 8001ecc:	d00e      	beq.n	8001eec <decode_field+0x38>
 8001ece:	2b80      	cmp	r3, #128	@ 0x80
 8001ed0:	d81c      	bhi.n	8001f0c <decode_field+0x58>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <decode_field+0x28>
 8001ed6:	2b40      	cmp	r3, #64	@ 0x40
 8001ed8:	d010      	beq.n	8001efc <decode_field+0x48>
 8001eda:	e017      	b.n	8001f0c <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff fe02 	bl	8001aec <decode_static_field>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	e01a      	b.n	8001f22 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8001eec:	7afb      	ldrb	r3, [r7, #11]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff ff3a 	bl	8001d6c <decode_pointer_field>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	e012      	b.n	8001f22 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4619      	mov	r1, r3
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff ff4c 	bl	8001da0 <decode_callback_field>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	e00a      	b.n	8001f22 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <decode_field+0x66>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	e000      	b.n	8001f1c <decode_field+0x68>
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <decode_field+0x78>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	60d3      	str	r3, [r2, #12]
 8001f20:	2300      	movs	r3, #0
    }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800aa70 	.word	0x0800aa70

08001f30 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	@ 0x38
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f88a 	bl	800105e <pb_field_iter_begin_extension>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <default_extension_decoder+0x34>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	e000      	b.n	8001f66 <default_extension_decoder+0x36>
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <default_extension_decoder+0x70>)
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	60d3      	str	r3, [r2, #12]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e014      	b.n	8001f98 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8001f6e:	8c3b      	ldrh	r3, [r7, #32]
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d102      	bne.n	8001f7e <default_extension_decoder+0x4e>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <default_extension_decoder+0x52>
        return true;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00a      	b.n	8001f98 <default_extension_decoder+0x68>

    extension->found = true;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2201      	movs	r2, #1
 8001f86:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8001f88:	f107 0210 	add.w	r2, r7, #16
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff ff8f 	bl	8001eb4 <decode_field>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3738      	adds	r7, #56	@ 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	0800aad0 	.word	0x0800aad0

08001fa4 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8001fba:	e022      	b.n	8002002 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681c      	ldr	r4, [r3, #0]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	6839      	ldr	r1, [r7, #0]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	47a0      	blx	r4
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	75fb      	strb	r3, [r7, #23]
 8001fda:	e007      	b.n	8001fec <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff ffa4 	bl	8001f30 <default_extension_decoder>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <decode_extension+0x58>
            return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e00b      	b.n	8002014 <decode_extension+0x70>
        
        extension = extension->next;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <decode_extension+0x6e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d0d4      	beq.n	8001fbc <decode_extension+0x18>
    }
    
    return true;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	@ 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7d9b      	ldrb	r3, [r3, #22]
 8002028:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800202c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	2b0a      	cmp	r3, #10
 8002036:	d124      	bne.n	8002082 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8002040:	e01b      	b.n	800207a <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f808 	bl	800105e <pb_field_iter_begin_extension>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00f      	beq.n	8002074 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8002054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002056:	2200      	movs	r2, #0
 8002058:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f89d 	bl	800219e <pb_message_set_to_defaults>
 8002064:	4603      	mov	r3, r0
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <pb_field_set_to_default+0x58>
                    return false;
 8002070:	2300      	movs	r3, #0
 8002072:	e090      	b.n	8002196 <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8002074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 800207a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e0      	bne.n	8002042 <pb_field_set_to_default+0x26>
 8002080:	e088      	b.n	8002194 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8002082:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002086:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d166      	bne.n	800215c <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8002094:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002098:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800209c:	2b10      	cmp	r3, #16
 800209e:	d108      	bne.n	80020b2 <pb_field_set_to_default+0x96>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e012      	b.n	80020d8 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80020b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80020b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d005      	beq.n	80020ca <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80020be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80020c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80020c6:	2b30      	cmp	r3, #48	@ 0x30
 80020c8:	d106      	bne.n	80020d8 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
            init_data = false;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 80020d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d059      	beq.n	8002194 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7d9b      	ldrb	r3, [r3, #22]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d005      	beq.n	80020f8 <pb_field_set_to_default+0xdc>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7d9b      	ldrb	r3, [r3, #22]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d128      	bne.n	800214a <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff81 	bl	800102c <pb_field_iter_begin>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d030      	beq.n	8002192 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f832 	bl	800219e <pb_message_set_to_defaults>
 800213a:	4603      	mov	r3, r0
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d025      	beq.n	8002192 <pb_field_set_to_default+0x176>
                        return false;
 8002146:	2300      	movs	r3, #0
 8002148:	e025      	b.n	8002196 <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69d8      	ldr	r0, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8a5b      	ldrh	r3, [r3, #18]
 8002152:	461a      	mov	r2, r3
 8002154:	2100      	movs	r1, #0
 8002156:	f007 fe1a 	bl	8009d8e <memset>
 800215a:	e01b      	b.n	8002194 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800215c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002160:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002164:	2b80      	cmp	r3, #128	@ 0x80
 8002166:	d115      	bne.n	8002194 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002170:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002174:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002178:	2b20      	cmp	r3, #32
 800217a:	d005      	beq.n	8002188 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800217c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002180:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8002184:	2b30      	cmp	r3, #48	@ 0x30
 8002186:	d105      	bne.n	8002194 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	2200      	movs	r2, #0
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e000      	b.n	8002194 <pb_field_set_to_default+0x178>
            {
 8002192:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	3738      	adds	r7, #56	@ 0x38
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800219e:	b590      	push	{r4, r7, lr}
 80021a0:	b08d      	sub	sp, #52	@ 0x34
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	463b      	mov	r3, r7
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f8e0 	bl	8001398 <pb_istream_from_buffer>
 80021d8:	f107 0420 	add.w	r4, r7, #32
 80021dc:	463b      	mov	r3, r7
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80021e4:	f107 031a 	add.w	r3, r7, #26
 80021e8:	f107 021c 	add.w	r2, r7, #28
 80021ec:	f107 011b 	add.w	r1, r7, #27
 80021f0:	f107 0020 	add.w	r0, r7, #32
 80021f4:	f7ff fa47 	bl	8001686 <pb_decode_tag>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <pb_message_set_to_defaults+0x6a>
            return false;
 8002204:	2300      	movs	r3, #0
 8002206:	e043      	b.n	8002290 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8002208:	6978      	ldr	r0, [r7, #20]
 800220a:	f7ff ff07 	bl	800201c <pb_field_set_to_default>
 800220e:	4603      	mov	r3, r0
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <pb_message_set_to_defaults+0x80>
            return false;
 800221a:	2300      	movs	r3, #0
 800221c:	e038      	b.n	8002290 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02e      	beq.n	8002282 <pb_message_set_to_defaults+0xe4>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	8a1b      	ldrh	r3, [r3, #16]
 8002228:	461a      	mov	r2, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	d128      	bne.n	8002282 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8002230:	7ef9      	ldrb	r1, [r7, #27]
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fe3b 	bl	8001eb4 <decode_field>
 800223e:	4603      	mov	r3, r0
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <pb_message_set_to_defaults+0xb0>
                return false;
 800224a:	2300      	movs	r3, #0
 800224c:	e020      	b.n	8002290 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 800224e:	f107 031a 	add.w	r3, r7, #26
 8002252:	f107 021c 	add.w	r2, r7, #28
 8002256:	f107 011b 	add.w	r1, r7, #27
 800225a:	f107 0020 	add.w	r0, r7, #32
 800225e:	f7ff fa12 	bl	8001686 <pb_decode_tag>
 8002262:	4603      	mov	r3, r0
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <pb_message_set_to_defaults+0xd4>
                return false;
 800226e:	2300      	movs	r3, #0
 8002270:	e00e      	b.n	8002290 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7fe ff1b 	bl	80010be <pb_field_iter_next>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1bc      	bne.n	8002208 <pb_message_set_to_defaults+0x6a>

    return true;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3734      	adds	r7, #52	@ 0x34
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b09a      	sub	sp, #104	@ 0x68
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 80022ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022b2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 80022c2:	2300      	movs	r3, #0
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c6:	2300      	movs	r3, #0
 80022c8:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fea7 	bl	800102c <pb_field_iter_begin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8102 	beq.w	80024ea <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 80fc 	bne.w	80024ea <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff51 	bl	800219e <pb_message_set_to_defaults>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80f0 	beq.w	80024ea <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <pb_decode_inner+0x80>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	e000      	b.n	800231a <pb_decode_inner+0x82>
 8002318:	4b99      	ldr	r3, [pc, #612]	@ (8002580 <pb_decode_inner+0x2e8>)
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	60d3      	str	r3, [r2, #12]
 800231e:	2300      	movs	r3, #0
 8002320:	e16d      	b.n	80025fe <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8002322:	f107 0312 	add.w	r3, r7, #18
 8002326:	f107 0214 	add.w	r2, r7, #20
 800232a:	f107 0113 	add.w	r1, r7, #19
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff f9a9 	bl	8001686 <pb_decode_tag>
 8002334:	4603      	mov	r3, r0
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <pb_decode_inner+0xb4>
        {
            if (eof)
 8002340:	7cbb      	ldrb	r3, [r7, #18]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 80d7 	bne.w	80024f6 <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8002348:	2300      	movs	r3, #0
 800234a:	e158      	b.n	80025fe <pb_decode_inner+0x366>
        }

        if (tag == 0)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d111      	bne.n	8002376 <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 80ce 	bne.w	80024fa <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <pb_decode_inner+0xd4>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	e000      	b.n	800236e <pb_decode_inner+0xd6>
 800236c:	4b85      	ldr	r3, [pc, #532]	@ (8002584 <pb_decode_inner+0x2ec>)
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	60d3      	str	r3, [r2, #12]
 8002372:	2300      	movs	r3, #0
 8002374:	e143      	b.n	80025fe <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe feb2 	bl	80010e8 <pb_field_iter_find>
 8002384:	4603      	mov	r3, r0
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <pb_decode_inner+0x104>
 8002390:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	2b0a      	cmp	r3, #10
 800239a:	d13c      	bne.n	8002416 <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 800239c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d112      	bne.n	80023c8 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fef4 	bl	8001194 <pb_field_iter_find_extension>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 80023b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 80023b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 80023bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d815      	bhi.n	80023fc <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	7cfa      	ldrb	r2, [r7, #19]
 80023da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fde1 	bl	8001fa4 <decode_extension>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f083 0301 	eor.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <pb_decode_inner+0x15a>
                    return false;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e105      	b.n	80025fe <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d173      	bne.n	80024e4 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	4619      	mov	r1, r3
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff f96f 	bl	80016e4 <pb_skip_field>
 8002406:	4603      	mov	r3, r0
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06a      	beq.n	80024e8 <pb_decode_inner+0x250>
                return false;
 8002412:	2300      	movs	r3, #0
 8002414:	e0f3      	b.n	80025fe <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8002416:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800241a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800241e:	2b20      	cmp	r3, #32
 8002420:	d12e      	bne.n	8002480 <pb_decode_inner+0x1e8>
 8002422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	3314      	adds	r3, #20
 800242a:	429a      	cmp	r2, r3
 800242c:	d128      	bne.n	8002480 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 800242e:	8c3b      	ldrh	r3, [r7, #32]
 8002430:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002434:	429a      	cmp	r2, r3
 8002436:	d020      	beq.n	800247a <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8002438:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800243c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002440:	4293      	cmp	r3, r2
 8002442:	d011      	beq.n	8002468 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8002444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8002448:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800244c:	429a      	cmp	r2, r3
 800244e:	d00b      	beq.n	8002468 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <pb_decode_inner+0x1c6>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	e000      	b.n	8002460 <pb_decode_inner+0x1c8>
 800245e:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <pb_decode_inner+0x2f0>)
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	60d3      	str	r3, [r2, #12]
 8002464:	2300      	movs	r3, #0
 8002466:	e0ca      	b.n	80025fe <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8002468:	8c3b      	ldrh	r3, [r7, #32]
 800246a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 8002474:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002476:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 800247a:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8002480:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002484:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11c      	bne.n	80024c6 <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800248c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800248e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002490:	d819      	bhi.n	80024c6 <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8002492:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2201      	movs	r2, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 80024a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	3368      	adds	r3, #104	@ 0x68
 80024aa:	443b      	add	r3, r7
 80024ac:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80024b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ba:	431a      	orrs	r2, r3
 80024bc:	008b      	lsls	r3, r1, #2
 80024be:	3368      	adds	r3, #104	@ 0x68
 80024c0:	443b      	add	r3, r7
 80024c2:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	f107 0218 	add.w	r2, r7, #24
 80024cc:	4619      	mov	r1, r3
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fcf0 	bl	8001eb4 <decode_field>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <pb_decode_inner+0x252>
            return false;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e08c      	b.n	80025fe <pb_decode_inner+0x366>
                    continue;
 80024e4:	bf00      	nop
 80024e6:	e000      	b.n	80024ea <pb_decode_inner+0x252>
            continue;
 80024e8:	bf00      	nop
    while (stream->bytes_left)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f47f af17 	bne.w	8002322 <pb_decode_inner+0x8a>
 80024f4:	e002      	b.n	80024fc <pb_decode_inner+0x264>
                break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <pb_decode_inner+0x264>
            break;
 80024fa:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80024fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002504:	4293      	cmp	r3, r2
 8002506:	d011      	beq.n	800252c <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8002508:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 800250c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8002510:	429a      	cmp	r2, r3
 8002512:	d00b      	beq.n	800252c <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <pb_decode_inner+0x28a>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	e000      	b.n	8002524 <pb_decode_inner+0x28c>
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <pb_decode_inner+0x2f0>)
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	60d3      	str	r3, [r2, #12]
 8002528:	2300      	movs	r3, #0
 800252a:	e068      	b.n	80025fe <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	8a5b      	ldrh	r3, [r3, #18]
 8002530:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 8002534:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002538:	2b00      	cmp	r3, #0
 800253a:	d05f      	beq.n	80025fc <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800253c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d902      	bls.n	800254a <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8002544:	2340      	movs	r3, #64	@ 0x40
 8002546:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800254a:	2300      	movs	r3, #0
 800254c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002550:	e023      	b.n	800259a <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8002552:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3368      	adds	r3, #104	@ 0x68
 800255a:	443b      	add	r3, r7
 800255c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002562:	429a      	cmp	r2, r3
 8002564:	d014      	beq.n	8002590 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <pb_decode_inner+0x2dc>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	e000      	b.n	8002576 <pb_decode_inner+0x2de>
 8002574:	4b05      	ldr	r3, [pc, #20]	@ (800258c <pb_decode_inner+0x2f4>)
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	60d3      	str	r3, [r2, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	e03f      	b.n	80025fe <pb_decode_inner+0x366>
 800257e:	bf00      	nop
 8002580:	0800aa94 	.word	0x0800aa94
 8002584:	0800aae4 	.word	0x0800aae4
 8002588:	0800aaf0 	.word	0x0800aaf0
 800258c:	0800ab14 	.word	0x0800ab14
            for (i = 0; i < (req_field_count >> 5); i++)
 8002590:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002594:	3301      	adds	r3, #1
 8002596:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800259a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3d3      	bcc.n	8002552 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80025aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d022      	beq.n	80025fc <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80025b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	b29b      	uxth	r3, r3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	3368      	adds	r3, #104	@ 0x68
 80025c2:	443b      	add	r3, r7
 80025c4:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 80025c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f1c3 0320 	rsb	r3, r3, #32
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4619      	mov	r1, r3
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d00b      	beq.n	80025fc <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <pb_decode_inner+0x35a>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	e000      	b.n	80025f4 <pb_decode_inner+0x35c>
 80025f2:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <pb_decode_inner+0x370>)
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	60d3      	str	r3, [r2, #12]
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3768      	adds	r7, #104	@ 0x68
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	0800ab14 	.word	0x0800ab14

0800260c <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8002618:	2300      	movs	r3, #0
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fe3a 	bl	8002298 <pb_decode_inner>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe ff70 	bl	8001528 <pb_decode_varint32>
 8002648:	4603      	mov	r3, r0
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <pb_decode_bool+0x26>
        return false;
 8002654:	2300      	movs	r3, #0
 8002656:	e008      	b.n	800266a <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	701a      	strb	r2, [r3, #0]
    return true;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8002672:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe ff5f 	bl	8001548 <pb_decode_varint>
 800268a:	4603      	mov	r3, r0
 800268c:	f083 0301 	eor.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <pb_decode_svarint+0x28>
        return false;
 8002696:	2300      	movs	r3, #0
 8002698:	e029      	b.n	80026ee <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800269a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269e:	f002 0401 	and.w	r4, r2, #1
 80026a2:	2500      	movs	r5, #0
 80026a4:	ea54 0305 	orrs.w	r3, r4, r5
 80026a8:	d013      	beq.n	80026d2 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80026aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	0842      	lsrs	r2, r0, #1
 80026b8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80026bc:	084b      	lsrs	r3, r1, #1
 80026be:	ea6f 0802 	mvn.w	r8, r2
 80026c2:	ea6f 0903 	mvn.w	r9, r3
 80026c6:	4642      	mov	r2, r8
 80026c8:	464b      	mov	r3, r9
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	e9c1 2300 	strd	r2, r3, [r1]
 80026d0:	e00c      	b.n	80026ec <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 80026d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	0842      	lsrs	r2, r0, #1
 80026e0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80026e4:	084b      	lsrs	r3, r1, #1
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080026f8 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	2204      	movs	r2, #4
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fd92 	bl	8001234 <pb_read>
 8002710:	4603      	mov	r3, r0
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <pb_decode_fixed32+0x28>
        return false;
 800271c:	2300      	movs	r3, #0
 800271e:	e003      	b.n	8002728 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	2208      	movs	r2, #8
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fd76 	bl	8001234 <pb_read>
 8002748:	4603      	mov	r3, r0
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <pb_decode_fixed64+0x28>
        return false;
 8002754:	2300      	movs	r3, #0
 8002756:	e005      	b.n	8002764 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8002758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff58 	bl	8002632 <pb_decode_bool>
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800278c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002790:	b094      	sub	sp, #80	@ 0x50
 8002792:	af00      	add	r7, sp, #0
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24
 8002796:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	7d9b      	ldrb	r3, [r3, #22]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d179      	bne.n	8002898 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80027a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027a8:	4619      	mov	r1, r3
 80027aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027ac:	f7fe fecc 	bl	8001548 <pb_decode_varint>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <pb_dec_varint+0x34>
            return false;
 80027bc:	2300      	movs	r3, #0
 80027be:	e107      	b.n	80029d0 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	8a5b      	ldrh	r3, [r3, #18]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d10a      	bne.n	80027de <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027d0:	e9c1 2300 	strd	r2, r3, [r1]
 80027d4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80027d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80027dc:	e046      	b.n	800286c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	8a5b      	ldrh	r3, [r3, #18]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d10e      	bne.n	8002804 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 80027e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4602      	mov	r2, r0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	617a      	str	r2, [r7, #20]
 80027fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027fe:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8002802:	e033      	b.n	800286c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	8a5b      	ldrh	r3, [r3, #18]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d10f      	bne.n	800282c <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 800280c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	b282      	uxth	r2, r0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	2200      	movs	r2, #0
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	60fa      	str	r2, [r7, #12]
 8002822:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002826:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800282a:	e01f      	b.n	800286c <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	8a5b      	ldrh	r3, [r3, #18]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10f      	bne.n	8002854 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8002834:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	b2c2      	uxtb	r2, r0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2200      	movs	r2, #0
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800284e:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 8002852:	e00b      	b.n	800286c <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <pb_dec_varint+0xd6>
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	e000      	b.n	8002864 <pb_dec_varint+0xd8>
 8002862:	4b5e      	ldr	r3, [pc, #376]	@ (80029dc <pb_dec_varint+0x250>)
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	60d3      	str	r3, [r2, #12]
 8002868:	2300      	movs	r3, #0
 800286a:	e0b1      	b.n	80029d0 <pb_dec_varint+0x244>

        if (clamped != value)
 800286c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002870:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002874:	4299      	cmp	r1, r3
 8002876:	bf08      	it	eq
 8002878:	4290      	cmpeq	r0, r2
 800287a:	d00b      	beq.n	8002894 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <pb_dec_varint+0xfe>
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	e000      	b.n	800288c <pb_dec_varint+0x100>
 800288a:	4b55      	ldr	r3, [pc, #340]	@ (80029e0 <pb_dec_varint+0x254>)
 800288c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288e:	60d3      	str	r3, [r2, #12]
 8002890:	2300      	movs	r3, #0
 8002892:	e09d      	b.n	80029d0 <pb_dec_varint+0x244>

        return true;
 8002894:	2301      	movs	r3, #1
 8002896:	e09b      	b.n	80029d0 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	7d9b      	ldrb	r3, [r3, #22]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d10d      	bne.n	80028c0 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80028a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028a8:	4619      	mov	r1, r3
 80028aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028ac:	f7ff fee1 	bl	8002672 <pb_decode_svarint>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d022      	beq.n	8002902 <pb_dec_varint+0x176>
                return false;
 80028bc:	2300      	movs	r3, #0
 80028be:	e087      	b.n	80029d0 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 80028c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028c4:	4619      	mov	r1, r3
 80028c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028c8:	f7fe fe3e 	bl	8001548 <pb_decode_varint>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <pb_dec_varint+0x150>
                return false;
 80028d8:	2300      	movs	r3, #0
 80028da:	e079      	b.n	80029d0 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	8a5b      	ldrh	r3, [r3, #18]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d104      	bne.n	80028ee <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80028e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80028ec:	e009      	b.n	8002902 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80028ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028f2:	4613      	mov	r3, r2
 80028f4:	17da      	asrs	r2, r3, #31
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	61fa      	str	r2, [r7, #28]
 80028fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	8a5b      	ldrh	r3, [r3, #18]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10a      	bne.n	8002920 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	69d9      	ldr	r1, [r3, #28]
 800290e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002912:	e9c1 2300 	strd	r2, r3, [r1]
 8002916:	e9d1 2300 	ldrd	r2, r3, [r1]
 800291a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800291e:	e042      	b.n	80029a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d10c      	bne.n	8002942 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8002928:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	4602      	mov	r2, r0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	17da      	asrs	r2, r3, #31
 8002938:	469a      	mov	sl, r3
 800293a:	4693      	mov	fp, r2
 800293c:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8002940:	e031      	b.n	80029a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	8a5b      	ldrh	r3, [r3, #18]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d10e      	bne.n	8002968 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800294a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	b202      	sxth	r2, r0
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295a:	b21b      	sxth	r3, r3
 800295c:	17da      	asrs	r2, r3, #31
 800295e:	4698      	mov	r8, r3
 8002960:	4691      	mov	r9, r2
 8002962:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8002966:	e01e      	b.n	80029a6 <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	8a5b      	ldrh	r3, [r3, #18]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10e      	bne.n	800298e <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8002970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	b242      	sxtb	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	f993 3000 	ldrsb.w	r3, [r3]
 8002980:	b25b      	sxtb	r3, r3
 8002982:	17da      	asrs	r2, r3, #31
 8002984:	461c      	mov	r4, r3
 8002986:	4615      	mov	r5, r2
 8002988:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 800298c:	e00b      	b.n	80029a6 <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <pb_dec_varint+0x210>
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	e000      	b.n	800299e <pb_dec_varint+0x212>
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <pb_dec_varint+0x250>)
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	60d3      	str	r3, [r2, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	e014      	b.n	80029d0 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80029a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029ae:	4299      	cmp	r1, r3
 80029b0:	bf08      	it	eq
 80029b2:	4290      	cmpeq	r0, r2
 80029b4:	d00b      	beq.n	80029ce <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <pb_dec_varint+0x238>
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	e000      	b.n	80029c6 <pb_dec_varint+0x23a>
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <pb_dec_varint+0x254>)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	60d3      	str	r3, [r2, #12]
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <pb_dec_varint+0x244>

        return true;
 80029ce:	2301      	movs	r3, #1
    }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3750      	adds	r7, #80	@ 0x50
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029da:	bf00      	nop
 80029dc:	0800ab2c 	.word	0x0800ab2c
 80029e0:	0800ab40 	.word	0x0800ab40

080029e4 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe fd97 	bl	8001528 <pb_decode_varint32>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <pb_dec_bytes+0x26>
        return false;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e055      	b.n	8002ab6 <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d30b      	bcc.n	8002a2a <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <pb_dec_bytes+0x3c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	e000      	b.n	8002a22 <pb_dec_bytes+0x3e>
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <pb_dec_bytes+0xdc>)
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	60d3      	str	r3, [r2, #12]
 8002a26:	2300      	movs	r3, #0
 8002a28:	e045      	b.n	8002ab6 <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d20b      	bcs.n	8002a50 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <pb_dec_bytes+0x62>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	e000      	b.n	8002a48 <pb_dec_bytes+0x64>
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <pb_dec_bytes+0xe0>)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	60d3      	str	r3, [r2, #12]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e032      	b.n	8002ab6 <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7d9b      	ldrb	r3, [r3, #22]
 8002a54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a58:	2b80      	cmp	r3, #128	@ 0x80
 8002a5a:	d10b      	bne.n	8002a74 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <pb_dec_bytes+0x86>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	e000      	b.n	8002a6c <pb_dec_bytes+0x88>
 8002a6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <pb_dec_bytes+0xe4>)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60d3      	str	r3, [r2, #12]
 8002a70:	2300      	movs	r3, #0
 8002a72:	e020      	b.n	8002ab6 <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	8a5b      	ldrh	r3, [r3, #18]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d90b      	bls.n	8002a98 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <pb_dec_bytes+0xaa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	e000      	b.n	8002a90 <pb_dec_bytes+0xac>
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <pb_dec_bytes+0xdc>)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	60d3      	str	r3, [r2, #12]
 8002a94:	2300      	movs	r3, #0
 8002a96:	e00e      	b.n	8002ab6 <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe fbc0 	bl	8001234 <pb_read>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	0800ab54 	.word	0x0800ab54
 8002ac4:	0800ab64 	.word	0x0800ab64
 8002ac8:	0800aaac 	.word	0x0800aaac

08002acc <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fd20 	bl	8001528 <pb_decode_varint32>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <pb_dec_string+0x2c>
        return false;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e05a      	b.n	8002bae <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d10b      	bne.n	8002b18 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <pb_dec_string+0x42>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	e000      	b.n	8002b10 <pb_dec_string+0x44>
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <pb_dec_string+0xec>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	2300      	movs	r3, #0
 8002b16:	e04a      	b.n	8002bae <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20b      	bcs.n	8002b3e <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <pb_dec_string+0x68>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	e000      	b.n	8002b36 <pb_dec_string+0x6a>
 8002b34:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <pb_dec_string+0xec>)
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	60d3      	str	r3, [r2, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e037      	b.n	8002bae <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	7d9b      	ldrb	r3, [r3, #22]
 8002b42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b46:	2b80      	cmp	r3, #128	@ 0x80
 8002b48:	d10b      	bne.n	8002b62 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <pb_dec_string+0x8c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	e000      	b.n	8002b5a <pb_dec_string+0x8e>
 8002b58:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <pb_dec_string+0xf0>)
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	60d3      	str	r3, [r2, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e025      	b.n	8002bae <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	8a5b      	ldrh	r3, [r3, #18]
 8002b66:	461a      	mov	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d90b      	bls.n	8002b86 <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <pb_dec_string+0xb0>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	e000      	b.n	8002b7e <pb_dec_string+0xb2>
 8002b7c:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <pb_dec_string+0xf4>)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	60d3      	str	r3, [r2, #12]
 8002b82:	2300      	movs	r3, #0
 8002b84:	e013      	b.n	8002bae <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fb4c 	bl	8001234 <pb_read>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <pb_dec_string+0xe0>
        return false;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	0800ab64 	.word	0x0800ab64
 8002bbc:	0800aaac 	.word	0x0800aaac
 8002bc0:	0800ab74 	.word	0x0800ab74

08002bc4 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
    bool status = true;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe fe2d 	bl	8001840 <pb_make_string_substream>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <pb_dec_submessage+0x32>
        return false;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e069      	b.n	8002cca <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <pb_dec_submessage+0x48>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	e000      	b.n	8002c0e <pb_dec_submessage+0x4a>
 8002c0c:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <pb_dec_submessage+0x110>)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	60d3      	str	r3, [r2, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	e059      	b.n	8002cca <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7d9b      	ldrb	r3, [r3, #22]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d11c      	bne.n	8002c5c <pb_dec_submessage+0x98>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d018      	beq.n	8002c5c <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	3b08      	subs	r3, #8
 8002c30:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	3204      	adds	r2, #4
 8002c42:	f107 000c 	add.w	r0, r7, #12
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	4798      	blx	r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8002c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <pb_dec_submessage+0xe6>
 8002c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01b      	beq.n	8002caa <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	7d9b      	ldrb	r3, [r3, #22]
 8002c7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7d9b      	ldrb	r3, [r3, #22]
 8002c86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d001      	beq.n	8002c92 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	f107 000c 	add.w	r0, r7, #12
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f7ff fafa 	bl	8002298 <pb_decode_inner>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7fe fdff 	bl	80018b4 <pb_close_string_substream>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <pb_dec_submessage+0x102>
        return false;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e001      	b.n	8002cca <pb_dec_submessage+0x106>

    return status;
 8002cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3728      	adds	r7, #40	@ 0x28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	0800ab84 	.word	0x0800ab84

08002cd8 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe fc1d 	bl	8001528 <pb_decode_varint32>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f083 0301 	eor.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <pb_dec_fixed_length_bytes+0x26>
        return false;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e037      	b.n	8002d6e <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d04:	d30b      	bcc.n	8002d1e <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <pb_dec_fixed_length_bytes+0x3c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	e000      	b.n	8002d16 <pb_dec_fixed_length_bytes+0x3e>
 8002d14:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <pb_dec_fixed_length_bytes+0xa0>)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	60d3      	str	r3, [r2, #12]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e027      	b.n	8002d6e <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	69d8      	ldr	r0, [r3, #28]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	8a5b      	ldrh	r3, [r3, #18]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f007 f82d 	bl	8009d8e <memset>
        return true;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e01a      	b.n	8002d6e <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	8a5b      	ldrh	r3, [r3, #18]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d00b      	beq.n	8002d5c <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <pb_dec_fixed_length_bytes+0x7a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	e000      	b.n	8002d54 <pb_dec_fixed_length_bytes+0x7c>
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <pb_dec_fixed_length_bytes+0xa4>)
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e008      	b.n	8002d6e <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	8a5b      	ldrh	r3, [r3, #18]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe fa64 	bl	8001234 <pb_read>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	0800ab54 	.word	0x0800ab54
 8002d7c:	0800aba0 	.word	0x0800aba0

08002d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_MspInit+0x30>)
 8002d88:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d8c:	4a08      	ldr	r2, [pc, #32]	@ (8002db0 <HAL_MspInit+0x30>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_MspInit+0x30>)
 8002d98:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	58024400 	.word	0x58024400

08002db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0ba      	sub	sp, #232	@ 0xe8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	22c0      	movs	r2, #192	@ 0xc0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f006 ffda 	bl	8009d8e <memset>
  if(huart->Instance==USART3)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_UART_MspInit+0xd8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d14e      	bne.n	8002e82 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002de4:	f04f 0202 	mov.w	r2, #2
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 fb82 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002e06:	f7fd ff41 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e10:	4a1f      	ldr	r2, [pc, #124]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e16:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e2e:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_UART_MspInit+0xdc>)
 8002e3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e60:	2307      	movs	r3, #7
 8002e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4809      	ldr	r0, [pc, #36]	@ (8002e94 <HAL_UART_MspInit+0xe0>)
 8002e6e:	f001 f967 	bl	8004140 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2027      	movs	r0, #39	@ 0x27
 8002e78:	f000 fb51 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e7c:	2027      	movs	r0, #39	@ 0x27
 8002e7e:	f000 fb68 	bl	8003552 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e82:	bf00      	nop
 8002e84:	37e8      	adds	r7, #232	@ 0xe8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40004800 	.word	0x40004800
 8002e90:	58024400 	.word	0x58024400
 8002e94:	58020c00 	.word	0x58020c00

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <NMI_Handler+0x4>

08002ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <MemManage_Handler+0x4>

08002eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eee:	f000 f9f7 	bl	80032e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <USART3_IRQHandler+0x10>)
 8002efe:	f004 fa0b 	bl	8007318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2400049c 	.word	0x2400049c

08002f0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e00a      	b.n	8002f34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f1e:	f3af 8000 	nop.w
 8002f22:	4601      	mov	r1, r0
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	60ba      	str	r2, [r7, #8]
 8002f2a:	b2ca      	uxtb	r2, r1
 8002f2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3301      	adds	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	dbf0      	blt.n	8002f1e <_read+0x12>
  }

  return len;
 8002f3c:	687b      	ldr	r3, [r7, #4]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e009      	b.n	8002f6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	60ba      	str	r2, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fc3b 	bl	80007dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf1      	blt.n	8002f58 <_write+0x12>
  }
  return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_close>:

int _close(int file)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fa6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <_isatty>:

int _isatty(int file)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fbe:	2301      	movs	r3, #1
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <_sbrk+0x5c>)
 8002ff2:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <_sbrk+0x60>)
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <_sbrk+0x64>)
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <_sbrk+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003018:	f006 ff08 	bl	8009e2c <__errno>
 800301c:	4603      	mov	r3, r0
 800301e:	220c      	movs	r2, #12
 8003020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e009      	b.n	800303c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003028:	4b08      	ldr	r3, [pc, #32]	@ (800304c <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	4a05      	ldr	r2, [pc, #20]	@ (800304c <_sbrk+0x64>)
 8003038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	24100000 	.word	0x24100000
 8003048:	00000400 	.word	0x00000400
 800304c:	24000530 	.word	0x24000530
 8003050:	24000688 	.word	0x24000688

08003054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003058:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <SystemInit+0x100>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	4a3d      	ldr	r2, [pc, #244]	@ (8003154 <SystemInit+0x100>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <SystemInit+0x104>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	2b02      	cmp	r3, #2
 8003072:	d807      	bhi.n	8003084 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003074:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <SystemInit+0x104>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 030f 	bic.w	r3, r3, #15
 800307c:	4a36      	ldr	r2, [pc, #216]	@ (8003158 <SystemInit+0x104>)
 800307e:	f043 0303 	orr.w	r3, r3, #3
 8003082:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003084:	4b35      	ldr	r3, [pc, #212]	@ (800315c <SystemInit+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	@ (800315c <SystemInit+0x108>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003090:	4b32      	ldr	r3, [pc, #200]	@ (800315c <SystemInit+0x108>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003096:	4b31      	ldr	r3, [pc, #196]	@ (800315c <SystemInit+0x108>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4930      	ldr	r1, [pc, #192]	@ (800315c <SystemInit+0x108>)
 800309c:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <SystemInit+0x10c>)
 800309e:	4013      	ands	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <SystemInit+0x104>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003158 <SystemInit+0x104>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 030f 	bic.w	r3, r3, #15
 80030b6:	4a28      	ldr	r2, [pc, #160]	@ (8003158 <SystemInit+0x104>)
 80030b8:	f043 0303 	orr.w	r3, r3, #3
 80030bc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80030be:	4b27      	ldr	r3, [pc, #156]	@ (800315c <SystemInit+0x108>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80030c4:	4b25      	ldr	r3, [pc, #148]	@ (800315c <SystemInit+0x108>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80030ca:	4b24      	ldr	r3, [pc, #144]	@ (800315c <SystemInit+0x108>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030d0:	4b22      	ldr	r3, [pc, #136]	@ (800315c <SystemInit+0x108>)
 80030d2:	4a24      	ldr	r2, [pc, #144]	@ (8003164 <SystemInit+0x110>)
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030d6:	4b21      	ldr	r3, [pc, #132]	@ (800315c <SystemInit+0x108>)
 80030d8:	4a23      	ldr	r2, [pc, #140]	@ (8003168 <SystemInit+0x114>)
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	@ (800315c <SystemInit+0x108>)
 80030de:	4a23      	ldr	r2, [pc, #140]	@ (800316c <SystemInit+0x118>)
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <SystemInit+0x108>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030e8:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <SystemInit+0x108>)
 80030ea:	4a20      	ldr	r2, [pc, #128]	@ (800316c <SystemInit+0x118>)
 80030ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030ee:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <SystemInit+0x108>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <SystemInit+0x108>)
 80030f6:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <SystemInit+0x118>)
 80030f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <SystemInit+0x108>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003100:	4b16      	ldr	r3, [pc, #88]	@ (800315c <SystemInit+0x108>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a15      	ldr	r2, [pc, #84]	@ (800315c <SystemInit+0x108>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800310c:	4b13      	ldr	r3, [pc, #76]	@ (800315c <SystemInit+0x108>)
 800310e:	2200      	movs	r2, #0
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003112:	4b12      	ldr	r3, [pc, #72]	@ (800315c <SystemInit+0x108>)
 8003114:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003120:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <SystemInit+0x108>)
 8003122:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003126:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <SystemInit+0x108>)
 8003128:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800312c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003130:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <SystemInit+0x11c>)
 8003132:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003136:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <SystemInit+0x108>)
 800313a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <SystemInit+0x108>)
 8003140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003144:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	52002000 	.word	0x52002000
 800315c:	58024400 	.word	0x58024400
 8003160:	eaf6ed7f 	.word	0xeaf6ed7f
 8003164:	02020200 	.word	0x02020200
 8003168:	01ff0000 	.word	0x01ff0000
 800316c:	01010280 	.word	0x01010280
 8003170:	52004000 	.word	0x52004000

08003174 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <ExitRun0Mode+0x2c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <ExitRun0Mode+0x2c>)
 800317e:	f023 0302 	bic.w	r3, r3, #2
 8003182:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003184:	bf00      	nop
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <ExitRun0Mode+0x2c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f9      	beq.n	8003186 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	58024800 	.word	0x58024800

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80031e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80031a8:	f7ff ffe4 	bl	8003174 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031ac:	f7ff ff52 	bl	8003054 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b0:	480c      	ldr	r0, [pc, #48]	@ (80031e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031b2:	490d      	ldr	r1, [pc, #52]	@ (80031e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031b4:	4a0d      	ldr	r2, [pc, #52]	@ (80031ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c8:	4c0a      	ldr	r4, [pc, #40]	@ (80031f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f006 fe2f 	bl	8009e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031da:	f7fd fba1 	bl	8000920 <main>
  bx  lr
 80031de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031e0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80031e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031e8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80031ec:	0800ac64 	.word	0x0800ac64
  ldr r2, =_sbss
 80031f0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80031f4:	24000684 	.word	0x24000684

080031f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC_IRQHandler>
	...

080031fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003202:	2003      	movs	r0, #3
 8003204:	f000 f980 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003208:	f001 ffa6 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_Init+0x68>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	4913      	ldr	r1, [pc, #76]	@ (8003268 <HAL_Init+0x6c>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
 8003224:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <HAL_Init+0x68>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <HAL_Init+0x6c>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	4a0b      	ldr	r2, [pc, #44]	@ (800326c <HAL_Init+0x70>)
 800323e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003240:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <HAL_Init+0x74>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003246:	2000      	movs	r0, #0
 8003248:	f000 f814 	bl	8003274 <HAL_InitTick>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e002      	b.n	800325c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003256:	f7ff fd93 	bl	8002d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	58024400 	.word	0x58024400
 8003268:	0800abe8 	.word	0x0800abe8
 800326c:	24000004 	.word	0x24000004
 8003270:	24000000 	.word	0x24000000

08003274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800327c:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <HAL_InitTick+0x60>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e021      	b.n	80032cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003288:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <HAL_InitTick+0x64>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_InitTick+0x60>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003296:	fbb3 f3f1 	udiv	r3, r3, r1
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f965 	bl	800356e <HAL_SYSTICK_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00e      	b.n	80032cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d80a      	bhi.n	80032ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b4:	2200      	movs	r2, #0
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f000 f92f 	bl	800351e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c0:	4a06      	ldr	r2, [pc, #24]	@ (80032dc <HAL_InitTick+0x68>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2400000c 	.word	0x2400000c
 80032d8:	24000000 	.word	0x24000000
 80032dc:	24000008 	.word	0x24000008

080032e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_IncTick+0x20>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_IncTick+0x24>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_IncTick+0x24>)
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2400000c 	.word	0x2400000c
 8003304:	24000534 	.word	0x24000534

08003308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b03      	ldr	r3, [pc, #12]	@ (800331c <HAL_GetTick+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	24000534 	.word	0x24000534

08003320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff ffee 	bl	8003308 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d005      	beq.n	8003346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_Delay+0x44>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003346:	bf00      	nop
 8003348:	f7ff ffde 	bl	8003308 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d8f7      	bhi.n	8003348 <HAL_Delay+0x28>
  {
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2400000c 	.word	0x2400000c

08003368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x40>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003384:	4013      	ands	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003390:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	4313      	orrs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003396:	4a04      	ldr	r2, [pc, #16]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60d3      	str	r3, [r2, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00
 80033ac:	05fa0000 	.word	0x05fa0000

080033b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b4:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <__NVIC_GetPriorityGrouping+0x18>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0307 	and.w	r3, r3, #7
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db0b      	blt.n	80033f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4907      	ldr	r1, [pc, #28]	@ (8003404 <__NVIC_EnableIRQ+0x38>)
 80033e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	@ (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	@ (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f7ff ff8e 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff29 	bl	8003368 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800352c:	f7ff ff40 	bl	80033b0 <__NVIC_GetPriorityGrouping>
 8003530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f7ff ff90 	bl	800345c <NVIC_EncodePriority>
 800353c:	4602      	mov	r2, r0
 800353e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff5f 	bl	8003408 <__NVIC_SetPriority>
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff33 	bl	80033cc <__NVIC_EnableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ffa4 	bl	80034c4 <SysTick_Config>
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800358c:	f3bf 8f5f 	dmb	sy
}
 8003590:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003592:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <HAL_MPU_Disable+0x28>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	4a06      	ldr	r2, [pc, #24]	@ (80035b0 <HAL_MPU_Disable+0x28>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_MPU_Disable+0x2c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	e000ed90 	.word	0xe000ed90

080035b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80035c0:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <HAL_MPU_Enable+0x38>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_MPU_Enable+0x3c>)
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_MPU_Enable+0x3c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035d6:	f3bf 8f4f 	dsb	sy
}
 80035da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035dc:	f3bf 8f6f 	isb	sy
}
 80035e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000ed90 	.word	0xe000ed90
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	785a      	ldrb	r2, [r3, #1]
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_MPU_ConfigRegion+0x7c>)
 8003606:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003608:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_MPU_ConfigRegion+0x7c>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <HAL_MPU_ConfigRegion+0x7c>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003614:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <HAL_MPU_ConfigRegion+0x7c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7b1b      	ldrb	r3, [r3, #12]
 8003620:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7adb      	ldrb	r3, [r3, #11]
 8003626:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7a9b      	ldrb	r3, [r3, #10]
 800362e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7b5b      	ldrb	r3, [r3, #13]
 8003636:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7b9b      	ldrb	r3, [r3, #14]
 800363e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7bdb      	ldrb	r3, [r3, #15]
 8003646:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7a5b      	ldrb	r3, [r3, #9]
 800364e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7a1b      	ldrb	r3, [r3, #8]
 8003656:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003658:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003662:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003664:	6113      	str	r3, [r2, #16]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed90 	.word	0xe000ed90

08003678 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fe42 	bl	8003308 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e2dc      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d008      	beq.n	80036ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	@ 0x80
 80036a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e2cd      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a76      	ldr	r2, [pc, #472]	@ (800388c <HAL_DMA_Abort+0x214>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04a      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a74      	ldr	r2, [pc, #464]	@ (8003890 <HAL_DMA_Abort+0x218>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d045      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a73      	ldr	r2, [pc, #460]	@ (8003894 <HAL_DMA_Abort+0x21c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a71      	ldr	r2, [pc, #452]	@ (8003898 <HAL_DMA_Abort+0x220>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d03b      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a70      	ldr	r2, [pc, #448]	@ (800389c <HAL_DMA_Abort+0x224>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d036      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	@ (80038a0 <HAL_DMA_Abort+0x228>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6d      	ldr	r2, [pc, #436]	@ (80038a4 <HAL_DMA_Abort+0x22c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d02c      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	@ (80038a8 <HAL_DMA_Abort+0x230>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d027      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a6a      	ldr	r2, [pc, #424]	@ (80038ac <HAL_DMA_Abort+0x234>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a68      	ldr	r2, [pc, #416]	@ (80038b0 <HAL_DMA_Abort+0x238>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01d      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a67      	ldr	r2, [pc, #412]	@ (80038b4 <HAL_DMA_Abort+0x23c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a65      	ldr	r2, [pc, #404]	@ (80038b8 <HAL_DMA_Abort+0x240>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a64      	ldr	r2, [pc, #400]	@ (80038bc <HAL_DMA_Abort+0x244>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a62      	ldr	r2, [pc, #392]	@ (80038c0 <HAL_DMA_Abort+0x248>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a61      	ldr	r2, [pc, #388]	@ (80038c4 <HAL_DMA_Abort+0x24c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_DMA_Abort+0xd6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5f      	ldr	r2, [pc, #380]	@ (80038c8 <HAL_DMA_Abort+0x250>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Abort+0xda>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_DMA_Abort+0xdc>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 021e 	bic.w	r2, r2, #30
 8003766:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003776:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e00a      	b.n	8003796 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3c      	ldr	r2, [pc, #240]	@ (800388c <HAL_DMA_Abort+0x214>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d072      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003890 <HAL_DMA_Abort+0x218>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d06d      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a39      	ldr	r2, [pc, #228]	@ (8003894 <HAL_DMA_Abort+0x21c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d068      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a37      	ldr	r2, [pc, #220]	@ (8003898 <HAL_DMA_Abort+0x220>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d063      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a36      	ldr	r2, [pc, #216]	@ (800389c <HAL_DMA_Abort+0x224>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d05e      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a34      	ldr	r2, [pc, #208]	@ (80038a0 <HAL_DMA_Abort+0x228>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d059      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <HAL_DMA_Abort+0x22c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d054      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a31      	ldr	r2, [pc, #196]	@ (80038a8 <HAL_DMA_Abort+0x230>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04f      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a30      	ldr	r2, [pc, #192]	@ (80038ac <HAL_DMA_Abort+0x234>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2e      	ldr	r2, [pc, #184]	@ (80038b0 <HAL_DMA_Abort+0x238>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_DMA_Abort+0x23c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2b      	ldr	r2, [pc, #172]	@ (80038b8 <HAL_DMA_Abort+0x240>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <HAL_DMA_Abort+0x244>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <HAL_DMA_Abort+0x248>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <HAL_DMA_Abort+0x24c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a25      	ldr	r2, [pc, #148]	@ (80038c8 <HAL_DMA_Abort+0x250>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a24      	ldr	r2, [pc, #144]	@ (80038cc <HAL_DMA_Abort+0x254>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a22      	ldr	r2, [pc, #136]	@ (80038d0 <HAL_DMA_Abort+0x258>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a21      	ldr	r2, [pc, #132]	@ (80038d4 <HAL_DMA_Abort+0x25c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <HAL_DMA_Abort+0x260>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1e      	ldr	r2, [pc, #120]	@ (80038dc <HAL_DMA_Abort+0x264>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <HAL_DMA_Abort+0x268>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <HAL_DMA_Abort+0x26c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Abort+0x20e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_DMA_Abort+0x270>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d132      	bne.n	80038ec <HAL_DMA_Abort+0x274>
 8003886:	2301      	movs	r3, #1
 8003888:	e031      	b.n	80038ee <HAL_DMA_Abort+0x276>
 800388a:	bf00      	nop
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	58025408 	.word	0x58025408
 80038d0:	5802541c 	.word	0x5802541c
 80038d4:	58025430 	.word	0x58025430
 80038d8:	58025444 	.word	0x58025444
 80038dc:	58025458 	.word	0x58025458
 80038e0:	5802546c 	.word	0x5802546c
 80038e4:	58025480 	.word	0x58025480
 80038e8:	58025494 	.word	0x58025494
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003900:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6d      	ldr	r2, [pc, #436]	@ (8003abc <HAL_DMA_Abort+0x444>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac0 <HAL_DMA_Abort+0x448>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac4 <HAL_DMA_Abort+0x44c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	@ (8003ac8 <HAL_DMA_Abort+0x450>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a67      	ldr	r2, [pc, #412]	@ (8003acc <HAL_DMA_Abort+0x454>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a65      	ldr	r2, [pc, #404]	@ (8003ad0 <HAL_DMA_Abort+0x458>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a64      	ldr	r2, [pc, #400]	@ (8003ad4 <HAL_DMA_Abort+0x45c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a62      	ldr	r2, [pc, #392]	@ (8003ad8 <HAL_DMA_Abort+0x460>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a61      	ldr	r2, [pc, #388]	@ (8003adc <HAL_DMA_Abort+0x464>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5f      	ldr	r2, [pc, #380]	@ (8003ae0 <HAL_DMA_Abort+0x468>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ae4 <HAL_DMA_Abort+0x46c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae8 <HAL_DMA_Abort+0x470>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_DMA_Abort+0x474>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a59      	ldr	r2, [pc, #356]	@ (8003af0 <HAL_DMA_Abort+0x478>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a58      	ldr	r2, [pc, #352]	@ (8003af4 <HAL_DMA_Abort+0x47c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort+0x32a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a56      	ldr	r2, [pc, #344]	@ (8003af8 <HAL_DMA_Abort+0x480>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_Abort+0x33c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_DMA_Abort+0x34c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039c4:	e013      	b.n	80039ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c6:	f7ff fc9f 	bl	8003308 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d90c      	bls.n	80039ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e12d      	b.n	8003c4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2f      	ldr	r2, [pc, #188]	@ (8003abc <HAL_DMA_Abort+0x444>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d04a      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <HAL_DMA_Abort+0x448>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d045      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <HAL_DMA_Abort+0x44c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d040      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <HAL_DMA_Abort+0x450>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03b      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <HAL_DMA_Abort+0x454>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d036      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <HAL_DMA_Abort+0x458>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <HAL_DMA_Abort+0x45c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02c      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_DMA_Abort+0x460>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d027      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <HAL_DMA_Abort+0x464>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a21      	ldr	r2, [pc, #132]	@ (8003ae0 <HAL_DMA_Abort+0x468>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a20      	ldr	r2, [pc, #128]	@ (8003ae4 <HAL_DMA_Abort+0x46c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_DMA_Abort+0x470>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_DMA_Abort+0x474>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1b      	ldr	r2, [pc, #108]	@ (8003af0 <HAL_DMA_Abort+0x478>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003af4 <HAL_DMA_Abort+0x47c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort+0x422>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <HAL_DMA_Abort+0x480>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Abort+0x426>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_Abort+0x428>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02b      	beq.n	8003afc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	223f      	movs	r2, #63	@ 0x3f
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	e02a      	b.n	8003b12 <HAL_DMA_Abort+0x49a>
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4f      	ldr	r2, [pc, #316]	@ (8003c54 <HAL_DMA_Abort+0x5dc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d072      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	@ (8003c58 <HAL_DMA_Abort+0x5e0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d06d      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c5c <HAL_DMA_Abort+0x5e4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d068      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	@ (8003c60 <HAL_DMA_Abort+0x5e8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d063      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a49      	ldr	r2, [pc, #292]	@ (8003c64 <HAL_DMA_Abort+0x5ec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d05e      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <HAL_DMA_Abort+0x5f0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d059      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a46      	ldr	r2, [pc, #280]	@ (8003c6c <HAL_DMA_Abort+0x5f4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d054      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a44      	ldr	r2, [pc, #272]	@ (8003c70 <HAL_DMA_Abort+0x5f8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04f      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a43      	ldr	r2, [pc, #268]	@ (8003c74 <HAL_DMA_Abort+0x5fc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04a      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a41      	ldr	r2, [pc, #260]	@ (8003c78 <HAL_DMA_Abort+0x600>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d045      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <HAL_DMA_Abort+0x604>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d040      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3e      	ldr	r2, [pc, #248]	@ (8003c80 <HAL_DMA_Abort+0x608>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d03b      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c84 <HAL_DMA_Abort+0x60c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_DMA_Abort+0x610>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d031      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8003c8c <HAL_DMA_Abort+0x614>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d02c      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a38      	ldr	r2, [pc, #224]	@ (8003c90 <HAL_DMA_Abort+0x618>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d027      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a37      	ldr	r2, [pc, #220]	@ (8003c94 <HAL_DMA_Abort+0x61c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	@ (8003c98 <HAL_DMA_Abort+0x620>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a34      	ldr	r2, [pc, #208]	@ (8003c9c <HAL_DMA_Abort+0x624>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a32      	ldr	r2, [pc, #200]	@ (8003ca0 <HAL_DMA_Abort+0x628>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a31      	ldr	r2, [pc, #196]	@ (8003ca4 <HAL_DMA_Abort+0x62c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca8 <HAL_DMA_Abort+0x630>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8003cac <HAL_DMA_Abort+0x634>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Abort+0x58a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb0 <HAL_DMA_Abort+0x638>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Abort+0x58e>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_DMA_Abort+0x590>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e237      	b.n	8004136 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2280      	movs	r2, #128	@ 0x80
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e22c      	b.n	8004136 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e54 <HAL_DMA_Abort_IT+0x1a0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5b      	ldr	r2, [pc, #364]	@ (8003e58 <HAL_DMA_Abort_IT+0x1a4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a59      	ldr	r2, [pc, #356]	@ (8003e5c <HAL_DMA_Abort_IT+0x1a8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a58      	ldr	r2, [pc, #352]	@ (8003e60 <HAL_DMA_Abort_IT+0x1ac>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a56      	ldr	r2, [pc, #344]	@ (8003e64 <HAL_DMA_Abort_IT+0x1b0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a55      	ldr	r2, [pc, #340]	@ (8003e68 <HAL_DMA_Abort_IT+0x1b4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	@ (8003e6c <HAL_DMA_Abort_IT+0x1b8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a52      	ldr	r2, [pc, #328]	@ (8003e70 <HAL_DMA_Abort_IT+0x1bc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a50      	ldr	r2, [pc, #320]	@ (8003e74 <HAL_DMA_Abort_IT+0x1c0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e78 <HAL_DMA_Abort_IT+0x1c4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a4d      	ldr	r2, [pc, #308]	@ (8003e7c <HAL_DMA_Abort_IT+0x1c8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e80 <HAL_DMA_Abort_IT+0x1cc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4a      	ldr	r2, [pc, #296]	@ (8003e84 <HAL_DMA_Abort_IT+0x1d0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a49      	ldr	r2, [pc, #292]	@ (8003e88 <HAL_DMA_Abort_IT+0x1d4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a47      	ldr	r2, [pc, #284]	@ (8003e8c <HAL_DMA_Abort_IT+0x1d8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a46      	ldr	r2, [pc, #280]	@ (8003e90 <HAL_DMA_Abort_IT+0x1dc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Abort_IT+0xcc>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_DMA_Abort_IT+0xce>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8086 	beq.w	8003e94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	@ (8003e54 <HAL_DMA_Abort_IT+0x1a0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e58 <HAL_DMA_Abort_IT+0x1a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e5c <HAL_DMA_Abort_IT+0x1a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e60 <HAL_DMA_Abort_IT+0x1ac>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	@ (8003e64 <HAL_DMA_Abort_IT+0x1b0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a28      	ldr	r2, [pc, #160]	@ (8003e68 <HAL_DMA_Abort_IT+0x1b4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a26      	ldr	r2, [pc, #152]	@ (8003e6c <HAL_DMA_Abort_IT+0x1b8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a25      	ldr	r2, [pc, #148]	@ (8003e70 <HAL_DMA_Abort_IT+0x1bc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a23      	ldr	r2, [pc, #140]	@ (8003e74 <HAL_DMA_Abort_IT+0x1c0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <HAL_DMA_Abort_IT+0x1c4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a20      	ldr	r2, [pc, #128]	@ (8003e7c <HAL_DMA_Abort_IT+0x1c8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <HAL_DMA_Abort_IT+0x1cc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <HAL_DMA_Abort_IT+0x1d0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <HAL_DMA_Abort_IT+0x1d4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <HAL_DMA_Abort_IT+0x1d8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x17c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	@ (8003e90 <HAL_DMA_Abort_IT+0x1dc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_Abort_IT+0x18e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e178      	b.n	8004134 <HAL_DMA_Abort_IT+0x480>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e16f      	b.n	8004134 <HAL_DMA_Abort_IT+0x480>
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 020e 	bic.w	r2, r2, #14
 8003ea2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	@ (800405c <HAL_DMA_Abort_IT+0x3a8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8004060 <HAL_DMA_Abort_IT+0x3ac>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a69      	ldr	r2, [pc, #420]	@ (8004064 <HAL_DMA_Abort_IT+0x3b0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a68      	ldr	r2, [pc, #416]	@ (8004068 <HAL_DMA_Abort_IT+0x3b4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a66      	ldr	r2, [pc, #408]	@ (800406c <HAL_DMA_Abort_IT+0x3b8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_DMA_Abort_IT+0x3bc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a63      	ldr	r2, [pc, #396]	@ (8004074 <HAL_DMA_Abort_IT+0x3c0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a62      	ldr	r2, [pc, #392]	@ (8004078 <HAL_DMA_Abort_IT+0x3c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a60      	ldr	r2, [pc, #384]	@ (800407c <HAL_DMA_Abort_IT+0x3c8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5f      	ldr	r2, [pc, #380]	@ (8004080 <HAL_DMA_Abort_IT+0x3cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8004084 <HAL_DMA_Abort_IT+0x3d0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5c      	ldr	r2, [pc, #368]	@ (8004088 <HAL_DMA_Abort_IT+0x3d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5a      	ldr	r2, [pc, #360]	@ (800408c <HAL_DMA_Abort_IT+0x3d8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a59      	ldr	r2, [pc, #356]	@ (8004090 <HAL_DMA_Abort_IT+0x3dc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a57      	ldr	r2, [pc, #348]	@ (8004094 <HAL_DMA_Abort_IT+0x3e0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x290>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a56      	ldr	r2, [pc, #344]	@ (8004098 <HAL_DMA_Abort_IT+0x3e4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_DMA_Abort_IT+0x2a2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_DMA_Abort_IT+0x2b2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <HAL_DMA_Abort_IT+0x3a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d072      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3a      	ldr	r2, [pc, #232]	@ (8004060 <HAL_DMA_Abort_IT+0x3ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d06d      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	@ (8004064 <HAL_DMA_Abort_IT+0x3b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d068      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a37      	ldr	r2, [pc, #220]	@ (8004068 <HAL_DMA_Abort_IT+0x3b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d063      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a36      	ldr	r2, [pc, #216]	@ (800406c <HAL_DMA_Abort_IT+0x3b8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d05e      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a34      	ldr	r2, [pc, #208]	@ (8004070 <HAL_DMA_Abort_IT+0x3bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d059      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a33      	ldr	r2, [pc, #204]	@ (8004074 <HAL_DMA_Abort_IT+0x3c0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d054      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a31      	ldr	r2, [pc, #196]	@ (8004078 <HAL_DMA_Abort_IT+0x3c4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d04f      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a30      	ldr	r2, [pc, #192]	@ (800407c <HAL_DMA_Abort_IT+0x3c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d04a      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8004080 <HAL_DMA_Abort_IT+0x3cc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d045      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	@ (8004084 <HAL_DMA_Abort_IT+0x3d0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d040      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004088 <HAL_DMA_Abort_IT+0x3d4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d03b      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800408c <HAL_DMA_Abort_IT+0x3d8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d036      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a28      	ldr	r2, [pc, #160]	@ (8004090 <HAL_DMA_Abort_IT+0x3dc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d031      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a27      	ldr	r2, [pc, #156]	@ (8004094 <HAL_DMA_Abort_IT+0x3e0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d02c      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	@ (8004098 <HAL_DMA_Abort_IT+0x3e4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d027      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_DMA_Abort_IT+0x3e8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d022      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <HAL_DMA_Abort_IT+0x3ec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01d      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <HAL_DMA_Abort_IT+0x3f0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d018      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <HAL_DMA_Abort_IT+0x3f4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_DMA_Abort_IT+0x3f8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <HAL_DMA_Abort_IT+0x3fc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_DMA_Abort_IT+0x400>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_DMA_Abort_IT+0x3a2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <HAL_DMA_Abort_IT+0x404>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d132      	bne.n	80040bc <HAL_DMA_Abort_IT+0x408>
 8004056:	2301      	movs	r3, #1
 8004058:	e031      	b.n	80040be <HAL_DMA_Abort_IT+0x40a>
 800405a:	bf00      	nop
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	58025430 	.word	0x58025430
 80040a8:	58025444 	.word	0x58025444
 80040ac:	58025458 	.word	0x58025458
 80040b0:	5802546c 	.word	0x5802546c
 80040b4:	58025480 	.word	0x58025480
 80040b8:	58025494 	.word	0x58025494
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004108:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004112:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop

08004140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	@ 0x24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800414e:	4b89      	ldr	r3, [pc, #548]	@ (8004374 <HAL_GPIO_Init+0x234>)
 8004150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004152:	e194      	b.n	800447e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8186 	beq.w	8004478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d005      	beq.n	8004184 <HAL_GPIO_Init+0x44>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d130      	bne.n	80041e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ba:	2201      	movs	r2, #1
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0201 	and.w	r2, r3, #1
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d017      	beq.n	8004222 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d123      	bne.n	8004276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	220f      	movs	r2, #15
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	69b9      	ldr	r1, [r7, #24]
 8004272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	2203      	movs	r2, #3
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0203 	and.w	r2, r3, #3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80e0 	beq.w	8004478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <HAL_GPIO_Init+0x238>)
 80042ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042be:	4a2e      	ldr	r2, [pc, #184]	@ (8004378 <HAL_GPIO_Init+0x238>)
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80042c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004378 <HAL_GPIO_Init+0x238>)
 80042ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042d6:	4a29      	ldr	r2, [pc, #164]	@ (800437c <HAL_GPIO_Init+0x23c>)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	3302      	adds	r3, #2
 80042de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	220f      	movs	r2, #15
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <HAL_GPIO_Init+0x240>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d052      	beq.n	80043a8 <HAL_GPIO_Init+0x268>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <HAL_GPIO_Init+0x244>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_GPIO_Init+0x22e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1e      	ldr	r2, [pc, #120]	@ (8004388 <HAL_GPIO_Init+0x248>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02b      	beq.n	800436a <HAL_GPIO_Init+0x22a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_GPIO_Init+0x24c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d025      	beq.n	8004366 <HAL_GPIO_Init+0x226>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_GPIO_Init+0x250>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01f      	beq.n	8004362 <HAL_GPIO_Init+0x222>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <HAL_GPIO_Init+0x254>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d019      	beq.n	800435e <HAL_GPIO_Init+0x21e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <HAL_GPIO_Init+0x258>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_GPIO_Init+0x21a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a19      	ldr	r2, [pc, #100]	@ (800439c <HAL_GPIO_Init+0x25c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00d      	beq.n	8004356 <HAL_GPIO_Init+0x216>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <HAL_GPIO_Init+0x260>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <HAL_GPIO_Init+0x212>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a17      	ldr	r2, [pc, #92]	@ (80043a4 <HAL_GPIO_Init+0x264>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_GPIO_Init+0x20e>
 800434a:	2309      	movs	r3, #9
 800434c:	e02d      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 800434e:	230a      	movs	r3, #10
 8004350:	e02b      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 8004352:	2308      	movs	r3, #8
 8004354:	e029      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 8004356:	2307      	movs	r3, #7
 8004358:	e027      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 800435a:	2306      	movs	r3, #6
 800435c:	e025      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 800435e:	2305      	movs	r3, #5
 8004360:	e023      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 8004362:	2304      	movs	r3, #4
 8004364:	e021      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 8004366:	2303      	movs	r3, #3
 8004368:	e01f      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 800436a:	2302      	movs	r3, #2
 800436c:	e01d      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 800436e:	2301      	movs	r3, #1
 8004370:	e01b      	b.n	80043aa <HAL_GPIO_Init+0x26a>
 8004372:	bf00      	nop
 8004374:	58000080 	.word	0x58000080
 8004378:	58024400 	.word	0x58024400
 800437c:	58000400 	.word	0x58000400
 8004380:	58020000 	.word	0x58020000
 8004384:	58020400 	.word	0x58020400
 8004388:	58020800 	.word	0x58020800
 800438c:	58020c00 	.word	0x58020c00
 8004390:	58021000 	.word	0x58021000
 8004394:	58021400 	.word	0x58021400
 8004398:	58021800 	.word	0x58021800
 800439c:	58021c00 	.word	0x58021c00
 80043a0:	58022000 	.word	0x58022000
 80043a4:	58022400 	.word	0x58022400
 80043a8:	2300      	movs	r3, #0
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	f002 0203 	and.w	r2, r2, #3
 80043b0:	0092      	lsls	r2, r2, #2
 80043b2:	4093      	lsls	r3, r2
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ba:	4938      	ldr	r1, [pc, #224]	@ (800449c <HAL_GPIO_Init+0x35c>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	3302      	adds	r3, #2
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800441c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f47f ae63 	bne.w	8004154 <HAL_GPIO_Init+0x14>
  }
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	3724      	adds	r7, #36	@ 0x24
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	58000400 	.word	0x58000400

080044a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	4613      	mov	r3, r2
 80044ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044bc:	e003      	b.n	80044c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80044dc:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d00a      	beq.n	80044fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e040      	b.n	800457c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e03e      	b.n	800457c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004506:	491f      	ldr	r1, [pc, #124]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4313      	orrs	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800450e:	f7fe fefb 	bl	8003308 <HAL_GetTick>
 8004512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004514:	e009      	b.n	800452a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004516:	f7fe fef7 	bl	8003308 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004524:	d901      	bls.n	800452a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e028      	b.n	800457c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800452a:	4b16      	ldr	r3, [pc, #88]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004536:	d1ee      	bne.n	8004516 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b1e      	cmp	r3, #30
 800453c:	d008      	beq.n	8004550 <HAL_PWREx_ConfigSupply+0x7c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b2e      	cmp	r3, #46	@ 0x2e
 8004542:	d005      	beq.n	8004550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b1d      	cmp	r3, #29
 8004548:	d002      	beq.n	8004550 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b2d      	cmp	r3, #45	@ 0x2d
 800454e:	d114      	bne.n	800457a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004550:	f7fe feda 	bl	8003308 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004556:	e009      	b.n	800456c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004558:	f7fe fed6 	bl	8003308 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004566:	d901      	bls.n	800456c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_PWREx_ConfigSupply+0xb0>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004578:	d1ee      	bne.n	8004558 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	58024800 	.word	0x58024800

08004588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08c      	sub	sp, #48	@ 0x30
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f000 bc1f 	b.w	8004dda <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80b3 	beq.w	8004710 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b95      	ldr	r3, [pc, #596]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045b4:	4b92      	ldr	r3, [pc, #584]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d007      	beq.n	80045d0 <HAL_RCC_OscConfig+0x48>
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c2:	2b18      	cmp	r3, #24
 80045c4:	d112      	bne.n	80045ec <HAL_RCC_OscConfig+0x64>
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d10d      	bne.n	80045ec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	4b8b      	ldr	r3, [pc, #556]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8098 	beq.w	800470e <HAL_RCC_OscConfig+0x186>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 8093 	bne.w	800470e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e3f6      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x7c>
 80045f6:	4b82      	ldr	r3, [pc, #520]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a81      	ldr	r2, [pc, #516]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e058      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d112      	bne.n	8004632 <HAL_RCC_OscConfig+0xaa>
 800460c:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7b      	ldr	r2, [pc, #492]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b79      	ldr	r3, [pc, #484]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a78      	ldr	r2, [pc, #480]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800461e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b76      	ldr	r3, [pc, #472]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a75      	ldr	r2, [pc, #468]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800462a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e041      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800463a:	d112      	bne.n	8004662 <HAL_RCC_OscConfig+0xda>
 800463c:	4b70      	ldr	r3, [pc, #448]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6f      	ldr	r2, [pc, #444]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b6d      	ldr	r3, [pc, #436]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6c      	ldr	r2, [pc, #432]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800464e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b6a      	ldr	r3, [pc, #424]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a69      	ldr	r2, [pc, #420]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e029      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800466a:	d112      	bne.n	8004692 <HAL_RCC_OscConfig+0x10a>
 800466c:	4b64      	ldr	r3, [pc, #400]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a63      	ldr	r2, [pc, #396]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a60      	ldr	r2, [pc, #384]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800467e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b5e      	ldr	r3, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5d      	ldr	r2, [pc, #372]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800468a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e011      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
 8004692:	4b5b      	ldr	r3, [pc, #364]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5a      	ldr	r2, [pc, #360]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b58      	ldr	r3, [pc, #352]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b55      	ldr	r3, [pc, #340]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a54      	ldr	r2, [pc, #336]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d013      	beq.n	80046e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fe fe23 	bl	8003308 <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c6:	f7fe fe1f 	bl	8003308 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	@ 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e380      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046d8:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x13e>
 80046e4:	e014      	b.n	8004710 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fe fe0f 	bl	8003308 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ee:	f7fe fe0b 	bl	8003308 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	@ 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e36c      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004700:	4b3f      	ldr	r3, [pc, #252]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x166>
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 808c 	beq.w	8004836 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471e:	4b38      	ldr	r3, [pc, #224]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004726:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_RCC_OscConfig+0x1bc>
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	2b18      	cmp	r3, #24
 8004738:	d137      	bne.n	80047aa <HAL_RCC_OscConfig+0x222>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d132      	bne.n	80047aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004744:	4b2e      	ldr	r3, [pc, #184]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_OscConfig+0x1d4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e33e      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800475c:	4b28      	ldr	r3, [pc, #160]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 0219 	bic.w	r2, r3, #25
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4925      	ldr	r1, [pc, #148]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fe fdcb 	bl	8003308 <HAL_GetTick>
 8004772:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004776:	f7fe fdc7 	bl	8003308 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e328      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	4917      	ldr	r1, [pc, #92]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a8:	e045      	b.n	8004836 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047b2:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0219 	bic.w	r2, r3, #25
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4910      	ldr	r1, [pc, #64]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fe fda0 	bl	8003308 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fe fd9c 	bl	8003308 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e2fd      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	4901      	ldr	r1, [pc, #4]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
 80047fe:	e01a      	b.n	8004836 <HAL_RCC_OscConfig+0x2ae>
 8004800:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004804:	4b97      	ldr	r3, [pc, #604]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a96      	ldr	r2, [pc, #600]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fe fd7a 	bl	8003308 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004818:	f7fe fd76 	bl	8003308 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e2d7      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800482a:	4b8e      	ldr	r3, [pc, #568]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d06a      	beq.n	8004918 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004842:	4b88      	ldr	r3, [pc, #544]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800484a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800484c:	4b85      	ldr	r3, [pc, #532]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d007      	beq.n	8004868 <HAL_RCC_OscConfig+0x2e0>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b18      	cmp	r3, #24
 800485c:	d11b      	bne.n	8004896 <HAL_RCC_OscConfig+0x30e>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d116      	bne.n	8004896 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004868:	4b7e      	ldr	r3, [pc, #504]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_OscConfig+0x2f8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	2b80      	cmp	r3, #128	@ 0x80
 800487a:	d001      	beq.n	8004880 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e2ac      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004880:	4b78      	ldr	r3, [pc, #480]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	4975      	ldr	r1, [pc, #468]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004894:	e040      	b.n	8004918 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d023      	beq.n	80048e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800489e:	4b71      	ldr	r3, [pc, #452]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a70      	ldr	r2, [pc, #448]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fe fd2d 	bl	8003308 <HAL_GetTick>
 80048ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048b2:	f7fe fd29 	bl	8003308 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e28a      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048c4:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048d0:	4b64      	ldr	r3, [pc, #400]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	4961      	ldr	r1, [pc, #388]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
 80048e4:	e018      	b.n	8004918 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fe fd09 	bl	8003308 <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048fa:	f7fe fd05 	bl	8003308 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e266      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800490c:	4b55      	ldr	r3, [pc, #340]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d036      	beq.n	8004992 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d019      	beq.n	8004960 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004930:	4a4c      	ldr	r2, [pc, #304]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fe fce6 	bl	8003308 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7fe fce2 	bl	8003308 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e243      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004952:	4b44      	ldr	r3, [pc, #272]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x3b8>
 800495e:	e018      	b.n	8004992 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004960:	4b40      	ldr	r3, [pc, #256]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004964:	4a3f      	ldr	r2, [pc, #252]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fccc 	bl	8003308 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe fcc8 	bl	8003308 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e229      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004986:	4b37      	ldr	r3, [pc, #220]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d036      	beq.n	8004a0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d019      	beq.n	80049da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80049ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049b2:	f7fe fca9 	bl	8003308 <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ba:	f7fe fca5 	bl	8003308 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e206      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x432>
 80049d8:	e018      	b.n	8004a0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049da:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 80049e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049e6:	f7fe fc8f 	bl	8003308 <HAL_GetTick>
 80049ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ee:	f7fe fc8b 	bl	8003308 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1ec      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a00:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80af 	beq.w	8004b78 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a1a:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <HAL_RCC_OscConfig+0x4e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a12      	ldr	r2, [pc, #72]	@ (8004a68 <HAL_RCC_OscConfig+0x4e0>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a26:	f7fe fc6f 	bl	8003308 <HAL_GetTick>
 8004a2a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fe fc6b 	bl	8003308 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	@ 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1cc      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <HAL_RCC_OscConfig+0x4e0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4e4>
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	4a02      	ldr	r2, [pc, #8]	@ (8004a64 <HAL_RCC_OscConfig+0x4dc>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a60:	e05b      	b.n	8004b1a <HAL_RCC_OscConfig+0x592>
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	58024800 	.word	0x58024800
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d112      	bne.n	8004a9a <HAL_RCC_OscConfig+0x512>
 8004a74:	4b9d      	ldr	r3, [pc, #628]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	4a9c      	ldr	r2, [pc, #624]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a80:	4b9a      	ldr	r3, [pc, #616]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a84:	4a99      	ldr	r2, [pc, #612]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a8c:	4b97      	ldr	r3, [pc, #604]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a96      	ldr	r2, [pc, #600]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a98:	e03f      	b.n	8004b1a <HAL_RCC_OscConfig+0x592>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d112      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x540>
 8004aa2:	4b92      	ldr	r3, [pc, #584]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a91      	ldr	r2, [pc, #580]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	4b8f      	ldr	r3, [pc, #572]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a8e      	ldr	r2, [pc, #568]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	4b8c      	ldr	r3, [pc, #560]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	4a8b      	ldr	r2, [pc, #556]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac6:	e028      	b.n	8004b1a <HAL_RCC_OscConfig+0x592>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b85      	cmp	r3, #133	@ 0x85
 8004ace:	d112      	bne.n	8004af6 <HAL_RCC_OscConfig+0x56e>
 8004ad0:	4b86      	ldr	r3, [pc, #536]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	4a85      	ldr	r2, [pc, #532]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8004adc:	4b83      	ldr	r3, [pc, #524]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae0:	4a82      	ldr	r2, [pc, #520]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae8:	4b80      	ldr	r3, [pc, #512]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aec:	4a7f      	ldr	r2, [pc, #508]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004af4:	e011      	b.n	8004b1a <HAL_RCC_OscConfig+0x592>
 8004af6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	4a7c      	ldr	r2, [pc, #496]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b02:	4b7a      	ldr	r3, [pc, #488]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	4a79      	ldr	r2, [pc, #484]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0e:	4b77      	ldr	r3, [pc, #476]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	4a76      	ldr	r2, [pc, #472]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fe fbf1 	bl	8003308 <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fe fbed 	bl	8003308 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e14c      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b40:	4b6a      	ldr	r3, [pc, #424]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RCC_OscConfig+0x5a2>
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fe fbdb 	bl	8003308 <HAL_GetTick>
 8004b52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fe fbd7 	bl	8003308 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e136      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ee      	bne.n	8004b56 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 812b 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b82:	4b5a      	ldr	r3, [pc, #360]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b8a:	2b18      	cmp	r3, #24
 8004b8c:	f000 80bb 	beq.w	8004d06 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f040 8095 	bne.w	8004cc4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9a:	4b54      	ldr	r3, [pc, #336]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a53      	ldr	r2, [pc, #332]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fe fbaf 	bl	8003308 <HAL_GetTick>
 8004baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fe fbab 	bl	8003308 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e10c      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bcc:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bd0:	4b47      	ldr	r3, [pc, #284]	@ (8004cf0 <HAL_RCC_OscConfig+0x768>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	430a      	orrs	r2, r1
 8004be0:	4942      	ldr	r1, [pc, #264]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	628b      	str	r3, [r1, #40]	@ 0x28
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	025b      	lsls	r3, r3, #9
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c16:	4935      	ldr	r1, [pc, #212]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c1c:	4b33      	ldr	r3, [pc, #204]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	4a32      	ldr	r2, [pc, #200]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c28:	4b30      	ldr	r3, [pc, #192]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c2c:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c34:	00d2      	lsls	r2, r2, #3
 8004c36:	492d      	ldr	r1, [pc, #180]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	f023 020c 	bic.w	r2, r3, #12
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	4928      	ldr	r1, [pc, #160]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c4e:	4b27      	ldr	r3, [pc, #156]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	f023 0202 	bic.w	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	4924      	ldr	r1, [pc, #144]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c60:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	4a21      	ldr	r2, [pc, #132]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	4a1e      	ldr	r2, [pc, #120]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c78:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c90:	4b16      	ldr	r3, [pc, #88]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a15      	ldr	r2, [pc, #84]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fb34 	bl	8003308 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe fb30 	bl	8003308 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e091      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x71c>
 8004cc2:	e089      	b.n	8004dd8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <HAL_RCC_OscConfig+0x764>)
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fb1a 	bl	8003308 <HAL_GetTick>
 8004cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cd6:	e00f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fe fb16 	bl	8003308 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d908      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e077      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	fffffc0c 	.word	0xfffffc0c
 8004cf4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e9      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x750>
 8004d04:	e068      	b.n	8004dd8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d06:	4b37      	ldr	r3, [pc, #220]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d0c:	4b35      	ldr	r3, [pc, #212]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d031      	beq.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0203 	and.w	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d12a      	bne.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d122      	bne.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d11a      	bne.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	0a5b      	lsrs	r3, r3, #9
 8004d4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d111      	bne.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d108      	bne.n	8004d7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	0e1b      	lsrs	r3, r3, #24
 8004d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e02b      	b.n	8004dda <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d82:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d86:	08db      	lsrs	r3, r3, #3
 8004d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d8c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d01f      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d98:	4b12      	ldr	r3, [pc, #72]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004da4:	f7fe fab0 	bl	8003308 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004daa:	bf00      	nop
 8004dac:	f7fe faac 	bl	8003308 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d0f9      	beq.n	8004dac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004db8:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <HAL_RCC_OscConfig+0x860>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dc4:	00d2      	lsls	r2, r2, #3
 8004dc6:	4907      	ldr	r1, [pc, #28]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <HAL_RCC_OscConfig+0x85c>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	@ 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
 8004de8:	ffff0007 	.word	0xffff0007

08004dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e19c      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b8a      	ldr	r3, [pc, #552]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d910      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b87      	ldr	r3, [pc, #540]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4985      	ldr	r1, [pc, #532]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b83      	ldr	r3, [pc, #524]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e184      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	4b7b      	ldr	r3, [pc, #492]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d908      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e4c:	4b78      	ldr	r3, [pc, #480]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4975      	ldr	r1, [pc, #468]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d010      	beq.n	8004e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	4b70      	ldr	r3, [pc, #448]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d908      	bls.n	8004e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	496a      	ldr	r1, [pc, #424]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	4b64      	ldr	r3, [pc, #400]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d908      	bls.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ea8:	4b61      	ldr	r3, [pc, #388]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	495e      	ldr	r1, [pc, #376]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d908      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ed6:	4b56      	ldr	r3, [pc, #344]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4953      	ldr	r1, [pc, #332]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d908      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b4a      	ldr	r3, [pc, #296]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f023 020f 	bic.w	r2, r3, #15
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4947      	ldr	r1, [pc, #284]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d055      	beq.n	8004fce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f22:	4b43      	ldr	r3, [pc, #268]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4940      	ldr	r1, [pc, #256]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d121      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0f6      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f54:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d115      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0ea      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f6c:	4b30      	ldr	r3, [pc, #192]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0de      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0d6      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f8c:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f023 0207 	bic.w	r2, r3, #7
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4925      	ldr	r1, [pc, #148]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9e:	f7fe f9b3 	bl	8003308 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa6:	f7fe f9af 	bl	8003308 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0be      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d1eb      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d010      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d208      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f023 020f 	bic.w	r2, r3, #15
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	490e      	ldr	r1, [pc, #56]	@ (8005030 <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d214      	bcs.n	8005034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b08      	ldr	r3, [pc, #32]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	4906      	ldr	r1, [pc, #24]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b04      	ldr	r3, [pc, #16]	@ (800502c <HAL_RCC_ClockConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e086      	b.n	800513a <HAL_RCC_ClockConfig+0x34e>
 800502c:	52002000 	.word	0x52002000
 8005030:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	4b3f      	ldr	r3, [pc, #252]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800504c:	429a      	cmp	r2, r3
 800504e:	d208      	bcs.n	8005062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005050:	4b3c      	ldr	r3, [pc, #240]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	4939      	ldr	r1, [pc, #228]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 800505e:	4313      	orrs	r3, r2
 8005060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	4b34      	ldr	r3, [pc, #208]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800507a:	429a      	cmp	r2, r3
 800507c:	d208      	bcs.n	8005090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800507e:	4b31      	ldr	r3, [pc, #196]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	492e      	ldr	r1, [pc, #184]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 800508c:	4313      	orrs	r3, r2
 800508e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d208      	bcs.n	80050be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4922      	ldr	r1, [pc, #136]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d208      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050da:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4917      	ldr	r1, [pc, #92]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80050ec:	f000 f834 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	4912      	ldr	r1, [pc, #72]	@ (8005148 <HAL_RCC_ClockConfig+0x35c>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800510a:	4b0e      	ldr	r3, [pc, #56]	@ (8005144 <HAL_RCC_ClockConfig+0x358>)
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <HAL_RCC_ClockConfig+0x35c>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
 8005120:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x360>)
 8005122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005124:	4a0a      	ldr	r2, [pc, #40]	@ (8005150 <HAL_RCC_ClockConfig+0x364>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800512a:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <HAL_RCC_ClockConfig+0x368>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe f8a0 	bl	8003274 <HAL_InitTick>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
 8005148:	0800abe8 	.word	0x0800abe8
 800514c:	24000004 	.word	0x24000004
 8005150:	24000000 	.word	0x24000000
 8005154:	24000008 	.word	0x24000008

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	@ 0x24
 800515c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515e:	4bb3      	ldr	r3, [pc, #716]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005166:	2b18      	cmp	r3, #24
 8005168:	f200 8155 	bhi.w	8005416 <HAL_RCC_GetSysClockFreq+0x2be>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051d9 	.word	0x080051d9
 8005178:	08005417 	.word	0x08005417
 800517c:	08005417 	.word	0x08005417
 8005180:	08005417 	.word	0x08005417
 8005184:	08005417 	.word	0x08005417
 8005188:	08005417 	.word	0x08005417
 800518c:	08005417 	.word	0x08005417
 8005190:	08005417 	.word	0x08005417
 8005194:	080051ff 	.word	0x080051ff
 8005198:	08005417 	.word	0x08005417
 800519c:	08005417 	.word	0x08005417
 80051a0:	08005417 	.word	0x08005417
 80051a4:	08005417 	.word	0x08005417
 80051a8:	08005417 	.word	0x08005417
 80051ac:	08005417 	.word	0x08005417
 80051b0:	08005417 	.word	0x08005417
 80051b4:	08005205 	.word	0x08005205
 80051b8:	08005417 	.word	0x08005417
 80051bc:	08005417 	.word	0x08005417
 80051c0:	08005417 	.word	0x08005417
 80051c4:	08005417 	.word	0x08005417
 80051c8:	08005417 	.word	0x08005417
 80051cc:	08005417 	.word	0x08005417
 80051d0:	08005417 	.word	0x08005417
 80051d4:	0800520b 	.word	0x0800520b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d8:	4b94      	ldr	r3, [pc, #592]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051e4:	4b91      	ldr	r3, [pc, #580]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	4a90      	ldr	r2, [pc, #576]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
 80051f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051f6:	e111      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051f8:	4b8d      	ldr	r3, [pc, #564]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051fa:	61bb      	str	r3, [r7, #24]
      break;
 80051fc:	e10e      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005200:	61bb      	str	r3, [r7, #24]
      break;
 8005202:	e10b      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005204:	4b8c      	ldr	r3, [pc, #560]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005206:	61bb      	str	r3, [r7, #24]
      break;
 8005208:	e108      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800520a:	4b88      	ldr	r3, [pc, #544]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005214:	4b85      	ldr	r3, [pc, #532]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800521e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005220:	4b82      	ldr	r3, [pc, #520]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800522a:	4b80      	ldr	r3, [pc, #512]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	08db      	lsrs	r3, r3, #3
 8005230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80e1 	beq.w	8005410 <HAL_RCC_GetSysClockFreq+0x2b8>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b02      	cmp	r3, #2
 8005252:	f000 8083 	beq.w	800535c <HAL_RCC_GetSysClockFreq+0x204>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b02      	cmp	r3, #2
 800525a:	f200 80a1 	bhi.w	80053a0 <HAL_RCC_GetSysClockFreq+0x248>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x114>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d056      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x1c0>
 800526a:	e099      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800526c:	4b6f      	ldr	r3, [pc, #444]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02d      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005278:	4b6c      	ldr	r3, [pc, #432]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	08db      	lsrs	r3, r3, #3
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	4a6b      	ldr	r2, [pc, #428]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a2:	4b62      	ldr	r3, [pc, #392]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800543c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052d2:	e087      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e6:	4b51      	ldr	r3, [pc, #324]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800543c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800530a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005316:	e065      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532a:	4b40      	ldr	r3, [pc, #256]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533a:	ed97 6a02 	vldr	s12, [r7, #8]
 800533e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800543c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800534e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800535a:	e043      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005448 <HAL_RCC_GetSysClockFreq+0x2f0>
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b2f      	ldr	r3, [pc, #188]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005382:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800543c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800539e:	e021      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b1e      	ldr	r3, [pc, #120]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800543c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053e4:	4b11      	ldr	r3, [pc, #68]	@ (800542c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	0a5b      	lsrs	r3, r3, #9
 80053ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ee:	3301      	adds	r3, #1
 80053f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005408:	ee17 3a90 	vmov	r3, s15
 800540c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800540e:	e005      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
      break;
 8005414:	e002      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005416:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005418:	61bb      	str	r3, [r7, #24]
      break;
 800541a:	bf00      	nop
  }

  return sysclockfreq;
 800541c:	69bb      	ldr	r3, [r7, #24]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3724      	adds	r7, #36	@ 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	03d09000 	.word	0x03d09000
 8005434:	003d0900 	.word	0x003d0900
 8005438:	007a1200 	.word	0x007a1200
 800543c:	46000000 	.word	0x46000000
 8005440:	4c742400 	.word	0x4c742400
 8005444:	4a742400 	.word	0x4a742400
 8005448:	4af42400 	.word	0x4af42400

0800544c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005452:	f7ff fe81 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005456:	4602      	mov	r2, r0
 8005458:	4b10      	ldr	r3, [pc, #64]	@ (800549c <HAL_RCC_GetHCLKFreq+0x50>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	490f      	ldr	r1, [pc, #60]	@ (80054a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005464:	5ccb      	ldrb	r3, [r1, r3]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <HAL_RCC_GetHCLKFreq+0x50>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800547a:	5cd3      	ldrb	r3, [r2, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	fa22 f303 	lsr.w	r3, r2, r3
 8005486:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800548a:	4a07      	ldr	r2, [pc, #28]	@ (80054a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005490:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	58024400 	.word	0x58024400
 80054a0:	0800abe8 	.word	0x0800abe8
 80054a4:	24000004 	.word	0x24000004
 80054a8:	24000000 	.word	0x24000000

080054ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80054b0:	f7ff ffcc 	bl	800544c <HAL_RCC_GetHCLKFreq>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4904      	ldr	r1, [pc, #16]	@ (80054d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054c2:	5ccb      	ldrb	r3, [r1, r3]
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	58024400 	.word	0x58024400
 80054d4:	0800abe8 	.word	0x0800abe8

080054d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80054dc:	f7ff ffb6 	bl	800544c <HAL_RCC_GetHCLKFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	4904      	ldr	r1, [pc, #16]	@ (8005500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	58024400 	.word	0x58024400
 8005500:	0800abe8 	.word	0x0800abe8

08005504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b0c8      	sub	sp, #288	@ 0x120
 800550a:	af00      	add	r7, sp, #0
 800550c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005510:	2300      	movs	r3, #0
 8005512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005516:	2300      	movs	r3, #0
 8005518:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800551c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005528:	2500      	movs	r5, #0
 800552a:	ea54 0305 	orrs.w	r3, r4, r5
 800552e:	d049      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005536:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800553a:	d02f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800553c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005540:	d828      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005546:	d01a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554c:	d822      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005556:	d007      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005558:	e01c      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555a:	4ba7      	ldr	r3, [pc, #668]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	4aa6      	ldr	r2, [pc, #664]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005566:	e01a      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556c:	3308      	adds	r3, #8
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fc43 	bl	8006dfc <RCCEx_PLL2_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005582:	3328      	adds	r3, #40	@ 0x28
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fcea 	bl	8006f60 <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005592:	e004      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800559c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055a6:	4b94      	ldr	r3, [pc, #592]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b4:	4a90      	ldr	r2, [pc, #576]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	ea58 0309 	orrs.w	r3, r8, r9
 80055d8:	d047      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d82a      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005601 	.word	0x08005601
 80055f0:	0800560f 	.word	0x0800560f
 80055f4:	08005625 	.word	0x08005625
 80055f8:	08005643 	.word	0x08005643
 80055fc:	08005643 	.word	0x08005643
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005600:	4b7d      	ldr	r3, [pc, #500]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4a7c      	ldr	r2, [pc, #496]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800560c:	e01a      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005612:	3308      	adds	r3, #8
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fbf0 	bl	8006dfc <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005622:	e00f      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005628:	3328      	adds	r3, #40	@ 0x28
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fc97 	bl	8006f60 <RCCEx_PLL3_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005638:	e004      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005644:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564c:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005650:	f023 0107 	bic.w	r1, r3, #7
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	4a67      	ldr	r2, [pc, #412]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800565c:	430b      	orrs	r3, r1
 800565e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005660:	e003      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005666:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005676:	f04f 0b00 	mov.w	fp, #0
 800567a:	ea5a 030b 	orrs.w	r3, sl, fp
 800567e:	d054      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800568a:	d036      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800568c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005690:	d82f      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005696:	d032      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569c:	d829      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800569e:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a0:	d02f      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80056a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a4:	d825      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d018      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d821      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80056b2:	2b40      	cmp	r3, #64	@ 0x40
 80056b4:	d007      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80056b6:	e01c      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b8:	4b4f      	ldr	r3, [pc, #316]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	4a4e      	ldr	r2, [pc, #312]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056c4:	e01e      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ca:	3308      	adds	r3, #8
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fb94 	bl	8006dfc <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056da:	e013      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e0:	3328      	adds	r3, #40	@ 0x28
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fc3b 	bl	8006f60 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80056f0:	e008      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800570c:	4b3a      	ldr	r3, [pc, #232]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571a:	4a37      	ldr	r2, [pc, #220]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005726:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005736:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005740:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d05c      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800574e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005750:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005754:	d03b      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005756:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800575a:	d834      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800575c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005760:	d037      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005766:	d82e      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005768:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800576c:	d033      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800576e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005772:	d828      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005778:	d01a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d822      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005788:	d007      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800578a:	e01c      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800578c:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005798:	e01e      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579e:	3308      	adds	r3, #8
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fb2a 	bl	8006dfc <RCCEx_PLL2_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057ae:	e013      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057b4:	3328      	adds	r3, #40	@ 0x28
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fbd1 	bl	8006f60 <RCCEx_PLL3_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057cc:	e004      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80057d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ee:	4a02      	ldr	r2, [pc, #8]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057f4:	e006      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005800:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800581a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d03a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582a:	2b30      	cmp	r3, #48	@ 0x30
 800582c:	d01f      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800582e:	2b30      	cmp	r3, #48	@ 0x30
 8005830:	d819      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005832:	2b20      	cmp	r3, #32
 8005834:	d00c      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005836:	2b20      	cmp	r3, #32
 8005838:	d815      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d019      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800583e:	2b10      	cmp	r3, #16
 8005840:	d111      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005842:	4bae      	ldr	r3, [pc, #696]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	4aad      	ldr	r2, [pc, #692]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800584e:	e011      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005854:	3308      	adds	r3, #8
 8005856:	2102      	movs	r1, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f001 facf 	bl	8006dfc <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005864:	e006      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005874:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800587c:	4b9f      	ldr	r3, [pc, #636]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	4a9c      	ldr	r2, [pc, #624]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800588c:	430b      	orrs	r3, r1
 800588e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005896:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4313      	orrs	r3, r2
 80058b8:	d051      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c4:	d035      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80058c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ca:	d82e      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058d0:	d031      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80058d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058d6:	d828      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058dc:	d01a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e2:	d822      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ec:	d007      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80058ee:	e01c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f0:	4b82      	ldr	r3, [pc, #520]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4a81      	ldr	r2, [pc, #516]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058fc:	e01c      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005902:	3308      	adds	r3, #8
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fa78 	bl	8006dfc <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005912:	e011      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005918:	3328      	adds	r3, #40	@ 0x28
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fb1f 	bl	8006f60 <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005940:	4b6e      	ldr	r3, [pc, #440]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800594e:	4a6b      	ldr	r2, [pc, #428]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005950:	430b      	orrs	r3, r1
 8005952:	6513      	str	r3, [r2, #80]	@ 0x50
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800595a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800595e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596e:	2300      	movs	r3, #0
 8005970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005974:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d053      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800597e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005988:	d033      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800598a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800598e:	d82c      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005990:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005994:	d02f      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005996:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800599a:	d826      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800599c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059a0:	d02b      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059a6:	d820      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ac:	d012      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80059ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059b2:	d81a      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d022      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d115      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c2:	3308      	adds	r3, #8
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fa18 	bl	8006dfc <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059d2:	e015      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d8:	3328      	adds	r3, #40	@ 0x28
 80059da:	2101      	movs	r1, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fabf 	bl	8006f60 <RCCEx_PLL3_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059e8:	e00a      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059f0:	e006      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059f2:	bf00      	nop
 80059f4:	e004      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80059fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a08:	4b3c      	ldr	r3, [pc, #240]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a16:	4a39      	ldr	r2, [pc, #228]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a1c:	e003      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a36:	2300      	movs	r3, #0
 8005a38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	d060      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a4e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a52:	d039      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005a54:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005a58:	d832      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a5e:	d035      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a64:	d82c      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d031      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a70:	d826      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a76:	d02d      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005a78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a7c:	d820      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a82:	d012      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a88:	d81a      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d024      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a92:	d115      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a98:	3308      	adds	r3, #8
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f9ad 	bl	8006dfc <RCCEx_PLL2_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e017      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aae:	3328      	adds	r3, #40	@ 0x28
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 fa54 	bl	8006f60 <RCCEx_PLL3_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005abe:	e00c      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ac6:	e008      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ac8:	bf00      	nop
 8005aca:	e006      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005acc:	bf00      	nop
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10e      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005af2:	4a02      	ldr	r2, [pc, #8]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af8:	e006      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d037      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b32:	d00e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b38:	d816      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d018      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b42:	d111      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4bc4      	ldr	r3, [pc, #784]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	4ac3      	ldr	r2, [pc, #780]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b50:	e00f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b56:	3308      	adds	r3, #8
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 f94e 	bl	8006dfc <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b7a:	4bb7      	ldr	r3, [pc, #732]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b88:	4ab3      	ldr	r2, [pc, #716]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d039      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d81c      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005bd9 	.word	0x08005bd9
 8005bd0:	08005be7 	.word	0x08005be7
 8005bd4:	08005c05 	.word	0x08005c05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd8:	4b9f      	ldr	r3, [pc, #636]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	4a9e      	ldr	r2, [pc, #632]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005be4:	e00f      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bea:	3308      	adds	r3, #8
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 f904 	bl	8006dfc <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bfa:	e004      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c02:	e000      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c0e:	4b92      	ldr	r3, [pc, #584]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c12:	f023 0103 	bic.w	r1, r3, #3
 8005c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c46:	460b      	mov	r3, r1
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f000 8099 	beq.w	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c4e:	4b83      	ldr	r3, [pc, #524]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a82      	ldr	r2, [pc, #520]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c5a:	f7fd fb55 	bl	8003308 <HAL_GetTick>
 8005c5e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c62:	e00b      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c64:	f7fd fb50 	bl	8003308 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b64      	cmp	r3, #100	@ 0x64
 8005c72:	d903      	bls.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c7a:	e005      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7c:	4b77      	ldr	r3, [pc, #476]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0ed      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d173      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c90:	4b71      	ldr	r3, [pc, #452]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c9c:	4053      	eors	r3, r2
 8005c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d015      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cb2:	4b69      	ldr	r3, [pc, #420]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb6:	4a68      	ldr	r2, [pc, #416]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cbe:	4b66      	ldr	r3, [pc, #408]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	4a65      	ldr	r2, [pc, #404]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cca:	4a63      	ldr	r2, [pc, #396]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cde:	d118      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fd fb12 	bl	8003308 <HAL_GetTick>
 8005ce4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ce8:	e00d      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cea:	f7fd fb0d 	bl	8003308 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005cf4:	1ad2      	subs	r2, r2, r3
 8005cf6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005d04:	e005      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d06:	4b54      	ldr	r3, [pc, #336]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0eb      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d129      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d2a:	d10e      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d3c:	091a      	lsrs	r2, r3, #4
 8005d3e:	4b48      	ldr	r3, [pc, #288]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	4a45      	ldr	r2, [pc, #276]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6113      	str	r3, [r2, #16]
 8005d48:	e005      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d4a:	4b43      	ldr	r3, [pc, #268]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4a42      	ldr	r2, [pc, #264]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	4b40      	ldr	r3, [pc, #256]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d66:	4a3c      	ldr	r2, [pc, #240]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005d76:	e003      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f002 0301 	and.w	r3, r2, #1
 8005d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d90:	2300      	movs	r3, #0
 8005d92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f000 8090 	beq.w	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005daa:	2b28      	cmp	r3, #40	@ 0x28
 8005dac:	d870      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005e99 	.word	0x08005e99
 8005db8:	08005e91 	.word	0x08005e91
 8005dbc:	08005e91 	.word	0x08005e91
 8005dc0:	08005e91 	.word	0x08005e91
 8005dc4:	08005e91 	.word	0x08005e91
 8005dc8:	08005e91 	.word	0x08005e91
 8005dcc:	08005e91 	.word	0x08005e91
 8005dd0:	08005e91 	.word	0x08005e91
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e91 	.word	0x08005e91
 8005ddc:	08005e91 	.word	0x08005e91
 8005de0:	08005e91 	.word	0x08005e91
 8005de4:	08005e91 	.word	0x08005e91
 8005de8:	08005e91 	.word	0x08005e91
 8005dec:	08005e91 	.word	0x08005e91
 8005df0:	08005e91 	.word	0x08005e91
 8005df4:	08005e7b 	.word	0x08005e7b
 8005df8:	08005e91 	.word	0x08005e91
 8005dfc:	08005e91 	.word	0x08005e91
 8005e00:	08005e91 	.word	0x08005e91
 8005e04:	08005e91 	.word	0x08005e91
 8005e08:	08005e91 	.word	0x08005e91
 8005e0c:	08005e91 	.word	0x08005e91
 8005e10:	08005e91 	.word	0x08005e91
 8005e14:	08005e99 	.word	0x08005e99
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005e91 	.word	0x08005e91
 8005e20:	08005e91 	.word	0x08005e91
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e99 	.word	0x08005e99
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	58024800 	.word	0x58024800
 8005e60:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e68:	3308      	adds	r3, #8
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ffc5 	bl	8006dfc <RCCEx_PLL2_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e78:	e00f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e7e:	3328      	adds	r3, #40	@ 0x28
 8005e80:	2101      	movs	r1, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f86c 	bl	8006f60 <RCCEx_PLL3_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ea2:	4bc0      	ldr	r3, [pc, #768]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb2:	4abc      	ldr	r2, [pc, #752]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ebe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f002 0302 	and.w	r3, r2, #2
 8005ece:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ed8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d043      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d824      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f0d 	.word	0x08005f0d
 8005efc:	08005f23 	.word	0x08005f23
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f10:	3308      	adds	r3, #8
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ff71 	bl	8006dfc <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f20:	e00f      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f26:	3328      	adds	r3, #40	@ 0x28
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f818 	bl	8006f60 <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f36:	e004      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f4a:	4b96      	ldr	r3, [pc, #600]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4e:	f023 0107 	bic.w	r1, r3, #7
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f5a:	4a92      	ldr	r2, [pc, #584]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f002 0304 	and.w	r3, r2, #4
 8005f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d043      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d824      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005f96:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fcb 	.word	0x08005fcb
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb8:	3308      	adds	r3, #8
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 ff1d 	bl	8006dfc <RCCEx_PLL2_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e00f      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	3328      	adds	r3, #40	@ 0x28
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 ffc4 	bl	8006f60 <RCCEx_PLL3_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fde:	e004      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fe6:	e000      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	f023 0107 	bic.w	r1, r3, #7
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006002:	4a68      	ldr	r2, [pc, #416]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006004:	430b      	orrs	r3, r1
 8006006:	6593      	str	r3, [r2, #88]	@ 0x58
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800600e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f002 0320 	and.w	r3, r2, #32
 800601e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006022:	2300      	movs	r3, #0
 8006024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800602c:	460b      	mov	r3, r1
 800602e:	4313      	orrs	r3, r2
 8006030:	d055      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800603a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603e:	d033      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006044:	d82c      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604a:	d02f      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006050:	d826      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006056:	d02b      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006058:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800605c:	d820      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800605e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006062:	d012      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006068:	d81a      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d022      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800606e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006072:	d115      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006078:	3308      	adds	r3, #8
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f000 febd 	bl	8006dfc <RCCEx_PLL2_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006088:	e015      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800608a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800608e:	3328      	adds	r3, #40	@ 0x28
 8006090:	2102      	movs	r1, #2
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff64 	bl	8006f60 <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800609e:	e00a      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060a6:	e006      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060a8:	bf00      	nop
 80060aa:	e004      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060be:	4b39      	ldr	r3, [pc, #228]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ce:	4a35      	ldr	r2, [pc, #212]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d058      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006106:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800610a:	d033      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800610c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006110:	d82c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006116:	d02f      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611c:	d826      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800611e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006122:	d02b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006128:	d820      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800612e:	d012      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006134:	d81a      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613e:	d115      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006144:	3308      	adds	r3, #8
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fe57 	bl	8006dfc <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800615a:	3328      	adds	r3, #40	@ 0x28
 800615c:	2102      	movs	r1, #2
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fefe 	bl	8006f60 <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800616a:	e00a      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006174:	bf00      	nop
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800619a:	4a02      	ldr	r2, [pc, #8]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800619c:	430b      	orrs	r3, r1
 800619e:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80061a2:	bf00      	nop
 80061a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d055      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061dc:	d033      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80061de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061e2:	d82c      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e8:	d02f      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ee:	d826      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061f4:	d02b      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80061f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061fa:	d820      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006200:	d012      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006206:	d81a      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006210:	d115      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006216:	3308      	adds	r3, #8
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fdee 	bl	8006dfc <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006226:	e015      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622c:	3328      	adds	r3, #40	@ 0x28
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fe95 	bl	8006f60 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800623c:	e00a      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800625c:	4ba1      	ldr	r3, [pc, #644]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800625e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006260:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006268:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800626c:	4a9d      	ldr	r2, [pc, #628]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6593      	str	r3, [r2, #88]	@ 0x58
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006278:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f002 0308 	and.w	r3, r2, #8
 8006288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006292:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d01e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800629c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fe54 	bl	8006f60 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062c4:	4b87      	ldr	r3, [pc, #540]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d4:	4a83      	ldr	r2, [pc, #524]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f002 0310 	and.w	r3, r2, #16
 80062e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d01e      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006306:	d10c      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800630c:	3328      	adds	r3, #40	@ 0x28
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe25 	bl	8006f60 <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006322:	4b70      	ldr	r3, [pc, #448]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006326:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800632a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800632e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006332:	4a6c      	ldr	r2, [pc, #432]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006334:	430b      	orrs	r3, r1
 8006336:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800634e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d03e      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800635c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006364:	d022      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636a:	d81b      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006374:	d00b      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006376:	e015      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637c:	3308      	adds	r3, #8
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fd3b 	bl	8006dfc <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800638c:	e00f      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800638e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006392:	3328      	adds	r3, #40	@ 0x28
 8006394:	2102      	movs	r1, #2
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fde2 	bl	8006f60 <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063a2:	e004      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063aa:	e000      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80063ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063b6:	4b4b      	ldr	r3, [pc, #300]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063c6:	4a47      	ldr	r2, [pc, #284]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063e4:	2300      	movs	r3, #0
 80063e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063fe:	d01f      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006400:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006404:	d818      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800640c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b33      	ldr	r3, [pc, #204]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	4a32      	ldr	r2, [pc, #200]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006420:	e00f      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006426:	3328      	adds	r3, #40	@ 0x28
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fd98 	bl	8006f60 <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006436:	e004      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006466:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006476:	673b      	str	r3, [r7, #112]	@ 0x70
 8006478:	2300      	movs	r3, #0
 800647a:	677b      	str	r3, [r7, #116]	@ 0x74
 800647c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d034      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006496:	e011      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064a4:	e00e      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064aa:	3308      	adds	r3, #8
 80064ac:	2102      	movs	r1, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fca4 	bl	8006dfc <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064da:	4a02      	ldr	r2, [pc, #8]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064e0:	e006      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fe:	2300      	movs	r3, #0
 8006500:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006502:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d00c      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800650c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006510:	3328      	adds	r3, #40	@ 0x28
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fd23 	bl	8006f60 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006532:	663b      	str	r3, [r7, #96]	@ 0x60
 8006534:	2300      	movs	r3, #0
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
 8006538:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d038      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800654e:	d018      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006554:	d811      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655a:	d014      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800655c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006560:	d80b      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d011      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656a:	d106      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4bc3      	ldr	r3, [pc, #780]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4ac2      	ldr	r2, [pc, #776]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006578:	e008      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800658a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006594:	4bb9      	ldr	r3, [pc, #740]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	4ab5      	ldr	r2, [pc, #724]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80065aa:	e003      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065c2:	2300      	movs	r3, #0
 80065c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065d0:	4baa      	ldr	r3, [pc, #680]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065de:	4aa7      	ldr	r2, [pc, #668]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f2:	2300      	movs	r3, #0
 80065f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006600:	4b9e      	ldr	r3, [pc, #632]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006604:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660e:	4a9b      	ldr	r2, [pc, #620]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006610:	430b      	orrs	r3, r1
 8006612:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006622:	2300      	movs	r3, #0
 8006624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006626:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800662a:	460b      	mov	r3, r1
 800662c:	4313      	orrs	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006630:	4b92      	ldr	r3, [pc, #584]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006634:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800663c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663e:	4a8f      	ldr	r2, [pc, #572]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006640:	430b      	orrs	r3, r1
 8006642:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006650:	643b      	str	r3, [r7, #64]	@ 0x40
 8006652:	2300      	movs	r3, #0
 8006654:	647b      	str	r3, [r7, #68]	@ 0x44
 8006656:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006660:	4b86      	ldr	r3, [pc, #536]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	4a85      	ldr	r2, [pc, #532]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006666:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800666a:	6113      	str	r3, [r2, #16]
 800666c:	4b83      	ldr	r3, [pc, #524]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800666e:	6919      	ldr	r1, [r3, #16]
 8006670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006674:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006678:	4a80      	ldr	r2, [pc, #512]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800667e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006690:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006694:	460b      	mov	r3, r1
 8006696:	4313      	orrs	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800669a:	4b78      	ldr	r3, [pc, #480]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800669e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a8:	4a74      	ldr	r2, [pc, #464]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80066bc:	2300      	movs	r3, #0
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066ca:	4b6c      	ldr	r3, [pc, #432]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066da:	4a68      	ldr	r2, [pc, #416]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	2100      	movs	r1, #0
 80066ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d011      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006700:	3308      	adds	r3, #8
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fb79 	bl	8006dfc <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006710:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800671c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	2100      	movs	r1, #0
 800672a:	6239      	str	r1, [r7, #32]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
 8006732:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d011      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800673c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006740:	3308      	adds	r3, #8
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fb59 	bl	8006dfc <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800675c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	2100      	movs	r1, #0
 800676a:	61b9      	str	r1, [r7, #24]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006776:	460b      	mov	r3, r1
 8006778:	4313      	orrs	r3, r2
 800677a:	d011      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800677c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006780:	3308      	adds	r3, #8
 8006782:	2102      	movs	r1, #2
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fb39 	bl	8006dfc <RCCEx_PLL2_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800679c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	2100      	movs	r1, #0
 80067aa:	6139      	str	r1, [r7, #16]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d011      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c0:	3328      	adds	r3, #40	@ 0x28
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fbcb 	bl	8006f60 <RCCEx_PLL3_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80067d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	2100      	movs	r1, #0
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d011      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006800:	3328      	adds	r3, #40	@ 0x28
 8006802:	2101      	movs	r1, #1
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fbab 	bl	8006f60 <RCCEx_PLL3_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800681c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	2100      	movs	r1, #0
 800682a:	6039      	str	r1, [r7, #0]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d011      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006840:	3328      	adds	r3, #40	@ 0x28
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fb8b 	bl	8006f60 <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800685c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006860:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
}
 800686e:	4618      	mov	r0, r3
 8006870:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006874:	46bd      	mov	sp, r7
 8006876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687a:	bf00      	nop
 800687c:	58024400 	.word	0x58024400

08006880 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006884:	f7fe fde2 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4904      	ldr	r1, [pc, #16]	@ (80068a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	58024400 	.word	0x58024400
 80068a8:	0800abe8 	.word	0x0800abe8

080068ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	@ 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068b4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068be:	4b9f      	ldr	r3, [pc, #636]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	0b1b      	lsrs	r3, r3, #12
 80068c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068ca:	4b9c      	ldr	r3, [pc, #624]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068d6:	4b99      	ldr	r3, [pc, #612]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8111 	beq.w	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f000 8083 	beq.w	8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b02      	cmp	r3, #2
 8006906:	f200 80a1 	bhi.w	8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d056      	beq.n	80069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006916:	e099      	b.n	8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006918:	4b88      	ldr	r3, [pc, #544]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02d      	beq.n	8006980 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006924:	4b85      	ldr	r3, [pc, #532]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	4a84      	ldr	r2, [pc, #528]	@ (8006b40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006962:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800697e:	e087      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006992:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c2:	e065      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d6:	4b59      	ldr	r3, [pc, #356]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a06:	e043      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1a:	4b48      	ldr	r3, [pc, #288]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a4a:	e021      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a90:	4b2a      	ldr	r3, [pc, #168]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	0a5b      	lsrs	r3, r3, #9
 8006a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab6:	ee17 2a90 	vmov	r2, s15
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006abe:	4b1f      	ldr	r3, [pc, #124]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae4:	ee17 2a90 	vmov	r2, s15
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af0:	0e1b      	lsrs	r3, r3, #24
 8006af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b12:	ee17 2a90 	vmov	r2, s15
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b1a:	e008      	b.n	8006b2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	609a      	str	r2, [r3, #8]
}
 8006b2e:	bf00      	nop
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	03d09000 	.word	0x03d09000
 8006b44:	46000000 	.word	0x46000000
 8006b48:	4c742400 	.word	0x4c742400
 8006b4c:	4a742400 	.word	0x4a742400
 8006b50:	4af42400 	.word	0x4af42400

08006b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b089      	sub	sp, #36	@ 0x24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b5c:	4ba1      	ldr	r3, [pc, #644]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b66:	4b9f      	ldr	r3, [pc, #636]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b72:	4b9c      	ldr	r3, [pc, #624]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b7e:	4b99      	ldr	r3, [pc, #612]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8111 	beq.w	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	f000 8083 	beq.w	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f200 80a1 	bhi.w	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d056      	beq.n	8006c6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006bbe:	e099      	b.n	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc0:	4b88      	ldr	r3, [pc, #544]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02d      	beq.n	8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bcc:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	4a84      	ldr	r2, [pc, #528]	@ (8006de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c26:	e087      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6a:	e065      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7e:	4b59      	ldr	r3, [pc, #356]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cae:	e043      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc2:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf2:	e021      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d06:	4b37      	ldr	r3, [pc, #220]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d38:	4b2a      	ldr	r3, [pc, #168]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	0a5b      	lsrs	r3, r3, #9
 8006d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5e:	ee17 2a90 	vmov	r2, s15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d66:	4b1f      	ldr	r3, [pc, #124]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8c:	ee17 2a90 	vmov	r2, s15
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d94:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	0e1b      	lsrs	r3, r3, #24
 8006d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dba:	ee17 2a90 	vmov	r2, s15
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
}
 8006dd6:	bf00      	nop
 8006dd8:	3724      	adds	r7, #36	@ 0x24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	46000000 	.word	0x46000000
 8006df0:	4c742400 	.word	0x4c742400
 8006df4:	4a742400 	.word	0x4a742400
 8006df8:	4af42400 	.word	0x4af42400

08006dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e0a:	4b53      	ldr	r3, [pc, #332]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d101      	bne.n	8006e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e099      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fc fa6f 	bl	8003308 <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2e:	f7fc fa6b 	bl	8003308 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e086      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e40:	4b45      	ldr	r3, [pc, #276]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f0      	bne.n	8006e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e4c:	4b42      	ldr	r3, [pc, #264]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	493f      	ldr	r1, [pc, #252]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	025b      	lsls	r3, r3, #9
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e90:	4931      	ldr	r1, [pc, #196]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e96:	4b30      	ldr	r3, [pc, #192]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	492d      	ldr	r1, [pc, #180]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	f023 0220 	bic.w	r2, r3, #32
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	4928      	ldr	r1, [pc, #160]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006eba:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a26      	ldr	r2, [pc, #152]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	f023 0310 	bic.w	r3, r3, #16
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ec6:	4b24      	ldr	r3, [pc, #144]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eca:	4b24      	ldr	r3, [pc, #144]	@ (8006f5c <RCCEx_PLL2_Config+0x160>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	69d2      	ldr	r2, [r2, #28]
 8006ed2:	00d2      	lsls	r2, r2, #3
 8006ed4:	4920      	ldr	r1, [pc, #128]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eda:	4b1f      	ldr	r3, [pc, #124]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	f043 0310 	orr.w	r3, r3, #16
 8006ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006eec:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a19      	ldr	r2, [pc, #100]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef8:	e00f      	b.n	8006f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d106      	bne.n	8006f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f00:	4b15      	ldr	r3, [pc, #84]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	4a14      	ldr	r2, [pc, #80]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f0c:	e005      	b.n	8006f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f0e:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a11      	ldr	r2, [pc, #68]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f26:	f7fc f9ef 	bl	8003308 <HAL_GetTick>
 8006f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f2c:	e008      	b.n	8006f40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f2e:	f7fc f9eb 	bl	8003308 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e006      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f40:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	ffff0007 	.word	0xffff0007

08006f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f6e:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d101      	bne.n	8006f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e099      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a4e      	ldr	r2, [pc, #312]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fc f9bd 	bl	8003308 <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f90:	e008      	b.n	8006fa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f92:	f7fc f9b9 	bl	8003308 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e086      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fa4:	4b45      	ldr	r3, [pc, #276]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f0      	bne.n	8006f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fb0:	4b42      	ldr	r3, [pc, #264]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	051b      	lsls	r3, r3, #20
 8006fbe:	493f      	ldr	r1, [pc, #252]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	025b      	lsls	r3, r3, #9
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	061b      	lsls	r3, r3, #24
 8006ff0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ff4:	4931      	ldr	r1, [pc, #196]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	492d      	ldr	r1, [pc, #180]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800700c:	4b2b      	ldr	r3, [pc, #172]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	4928      	ldr	r1, [pc, #160]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800701e:	4b27      	ldr	r3, [pc, #156]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	4a26      	ldr	r2, [pc, #152]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800702a:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800702c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800702e:	4b24      	ldr	r3, [pc, #144]	@ (80070c0 <RCCEx_PLL3_Config+0x160>)
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	69d2      	ldr	r2, [r2, #28]
 8007036:	00d2      	lsls	r2, r2, #3
 8007038:	4920      	ldr	r1, [pc, #128]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800703a:	4313      	orrs	r3, r2
 800703c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800703e:	4b1f      	ldr	r3, [pc, #124]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007042:	4a1e      	ldr	r2, [pc, #120]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007050:	4b1a      	ldr	r3, [pc, #104]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007056:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800705a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800705c:	e00f      	b.n	800707e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d106      	bne.n	8007072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007064:	4b15      	ldr	r3, [pc, #84]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	4a14      	ldr	r2, [pc, #80]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800706a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800706e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007070:	e005      	b.n	800707e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007072:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800707c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800707e:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a0e      	ldr	r2, [pc, #56]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800708a:	f7fc f93d 	bl	8003308 <HAL_GetTick>
 800708e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007090:	e008      	b.n	80070a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007092:	f7fc f939 	bl	8003308 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e006      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	58024400 	.word	0x58024400
 80070c0:	ffff0007 	.word	0xffff0007

080070c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e042      	b.n	800715c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fb fe63 	bl	8002db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2224      	movs	r2, #36	@ 0x24
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fb64 	bl	80087dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fcf5 	bl	8007b04 <UART_SetConfig>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e01b      	b.n	800715c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fbe3 	bl	8008920 <UART_CheckIdleState>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	@ 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	2b20      	cmp	r3, #32
 800717c:	d17b      	bne.n	8007276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Transmit+0x26>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e074      	b.n	8007278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2221      	movs	r2, #33	@ 0x21
 800719a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719e:	f7fc f8b3 	bl	8003308 <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071bc:	d108      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e003      	b.n	80071d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d8:	e030      	b.n	800723c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	@ 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f001 fc45 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e03d      	b.n	8007278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007210:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3302      	adds	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e007      	b.n	800722a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1c8      	bne.n	80071da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2200      	movs	r2, #0
 8007250:	2140      	movs	r1, #64	@ 0x40
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f001 fc0e 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e006      	b.n	8007278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e000      	b.n	8007278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007276:	2302      	movs	r3, #2
  }
}
 8007278:	4618      	mov	r0, r3
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007294:	2b20      	cmp	r3, #32
 8007296:	d137      	bne.n	8007308 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_UART_Receive_IT+0x24>
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e030      	b.n	800730a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a18      	ldr	r2, [pc, #96]	@ (8007314 <HAL_UART_Receive_IT+0x94>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d01f      	beq.n	80072f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	613b      	str	r3, [r7, #16]
   return(result);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	69f9      	ldr	r1, [r7, #28]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	461a      	mov	r2, r3
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 fc26 	bl	8008b50 <UART_Start_Receive_IT>
 8007304:	4603      	mov	r3, r0
 8007306:	e000      	b.n	800730a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007308:	2302      	movs	r3, #2
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	3728      	adds	r7, #40	@ 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	58000c00 	.word	0x58000c00

08007318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b0ba      	sub	sp, #232	@ 0xe8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800733e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007342:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007346:	4013      	ands	r3, r2
 8007348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800734c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11b      	bne.n	800738c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d015      	beq.n	800738c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800736c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8393 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
      }
      return;
 800738a:	e38d      	b.n	8007aa8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800738c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8123 	beq.w	80075dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800739a:	4b8d      	ldr	r3, [pc, #564]	@ (80075d0 <HAL_UART_IRQHandler+0x2b8>)
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073a6:	4b8b      	ldr	r3, [pc, #556]	@ (80075d4 <HAL_UART_IRQHandler+0x2bc>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8116 	beq.w	80075dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <HAL_UART_IRQHandler+0xc8>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d011      	beq.n	8007410 <HAL_UART_IRQHandler+0xf8>
 80073ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2202      	movs	r2, #2
 80073fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <HAL_UART_IRQHandler+0x128>
 800741c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2204      	movs	r2, #4
 800742e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007436:	f043 0202 	orr.w	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800745c:	4b5c      	ldr	r3, [pc, #368]	@ (80075d0 <HAL_UART_IRQHandler+0x2b8>)
 800745e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2208      	movs	r2, #8
 800746a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <HAL_UART_IRQHandler+0x196>
 8007488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800748c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00c      	beq.n	80074ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800749c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 82f9 	beq.w	8007aac <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	d005      	beq.n	8007512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800750e:	2b00      	cmp	r3, #0
 8007510:	d054      	beq.n	80075bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fc3e 	bl	8008d94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007522:	2b40      	cmp	r3, #64	@ 0x40
 8007524:	d146      	bne.n	80075b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800753c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800755e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800756a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1d9      	bne.n	8007526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007582:	4a15      	ldr	r2, [pc, #84]	@ (80075d8 <HAL_UART_IRQHandler+0x2c0>)
 8007584:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	4618      	mov	r0, r3
 800758e:	f7fc fb91 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d019      	beq.n	80075cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075a6:	4610      	mov	r0, r2
 80075a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075aa:	e00f      	b.n	80075cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa93 	bl	8007ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b2:	e00b      	b.n	80075cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa8f 	bl	8007ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ba:	e007      	b.n	80075cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fa8b 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075ca:	e26f      	b.n	8007aac <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075cc:	bf00      	nop
    return;
 80075ce:	e26d      	b.n	8007aac <HAL_UART_IRQHandler+0x794>
 80075d0:	10000001 	.word	0x10000001
 80075d4:	04000120 	.word	0x04000120
 80075d8:	08008e61 	.word	0x08008e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	f040 8203 	bne.w	80079ec <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 81fc 	beq.w	80079ec <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 81f5 	beq.w	80079ec <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	f040 816d 	bne.w	80078f4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4aa4      	ldr	r2, [pc, #656]	@ (80078b4 <HAL_UART_IRQHandler+0x59c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d068      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4aa1      	ldr	r2, [pc, #644]	@ (80078b8 <HAL_UART_IRQHandler+0x5a0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d061      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a9f      	ldr	r2, [pc, #636]	@ (80078bc <HAL_UART_IRQHandler+0x5a4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d05a      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a9c      	ldr	r2, [pc, #624]	@ (80078c0 <HAL_UART_IRQHandler+0x5a8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d053      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a9a      	ldr	r2, [pc, #616]	@ (80078c4 <HAL_UART_IRQHandler+0x5ac>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d04c      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a97      	ldr	r2, [pc, #604]	@ (80078c8 <HAL_UART_IRQHandler+0x5b0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d045      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a95      	ldr	r2, [pc, #596]	@ (80078cc <HAL_UART_IRQHandler+0x5b4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d03e      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a92      	ldr	r2, [pc, #584]	@ (80078d0 <HAL_UART_IRQHandler+0x5b8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d037      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a90      	ldr	r2, [pc, #576]	@ (80078d4 <HAL_UART_IRQHandler+0x5bc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d030      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a8d      	ldr	r2, [pc, #564]	@ (80078d8 <HAL_UART_IRQHandler+0x5c0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d029      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a8b      	ldr	r2, [pc, #556]	@ (80078dc <HAL_UART_IRQHandler+0x5c4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d022      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a88      	ldr	r2, [pc, #544]	@ (80078e0 <HAL_UART_IRQHandler+0x5c8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01b      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a86      	ldr	r2, [pc, #536]	@ (80078e4 <HAL_UART_IRQHandler+0x5cc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d014      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a83      	ldr	r2, [pc, #524]	@ (80078e8 <HAL_UART_IRQHandler+0x5d0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00d      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a81      	ldr	r2, [pc, #516]	@ (80078ec <HAL_UART_IRQHandler+0x5d4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d006      	beq.n	80076fa <HAL_UART_IRQHandler+0x3e2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a7e      	ldr	r2, [pc, #504]	@ (80078f0 <HAL_UART_IRQHandler+0x5d8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d106      	bne.n	8007708 <HAL_UART_IRQHandler+0x3f0>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	b29b      	uxth	r3, r3
 8007706:	e005      	b.n	8007714 <HAL_UART_IRQHandler+0x3fc>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80ad 	beq.w	800787c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800772c:	429a      	cmp	r2, r3
 800772e:	f080 80a5 	bcs.w	800787c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007748:	f000 8087 	beq.w	800785a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800777a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800778e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1da      	bne.n	800774c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3308      	adds	r3, #8
 800779c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e1      	bne.n	8007796 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e3      	bne.n	80077d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007828:	f023 0310 	bic.w	r3, r3, #16
 800782c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800783a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800783c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007840:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e4      	bne.n	8007818 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007854:	4618      	mov	r0, r3
 8007856:	f7fb ff0f 	bl	8003678 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800786c:	b29b      	uxth	r3, r3
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	b29b      	uxth	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f939 	bl	8007aec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800787a:	e119      	b.n	8007ab0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007886:	429a      	cmp	r2, r3
 8007888:	f040 8112 	bne.w	8007ab0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007898:	f040 810a 	bne.w	8007ab0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f91e 	bl	8007aec <HAL_UARTEx_RxEventCallback>
      return;
 80078b0:	e0fe      	b.n	8007ab0 <HAL_UART_IRQHandler+0x798>
 80078b2:	bf00      	nop
 80078b4:	40020010 	.word	0x40020010
 80078b8:	40020028 	.word	0x40020028
 80078bc:	40020040 	.word	0x40020040
 80078c0:	40020058 	.word	0x40020058
 80078c4:	40020070 	.word	0x40020070
 80078c8:	40020088 	.word	0x40020088
 80078cc:	400200a0 	.word	0x400200a0
 80078d0:	400200b8 	.word	0x400200b8
 80078d4:	40020410 	.word	0x40020410
 80078d8:	40020428 	.word	0x40020428
 80078dc:	40020440 	.word	0x40020440
 80078e0:	40020458 	.word	0x40020458
 80078e4:	40020470 	.word	0x40020470
 80078e8:	40020488 	.word	0x40020488
 80078ec:	400204a0 	.word	0x400204a0
 80078f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007900:	b29b      	uxth	r3, r3
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80cf 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007916:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80ca 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007942:	647b      	str	r3, [r7, #68]	@ 0x44
 8007944:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e4      	bne.n	8007920 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	623b      	str	r3, [r7, #32]
   return(result);
 8007966:	6a3a      	ldr	r2, [r7, #32]
 8007968:	4b55      	ldr	r3, [pc, #340]	@ (8007ac0 <HAL_UART_IRQHandler+0x7a8>)
 800796a:	4013      	ands	r3, r2
 800796c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800797a:	633a      	str	r2, [r7, #48]	@ 0x30
 800797c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e3      	bne.n	8007956 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	617b      	str	r3, [r7, #20]
   return(result);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e4      	bne.n	80079a2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f881 	bl	8007aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ea:	e063      	b.n	8007ab4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00e      	beq.n	8007a16 <HAL_UART_IRQHandler+0x6fe>
 80079f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 ff84 	bl	800991c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a14:	e051      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d014      	beq.n	8007a4c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03a      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
    }
    return;
 8007a4a:	e035      	b.n	8007ab8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_UART_IRQHandler+0x754>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fa0d 	bl	8008e84 <UART_EndTransmit_IT>
    return;
 8007a6a:	e026      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <HAL_UART_IRQHandler+0x774>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 ff5d 	bl	8009944 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8a:	e016      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <HAL_UART_IRQHandler+0x7a2>
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da0c      	bge.n	8007aba <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 ff45 	bl	8009930 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aa6:	e008      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e006      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
    return;
 8007aac:	bf00      	nop
 8007aae:	e004      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_UART_IRQHandler+0x7a2>
    return;
 8007ab8:	bf00      	nop
  }
}
 8007aba:	37e8      	adds	r7, #232	@ 0xe8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	effffffe 	.word	0xeffffffe

08007ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b08:	b092      	sub	sp, #72	@ 0x48
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4bbe      	ldr	r3, [pc, #760]	@ (8007e2c <UART_SetConfig+0x328>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4ab3      	ldr	r2, [pc, #716]	@ (8007e30 <UART_SetConfig+0x32c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d004      	beq.n	8007b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	4baf      	ldr	r3, [pc, #700]	@ (8007e34 <UART_SetConfig+0x330>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	f023 010f 	bic.w	r1, r3, #15
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4aa6      	ldr	r2, [pc, #664]	@ (8007e38 <UART_SetConfig+0x334>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d177      	bne.n	8007c94 <UART_SetConfig+0x190>
 8007ba4:	4ba5      	ldr	r3, [pc, #660]	@ (8007e3c <UART_SetConfig+0x338>)
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bac:	2b28      	cmp	r3, #40	@ 0x28
 8007bae:	d86d      	bhi.n	8007c8c <UART_SetConfig+0x188>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <UART_SetConfig+0xb4>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007c5d 	.word	0x08007c5d
 8007bbc:	08007c8d 	.word	0x08007c8d
 8007bc0:	08007c8d 	.word	0x08007c8d
 8007bc4:	08007c8d 	.word	0x08007c8d
 8007bc8:	08007c8d 	.word	0x08007c8d
 8007bcc:	08007c8d 	.word	0x08007c8d
 8007bd0:	08007c8d 	.word	0x08007c8d
 8007bd4:	08007c8d 	.word	0x08007c8d
 8007bd8:	08007c65 	.word	0x08007c65
 8007bdc:	08007c8d 	.word	0x08007c8d
 8007be0:	08007c8d 	.word	0x08007c8d
 8007be4:	08007c8d 	.word	0x08007c8d
 8007be8:	08007c8d 	.word	0x08007c8d
 8007bec:	08007c8d 	.word	0x08007c8d
 8007bf0:	08007c8d 	.word	0x08007c8d
 8007bf4:	08007c8d 	.word	0x08007c8d
 8007bf8:	08007c6d 	.word	0x08007c6d
 8007bfc:	08007c8d 	.word	0x08007c8d
 8007c00:	08007c8d 	.word	0x08007c8d
 8007c04:	08007c8d 	.word	0x08007c8d
 8007c08:	08007c8d 	.word	0x08007c8d
 8007c0c:	08007c8d 	.word	0x08007c8d
 8007c10:	08007c8d 	.word	0x08007c8d
 8007c14:	08007c8d 	.word	0x08007c8d
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007c8d 	.word	0x08007c8d
 8007c20:	08007c8d 	.word	0x08007c8d
 8007c24:	08007c8d 	.word	0x08007c8d
 8007c28:	08007c8d 	.word	0x08007c8d
 8007c2c:	08007c8d 	.word	0x08007c8d
 8007c30:	08007c8d 	.word	0x08007c8d
 8007c34:	08007c8d 	.word	0x08007c8d
 8007c38:	08007c7d 	.word	0x08007c7d
 8007c3c:	08007c8d 	.word	0x08007c8d
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007c8d 	.word	0x08007c8d
 8007c48:	08007c8d 	.word	0x08007c8d
 8007c4c:	08007c8d 	.word	0x08007c8d
 8007c50:	08007c8d 	.word	0x08007c8d
 8007c54:	08007c8d 	.word	0x08007c8d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c62:	e326      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6a:	e322      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c72:	e31e      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e31a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e316      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c84:	2340      	movs	r3, #64	@ 0x40
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e312      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c8c:	2380      	movs	r3, #128	@ 0x80
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c92:	e30e      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a69      	ldr	r2, [pc, #420]	@ (8007e40 <UART_SetConfig+0x33c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d130      	bne.n	8007d00 <UART_SetConfig+0x1fc>
 8007c9e:	4b67      	ldr	r3, [pc, #412]	@ (8007e3c <UART_SetConfig+0x338>)
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d826      	bhi.n	8007cf8 <UART_SetConfig+0x1f4>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <UART_SetConfig+0x1ac>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc9 	.word	0x08007cc9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e2f0      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e2ec      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e2e8      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e2e4      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e2e0      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007cf0:	2340      	movs	r3, #64	@ 0x40
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e2dc      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e2d8      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a4f      	ldr	r2, [pc, #316]	@ (8007e44 <UART_SetConfig+0x340>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d130      	bne.n	8007d6c <UART_SetConfig+0x268>
 8007d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8007e3c <UART_SetConfig+0x338>)
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d826      	bhi.n	8007d64 <UART_SetConfig+0x260>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0x218>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d3d 	.word	0x08007d3d
 8007d24:	08007d45 	.word	0x08007d45
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e2ba      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e2b6      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e2b2      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e2ae      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e2aa      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d5c:	2340      	movs	r3, #64	@ 0x40
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d62:	e2a6      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d64:	2380      	movs	r3, #128	@ 0x80
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6a:	e2a2      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a35      	ldr	r2, [pc, #212]	@ (8007e48 <UART_SetConfig+0x344>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d130      	bne.n	8007dd8 <UART_SetConfig+0x2d4>
 8007d76:	4b31      	ldr	r3, [pc, #196]	@ (8007e3c <UART_SetConfig+0x338>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d826      	bhi.n	8007dd0 <UART_SetConfig+0x2cc>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x284>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e284      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e280      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e27c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e278      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e274      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007dc8:	2340      	movs	r3, #64	@ 0x40
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e270      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007dd0:	2380      	movs	r3, #128	@ 0x80
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e26c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e4c <UART_SetConfig+0x348>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d142      	bne.n	8007e68 <UART_SetConfig+0x364>
 8007de2:	4b16      	ldr	r3, [pc, #88]	@ (8007e3c <UART_SetConfig+0x338>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	d838      	bhi.n	8007e60 <UART_SetConfig+0x35c>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <UART_SetConfig+0x2f0>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e59 	.word	0x08007e59
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e24e      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e24a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e246      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e242      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e2c:	cfff69f3 	.word	0xcfff69f3
 8007e30:	58000c00 	.word	0x58000c00
 8007e34:	11fff4ff 	.word	0x11fff4ff
 8007e38:	40011000 	.word	0x40011000
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	40004400 	.word	0x40004400
 8007e44:	40004800 	.word	0x40004800
 8007e48:	40004c00 	.word	0x40004c00
 8007e4c:	40005000 	.word	0x40005000
 8007e50:	2320      	movs	r3, #32
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e22c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e228      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e224      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4ab1      	ldr	r2, [pc, #708]	@ (8008134 <UART_SetConfig+0x630>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d176      	bne.n	8007f60 <UART_SetConfig+0x45c>
 8007e72:	4bb1      	ldr	r3, [pc, #708]	@ (8008138 <UART_SetConfig+0x634>)
 8007e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e7a:	2b28      	cmp	r3, #40	@ 0x28
 8007e7c:	d86c      	bhi.n	8007f58 <UART_SetConfig+0x454>
 8007e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <UART_SetConfig+0x380>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f59 	.word	0x08007f59
 8007e8c:	08007f59 	.word	0x08007f59
 8007e90:	08007f59 	.word	0x08007f59
 8007e94:	08007f59 	.word	0x08007f59
 8007e98:	08007f59 	.word	0x08007f59
 8007e9c:	08007f59 	.word	0x08007f59
 8007ea0:	08007f59 	.word	0x08007f59
 8007ea4:	08007f31 	.word	0x08007f31
 8007ea8:	08007f59 	.word	0x08007f59
 8007eac:	08007f59 	.word	0x08007f59
 8007eb0:	08007f59 	.word	0x08007f59
 8007eb4:	08007f59 	.word	0x08007f59
 8007eb8:	08007f59 	.word	0x08007f59
 8007ebc:	08007f59 	.word	0x08007f59
 8007ec0:	08007f59 	.word	0x08007f59
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f59 	.word	0x08007f59
 8007ecc:	08007f59 	.word	0x08007f59
 8007ed0:	08007f59 	.word	0x08007f59
 8007ed4:	08007f59 	.word	0x08007f59
 8007ed8:	08007f59 	.word	0x08007f59
 8007edc:	08007f59 	.word	0x08007f59
 8007ee0:	08007f59 	.word	0x08007f59
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f59 	.word	0x08007f59
 8007eec:	08007f59 	.word	0x08007f59
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007f59 	.word	0x08007f59
 8007ef8:	08007f59 	.word	0x08007f59
 8007efc:	08007f59 	.word	0x08007f59
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f49 	.word	0x08007f49
 8007f08:	08007f59 	.word	0x08007f59
 8007f0c:	08007f59 	.word	0x08007f59
 8007f10:	08007f59 	.word	0x08007f59
 8007f14:	08007f59 	.word	0x08007f59
 8007f18:	08007f59 	.word	0x08007f59
 8007f1c:	08007f59 	.word	0x08007f59
 8007f20:	08007f59 	.word	0x08007f59
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e1c0      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e1bc      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e1b8      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e1b4      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f48:	2320      	movs	r3, #32
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e1b0      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f50:	2340      	movs	r3, #64	@ 0x40
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f56:	e1ac      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f58:	2380      	movs	r3, #128	@ 0x80
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	e1a8      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a75      	ldr	r2, [pc, #468]	@ (800813c <UART_SetConfig+0x638>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d130      	bne.n	8007fcc <UART_SetConfig+0x4c8>
 8007f6a:	4b73      	ldr	r3, [pc, #460]	@ (8008138 <UART_SetConfig+0x634>)
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d826      	bhi.n	8007fc4 <UART_SetConfig+0x4c0>
 8007f76:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <UART_SetConfig+0x478>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f95 	.word	0x08007f95
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	08007fa5 	.word	0x08007fa5
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e18a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e186      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e182      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e17e      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e17a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fbc:	2340      	movs	r3, #64	@ 0x40
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e176      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e172      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a5b      	ldr	r2, [pc, #364]	@ (8008140 <UART_SetConfig+0x63c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d130      	bne.n	8008038 <UART_SetConfig+0x534>
 8007fd6:	4b58      	ldr	r3, [pc, #352]	@ (8008138 <UART_SetConfig+0x634>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d826      	bhi.n	8008030 <UART_SetConfig+0x52c>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <UART_SetConfig+0x4e4>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e154      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e150      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e14c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e148      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e144      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e140      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e13c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a41      	ldr	r2, [pc, #260]	@ (8008144 <UART_SetConfig+0x640>)
 800803e:	4293      	cmp	r3, r2
 8008040:	f040 8082 	bne.w	8008148 <UART_SetConfig+0x644>
 8008044:	4b3c      	ldr	r3, [pc, #240]	@ (8008138 <UART_SetConfig+0x634>)
 8008046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800804c:	2b28      	cmp	r3, #40	@ 0x28
 800804e:	d86d      	bhi.n	800812c <UART_SetConfig+0x628>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <UART_SetConfig+0x554>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	080080fd 	.word	0x080080fd
 800805c:	0800812d 	.word	0x0800812d
 8008060:	0800812d 	.word	0x0800812d
 8008064:	0800812d 	.word	0x0800812d
 8008068:	0800812d 	.word	0x0800812d
 800806c:	0800812d 	.word	0x0800812d
 8008070:	0800812d 	.word	0x0800812d
 8008074:	0800812d 	.word	0x0800812d
 8008078:	08008105 	.word	0x08008105
 800807c:	0800812d 	.word	0x0800812d
 8008080:	0800812d 	.word	0x0800812d
 8008084:	0800812d 	.word	0x0800812d
 8008088:	0800812d 	.word	0x0800812d
 800808c:	0800812d 	.word	0x0800812d
 8008090:	0800812d 	.word	0x0800812d
 8008094:	0800812d 	.word	0x0800812d
 8008098:	0800810d 	.word	0x0800810d
 800809c:	0800812d 	.word	0x0800812d
 80080a0:	0800812d 	.word	0x0800812d
 80080a4:	0800812d 	.word	0x0800812d
 80080a8:	0800812d 	.word	0x0800812d
 80080ac:	0800812d 	.word	0x0800812d
 80080b0:	0800812d 	.word	0x0800812d
 80080b4:	0800812d 	.word	0x0800812d
 80080b8:	08008115 	.word	0x08008115
 80080bc:	0800812d 	.word	0x0800812d
 80080c0:	0800812d 	.word	0x0800812d
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	0800812d 	.word	0x0800812d
 80080cc:	0800812d 	.word	0x0800812d
 80080d0:	0800812d 	.word	0x0800812d
 80080d4:	0800812d 	.word	0x0800812d
 80080d8:	0800811d 	.word	0x0800811d
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	0800812d 	.word	0x0800812d
 80080e4:	0800812d 	.word	0x0800812d
 80080e8:	0800812d 	.word	0x0800812d
 80080ec:	0800812d 	.word	0x0800812d
 80080f0:	0800812d 	.word	0x0800812d
 80080f4:	0800812d 	.word	0x0800812d
 80080f8:	08008125 	.word	0x08008125
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008102:	e0d6      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810a:	e0d2      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008112:	e0ce      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811a:	e0ca      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800811c:	2320      	movs	r3, #32
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e0c6      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008124:	2340      	movs	r3, #64	@ 0x40
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e0c2      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800812c:	2380      	movs	r3, #128	@ 0x80
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e0be      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008134:	40011400 	.word	0x40011400
 8008138:	58024400 	.word	0x58024400
 800813c:	40007800 	.word	0x40007800
 8008140:	40007c00 	.word	0x40007c00
 8008144:	40011800 	.word	0x40011800
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4aad      	ldr	r2, [pc, #692]	@ (8008404 <UART_SetConfig+0x900>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d176      	bne.n	8008240 <UART_SetConfig+0x73c>
 8008152:	4bad      	ldr	r3, [pc, #692]	@ (8008408 <UART_SetConfig+0x904>)
 8008154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800815a:	2b28      	cmp	r3, #40	@ 0x28
 800815c:	d86c      	bhi.n	8008238 <UART_SetConfig+0x734>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <UART_SetConfig+0x660>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008209 	.word	0x08008209
 8008168:	08008239 	.word	0x08008239
 800816c:	08008239 	.word	0x08008239
 8008170:	08008239 	.word	0x08008239
 8008174:	08008239 	.word	0x08008239
 8008178:	08008239 	.word	0x08008239
 800817c:	08008239 	.word	0x08008239
 8008180:	08008239 	.word	0x08008239
 8008184:	08008211 	.word	0x08008211
 8008188:	08008239 	.word	0x08008239
 800818c:	08008239 	.word	0x08008239
 8008190:	08008239 	.word	0x08008239
 8008194:	08008239 	.word	0x08008239
 8008198:	08008239 	.word	0x08008239
 800819c:	08008239 	.word	0x08008239
 80081a0:	08008239 	.word	0x08008239
 80081a4:	08008219 	.word	0x08008219
 80081a8:	08008239 	.word	0x08008239
 80081ac:	08008239 	.word	0x08008239
 80081b0:	08008239 	.word	0x08008239
 80081b4:	08008239 	.word	0x08008239
 80081b8:	08008239 	.word	0x08008239
 80081bc:	08008239 	.word	0x08008239
 80081c0:	08008239 	.word	0x08008239
 80081c4:	08008221 	.word	0x08008221
 80081c8:	08008239 	.word	0x08008239
 80081cc:	08008239 	.word	0x08008239
 80081d0:	08008239 	.word	0x08008239
 80081d4:	08008239 	.word	0x08008239
 80081d8:	08008239 	.word	0x08008239
 80081dc:	08008239 	.word	0x08008239
 80081e0:	08008239 	.word	0x08008239
 80081e4:	08008229 	.word	0x08008229
 80081e8:	08008239 	.word	0x08008239
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008239 	.word	0x08008239
 80081f4:	08008239 	.word	0x08008239
 80081f8:	08008239 	.word	0x08008239
 80081fc:	08008239 	.word	0x08008239
 8008200:	08008239 	.word	0x08008239
 8008204:	08008231 	.word	0x08008231
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820e:	e050      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008210:	2304      	movs	r3, #4
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008216:	e04c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008218:	2308      	movs	r3, #8
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821e:	e048      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008220:	2310      	movs	r3, #16
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008226:	e044      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008228:	2320      	movs	r3, #32
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e040      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008230:	2340      	movs	r3, #64	@ 0x40
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e03c      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008238:	2380      	movs	r3, #128	@ 0x80
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e038      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a71      	ldr	r2, [pc, #452]	@ (800840c <UART_SetConfig+0x908>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d130      	bne.n	80082ac <UART_SetConfig+0x7a8>
 800824a:	4b6f      	ldr	r3, [pc, #444]	@ (8008408 <UART_SetConfig+0x904>)
 800824c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	2b05      	cmp	r3, #5
 8008254:	d826      	bhi.n	80082a4 <UART_SetConfig+0x7a0>
 8008256:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <UART_SetConfig+0x758>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	08008275 	.word	0x08008275
 8008260:	0800827d 	.word	0x0800827d
 8008264:	08008285 	.word	0x08008285
 8008268:	0800828d 	.word	0x0800828d
 800826c:	08008295 	.word	0x08008295
 8008270:	0800829d 	.word	0x0800829d
 8008274:	2302      	movs	r3, #2
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827a:	e01a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800827c:	2304      	movs	r3, #4
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008282:	e016      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008284:	2308      	movs	r3, #8
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828a:	e012      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800828c:	2310      	movs	r3, #16
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008292:	e00e      	b.n	80082b2 <UART_SetConfig+0x7ae>
 8008294:	2320      	movs	r3, #32
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e00a      	b.n	80082b2 <UART_SetConfig+0x7ae>
 800829c:	2340      	movs	r3, #64	@ 0x40
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e006      	b.n	80082b2 <UART_SetConfig+0x7ae>
 80082a4:	2380      	movs	r3, #128	@ 0x80
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e002      	b.n	80082b2 <UART_SetConfig+0x7ae>
 80082ac:	2380      	movs	r3, #128	@ 0x80
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a55      	ldr	r2, [pc, #340]	@ (800840c <UART_SetConfig+0x908>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	f040 80f8 	bne.w	80084ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	dc46      	bgt.n	8008354 <UART_SetConfig+0x850>
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	db75      	blt.n	80083b6 <UART_SetConfig+0x8b2>
 80082ca:	3b02      	subs	r3, #2
 80082cc:	2b1e      	cmp	r3, #30
 80082ce:	d872      	bhi.n	80083b6 <UART_SetConfig+0x8b2>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <UART_SetConfig+0x7d4>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	0800835b 	.word	0x0800835b
 80082dc:	080083b7 	.word	0x080083b7
 80082e0:	08008363 	.word	0x08008363
 80082e4:	080083b7 	.word	0x080083b7
 80082e8:	080083b7 	.word	0x080083b7
 80082ec:	080083b7 	.word	0x080083b7
 80082f0:	08008373 	.word	0x08008373
 80082f4:	080083b7 	.word	0x080083b7
 80082f8:	080083b7 	.word	0x080083b7
 80082fc:	080083b7 	.word	0x080083b7
 8008300:	080083b7 	.word	0x080083b7
 8008304:	080083b7 	.word	0x080083b7
 8008308:	080083b7 	.word	0x080083b7
 800830c:	080083b7 	.word	0x080083b7
 8008310:	08008383 	.word	0x08008383
 8008314:	080083b7 	.word	0x080083b7
 8008318:	080083b7 	.word	0x080083b7
 800831c:	080083b7 	.word	0x080083b7
 8008320:	080083b7 	.word	0x080083b7
 8008324:	080083b7 	.word	0x080083b7
 8008328:	080083b7 	.word	0x080083b7
 800832c:	080083b7 	.word	0x080083b7
 8008330:	080083b7 	.word	0x080083b7
 8008334:	080083b7 	.word	0x080083b7
 8008338:	080083b7 	.word	0x080083b7
 800833c:	080083b7 	.word	0x080083b7
 8008340:	080083b7 	.word	0x080083b7
 8008344:	080083b7 	.word	0x080083b7
 8008348:	080083b7 	.word	0x080083b7
 800834c:	080083b7 	.word	0x080083b7
 8008350:	080083a9 	.word	0x080083a9
 8008354:	2b40      	cmp	r3, #64	@ 0x40
 8008356:	d02a      	beq.n	80083ae <UART_SetConfig+0x8aa>
 8008358:	e02d      	b.n	80083b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800835a:	f7fe fa91 	bl	8006880 <HAL_RCCEx_GetD3PCLK1Freq>
 800835e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008360:	e02f      	b.n	80083c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe faa0 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008370:	e027      	b.n	80083c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008372:	f107 0318 	add.w	r3, r7, #24
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fbec 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008380:	e01f      	b.n	80083c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008382:	4b21      	ldr	r3, [pc, #132]	@ (8008408 <UART_SetConfig+0x904>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800838e:	4b1e      	ldr	r3, [pc, #120]	@ (8008408 <UART_SetConfig+0x904>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <UART_SetConfig+0x90c>)
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083a0:	e00f      	b.n	80083c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <UART_SetConfig+0x90c>)
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a6:	e00c      	b.n	80083c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008414 <UART_SetConfig+0x910>)
 80083aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ac:	e009      	b.n	80083c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b4:	e005      	b.n	80083c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 81ee 	beq.w	80087a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	4a12      	ldr	r2, [pc, #72]	@ (8008418 <UART_SetConfig+0x914>)
 80083d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083dc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d305      	bcc.n	80083fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d910      	bls.n	800841c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008400:	e1d1      	b.n	80087a6 <UART_SetConfig+0xca2>
 8008402:	bf00      	nop
 8008404:	40011c00 	.word	0x40011c00
 8008408:	58024400 	.word	0x58024400
 800840c:	58000c00 	.word	0x58000c00
 8008410:	03d09000 	.word	0x03d09000
 8008414:	003d0900 	.word	0x003d0900
 8008418:	0800abf8 	.word	0x0800abf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	2200      	movs	r2, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	60fa      	str	r2, [r7, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	4ac0      	ldr	r2, [pc, #768]	@ (800872c <UART_SetConfig+0xc28>)
 800842a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842e:	b29b      	uxth	r3, r3
 8008430:	2200      	movs	r2, #0
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800843e:	f7f7 ffa7 	bl	8000390 <__aeabi_uldivmod>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4610      	mov	r0, r2
 8008448:	4619      	mov	r1, r3
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	020b      	lsls	r3, r1, #8
 8008454:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008458:	0202      	lsls	r2, r0, #8
 800845a:	6979      	ldr	r1, [r7, #20]
 800845c:	6849      	ldr	r1, [r1, #4]
 800845e:	0849      	lsrs	r1, r1, #1
 8008460:	2000      	movs	r0, #0
 8008462:	460c      	mov	r4, r1
 8008464:	4605      	mov	r5, r0
 8008466:	eb12 0804 	adds.w	r8, r2, r4
 800846a:	eb43 0905 	adc.w	r9, r3, r5
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	469a      	mov	sl, r3
 8008476:	4693      	mov	fp, r2
 8008478:	4652      	mov	r2, sl
 800847a:	465b      	mov	r3, fp
 800847c:	4640      	mov	r0, r8
 800847e:	4649      	mov	r1, r9
 8008480:	f7f7 ff86 	bl	8000390 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4613      	mov	r3, r2
 800848a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008492:	d308      	bcc.n	80084a6 <UART_SetConfig+0x9a2>
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800849a:	d204      	bcs.n	80084a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e17f      	b.n	80087a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084ac:	e17b      	b.n	80087a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084b6:	f040 80bd 	bne.w	8008634 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80084ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084be:	2b20      	cmp	r3, #32
 80084c0:	dc48      	bgt.n	8008554 <UART_SetConfig+0xa50>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	db7b      	blt.n	80085be <UART_SetConfig+0xaba>
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d879      	bhi.n	80085be <UART_SetConfig+0xaba>
 80084ca:	a201      	add	r2, pc, #4	@ (adr r2, 80084d0 <UART_SetConfig+0x9cc>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	0800855b 	.word	0x0800855b
 80084d4:	08008563 	.word	0x08008563
 80084d8:	080085bf 	.word	0x080085bf
 80084dc:	080085bf 	.word	0x080085bf
 80084e0:	0800856b 	.word	0x0800856b
 80084e4:	080085bf 	.word	0x080085bf
 80084e8:	080085bf 	.word	0x080085bf
 80084ec:	080085bf 	.word	0x080085bf
 80084f0:	0800857b 	.word	0x0800857b
 80084f4:	080085bf 	.word	0x080085bf
 80084f8:	080085bf 	.word	0x080085bf
 80084fc:	080085bf 	.word	0x080085bf
 8008500:	080085bf 	.word	0x080085bf
 8008504:	080085bf 	.word	0x080085bf
 8008508:	080085bf 	.word	0x080085bf
 800850c:	080085bf 	.word	0x080085bf
 8008510:	0800858b 	.word	0x0800858b
 8008514:	080085bf 	.word	0x080085bf
 8008518:	080085bf 	.word	0x080085bf
 800851c:	080085bf 	.word	0x080085bf
 8008520:	080085bf 	.word	0x080085bf
 8008524:	080085bf 	.word	0x080085bf
 8008528:	080085bf 	.word	0x080085bf
 800852c:	080085bf 	.word	0x080085bf
 8008530:	080085bf 	.word	0x080085bf
 8008534:	080085bf 	.word	0x080085bf
 8008538:	080085bf 	.word	0x080085bf
 800853c:	080085bf 	.word	0x080085bf
 8008540:	080085bf 	.word	0x080085bf
 8008544:	080085bf 	.word	0x080085bf
 8008548:	080085bf 	.word	0x080085bf
 800854c:	080085bf 	.word	0x080085bf
 8008550:	080085b1 	.word	0x080085b1
 8008554:	2b40      	cmp	r3, #64	@ 0x40
 8008556:	d02e      	beq.n	80085b6 <UART_SetConfig+0xab2>
 8008558:	e031      	b.n	80085be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855a:	f7fc ffa7 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 800855e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008560:	e033      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008562:	f7fc ffb9 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 8008566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008568:	e02f      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800856a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe f99c 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008578:	e027      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857a:	f107 0318 	add.w	r3, r7, #24
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fae8 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e01f      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800858a:	4b69      	ldr	r3, [pc, #420]	@ (8008730 <UART_SetConfig+0xc2c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008596:	4b66      	ldr	r3, [pc, #408]	@ (8008730 <UART_SetConfig+0xc2c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a64      	ldr	r2, [pc, #400]	@ (8008734 <UART_SetConfig+0xc30>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085a8:	e00f      	b.n	80085ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80085aa:	4b62      	ldr	r3, [pc, #392]	@ (8008734 <UART_SetConfig+0xc30>)
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ae:	e00c      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085b0:	4b61      	ldr	r3, [pc, #388]	@ (8008738 <UART_SetConfig+0xc34>)
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b4:	e009      	b.n	80085ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085bc:	e005      	b.n	80085ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80ea 	beq.w	80087a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d6:	4a55      	ldr	r2, [pc, #340]	@ (800872c <UART_SetConfig+0xc28>)
 80085d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085dc:	461a      	mov	r2, r3
 80085de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e4:	005a      	lsls	r2, r3, #1
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	441a      	add	r2, r3
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fa:	2b0f      	cmp	r3, #15
 80085fc:	d916      	bls.n	800862c <UART_SetConfig+0xb28>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008604:	d212      	bcs.n	800862c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	b29b      	uxth	r3, r3
 800860a:	f023 030f 	bic.w	r3, r3, #15
 800860e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	b29b      	uxth	r3, r3
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	b29a      	uxth	r2, r3
 800861c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800861e:	4313      	orrs	r3, r2
 8008620:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	e0bc      	b.n	80087a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008632:	e0b8      	b.n	80087a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008634:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008638:	2b20      	cmp	r3, #32
 800863a:	dc4b      	bgt.n	80086d4 <UART_SetConfig+0xbd0>
 800863c:	2b00      	cmp	r3, #0
 800863e:	f2c0 8087 	blt.w	8008750 <UART_SetConfig+0xc4c>
 8008642:	2b20      	cmp	r3, #32
 8008644:	f200 8084 	bhi.w	8008750 <UART_SetConfig+0xc4c>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0xb4c>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	080086db 	.word	0x080086db
 8008654:	080086e3 	.word	0x080086e3
 8008658:	08008751 	.word	0x08008751
 800865c:	08008751 	.word	0x08008751
 8008660:	080086eb 	.word	0x080086eb
 8008664:	08008751 	.word	0x08008751
 8008668:	08008751 	.word	0x08008751
 800866c:	08008751 	.word	0x08008751
 8008670:	080086fb 	.word	0x080086fb
 8008674:	08008751 	.word	0x08008751
 8008678:	08008751 	.word	0x08008751
 800867c:	08008751 	.word	0x08008751
 8008680:	08008751 	.word	0x08008751
 8008684:	08008751 	.word	0x08008751
 8008688:	08008751 	.word	0x08008751
 800868c:	08008751 	.word	0x08008751
 8008690:	0800870b 	.word	0x0800870b
 8008694:	08008751 	.word	0x08008751
 8008698:	08008751 	.word	0x08008751
 800869c:	08008751 	.word	0x08008751
 80086a0:	08008751 	.word	0x08008751
 80086a4:	08008751 	.word	0x08008751
 80086a8:	08008751 	.word	0x08008751
 80086ac:	08008751 	.word	0x08008751
 80086b0:	08008751 	.word	0x08008751
 80086b4:	08008751 	.word	0x08008751
 80086b8:	08008751 	.word	0x08008751
 80086bc:	08008751 	.word	0x08008751
 80086c0:	08008751 	.word	0x08008751
 80086c4:	08008751 	.word	0x08008751
 80086c8:	08008751 	.word	0x08008751
 80086cc:	08008751 	.word	0x08008751
 80086d0:	08008743 	.word	0x08008743
 80086d4:	2b40      	cmp	r3, #64	@ 0x40
 80086d6:	d037      	beq.n	8008748 <UART_SetConfig+0xc44>
 80086d8:	e03a      	b.n	8008750 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086da:	f7fc fee7 	bl	80054ac <HAL_RCC_GetPCLK1Freq>
 80086de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086e0:	e03c      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e2:	f7fc fef9 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 80086e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086e8:	e038      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe f8dc 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f8:	e030      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fa:	f107 0318 	add.w	r3, r7, #24
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fa28 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008708:	e028      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <UART_SetConfig+0xc2c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d012      	beq.n	800873c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008716:	4b06      	ldr	r3, [pc, #24]	@ (8008730 <UART_SetConfig+0xc2c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	08db      	lsrs	r3, r3, #3
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	4a04      	ldr	r2, [pc, #16]	@ (8008734 <UART_SetConfig+0xc30>)
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008728:	e018      	b.n	800875c <UART_SetConfig+0xc58>
 800872a:	bf00      	nop
 800872c:	0800abf8 	.word	0x0800abf8
 8008730:	58024400 	.word	0x58024400
 8008734:	03d09000 	.word	0x03d09000
 8008738:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800873c:	4b24      	ldr	r3, [pc, #144]	@ (80087d0 <UART_SetConfig+0xccc>)
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	e00c      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008742:	4b24      	ldr	r3, [pc, #144]	@ (80087d4 <UART_SetConfig+0xcd0>)
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008746:	e009      	b.n	800875c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874e:	e005      	b.n	800875c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800875a:	bf00      	nop
    }

    if (pclk != 0U)
 800875c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d021      	beq.n	80087a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008766:	4a1c      	ldr	r2, [pc, #112]	@ (80087d8 <UART_SetConfig+0xcd4>)
 8008768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800876c:	461a      	mov	r2, r3
 800876e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008770:	fbb3 f2f2 	udiv	r2, r3, r2
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	085b      	lsrs	r3, r3, #1
 800877a:	441a      	add	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	2b0f      	cmp	r3, #15
 800878a:	d909      	bls.n	80087a0 <UART_SetConfig+0xc9c>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008792:	d205      	bcs.n	80087a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	b29a      	uxth	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	e002      	b.n	80087a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2200      	movs	r2, #0
 80087ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087c2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3748      	adds	r7, #72	@ 0x48
 80087ca:	46bd      	mov	sp, r7
 80087cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087d0:	03d09000 	.word	0x03d09000
 80087d4:	003d0900 	.word	0x003d0900
 80087d8:	0800abf8 	.word	0x0800abf8

080087dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01a      	beq.n	80088f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088da:	d10a      	bne.n	80088f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	605a      	str	r2, [r3, #4]
  }
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b098      	sub	sp, #96	@ 0x60
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008930:	f7fa fcea 	bl	8003308 <HAL_GetTick>
 8008934:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d12f      	bne.n	80089a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800894c:	2200      	movs	r2, #0
 800894e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f88e 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d022      	beq.n	80089a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008972:	653b      	str	r3, [r7, #80]	@ 0x50
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800897c:	647b      	str	r3, [r7, #68]	@ 0x44
 800897e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800898a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e063      	b.n	8008a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d149      	bne.n	8008a46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f857 	bl	8008a74 <UART_WaitOnFlagUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d03c      	beq.n	8008a46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	623b      	str	r3, [r7, #32]
   return(result);
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e6      	bne.n	80089cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a1e:	61fa      	str	r2, [r7, #28]
 8008a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	69b9      	ldr	r1, [r7, #24]
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e5      	bne.n	80089fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e012      	b.n	8008a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3758      	adds	r7, #88	@ 0x58
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a84:	e04f      	b.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d04b      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8e:	f7fa fc3b 	bl	8003308 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d302      	bcc.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e04e      	b.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d037      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b80      	cmp	r3, #128	@ 0x80
 8008aba:	d034      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b40      	cmp	r3, #64	@ 0x40
 8008ac0:	d031      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d110      	bne.n	8008af2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f95b 	bl	8008d94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e029      	b.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b00:	d111      	bne.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 f941 	bl	8008d94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e00f      	b.n	8008b46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	bf0c      	ite	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	2300      	movne	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d0a0      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b0a3      	sub	sp, #140	@ 0x8c
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b82:	d10e      	bne.n	8008ba2 <UART_Start_Receive_IT+0x52>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d105      	bne.n	8008b98 <UART_Start_Receive_IT+0x48>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b96:	e02d      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	22ff      	movs	r2, #255	@ 0xff
 8008b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ba0:	e028      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10d      	bne.n	8008bc6 <UART_Start_Receive_IT+0x76>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <UART_Start_Receive_IT+0x6c>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	22ff      	movs	r2, #255	@ 0xff
 8008bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bba:	e01b      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	227f      	movs	r2, #127	@ 0x7f
 8008bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bc4:	e016      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bce:	d10d      	bne.n	8008bec <UART_Start_Receive_IT+0x9c>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <UART_Start_Receive_IT+0x92>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	227f      	movs	r2, #127	@ 0x7f
 8008bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008be0:	e008      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	223f      	movs	r2, #63	@ 0x3f
 8008be6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bea:	e003      	b.n	8008bf4 <UART_Start_Receive_IT+0xa4>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2222      	movs	r2, #34	@ 0x22
 8008c00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c28:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e3      	bne.n	8008c04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c44:	d14f      	bne.n	8008ce6 <UART_Start_Receive_IT+0x196>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d349      	bcc.n	8008ce6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c5a:	d107      	bne.n	8008c6c <UART_Start_Receive_IT+0x11c>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4a47      	ldr	r2, [pc, #284]	@ (8008d84 <UART_Start_Receive_IT+0x234>)
 8008c68:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c6a:	e002      	b.n	8008c72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4a46      	ldr	r2, [pc, #280]	@ (8008d88 <UART_Start_Receive_IT+0x238>)
 8008c70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01a      	beq.n	8008cb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c9e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ca2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e4      	bne.n	8008c7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008cd2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_Start_Receive_IT+0x160>
 8008ce4:	e046      	b.n	8008d74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cee:	d107      	bne.n	8008d00 <UART_Start_Receive_IT+0x1b0>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4a24      	ldr	r2, [pc, #144]	@ (8008d8c <UART_Start_Receive_IT+0x23c>)
 8008cfc:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cfe:	e002      	b.n	8008d06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a23      	ldr	r2, [pc, #140]	@ (8008d90 <UART_Start_Receive_IT+0x240>)
 8008d04:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d019      	beq.n	8008d42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d22:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e6      	bne.n	8008d0e <UART_Start_Receive_IT+0x1be>
 8008d40:	e018      	b.n	8008d74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f043 0320 	orr.w	r3, r3, #32
 8008d56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d60:	623b      	str	r3, [r7, #32]
 8008d62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	69f9      	ldr	r1, [r7, #28]
 8008d66:	6a3a      	ldr	r2, [r7, #32]
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e6      	bne.n	8008d42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	378c      	adds	r7, #140	@ 0x8c
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	080095b1 	.word	0x080095b1
 8008d88:	0800924d 	.word	0x0800924d
 8008d8c:	08009095 	.word	0x08009095
 8008d90:	08008edd 	.word	0x08008edd

08008d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b095      	sub	sp, #84	@ 0x54
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e6      	bne.n	8008d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e5c <UART_EndRxTransfer+0xc8>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3308      	adds	r3, #8
 8008dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e5      	bne.n	8008dce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d118      	bne.n	8008e3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f023 0310 	bic.w	r3, r3, #16
 8008e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6979      	ldr	r1, [r7, #20]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	613b      	str	r3, [r7, #16]
   return(result);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e6      	bne.n	8008e0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e50:	bf00      	nop
 8008e52:	3754      	adds	r7, #84	@ 0x54
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	effffffe 	.word	0xeffffffe

08008e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7fe fe2e 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea0:	61fb      	str	r3, [r7, #28]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	61bb      	str	r3, [r7, #24]
 8008eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe fdf9 	bl	8007ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ed2:	bf00      	nop
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b09c      	sub	sp, #112	@ 0x70
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef4:	2b22      	cmp	r3, #34	@ 0x22
 8008ef6:	f040 80be 	bne.w	8009076 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008f08:	b2d9      	uxtb	r1, r3
 8008f0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f14:	400a      	ands	r2, r1
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 80a1 	bne.w	8009086 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e6      	bne.n	8008f44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3308      	adds	r3, #8
 8008f94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f96:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a33      	ldr	r2, [pc, #204]	@ (8009090 <UART_RxISR_8BIT+0x1b4>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d01f      	beq.n	8009008 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d018      	beq.n	8009008 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fea:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e6      	bne.n	8008fd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d12e      	bne.n	800906e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	60fb      	str	r3, [r7, #12]
   return(result);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0310 	bic.w	r3, r3, #16
 800902a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	69b9      	ldr	r1, [r7, #24]
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	617b      	str	r3, [r7, #20]
   return(result);
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b10      	cmp	r3, #16
 8009054:	d103      	bne.n	800905e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2210      	movs	r2, #16
 800905c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fe fd40 	bl	8007aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800906c:	e00b      	b.n	8009086 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7f7 fc0a 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 8009074:	e007      	b.n	8009086 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f042 0208 	orr.w	r2, r2, #8
 8009084:	619a      	str	r2, [r3, #24]
}
 8009086:	bf00      	nop
 8009088:	3770      	adds	r7, #112	@ 0x70
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	58000c00 	.word	0x58000c00

08009094 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b09c      	sub	sp, #112	@ 0x70
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090ac:	2b22      	cmp	r3, #34	@ 0x22
 80090ae:	f040 80be 	bne.w	800922e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80090c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80090ca:	4013      	ands	r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d6:	1c9a      	adds	r2, r3, #2
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 80a1 	bne.w	800923e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800910a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800910c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009110:	667b      	str	r3, [r7, #100]	@ 0x64
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911a:	657b      	str	r3, [r7, #84]	@ 0x54
 800911c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009120:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e6      	bne.n	80090fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	663b      	str	r3, [r7, #96]	@ 0x60
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800914e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a33      	ldr	r2, [pc, #204]	@ (8009248 <UART_RxISR_16BIT+0x1b4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d01f      	beq.n	80091c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d018      	beq.n	80091c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	61fb      	str	r3, [r7, #28]
   return(result);
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e6      	bne.n	800918e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d12e      	bne.n	8009226 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	60bb      	str	r3, [r7, #8]
   return(result);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f023 0310 	bic.w	r3, r3, #16
 80091e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	613b      	str	r3, [r7, #16]
   return(result);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e6      	bne.n	80091ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b10      	cmp	r3, #16
 800920c:	d103      	bne.n	8009216 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2210      	movs	r2, #16
 8009214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7fe fc64 	bl	8007aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009224:	e00b      	b.n	800923e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f7 fb2e 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 800922c:	e007      	b.n	800923e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0208 	orr.w	r2, r2, #8
 800923c:	619a      	str	r2, [r3, #24]
}
 800923e:	bf00      	nop
 8009240:	3770      	adds	r7, #112	@ 0x70
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	58000c00 	.word	0x58000c00

0800924c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b0ac      	sub	sp, #176	@ 0xb0
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800925a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009282:	2b22      	cmp	r3, #34	@ 0x22
 8009284:	f040 8181 	bne.w	800958a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800928e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009292:	e124      	b.n	80094de <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800929e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80092a2:	b2d9      	uxtb	r1, r3
 80092a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ae:	400a      	ands	r2, r1
 80092b0:	b2d2      	uxtb	r2, r2
 80092b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d053      	beq.n	800938e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d011      	beq.n	8009316 <UART_RxISR_8BIT_FIFOEN+0xca>
 80092f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2201      	movs	r2, #1
 8009304:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930c:	f043 0201 	orr.w	r2, r3, #1
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d011      	beq.n	8009346 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2202      	movs	r2, #2
 8009334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933c:	f043 0204 	orr.w	r2, r3, #4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d011      	beq.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2204      	movs	r2, #4
 8009364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936c:	f043 0202 	orr.w	r2, r3, #2
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937c:	2b00      	cmp	r3, #0
 800937e:	d006      	beq.n	800938e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe fba9 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 80a1 	bne.w	80094de <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80093aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093c0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80093c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80093cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e4      	bne.n	800939c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80093e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093e4:	4b6f      	ldr	r3, [pc, #444]	@ (80095a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80093f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80093fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e3      	bne.n	80093d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a61      	ldr	r2, [pc, #388]	@ (80095a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d021      	beq.n	800946c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01a      	beq.n	800946c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800944a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009458:	657b      	str	r3, [r7, #84]	@ 0x54
 800945a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800945e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e4      	bne.n	8009436 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009470:	2b01      	cmp	r3, #1
 8009472:	d130      	bne.n	80094d6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	f023 0310 	bic.w	r3, r3, #16
 800948e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800949c:	643b      	str	r3, [r7, #64]	@ 0x40
 800949e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e4      	bne.n	800947a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d103      	bne.n	80094c6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2210      	movs	r2, #16
 80094c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fe fb0c 	bl	8007aec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80094d4:	e00e      	b.n	80094f4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7f7 f9d6 	bl	8000888 <HAL_UART_RxCpltCallback>
        break;
 80094dc:	e00a      	b.n	80094f4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094de:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d006      	beq.n	80094f4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80094e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f47f aed0 	bne.w	8009294 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009502:	2b00      	cmp	r3, #0
 8009504:	d049      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800950c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009510:	429a      	cmp	r2, r3
 8009512:	d242      	bcs.n	800959a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	61fb      	str	r3, [r7, #28]
   return(result);
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800952a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800953e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e3      	bne.n	8009514 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a17      	ldr	r2, [pc, #92]	@ (80095ac <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009550:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f043 0320 	orr.w	r3, r3, #32
 8009566:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009574:	61bb      	str	r3, [r7, #24]
 8009576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6979      	ldr	r1, [r7, #20]
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	613b      	str	r3, [r7, #16]
   return(result);
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e4      	bne.n	8009552 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009588:	e007      	b.n	800959a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0208 	orr.w	r2, r2, #8
 8009598:	619a      	str	r2, [r3, #24]
}
 800959a:	bf00      	nop
 800959c:	37b0      	adds	r7, #176	@ 0xb0
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	effffffe 	.word	0xeffffffe
 80095a8:	58000c00 	.word	0x58000c00
 80095ac:	08008edd 	.word	0x08008edd

080095b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b0ae      	sub	sp, #184	@ 0xb8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095e6:	2b22      	cmp	r3, #34	@ 0x22
 80095e8:	f040 8185 	bne.w	80098f6 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095f6:	e128      	b.n	800984a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800960a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800960e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009612:	4013      	ands	r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800961a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009620:	1c9a      	adds	r2, r3, #2
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d053      	beq.n	80096f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800964e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <UART_RxISR_16BIT_FIFOEN+0xce>
 800965a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800965e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2201      	movs	r2, #1
 800966c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009674:	f043 0201 	orr.w	r2, r3, #1
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800967e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800968a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00b      	beq.n	80096ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2202      	movs	r2, #2
 800969c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a4:	f043 0204 	orr.w	r2, r3, #4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d011      	beq.n	80096de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00b      	beq.n	80096de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2204      	movs	r2, #4
 80096cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d4:	f043 0202 	orr.w	r2, r3, #2
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d006      	beq.n	80096f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7fe f9f5 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 80a3 	bne.w	800984a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800972a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800972e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e2      	bne.n	8009704 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800974e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009750:	4b6f      	ldr	r3, [pc, #444]	@ (8009910 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009752:	4013      	ands	r3, r2
 8009754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3308      	adds	r3, #8
 800975e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009762:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009764:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009768:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e3      	bne.n	800973e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a61      	ldr	r2, [pc, #388]	@ (8009914 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d021      	beq.n	80097d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01a      	beq.n	80097d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e4      	bne.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d130      	bne.n	8009842 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	f023 0310 	bic.w	r3, r3, #16
 80097fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009808:	647b      	str	r3, [r7, #68]	@ 0x44
 800980a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800980e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e4      	bne.n	80097e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f003 0310 	and.w	r3, r3, #16
 8009826:	2b10      	cmp	r3, #16
 8009828:	d103      	bne.n	8009832 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7fe f956 	bl	8007aec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009840:	e00e      	b.n	8009860 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f7 f820 	bl	8000888 <HAL_UART_RxCpltCallback>
        break;
 8009848:	e00a      	b.n	8009860 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800984a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800984e:	2b00      	cmp	r3, #0
 8009850:	d006      	beq.n	8009860 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8009852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	f47f aecc 	bne.w	80095f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009866:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800986a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800986e:	2b00      	cmp	r3, #0
 8009870:	d049      	beq.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x356>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009878:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800987c:	429a      	cmp	r2, r3
 800987e:	d242      	bcs.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	623b      	str	r3, [r7, #32]
   return(result);
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80098a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80098a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e3      	bne.n	8009880 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a17      	ldr	r2, [pc, #92]	@ (8009918 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80098bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f043 0320 	orr.w	r3, r3, #32
 80098d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	69b9      	ldr	r1, [r7, #24]
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	617b      	str	r3, [r7, #20]
   return(result);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e4      	bne.n	80098be <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098f4:	e007      	b.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699a      	ldr	r2, [r3, #24]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0208 	orr.w	r2, r2, #8
 8009904:	619a      	str	r2, [r3, #24]
}
 8009906:	bf00      	nop
 8009908:	37b8      	adds	r7, #184	@ 0xb8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	effffffe 	.word	0xeffffffe
 8009914:	58000c00 	.word	0x58000c00
 8009918:	08009095 	.word	0x08009095

0800991c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <HAL_UARTEx_DisableFifoMode+0x16>
 800996a:	2302      	movs	r3, #2
 800996c:	e027      	b.n	80099be <HAL_UARTEx_DisableFifoMode+0x66>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2224      	movs	r2, #36	@ 0x24
 800997a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0201 	bic.w	r2, r2, #1
 8009994:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800999c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d101      	bne.n	80099e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099de:	2302      	movs	r3, #2
 80099e0:	e02d      	b.n	8009a3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2224      	movs	r2, #36	@ 0x24
 80099ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0201 	bic.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f850 	bl	8009ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d101      	bne.n	8009a5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e02d      	b.n	8009aba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2224      	movs	r2, #36	@ 0x24
 8009a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f812 	bl	8009ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d108      	bne.n	8009ae6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ae4:	e031      	b.n	8009b4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ae6:	2310      	movs	r3, #16
 8009ae8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009aea:	2310      	movs	r3, #16
 8009aec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	0e5b      	lsrs	r3, r3, #25
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	0f5b      	lsrs	r3, r3, #29
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	7b3a      	ldrb	r2, [r7, #12]
 8009b12:	4911      	ldr	r1, [pc, #68]	@ (8009b58 <UARTEx_SetNbDataToProcess+0x94>)
 8009b14:	5c8a      	ldrb	r2, [r1, r2]
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b1a:	7b3a      	ldrb	r2, [r7, #12]
 8009b1c:	490f      	ldr	r1, [pc, #60]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x98>)
 8009b1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	7b7a      	ldrb	r2, [r7, #13]
 8009b30:	4909      	ldr	r1, [pc, #36]	@ (8009b58 <UARTEx_SetNbDataToProcess+0x94>)
 8009b32:	5c8a      	ldrb	r2, [r1, r2]
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b38:	7b7a      	ldrb	r2, [r7, #13]
 8009b3a:	4908      	ldr	r1, [pc, #32]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x98>)
 8009b3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	0800ac10 	.word	0x0800ac10
 8009b5c:	0800ac18 	.word	0x0800ac18

08009b60 <std>:
 8009b60:	2300      	movs	r3, #0
 8009b62:	b510      	push	{r4, lr}
 8009b64:	4604      	mov	r4, r0
 8009b66:	e9c0 3300 	strd	r3, r3, [r0]
 8009b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b6e:	6083      	str	r3, [r0, #8]
 8009b70:	8181      	strh	r1, [r0, #12]
 8009b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b74:	81c2      	strh	r2, [r0, #14]
 8009b76:	6183      	str	r3, [r0, #24]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	2208      	movs	r2, #8
 8009b7c:	305c      	adds	r0, #92	@ 0x5c
 8009b7e:	f000 f906 	bl	8009d8e <memset>
 8009b82:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb8 <std+0x58>)
 8009b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <std+0x5c>)
 8009b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc0 <std+0x60>)
 8009b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <std+0x64>)
 8009b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b92:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <std+0x68>)
 8009b94:	6224      	str	r4, [r4, #32]
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d006      	beq.n	8009ba8 <std+0x48>
 8009b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b9e:	4294      	cmp	r4, r2
 8009ba0:	d002      	beq.n	8009ba8 <std+0x48>
 8009ba2:	33d0      	adds	r3, #208	@ 0xd0
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	d105      	bne.n	8009bb4 <std+0x54>
 8009ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb0:	f000 b966 	b.w	8009e80 <__retarget_lock_init_recursive>
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	bf00      	nop
 8009bb8:	08009d09 	.word	0x08009d09
 8009bbc:	08009d2b 	.word	0x08009d2b
 8009bc0:	08009d63 	.word	0x08009d63
 8009bc4:	08009d87 	.word	0x08009d87
 8009bc8:	24000538 	.word	0x24000538

08009bcc <stdio_exit_handler>:
 8009bcc:	4a02      	ldr	r2, [pc, #8]	@ (8009bd8 <stdio_exit_handler+0xc>)
 8009bce:	4903      	ldr	r1, [pc, #12]	@ (8009bdc <stdio_exit_handler+0x10>)
 8009bd0:	4803      	ldr	r0, [pc, #12]	@ (8009be0 <stdio_exit_handler+0x14>)
 8009bd2:	f000 b869 	b.w	8009ca8 <_fwalk_sglue>
 8009bd6:	bf00      	nop
 8009bd8:	24000010 	.word	0x24000010
 8009bdc:	0800a73d 	.word	0x0800a73d
 8009be0:	24000020 	.word	0x24000020

08009be4 <cleanup_stdio>:
 8009be4:	6841      	ldr	r1, [r0, #4]
 8009be6:	4b0c      	ldr	r3, [pc, #48]	@ (8009c18 <cleanup_stdio+0x34>)
 8009be8:	4299      	cmp	r1, r3
 8009bea:	b510      	push	{r4, lr}
 8009bec:	4604      	mov	r4, r0
 8009bee:	d001      	beq.n	8009bf4 <cleanup_stdio+0x10>
 8009bf0:	f000 fda4 	bl	800a73c <_fflush_r>
 8009bf4:	68a1      	ldr	r1, [r4, #8]
 8009bf6:	4b09      	ldr	r3, [pc, #36]	@ (8009c1c <cleanup_stdio+0x38>)
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d002      	beq.n	8009c02 <cleanup_stdio+0x1e>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fd9d 	bl	800a73c <_fflush_r>
 8009c02:	68e1      	ldr	r1, [r4, #12]
 8009c04:	4b06      	ldr	r3, [pc, #24]	@ (8009c20 <cleanup_stdio+0x3c>)
 8009c06:	4299      	cmp	r1, r3
 8009c08:	d004      	beq.n	8009c14 <cleanup_stdio+0x30>
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	f000 bd94 	b.w	800a73c <_fflush_r>
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	24000538 	.word	0x24000538
 8009c1c:	240005a0 	.word	0x240005a0
 8009c20:	24000608 	.word	0x24000608

08009c24 <global_stdio_init.part.0>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	4b0b      	ldr	r3, [pc, #44]	@ (8009c54 <global_stdio_init.part.0+0x30>)
 8009c28:	4c0b      	ldr	r4, [pc, #44]	@ (8009c58 <global_stdio_init.part.0+0x34>)
 8009c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c5c <global_stdio_init.part.0+0x38>)
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	4620      	mov	r0, r4
 8009c30:	2200      	movs	r2, #0
 8009c32:	2104      	movs	r1, #4
 8009c34:	f7ff ff94 	bl	8009b60 <std>
 8009c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	2109      	movs	r1, #9
 8009c40:	f7ff ff8e 	bl	8009b60 <std>
 8009c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c48:	2202      	movs	r2, #2
 8009c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c4e:	2112      	movs	r1, #18
 8009c50:	f7ff bf86 	b.w	8009b60 <std>
 8009c54:	24000670 	.word	0x24000670
 8009c58:	24000538 	.word	0x24000538
 8009c5c:	08009bcd 	.word	0x08009bcd

08009c60 <__sfp_lock_acquire>:
 8009c60:	4801      	ldr	r0, [pc, #4]	@ (8009c68 <__sfp_lock_acquire+0x8>)
 8009c62:	f000 b90e 	b.w	8009e82 <__retarget_lock_acquire_recursive>
 8009c66:	bf00      	nop
 8009c68:	24000679 	.word	0x24000679

08009c6c <__sfp_lock_release>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	@ (8009c74 <__sfp_lock_release+0x8>)
 8009c6e:	f000 b909 	b.w	8009e84 <__retarget_lock_release_recursive>
 8009c72:	bf00      	nop
 8009c74:	24000679 	.word	0x24000679

08009c78 <__sinit>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	f7ff fff0 	bl	8009c60 <__sfp_lock_acquire>
 8009c80:	6a23      	ldr	r3, [r4, #32]
 8009c82:	b11b      	cbz	r3, 8009c8c <__sinit+0x14>
 8009c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c88:	f7ff bff0 	b.w	8009c6c <__sfp_lock_release>
 8009c8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ca0 <__sinit+0x28>)
 8009c8e:	6223      	str	r3, [r4, #32]
 8009c90:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <__sinit+0x2c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f5      	bne.n	8009c84 <__sinit+0xc>
 8009c98:	f7ff ffc4 	bl	8009c24 <global_stdio_init.part.0>
 8009c9c:	e7f2      	b.n	8009c84 <__sinit+0xc>
 8009c9e:	bf00      	nop
 8009ca0:	08009be5 	.word	0x08009be5
 8009ca4:	24000670 	.word	0x24000670

08009ca8 <_fwalk_sglue>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4607      	mov	r7, r0
 8009cae:	4688      	mov	r8, r1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8009cbc:	d505      	bpl.n	8009cca <_fwalk_sglue+0x22>
 8009cbe:	6824      	ldr	r4, [r4, #0]
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	d1f7      	bne.n	8009cb4 <_fwalk_sglue+0xc>
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d907      	bls.n	8009ce0 <_fwalk_sglue+0x38>
 8009cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	d003      	beq.n	8009ce0 <_fwalk_sglue+0x38>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4638      	mov	r0, r7
 8009cdc:	47c0      	blx	r8
 8009cde:	4306      	orrs	r6, r0
 8009ce0:	3568      	adds	r5, #104	@ 0x68
 8009ce2:	e7e9      	b.n	8009cb8 <_fwalk_sglue+0x10>

08009ce4 <iprintf>:
 8009ce4:	b40f      	push	{r0, r1, r2, r3}
 8009ce6:	b507      	push	{r0, r1, r2, lr}
 8009ce8:	4906      	ldr	r1, [pc, #24]	@ (8009d04 <iprintf+0x20>)
 8009cea:	ab04      	add	r3, sp, #16
 8009cec:	6808      	ldr	r0, [r1, #0]
 8009cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf2:	6881      	ldr	r1, [r0, #8]
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f000 f9f7 	bl	800a0e8 <_vfiprintf_r>
 8009cfa:	b003      	add	sp, #12
 8009cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d00:	b004      	add	sp, #16
 8009d02:	4770      	bx	lr
 8009d04:	2400001c 	.word	0x2400001c

08009d08 <__sread>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	f000 f868 	bl	8009de4 <_read_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	bfab      	itete	ge
 8009d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d1c:	181b      	addge	r3, r3, r0
 8009d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d22:	bfac      	ite	ge
 8009d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d26:	81a3      	strhlt	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__swrite>:
 8009d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	461f      	mov	r7, r3
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	05db      	lsls	r3, r3, #23
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	4616      	mov	r6, r2
 8009d3a:	d505      	bpl.n	8009d48 <__swrite+0x1e>
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2302      	movs	r3, #2
 8009d42:	2200      	movs	r2, #0
 8009d44:	f000 f83c 	bl	8009dc0 <_lseek_r>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	f000 b853 	b.w	8009e08 <_write_r>

08009d62 <__sseek>:
 8009d62:	b510      	push	{r4, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f000 f829 	bl	8009dc0 <_lseek_r>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	bf15      	itete	ne
 8009d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d7e:	81a3      	strheq	r3, [r4, #12]
 8009d80:	bf18      	it	ne
 8009d82:	81a3      	strhne	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__sclose>:
 8009d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8a:	f000 b809 	b.w	8009da0 <_close_r>

08009d8e <memset>:
 8009d8e:	4402      	add	r2, r0
 8009d90:	4603      	mov	r3, r0
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d100      	bne.n	8009d98 <memset+0xa>
 8009d96:	4770      	bx	lr
 8009d98:	f803 1b01 	strb.w	r1, [r3], #1
 8009d9c:	e7f9      	b.n	8009d92 <memset+0x4>
	...

08009da0 <_close_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d06      	ldr	r5, [pc, #24]	@ (8009dbc <_close_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f9 f8e7 	bl	8002f7e <_close>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_close_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_close_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	24000674 	.word	0x24000674

08009dc0 <_lseek_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d07      	ldr	r5, [pc, #28]	@ (8009de0 <_lseek_r+0x20>)
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	4611      	mov	r1, r2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	602a      	str	r2, [r5, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f7f9 f8fc 	bl	8002fcc <_lseek>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_lseek_r+0x1e>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_lseek_r+0x1e>
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	24000674 	.word	0x24000674

08009de4 <_read_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	@ (8009e04 <_read_r+0x20>)
 8009de8:	4604      	mov	r4, r0
 8009dea:	4608      	mov	r0, r1
 8009dec:	4611      	mov	r1, r2
 8009dee:	2200      	movs	r2, #0
 8009df0:	602a      	str	r2, [r5, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	f7f9 f88a 	bl	8002f0c <_read>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_read_r+0x1e>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_read_r+0x1e>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	24000674 	.word	0x24000674

08009e08 <_write_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	@ (8009e28 <_write_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f9 f895 	bl	8002f46 <_write>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_write_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_write_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	24000674 	.word	0x24000674

08009e2c <__errno>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	@ (8009e34 <__errno+0x8>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	2400001c 	.word	0x2400001c

08009e38 <__libc_init_array>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e70 <__libc_init_array+0x38>)
 8009e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e74 <__libc_init_array+0x3c>)
 8009e3e:	1b64      	subs	r4, r4, r5
 8009e40:	10a4      	asrs	r4, r4, #2
 8009e42:	2600      	movs	r6, #0
 8009e44:	42a6      	cmp	r6, r4
 8009e46:	d109      	bne.n	8009e5c <__libc_init_array+0x24>
 8009e48:	4d0b      	ldr	r5, [pc, #44]	@ (8009e78 <__libc_init_array+0x40>)
 8009e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e7c <__libc_init_array+0x44>)
 8009e4c:	f000 fdc6 	bl	800a9dc <_init>
 8009e50:	1b64      	subs	r4, r4, r5
 8009e52:	10a4      	asrs	r4, r4, #2
 8009e54:	2600      	movs	r6, #0
 8009e56:	42a6      	cmp	r6, r4
 8009e58:	d105      	bne.n	8009e66 <__libc_init_array+0x2e>
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e60:	4798      	blx	r3
 8009e62:	3601      	adds	r6, #1
 8009e64:	e7ee      	b.n	8009e44 <__libc_init_array+0xc>
 8009e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6a:	4798      	blx	r3
 8009e6c:	3601      	adds	r6, #1
 8009e6e:	e7f2      	b.n	8009e56 <__libc_init_array+0x1e>
 8009e70:	0800ac5c 	.word	0x0800ac5c
 8009e74:	0800ac5c 	.word	0x0800ac5c
 8009e78:	0800ac5c 	.word	0x0800ac5c
 8009e7c:	0800ac60 	.word	0x0800ac60

08009e80 <__retarget_lock_init_recursive>:
 8009e80:	4770      	bx	lr

08009e82 <__retarget_lock_acquire_recursive>:
 8009e82:	4770      	bx	lr

08009e84 <__retarget_lock_release_recursive>:
 8009e84:	4770      	bx	lr

08009e86 <memcpy>:
 8009e86:	440a      	add	r2, r1
 8009e88:	4291      	cmp	r1, r2
 8009e8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8e:	d100      	bne.n	8009e92 <memcpy+0xc>
 8009e90:	4770      	bx	lr
 8009e92:	b510      	push	{r4, lr}
 8009e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9c:	4291      	cmp	r1, r2
 8009e9e:	d1f9      	bne.n	8009e94 <memcpy+0xe>
 8009ea0:	bd10      	pop	{r4, pc}
	...

08009ea4 <_free_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d041      	beq.n	8009f30 <_free_r+0x8c>
 8009eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb0:	1f0c      	subs	r4, r1, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfb8      	it	lt
 8009eb6:	18e4      	addlt	r4, r4, r3
 8009eb8:	f000 f8e0 	bl	800a07c <__malloc_lock>
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f34 <_free_r+0x90>)
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	b933      	cbnz	r3, 8009ed0 <_free_r+0x2c>
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	6014      	str	r4, [r2, #0]
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ecc:	f000 b8dc 	b.w	800a088 <__malloc_unlock>
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	d908      	bls.n	8009ee6 <_free_r+0x42>
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	1821      	adds	r1, r4, r0
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	bf01      	itttt	eq
 8009edc:	6819      	ldreq	r1, [r3, #0]
 8009ede:	685b      	ldreq	r3, [r3, #4]
 8009ee0:	1809      	addeq	r1, r1, r0
 8009ee2:	6021      	streq	r1, [r4, #0]
 8009ee4:	e7ed      	b.n	8009ec2 <_free_r+0x1e>
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	b10b      	cbz	r3, 8009ef0 <_free_r+0x4c>
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	d9fa      	bls.n	8009ee6 <_free_r+0x42>
 8009ef0:	6811      	ldr	r1, [r2, #0]
 8009ef2:	1850      	adds	r0, r2, r1
 8009ef4:	42a0      	cmp	r0, r4
 8009ef6:	d10b      	bne.n	8009f10 <_free_r+0x6c>
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	4401      	add	r1, r0
 8009efc:	1850      	adds	r0, r2, r1
 8009efe:	4283      	cmp	r3, r0
 8009f00:	6011      	str	r1, [r2, #0]
 8009f02:	d1e0      	bne.n	8009ec6 <_free_r+0x22>
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	6053      	str	r3, [r2, #4]
 8009f0a:	4408      	add	r0, r1
 8009f0c:	6010      	str	r0, [r2, #0]
 8009f0e:	e7da      	b.n	8009ec6 <_free_r+0x22>
 8009f10:	d902      	bls.n	8009f18 <_free_r+0x74>
 8009f12:	230c      	movs	r3, #12
 8009f14:	602b      	str	r3, [r5, #0]
 8009f16:	e7d6      	b.n	8009ec6 <_free_r+0x22>
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	1821      	adds	r1, r4, r0
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf04      	itt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	bf04      	itt	eq
 8009f28:	1809      	addeq	r1, r1, r0
 8009f2a:	6021      	streq	r1, [r4, #0]
 8009f2c:	6054      	str	r4, [r2, #4]
 8009f2e:	e7ca      	b.n	8009ec6 <_free_r+0x22>
 8009f30:	bd38      	pop	{r3, r4, r5, pc}
 8009f32:	bf00      	nop
 8009f34:	24000680 	.word	0x24000680

08009f38 <sbrk_aligned>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8009f78 <sbrk_aligned+0x40>)
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	6831      	ldr	r1, [r6, #0]
 8009f40:	4605      	mov	r5, r0
 8009f42:	b911      	cbnz	r1, 8009f4a <sbrk_aligned+0x12>
 8009f44:	f000 fcb6 	bl	800a8b4 <_sbrk_r>
 8009f48:	6030      	str	r0, [r6, #0]
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 fcb1 	bl	800a8b4 <_sbrk_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d103      	bne.n	8009f5e <sbrk_aligned+0x26>
 8009f56:	f04f 34ff 	mov.w	r4, #4294967295
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	1cc4      	adds	r4, r0, #3
 8009f60:	f024 0403 	bic.w	r4, r4, #3
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d0f8      	beq.n	8009f5a <sbrk_aligned+0x22>
 8009f68:	1a21      	subs	r1, r4, r0
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fca2 	bl	800a8b4 <_sbrk_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d1f2      	bne.n	8009f5a <sbrk_aligned+0x22>
 8009f74:	e7ef      	b.n	8009f56 <sbrk_aligned+0x1e>
 8009f76:	bf00      	nop
 8009f78:	2400067c 	.word	0x2400067c

08009f7c <_malloc_r>:
 8009f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f80:	1ccd      	adds	r5, r1, #3
 8009f82:	f025 0503 	bic.w	r5, r5, #3
 8009f86:	3508      	adds	r5, #8
 8009f88:	2d0c      	cmp	r5, #12
 8009f8a:	bf38      	it	cc
 8009f8c:	250c      	movcc	r5, #12
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	4606      	mov	r6, r0
 8009f92:	db01      	blt.n	8009f98 <_malloc_r+0x1c>
 8009f94:	42a9      	cmp	r1, r5
 8009f96:	d904      	bls.n	8009fa2 <_malloc_r+0x26>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a078 <_malloc_r+0xfc>
 8009fa6:	f000 f869 	bl	800a07c <__malloc_lock>
 8009faa:	f8d8 3000 	ldr.w	r3, [r8]
 8009fae:	461c      	mov	r4, r3
 8009fb0:	bb44      	cbnz	r4, 800a004 <_malloc_r+0x88>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffbf 	bl	8009f38 <sbrk_aligned>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	d158      	bne.n	800a072 <_malloc_r+0xf6>
 8009fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8009fc4:	4627      	mov	r7, r4
 8009fc6:	2f00      	cmp	r7, #0
 8009fc8:	d143      	bne.n	800a052 <_malloc_r+0xd6>
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d04b      	beq.n	800a066 <_malloc_r+0xea>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	eb04 0903 	add.w	r9, r4, r3
 8009fd8:	f000 fc6c 	bl	800a8b4 <_sbrk_r>
 8009fdc:	4581      	cmp	r9, r0
 8009fde:	d142      	bne.n	800a066 <_malloc_r+0xea>
 8009fe0:	6821      	ldr	r1, [r4, #0]
 8009fe2:	1a6d      	subs	r5, r5, r1
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f7ff ffa6 	bl	8009f38 <sbrk_aligned>
 8009fec:	3001      	adds	r0, #1
 8009fee:	d03a      	beq.n	800a066 <_malloc_r+0xea>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	442b      	add	r3, r5
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	bb62      	cbnz	r2, 800a058 <_malloc_r+0xdc>
 8009ffe:	f8c8 7000 	str.w	r7, [r8]
 800a002:	e00f      	b.n	800a024 <_malloc_r+0xa8>
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	1b52      	subs	r2, r2, r5
 800a008:	d420      	bmi.n	800a04c <_malloc_r+0xd0>
 800a00a:	2a0b      	cmp	r2, #11
 800a00c:	d917      	bls.n	800a03e <_malloc_r+0xc2>
 800a00e:	1961      	adds	r1, r4, r5
 800a010:	42a3      	cmp	r3, r4
 800a012:	6025      	str	r5, [r4, #0]
 800a014:	bf18      	it	ne
 800a016:	6059      	strne	r1, [r3, #4]
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	bf08      	it	eq
 800a01c:	f8c8 1000 	streq.w	r1, [r8]
 800a020:	5162      	str	r2, [r4, r5]
 800a022:	604b      	str	r3, [r1, #4]
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f82f 	bl	800a088 <__malloc_unlock>
 800a02a:	f104 000b 	add.w	r0, r4, #11
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	f020 0007 	bic.w	r0, r0, #7
 800a034:	1ac2      	subs	r2, r0, r3
 800a036:	bf1c      	itt	ne
 800a038:	1a1b      	subne	r3, r3, r0
 800a03a:	50a3      	strne	r3, [r4, r2]
 800a03c:	e7af      	b.n	8009f9e <_malloc_r+0x22>
 800a03e:	6862      	ldr	r2, [r4, #4]
 800a040:	42a3      	cmp	r3, r4
 800a042:	bf0c      	ite	eq
 800a044:	f8c8 2000 	streq.w	r2, [r8]
 800a048:	605a      	strne	r2, [r3, #4]
 800a04a:	e7eb      	b.n	800a024 <_malloc_r+0xa8>
 800a04c:	4623      	mov	r3, r4
 800a04e:	6864      	ldr	r4, [r4, #4]
 800a050:	e7ae      	b.n	8009fb0 <_malloc_r+0x34>
 800a052:	463c      	mov	r4, r7
 800a054:	687f      	ldr	r7, [r7, #4]
 800a056:	e7b6      	b.n	8009fc6 <_malloc_r+0x4a>
 800a058:	461a      	mov	r2, r3
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	d1fb      	bne.n	800a058 <_malloc_r+0xdc>
 800a060:	2300      	movs	r3, #0
 800a062:	6053      	str	r3, [r2, #4]
 800a064:	e7de      	b.n	800a024 <_malloc_r+0xa8>
 800a066:	230c      	movs	r3, #12
 800a068:	6033      	str	r3, [r6, #0]
 800a06a:	4630      	mov	r0, r6
 800a06c:	f000 f80c 	bl	800a088 <__malloc_unlock>
 800a070:	e794      	b.n	8009f9c <_malloc_r+0x20>
 800a072:	6005      	str	r5, [r0, #0]
 800a074:	e7d6      	b.n	800a024 <_malloc_r+0xa8>
 800a076:	bf00      	nop
 800a078:	24000680 	.word	0x24000680

0800a07c <__malloc_lock>:
 800a07c:	4801      	ldr	r0, [pc, #4]	@ (800a084 <__malloc_lock+0x8>)
 800a07e:	f7ff bf00 	b.w	8009e82 <__retarget_lock_acquire_recursive>
 800a082:	bf00      	nop
 800a084:	24000678 	.word	0x24000678

0800a088 <__malloc_unlock>:
 800a088:	4801      	ldr	r0, [pc, #4]	@ (800a090 <__malloc_unlock+0x8>)
 800a08a:	f7ff befb 	b.w	8009e84 <__retarget_lock_release_recursive>
 800a08e:	bf00      	nop
 800a090:	24000678 	.word	0x24000678

0800a094 <__sfputc_r>:
 800a094:	6893      	ldr	r3, [r2, #8]
 800a096:	3b01      	subs	r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	b410      	push	{r4}
 800a09c:	6093      	str	r3, [r2, #8]
 800a09e:	da08      	bge.n	800a0b2 <__sfputc_r+0x1e>
 800a0a0:	6994      	ldr	r4, [r2, #24]
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	db01      	blt.n	800a0aa <__sfputc_r+0x16>
 800a0a6:	290a      	cmp	r1, #10
 800a0a8:	d103      	bne.n	800a0b2 <__sfputc_r+0x1e>
 800a0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ae:	f000 bb6d 	b.w	800a78c <__swbuf_r>
 800a0b2:	6813      	ldr	r3, [r2, #0]
 800a0b4:	1c58      	adds	r0, r3, #1
 800a0b6:	6010      	str	r0, [r2, #0]
 800a0b8:	7019      	strb	r1, [r3, #0]
 800a0ba:	4608      	mov	r0, r1
 800a0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <__sfputs_r>:
 800a0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	18d5      	adds	r5, r2, r3
 800a0cc:	42ac      	cmp	r4, r5
 800a0ce:	d101      	bne.n	800a0d4 <__sfputs_r+0x12>
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	e007      	b.n	800a0e4 <__sfputs_r+0x22>
 800a0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d8:	463a      	mov	r2, r7
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f7ff ffda 	bl	800a094 <__sfputc_r>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d1f3      	bne.n	800a0cc <__sfputs_r+0xa>
 800a0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0e8 <_vfiprintf_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	b09d      	sub	sp, #116	@ 0x74
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	4698      	mov	r8, r3
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	b118      	cbz	r0, 800a100 <_vfiprintf_r+0x18>
 800a0f8:	6a03      	ldr	r3, [r0, #32]
 800a0fa:	b90b      	cbnz	r3, 800a100 <_vfiprintf_r+0x18>
 800a0fc:	f7ff fdbc 	bl	8009c78 <__sinit>
 800a100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a102:	07d9      	lsls	r1, r3, #31
 800a104:	d405      	bmi.n	800a112 <_vfiprintf_r+0x2a>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	059a      	lsls	r2, r3, #22
 800a10a:	d402      	bmi.n	800a112 <_vfiprintf_r+0x2a>
 800a10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a10e:	f7ff feb8 	bl	8009e82 <__retarget_lock_acquire_recursive>
 800a112:	89ab      	ldrh	r3, [r5, #12]
 800a114:	071b      	lsls	r3, r3, #28
 800a116:	d501      	bpl.n	800a11c <_vfiprintf_r+0x34>
 800a118:	692b      	ldr	r3, [r5, #16]
 800a11a:	b99b      	cbnz	r3, 800a144 <_vfiprintf_r+0x5c>
 800a11c:	4629      	mov	r1, r5
 800a11e:	4630      	mov	r0, r6
 800a120:	f000 fb72 	bl	800a808 <__swsetup_r>
 800a124:	b170      	cbz	r0, 800a144 <_vfiprintf_r+0x5c>
 800a126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a128:	07dc      	lsls	r4, r3, #31
 800a12a:	d504      	bpl.n	800a136 <_vfiprintf_r+0x4e>
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	b01d      	add	sp, #116	@ 0x74
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	0598      	lsls	r0, r3, #22
 800a13a:	d4f7      	bmi.n	800a12c <_vfiprintf_r+0x44>
 800a13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a13e:	f7ff fea1 	bl	8009e84 <__retarget_lock_release_recursive>
 800a142:	e7f3      	b.n	800a12c <_vfiprintf_r+0x44>
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	@ 0x24
 800a148:	2320      	movs	r3, #32
 800a14a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a152:	2330      	movs	r3, #48	@ 0x30
 800a154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a304 <_vfiprintf_r+0x21c>
 800a158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a15c:	f04f 0901 	mov.w	r9, #1
 800a160:	4623      	mov	r3, r4
 800a162:	469a      	mov	sl, r3
 800a164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a168:	b10a      	cbz	r2, 800a16e <_vfiprintf_r+0x86>
 800a16a:	2a25      	cmp	r2, #37	@ 0x25
 800a16c:	d1f9      	bne.n	800a162 <_vfiprintf_r+0x7a>
 800a16e:	ebba 0b04 	subs.w	fp, sl, r4
 800a172:	d00b      	beq.n	800a18c <_vfiprintf_r+0xa4>
 800a174:	465b      	mov	r3, fp
 800a176:	4622      	mov	r2, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ffa1 	bl	800a0c2 <__sfputs_r>
 800a180:	3001      	adds	r0, #1
 800a182:	f000 80a7 	beq.w	800a2d4 <_vfiprintf_r+0x1ec>
 800a186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a188:	445a      	add	r2, fp
 800a18a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a18c:	f89a 3000 	ldrb.w	r3, [sl]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 809f 	beq.w	800a2d4 <_vfiprintf_r+0x1ec>
 800a196:	2300      	movs	r3, #0
 800a198:	f04f 32ff 	mov.w	r2, #4294967295
 800a19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a0:	f10a 0a01 	add.w	sl, sl, #1
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1ae:	4654      	mov	r4, sl
 800a1b0:	2205      	movs	r2, #5
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4853      	ldr	r0, [pc, #332]	@ (800a304 <_vfiprintf_r+0x21c>)
 800a1b8:	f7f6 f89a 	bl	80002f0 <memchr>
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	b9d8      	cbnz	r0, 800a1f8 <_vfiprintf_r+0x110>
 800a1c0:	06d1      	lsls	r1, r2, #27
 800a1c2:	bf44      	itt	mi
 800a1c4:	2320      	movmi	r3, #32
 800a1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1ca:	0713      	lsls	r3, r2, #28
 800a1cc:	bf44      	itt	mi
 800a1ce:	232b      	movmi	r3, #43	@ 0x2b
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1da:	d015      	beq.n	800a208 <_vfiprintf_r+0x120>
 800a1dc:	9a07      	ldr	r2, [sp, #28]
 800a1de:	4654      	mov	r4, sl
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f04f 0c0a 	mov.w	ip, #10
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ec:	3b30      	subs	r3, #48	@ 0x30
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	d94b      	bls.n	800a28a <_vfiprintf_r+0x1a2>
 800a1f2:	b1b0      	cbz	r0, 800a222 <_vfiprintf_r+0x13a>
 800a1f4:	9207      	str	r2, [sp, #28]
 800a1f6:	e014      	b.n	800a222 <_vfiprintf_r+0x13a>
 800a1f8:	eba0 0308 	sub.w	r3, r0, r8
 800a1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	46a2      	mov	sl, r4
 800a206:	e7d2      	b.n	800a1ae <_vfiprintf_r+0xc6>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	1d19      	adds	r1, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9103      	str	r1, [sp, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfbb      	ittet	lt
 800a214:	425b      	neglt	r3, r3
 800a216:	f042 0202 	orrlt.w	r2, r2, #2
 800a21a:	9307      	strge	r3, [sp, #28]
 800a21c:	9307      	strlt	r3, [sp, #28]
 800a21e:	bfb8      	it	lt
 800a220:	9204      	strlt	r2, [sp, #16]
 800a222:	7823      	ldrb	r3, [r4, #0]
 800a224:	2b2e      	cmp	r3, #46	@ 0x2e
 800a226:	d10a      	bne.n	800a23e <_vfiprintf_r+0x156>
 800a228:	7863      	ldrb	r3, [r4, #1]
 800a22a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a22c:	d132      	bne.n	800a294 <_vfiprintf_r+0x1ac>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	1d1a      	adds	r2, r3, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	9203      	str	r2, [sp, #12]
 800a236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a23a:	3402      	adds	r4, #2
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a314 <_vfiprintf_r+0x22c>
 800a242:	7821      	ldrb	r1, [r4, #0]
 800a244:	2203      	movs	r2, #3
 800a246:	4650      	mov	r0, sl
 800a248:	f7f6 f852 	bl	80002f0 <memchr>
 800a24c:	b138      	cbz	r0, 800a25e <_vfiprintf_r+0x176>
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	eba0 000a 	sub.w	r0, r0, sl
 800a254:	2240      	movs	r2, #64	@ 0x40
 800a256:	4082      	lsls	r2, r0
 800a258:	4313      	orrs	r3, r2
 800a25a:	3401      	adds	r4, #1
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a262:	4829      	ldr	r0, [pc, #164]	@ (800a308 <_vfiprintf_r+0x220>)
 800a264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a268:	2206      	movs	r2, #6
 800a26a:	f7f6 f841 	bl	80002f0 <memchr>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d03f      	beq.n	800a2f2 <_vfiprintf_r+0x20a>
 800a272:	4b26      	ldr	r3, [pc, #152]	@ (800a30c <_vfiprintf_r+0x224>)
 800a274:	bb1b      	cbnz	r3, 800a2be <_vfiprintf_r+0x1d6>
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	3307      	adds	r3, #7
 800a27a:	f023 0307 	bic.w	r3, r3, #7
 800a27e:	3308      	adds	r3, #8
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a284:	443b      	add	r3, r7
 800a286:	9309      	str	r3, [sp, #36]	@ 0x24
 800a288:	e76a      	b.n	800a160 <_vfiprintf_r+0x78>
 800a28a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a28e:	460c      	mov	r4, r1
 800a290:	2001      	movs	r0, #1
 800a292:	e7a8      	b.n	800a1e6 <_vfiprintf_r+0xfe>
 800a294:	2300      	movs	r3, #0
 800a296:	3401      	adds	r4, #1
 800a298:	9305      	str	r3, [sp, #20]
 800a29a:	4619      	mov	r1, r3
 800a29c:	f04f 0c0a 	mov.w	ip, #10
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a6:	3a30      	subs	r2, #48	@ 0x30
 800a2a8:	2a09      	cmp	r2, #9
 800a2aa:	d903      	bls.n	800a2b4 <_vfiprintf_r+0x1cc>
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0c6      	beq.n	800a23e <_vfiprintf_r+0x156>
 800a2b0:	9105      	str	r1, [sp, #20]
 800a2b2:	e7c4      	b.n	800a23e <_vfiprintf_r+0x156>
 800a2b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e7f0      	b.n	800a2a0 <_vfiprintf_r+0x1b8>
 800a2be:	ab03      	add	r3, sp, #12
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	462a      	mov	r2, r5
 800a2c4:	4b12      	ldr	r3, [pc, #72]	@ (800a310 <_vfiprintf_r+0x228>)
 800a2c6:	a904      	add	r1, sp, #16
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f3af 8000 	nop.w
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	1c78      	adds	r0, r7, #1
 800a2d2:	d1d6      	bne.n	800a282 <_vfiprintf_r+0x19a>
 800a2d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_vfiprintf_r+0x1fe>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_vfiprintf_r+0x1fe>
 800a2e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2e2:	f7ff fdcf 	bl	8009e84 <__retarget_lock_release_recursive>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	065b      	lsls	r3, r3, #25
 800a2ea:	f53f af1f 	bmi.w	800a12c <_vfiprintf_r+0x44>
 800a2ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2f0:	e71e      	b.n	800a130 <_vfiprintf_r+0x48>
 800a2f2:	ab03      	add	r3, sp, #12
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4b05      	ldr	r3, [pc, #20]	@ (800a310 <_vfiprintf_r+0x228>)
 800a2fa:	a904      	add	r1, sp, #16
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f000 f879 	bl	800a3f4 <_printf_i>
 800a302:	e7e4      	b.n	800a2ce <_vfiprintf_r+0x1e6>
 800a304:	0800ac20 	.word	0x0800ac20
 800a308:	0800ac2a 	.word	0x0800ac2a
 800a30c:	00000000 	.word	0x00000000
 800a310:	0800a0c3 	.word	0x0800a0c3
 800a314:	0800ac26 	.word	0x0800ac26

0800a318 <_printf_common>:
 800a318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	4616      	mov	r6, r2
 800a31e:	4698      	mov	r8, r3
 800a320:	688a      	ldr	r2, [r1, #8]
 800a322:	690b      	ldr	r3, [r1, #16]
 800a324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a328:	4293      	cmp	r3, r2
 800a32a:	bfb8      	it	lt
 800a32c:	4613      	movlt	r3, r2
 800a32e:	6033      	str	r3, [r6, #0]
 800a330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a334:	4607      	mov	r7, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b10a      	cbz	r2, 800a33e <_printf_common+0x26>
 800a33a:	3301      	adds	r3, #1
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	0699      	lsls	r1, r3, #26
 800a342:	bf42      	ittt	mi
 800a344:	6833      	ldrmi	r3, [r6, #0]
 800a346:	3302      	addmi	r3, #2
 800a348:	6033      	strmi	r3, [r6, #0]
 800a34a:	6825      	ldr	r5, [r4, #0]
 800a34c:	f015 0506 	ands.w	r5, r5, #6
 800a350:	d106      	bne.n	800a360 <_printf_common+0x48>
 800a352:	f104 0a19 	add.w	sl, r4, #25
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	6832      	ldr	r2, [r6, #0]
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	42ab      	cmp	r3, r5
 800a35e:	dc26      	bgt.n	800a3ae <_printf_common+0x96>
 800a360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a364:	6822      	ldr	r2, [r4, #0]
 800a366:	3b00      	subs	r3, #0
 800a368:	bf18      	it	ne
 800a36a:	2301      	movne	r3, #1
 800a36c:	0692      	lsls	r2, r2, #26
 800a36e:	d42b      	bmi.n	800a3c8 <_printf_common+0xb0>
 800a370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a374:	4641      	mov	r1, r8
 800a376:	4638      	mov	r0, r7
 800a378:	47c8      	blx	r9
 800a37a:	3001      	adds	r0, #1
 800a37c:	d01e      	beq.n	800a3bc <_printf_common+0xa4>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	6922      	ldr	r2, [r4, #16]
 800a382:	f003 0306 	and.w	r3, r3, #6
 800a386:	2b04      	cmp	r3, #4
 800a388:	bf02      	ittt	eq
 800a38a:	68e5      	ldreq	r5, [r4, #12]
 800a38c:	6833      	ldreq	r3, [r6, #0]
 800a38e:	1aed      	subeq	r5, r5, r3
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	bf0c      	ite	eq
 800a394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a398:	2500      	movne	r5, #0
 800a39a:	4293      	cmp	r3, r2
 800a39c:	bfc4      	itt	gt
 800a39e:	1a9b      	subgt	r3, r3, r2
 800a3a0:	18ed      	addgt	r5, r5, r3
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	341a      	adds	r4, #26
 800a3a6:	42b5      	cmp	r5, r6
 800a3a8:	d11a      	bne.n	800a3e0 <_printf_common+0xc8>
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	e008      	b.n	800a3c0 <_printf_common+0xa8>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	4652      	mov	r2, sl
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	47c8      	blx	r9
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d103      	bne.n	800a3c4 <_printf_common+0xac>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	e7c6      	b.n	800a356 <_printf_common+0x3e>
 800a3c8:	18e1      	adds	r1, r4, r3
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	2030      	movs	r0, #48	@ 0x30
 800a3ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3d2:	4422      	add	r2, r4
 800a3d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3dc:	3302      	adds	r3, #2
 800a3de:	e7c7      	b.n	800a370 <_printf_common+0x58>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	4641      	mov	r1, r8
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	47c8      	blx	r9
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d0e6      	beq.n	800a3bc <_printf_common+0xa4>
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7d9      	b.n	800a3a6 <_printf_common+0x8e>
	...

0800a3f4 <_printf_i>:
 800a3f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	7e0f      	ldrb	r7, [r1, #24]
 800a3fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3fc:	2f78      	cmp	r7, #120	@ 0x78
 800a3fe:	4691      	mov	r9, r2
 800a400:	4680      	mov	r8, r0
 800a402:	460c      	mov	r4, r1
 800a404:	469a      	mov	sl, r3
 800a406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a40a:	d807      	bhi.n	800a41c <_printf_i+0x28>
 800a40c:	2f62      	cmp	r7, #98	@ 0x62
 800a40e:	d80a      	bhi.n	800a426 <_printf_i+0x32>
 800a410:	2f00      	cmp	r7, #0
 800a412:	f000 80d2 	beq.w	800a5ba <_printf_i+0x1c6>
 800a416:	2f58      	cmp	r7, #88	@ 0x58
 800a418:	f000 80b9 	beq.w	800a58e <_printf_i+0x19a>
 800a41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a424:	e03a      	b.n	800a49c <_printf_i+0xa8>
 800a426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a42a:	2b15      	cmp	r3, #21
 800a42c:	d8f6      	bhi.n	800a41c <_printf_i+0x28>
 800a42e:	a101      	add	r1, pc, #4	@ (adr r1, 800a434 <_printf_i+0x40>)
 800a430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a434:	0800a48d 	.word	0x0800a48d
 800a438:	0800a4a1 	.word	0x0800a4a1
 800a43c:	0800a41d 	.word	0x0800a41d
 800a440:	0800a41d 	.word	0x0800a41d
 800a444:	0800a41d 	.word	0x0800a41d
 800a448:	0800a41d 	.word	0x0800a41d
 800a44c:	0800a4a1 	.word	0x0800a4a1
 800a450:	0800a41d 	.word	0x0800a41d
 800a454:	0800a41d 	.word	0x0800a41d
 800a458:	0800a41d 	.word	0x0800a41d
 800a45c:	0800a41d 	.word	0x0800a41d
 800a460:	0800a5a1 	.word	0x0800a5a1
 800a464:	0800a4cb 	.word	0x0800a4cb
 800a468:	0800a55b 	.word	0x0800a55b
 800a46c:	0800a41d 	.word	0x0800a41d
 800a470:	0800a41d 	.word	0x0800a41d
 800a474:	0800a5c3 	.word	0x0800a5c3
 800a478:	0800a41d 	.word	0x0800a41d
 800a47c:	0800a4cb 	.word	0x0800a4cb
 800a480:	0800a41d 	.word	0x0800a41d
 800a484:	0800a41d 	.word	0x0800a41d
 800a488:	0800a563 	.word	0x0800a563
 800a48c:	6833      	ldr	r3, [r6, #0]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6032      	str	r2, [r6, #0]
 800a494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a49c:	2301      	movs	r3, #1
 800a49e:	e09d      	b.n	800a5dc <_printf_i+0x1e8>
 800a4a0:	6833      	ldr	r3, [r6, #0]
 800a4a2:	6820      	ldr	r0, [r4, #0]
 800a4a4:	1d19      	adds	r1, r3, #4
 800a4a6:	6031      	str	r1, [r6, #0]
 800a4a8:	0606      	lsls	r6, r0, #24
 800a4aa:	d501      	bpl.n	800a4b0 <_printf_i+0xbc>
 800a4ac:	681d      	ldr	r5, [r3, #0]
 800a4ae:	e003      	b.n	800a4b8 <_printf_i+0xc4>
 800a4b0:	0645      	lsls	r5, r0, #25
 800a4b2:	d5fb      	bpl.n	800a4ac <_printf_i+0xb8>
 800a4b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	da03      	bge.n	800a4c4 <_printf_i+0xd0>
 800a4bc:	232d      	movs	r3, #45	@ 0x2d
 800a4be:	426d      	negs	r5, r5
 800a4c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4c4:	4859      	ldr	r0, [pc, #356]	@ (800a62c <_printf_i+0x238>)
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e011      	b.n	800a4ee <_printf_i+0xfa>
 800a4ca:	6821      	ldr	r1, [r4, #0]
 800a4cc:	6833      	ldr	r3, [r6, #0]
 800a4ce:	0608      	lsls	r0, r1, #24
 800a4d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4d4:	d402      	bmi.n	800a4dc <_printf_i+0xe8>
 800a4d6:	0649      	lsls	r1, r1, #25
 800a4d8:	bf48      	it	mi
 800a4da:	b2ad      	uxthmi	r5, r5
 800a4dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4de:	4853      	ldr	r0, [pc, #332]	@ (800a62c <_printf_i+0x238>)
 800a4e0:	6033      	str	r3, [r6, #0]
 800a4e2:	bf14      	ite	ne
 800a4e4:	230a      	movne	r3, #10
 800a4e6:	2308      	moveq	r3, #8
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4ee:	6866      	ldr	r6, [r4, #4]
 800a4f0:	60a6      	str	r6, [r4, #8]
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	bfa2      	ittt	ge
 800a4f6:	6821      	ldrge	r1, [r4, #0]
 800a4f8:	f021 0104 	bicge.w	r1, r1, #4
 800a4fc:	6021      	strge	r1, [r4, #0]
 800a4fe:	b90d      	cbnz	r5, 800a504 <_printf_i+0x110>
 800a500:	2e00      	cmp	r6, #0
 800a502:	d04b      	beq.n	800a59c <_printf_i+0x1a8>
 800a504:	4616      	mov	r6, r2
 800a506:	fbb5 f1f3 	udiv	r1, r5, r3
 800a50a:	fb03 5711 	mls	r7, r3, r1, r5
 800a50e:	5dc7      	ldrb	r7, [r0, r7]
 800a510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a514:	462f      	mov	r7, r5
 800a516:	42bb      	cmp	r3, r7
 800a518:	460d      	mov	r5, r1
 800a51a:	d9f4      	bls.n	800a506 <_printf_i+0x112>
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d10b      	bne.n	800a538 <_printf_i+0x144>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	07df      	lsls	r7, r3, #31
 800a524:	d508      	bpl.n	800a538 <_printf_i+0x144>
 800a526:	6923      	ldr	r3, [r4, #16]
 800a528:	6861      	ldr	r1, [r4, #4]
 800a52a:	4299      	cmp	r1, r3
 800a52c:	bfde      	ittt	le
 800a52e:	2330      	movle	r3, #48	@ 0x30
 800a530:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a534:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a538:	1b92      	subs	r2, r2, r6
 800a53a:	6122      	str	r2, [r4, #16]
 800a53c:	f8cd a000 	str.w	sl, [sp]
 800a540:	464b      	mov	r3, r9
 800a542:	aa03      	add	r2, sp, #12
 800a544:	4621      	mov	r1, r4
 800a546:	4640      	mov	r0, r8
 800a548:	f7ff fee6 	bl	800a318 <_printf_common>
 800a54c:	3001      	adds	r0, #1
 800a54e:	d14a      	bne.n	800a5e6 <_printf_i+0x1f2>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b004      	add	sp, #16
 800a556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	f043 0320 	orr.w	r3, r3, #32
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	4833      	ldr	r0, [pc, #204]	@ (800a630 <_printf_i+0x23c>)
 800a564:	2778      	movs	r7, #120	@ 0x78
 800a566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	6831      	ldr	r1, [r6, #0]
 800a56e:	061f      	lsls	r7, r3, #24
 800a570:	f851 5b04 	ldr.w	r5, [r1], #4
 800a574:	d402      	bmi.n	800a57c <_printf_i+0x188>
 800a576:	065f      	lsls	r7, r3, #25
 800a578:	bf48      	it	mi
 800a57a:	b2ad      	uxthmi	r5, r5
 800a57c:	6031      	str	r1, [r6, #0]
 800a57e:	07d9      	lsls	r1, r3, #31
 800a580:	bf44      	itt	mi
 800a582:	f043 0320 	orrmi.w	r3, r3, #32
 800a586:	6023      	strmi	r3, [r4, #0]
 800a588:	b11d      	cbz	r5, 800a592 <_printf_i+0x19e>
 800a58a:	2310      	movs	r3, #16
 800a58c:	e7ac      	b.n	800a4e8 <_printf_i+0xf4>
 800a58e:	4827      	ldr	r0, [pc, #156]	@ (800a62c <_printf_i+0x238>)
 800a590:	e7e9      	b.n	800a566 <_printf_i+0x172>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f023 0320 	bic.w	r3, r3, #32
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	e7f6      	b.n	800a58a <_printf_i+0x196>
 800a59c:	4616      	mov	r6, r2
 800a59e:	e7bd      	b.n	800a51c <_printf_i+0x128>
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	6825      	ldr	r5, [r4, #0]
 800a5a4:	6961      	ldr	r1, [r4, #20]
 800a5a6:	1d18      	adds	r0, r3, #4
 800a5a8:	6030      	str	r0, [r6, #0]
 800a5aa:	062e      	lsls	r6, r5, #24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	d501      	bpl.n	800a5b4 <_printf_i+0x1c0>
 800a5b0:	6019      	str	r1, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <_printf_i+0x1c6>
 800a5b4:	0668      	lsls	r0, r5, #25
 800a5b6:	d5fb      	bpl.n	800a5b0 <_printf_i+0x1bc>
 800a5b8:	8019      	strh	r1, [r3, #0]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	4616      	mov	r6, r2
 800a5c0:	e7bc      	b.n	800a53c <_printf_i+0x148>
 800a5c2:	6833      	ldr	r3, [r6, #0]
 800a5c4:	1d1a      	adds	r2, r3, #4
 800a5c6:	6032      	str	r2, [r6, #0]
 800a5c8:	681e      	ldr	r6, [r3, #0]
 800a5ca:	6862      	ldr	r2, [r4, #4]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7f5 fe8e 	bl	80002f0 <memchr>
 800a5d4:	b108      	cbz	r0, 800a5da <_printf_i+0x1e6>
 800a5d6:	1b80      	subs	r0, r0, r6
 800a5d8:	6060      	str	r0, [r4, #4]
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e4:	e7aa      	b.n	800a53c <_printf_i+0x148>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	47d0      	blx	sl
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d0ad      	beq.n	800a550 <_printf_i+0x15c>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	079b      	lsls	r3, r3, #30
 800a5f8:	d413      	bmi.n	800a622 <_printf_i+0x22e>
 800a5fa:	68e0      	ldr	r0, [r4, #12]
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	4298      	cmp	r0, r3
 800a600:	bfb8      	it	lt
 800a602:	4618      	movlt	r0, r3
 800a604:	e7a6      	b.n	800a554 <_printf_i+0x160>
 800a606:	2301      	movs	r3, #1
 800a608:	4632      	mov	r2, r6
 800a60a:	4649      	mov	r1, r9
 800a60c:	4640      	mov	r0, r8
 800a60e:	47d0      	blx	sl
 800a610:	3001      	adds	r0, #1
 800a612:	d09d      	beq.n	800a550 <_printf_i+0x15c>
 800a614:	3501      	adds	r5, #1
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	9903      	ldr	r1, [sp, #12]
 800a61a:	1a5b      	subs	r3, r3, r1
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dcf2      	bgt.n	800a606 <_printf_i+0x212>
 800a620:	e7eb      	b.n	800a5fa <_printf_i+0x206>
 800a622:	2500      	movs	r5, #0
 800a624:	f104 0619 	add.w	r6, r4, #25
 800a628:	e7f5      	b.n	800a616 <_printf_i+0x222>
 800a62a:	bf00      	nop
 800a62c:	0800ac31 	.word	0x0800ac31
 800a630:	0800ac42 	.word	0x0800ac42

0800a634 <__sflush_r>:
 800a634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	0716      	lsls	r6, r2, #28
 800a63e:	4605      	mov	r5, r0
 800a640:	460c      	mov	r4, r1
 800a642:	d454      	bmi.n	800a6ee <__sflush_r+0xba>
 800a644:	684b      	ldr	r3, [r1, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	dc02      	bgt.n	800a650 <__sflush_r+0x1c>
 800a64a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd48      	ble.n	800a6e2 <__sflush_r+0xae>
 800a650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a652:	2e00      	cmp	r6, #0
 800a654:	d045      	beq.n	800a6e2 <__sflush_r+0xae>
 800a656:	2300      	movs	r3, #0
 800a658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a65c:	682f      	ldr	r7, [r5, #0]
 800a65e:	6a21      	ldr	r1, [r4, #32]
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	d030      	beq.n	800a6c6 <__sflush_r+0x92>
 800a664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	0759      	lsls	r1, r3, #29
 800a66a:	d505      	bpl.n	800a678 <__sflush_r+0x44>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a672:	b10b      	cbz	r3, 800a678 <__sflush_r+0x44>
 800a674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	2300      	movs	r3, #0
 800a67a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a67c:	6a21      	ldr	r1, [r4, #32]
 800a67e:	4628      	mov	r0, r5
 800a680:	47b0      	blx	r6
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	d106      	bne.n	800a696 <__sflush_r+0x62>
 800a688:	6829      	ldr	r1, [r5, #0]
 800a68a:	291d      	cmp	r1, #29
 800a68c:	d82b      	bhi.n	800a6e6 <__sflush_r+0xb2>
 800a68e:	4a2a      	ldr	r2, [pc, #168]	@ (800a738 <__sflush_r+0x104>)
 800a690:	410a      	asrs	r2, r1
 800a692:	07d6      	lsls	r6, r2, #31
 800a694:	d427      	bmi.n	800a6e6 <__sflush_r+0xb2>
 800a696:	2200      	movs	r2, #0
 800a698:	6062      	str	r2, [r4, #4]
 800a69a:	04d9      	lsls	r1, r3, #19
 800a69c:	6922      	ldr	r2, [r4, #16]
 800a69e:	6022      	str	r2, [r4, #0]
 800a6a0:	d504      	bpl.n	800a6ac <__sflush_r+0x78>
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	d101      	bne.n	800a6aa <__sflush_r+0x76>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b903      	cbnz	r3, 800a6ac <__sflush_r+0x78>
 800a6aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ae:	602f      	str	r7, [r5, #0]
 800a6b0:	b1b9      	cbz	r1, 800a6e2 <__sflush_r+0xae>
 800a6b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d002      	beq.n	800a6c0 <__sflush_r+0x8c>
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7ff fbf2 	bl	8009ea4 <_free_r>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6c4:	e00d      	b.n	800a6e2 <__sflush_r+0xae>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	47b0      	blx	r6
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	1c50      	adds	r0, r2, #1
 800a6d0:	d1c9      	bne.n	800a666 <__sflush_r+0x32>
 800a6d2:	682b      	ldr	r3, [r5, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0c6      	beq.n	800a666 <__sflush_r+0x32>
 800a6d8:	2b1d      	cmp	r3, #29
 800a6da:	d001      	beq.n	800a6e0 <__sflush_r+0xac>
 800a6dc:	2b16      	cmp	r3, #22
 800a6de:	d11e      	bne.n	800a71e <__sflush_r+0xea>
 800a6e0:	602f      	str	r7, [r5, #0]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e022      	b.n	800a72c <__sflush_r+0xf8>
 800a6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	e01b      	b.n	800a726 <__sflush_r+0xf2>
 800a6ee:	690f      	ldr	r7, [r1, #16]
 800a6f0:	2f00      	cmp	r7, #0
 800a6f2:	d0f6      	beq.n	800a6e2 <__sflush_r+0xae>
 800a6f4:	0793      	lsls	r3, r2, #30
 800a6f6:	680e      	ldr	r6, [r1, #0]
 800a6f8:	bf08      	it	eq
 800a6fa:	694b      	ldreq	r3, [r1, #20]
 800a6fc:	600f      	str	r7, [r1, #0]
 800a6fe:	bf18      	it	ne
 800a700:	2300      	movne	r3, #0
 800a702:	eba6 0807 	sub.w	r8, r6, r7
 800a706:	608b      	str	r3, [r1, #8]
 800a708:	f1b8 0f00 	cmp.w	r8, #0
 800a70c:	dde9      	ble.n	800a6e2 <__sflush_r+0xae>
 800a70e:	6a21      	ldr	r1, [r4, #32]
 800a710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a712:	4643      	mov	r3, r8
 800a714:	463a      	mov	r2, r7
 800a716:	4628      	mov	r0, r5
 800a718:	47b0      	blx	r6
 800a71a:	2800      	cmp	r0, #0
 800a71c:	dc08      	bgt.n	800a730 <__sflush_r+0xfc>
 800a71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	4407      	add	r7, r0
 800a732:	eba8 0800 	sub.w	r8, r8, r0
 800a736:	e7e7      	b.n	800a708 <__sflush_r+0xd4>
 800a738:	dfbffffe 	.word	0xdfbffffe

0800a73c <_fflush_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b913      	cbnz	r3, 800a74c <_fflush_r+0x10>
 800a746:	2500      	movs	r5, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	b118      	cbz	r0, 800a756 <_fflush_r+0x1a>
 800a74e:	6a03      	ldr	r3, [r0, #32]
 800a750:	b90b      	cbnz	r3, 800a756 <_fflush_r+0x1a>
 800a752:	f7ff fa91 	bl	8009c78 <__sinit>
 800a756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0f3      	beq.n	800a746 <_fflush_r+0xa>
 800a75e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a760:	07d0      	lsls	r0, r2, #31
 800a762:	d404      	bmi.n	800a76e <_fflush_r+0x32>
 800a764:	0599      	lsls	r1, r3, #22
 800a766:	d402      	bmi.n	800a76e <_fflush_r+0x32>
 800a768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a76a:	f7ff fb8a 	bl	8009e82 <__retarget_lock_acquire_recursive>
 800a76e:	4628      	mov	r0, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f7ff ff5f 	bl	800a634 <__sflush_r>
 800a776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a778:	07da      	lsls	r2, r3, #31
 800a77a:	4605      	mov	r5, r0
 800a77c:	d4e4      	bmi.n	800a748 <_fflush_r+0xc>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d4e1      	bmi.n	800a748 <_fflush_r+0xc>
 800a784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a786:	f7ff fb7d 	bl	8009e84 <__retarget_lock_release_recursive>
 800a78a:	e7dd      	b.n	800a748 <_fflush_r+0xc>

0800a78c <__swbuf_r>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	460e      	mov	r6, r1
 800a790:	4614      	mov	r4, r2
 800a792:	4605      	mov	r5, r0
 800a794:	b118      	cbz	r0, 800a79e <__swbuf_r+0x12>
 800a796:	6a03      	ldr	r3, [r0, #32]
 800a798:	b90b      	cbnz	r3, 800a79e <__swbuf_r+0x12>
 800a79a:	f7ff fa6d 	bl	8009c78 <__sinit>
 800a79e:	69a3      	ldr	r3, [r4, #24]
 800a7a0:	60a3      	str	r3, [r4, #8]
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	071a      	lsls	r2, r3, #28
 800a7a6:	d501      	bpl.n	800a7ac <__swbuf_r+0x20>
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	b943      	cbnz	r3, 800a7be <__swbuf_r+0x32>
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f82a 	bl	800a808 <__swsetup_r>
 800a7b4:	b118      	cbz	r0, 800a7be <__swbuf_r+0x32>
 800a7b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	6922      	ldr	r2, [r4, #16]
 800a7c2:	1a98      	subs	r0, r3, r2
 800a7c4:	6963      	ldr	r3, [r4, #20]
 800a7c6:	b2f6      	uxtb	r6, r6
 800a7c8:	4283      	cmp	r3, r0
 800a7ca:	4637      	mov	r7, r6
 800a7cc:	dc05      	bgt.n	800a7da <__swbuf_r+0x4e>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f7ff ffb3 	bl	800a73c <_fflush_r>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d1ed      	bne.n	800a7b6 <__swbuf_r+0x2a>
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	60a3      	str	r3, [r4, #8]
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	6022      	str	r2, [r4, #0]
 800a7e6:	701e      	strb	r6, [r3, #0]
 800a7e8:	6962      	ldr	r2, [r4, #20]
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d004      	beq.n	800a7fa <__swbuf_r+0x6e>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	07db      	lsls	r3, r3, #31
 800a7f4:	d5e1      	bpl.n	800a7ba <__swbuf_r+0x2e>
 800a7f6:	2e0a      	cmp	r6, #10
 800a7f8:	d1df      	bne.n	800a7ba <__swbuf_r+0x2e>
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f7ff ff9d 	bl	800a73c <_fflush_r>
 800a802:	2800      	cmp	r0, #0
 800a804:	d0d9      	beq.n	800a7ba <__swbuf_r+0x2e>
 800a806:	e7d6      	b.n	800a7b6 <__swbuf_r+0x2a>

0800a808 <__swsetup_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4b29      	ldr	r3, [pc, #164]	@ (800a8b0 <__swsetup_r+0xa8>)
 800a80c:	4605      	mov	r5, r0
 800a80e:	6818      	ldr	r0, [r3, #0]
 800a810:	460c      	mov	r4, r1
 800a812:	b118      	cbz	r0, 800a81c <__swsetup_r+0x14>
 800a814:	6a03      	ldr	r3, [r0, #32]
 800a816:	b90b      	cbnz	r3, 800a81c <__swsetup_r+0x14>
 800a818:	f7ff fa2e 	bl	8009c78 <__sinit>
 800a81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a820:	0719      	lsls	r1, r3, #28
 800a822:	d422      	bmi.n	800a86a <__swsetup_r+0x62>
 800a824:	06da      	lsls	r2, r3, #27
 800a826:	d407      	bmi.n	800a838 <__swsetup_r+0x30>
 800a828:	2209      	movs	r2, #9
 800a82a:	602a      	str	r2, [r5, #0]
 800a82c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	f04f 30ff 	mov.w	r0, #4294967295
 800a836:	e033      	b.n	800a8a0 <__swsetup_r+0x98>
 800a838:	0758      	lsls	r0, r3, #29
 800a83a:	d512      	bpl.n	800a862 <__swsetup_r+0x5a>
 800a83c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a83e:	b141      	cbz	r1, 800a852 <__swsetup_r+0x4a>
 800a840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a844:	4299      	cmp	r1, r3
 800a846:	d002      	beq.n	800a84e <__swsetup_r+0x46>
 800a848:	4628      	mov	r0, r5
 800a84a:	f7ff fb2b 	bl	8009ea4 <_free_r>
 800a84e:	2300      	movs	r3, #0
 800a850:	6363      	str	r3, [r4, #52]	@ 0x34
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	2300      	movs	r3, #0
 800a85c:	6063      	str	r3, [r4, #4]
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	f043 0308 	orr.w	r3, r3, #8
 800a868:	81a3      	strh	r3, [r4, #12]
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	b94b      	cbnz	r3, 800a882 <__swsetup_r+0x7a>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a878:	d003      	beq.n	800a882 <__swsetup_r+0x7a>
 800a87a:	4621      	mov	r1, r4
 800a87c:	4628      	mov	r0, r5
 800a87e:	f000 f84f 	bl	800a920 <__smakebuf_r>
 800a882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a886:	f013 0201 	ands.w	r2, r3, #1
 800a88a:	d00a      	beq.n	800a8a2 <__swsetup_r+0x9a>
 800a88c:	2200      	movs	r2, #0
 800a88e:	60a2      	str	r2, [r4, #8]
 800a890:	6962      	ldr	r2, [r4, #20]
 800a892:	4252      	negs	r2, r2
 800a894:	61a2      	str	r2, [r4, #24]
 800a896:	6922      	ldr	r2, [r4, #16]
 800a898:	b942      	cbnz	r2, 800a8ac <__swsetup_r+0xa4>
 800a89a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a89e:	d1c5      	bne.n	800a82c <__swsetup_r+0x24>
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	0799      	lsls	r1, r3, #30
 800a8a4:	bf58      	it	pl
 800a8a6:	6962      	ldrpl	r2, [r4, #20]
 800a8a8:	60a2      	str	r2, [r4, #8]
 800a8aa:	e7f4      	b.n	800a896 <__swsetup_r+0x8e>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	e7f7      	b.n	800a8a0 <__swsetup_r+0x98>
 800a8b0:	2400001c 	.word	0x2400001c

0800a8b4 <_sbrk_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d06      	ldr	r5, [pc, #24]	@ (800a8d0 <_sbrk_r+0x1c>)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	f7f8 fb92 	bl	8002fe8 <_sbrk>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_sbrk_r+0x1a>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_sbrk_r+0x1a>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	24000674 	.word	0x24000674

0800a8d4 <__swhatbuf_r>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	b096      	sub	sp, #88	@ 0x58
 800a8e0:	4615      	mov	r5, r2
 800a8e2:	461e      	mov	r6, r3
 800a8e4:	da0d      	bge.n	800a902 <__swhatbuf_r+0x2e>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8ec:	f04f 0100 	mov.w	r1, #0
 800a8f0:	bf14      	ite	ne
 800a8f2:	2340      	movne	r3, #64	@ 0x40
 800a8f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	6031      	str	r1, [r6, #0]
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	b016      	add	sp, #88	@ 0x58
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	466a      	mov	r2, sp
 800a904:	f000 f848 	bl	800a998 <_fstat_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	dbec      	blt.n	800a8e6 <__swhatbuf_r+0x12>
 800a90c:	9901      	ldr	r1, [sp, #4]
 800a90e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a916:	4259      	negs	r1, r3
 800a918:	4159      	adcs	r1, r3
 800a91a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a91e:	e7eb      	b.n	800a8f8 <__swhatbuf_r+0x24>

0800a920 <__smakebuf_r>:
 800a920:	898b      	ldrh	r3, [r1, #12]
 800a922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a924:	079d      	lsls	r5, r3, #30
 800a926:	4606      	mov	r6, r0
 800a928:	460c      	mov	r4, r1
 800a92a:	d507      	bpl.n	800a93c <__smakebuf_r+0x1c>
 800a92c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	2301      	movs	r3, #1
 800a936:	6163      	str	r3, [r4, #20]
 800a938:	b003      	add	sp, #12
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93c:	ab01      	add	r3, sp, #4
 800a93e:	466a      	mov	r2, sp
 800a940:	f7ff ffc8 	bl	800a8d4 <__swhatbuf_r>
 800a944:	9f00      	ldr	r7, [sp, #0]
 800a946:	4605      	mov	r5, r0
 800a948:	4639      	mov	r1, r7
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff fb16 	bl	8009f7c <_malloc_r>
 800a950:	b948      	cbnz	r0, 800a966 <__smakebuf_r+0x46>
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	059a      	lsls	r2, r3, #22
 800a958:	d4ee      	bmi.n	800a938 <__smakebuf_r+0x18>
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	f043 0302 	orr.w	r3, r3, #2
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	e7e2      	b.n	800a92c <__smakebuf_r+0xc>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	6020      	str	r0, [r4, #0]
 800a96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a976:	b15b      	cbz	r3, 800a990 <__smakebuf_r+0x70>
 800a978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 f81d 	bl	800a9bc <_isatty_r>
 800a982:	b128      	cbz	r0, 800a990 <__smakebuf_r+0x70>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	431d      	orrs	r5, r3
 800a994:	81a5      	strh	r5, [r4, #12]
 800a996:	e7cf      	b.n	800a938 <__smakebuf_r+0x18>

0800a998 <_fstat_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	@ (800a9b8 <_fstat_r+0x20>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	f7f8 faf6 	bl	8002f96 <_fstat>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d102      	bne.n	800a9b4 <_fstat_r+0x1c>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	b103      	cbz	r3, 800a9b4 <_fstat_r+0x1c>
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	bf00      	nop
 800a9b8:	24000674 	.word	0x24000674

0800a9bc <_isatty_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d06      	ldr	r5, [pc, #24]	@ (800a9d8 <_isatty_r+0x1c>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	f7f8 faf5 	bl	8002fb6 <_isatty>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_isatty_r+0x1a>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_isatty_r+0x1a>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	24000674 	.word	0x24000674

0800a9dc <_init>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_fini>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	bf00      	nop
 800a9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ee:	bc08      	pop	{r3}
 800a9f0:	469e      	mov	lr, r3
 800a9f2:	4770      	bx	lr
